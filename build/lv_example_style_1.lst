ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_example_style_1.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata.lv_example_style_1.str1.4,"aMS",%progbits,1
  19              		.align	2
  20              	.LC0:
  21 0000 48656C6C 		.ascii	"Hello\000"
  21      6F00
  22              		.section	.text.lv_example_style_1,"ax",%progbits
  23              		.align	1
  24              		.global	lv_example_style_1
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  29              	lv_example_style_1:
  30              	.LFB204:
  31              		.file 1 "lvgl/examples/styles/lv_example_style_1.c"
   1:lvgl/examples/styles/lv_example_style_1.c **** #include "../lv_examples.h"
   2:lvgl/examples/styles/lv_example_style_1.c **** #if LV_BUILD_EXAMPLES && LV_USE_IMG
   3:lvgl/examples/styles/lv_example_style_1.c **** 
   4:lvgl/examples/styles/lv_example_style_1.c **** /**
   5:lvgl/examples/styles/lv_example_style_1.c ****  * Using the Size, Position and Padding style properties
   6:lvgl/examples/styles/lv_example_style_1.c ****  */
   7:lvgl/examples/styles/lv_example_style_1.c **** void lv_example_style_1(void)
   8:lvgl/examples/styles/lv_example_style_1.c **** {
  32              		.loc 1 8 1 view -0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 0
  35              		@ frame_needed = 0, uses_anonymous_args = 0
  36 0000 38B5     		push	{r3, r4, r5, lr}
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 3, -16
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 5, -8
  41              		.cfi_offset 14, -4
   9:lvgl/examples/styles/lv_example_style_1.c ****     static lv_style_t style;
  42              		.loc 1 9 5 view .LVU1
  10:lvgl/examples/styles/lv_example_style_1.c ****     lv_style_init(&style);
  43              		.loc 1 10 5 view .LVU2
  44 0002 1C4C     		ldr	r4, .L3
  45 0004 2046     		mov	r0, r4
  46 0006 FFF7FEFF 		bl	lv_style_init
  47              	.LVL0:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 2


  11:lvgl/examples/styles/lv_example_style_1.c ****     lv_style_set_radius(&style, 5);
  48              		.loc 1 11 5 view .LVU3
  49 000a 0521     		movs	r1, #5
  50 000c 2046     		mov	r0, r4
  51 000e FFF7FEFF 		bl	lv_style_set_radius
  52              	.LVL1:
  12:lvgl/examples/styles/lv_example_style_1.c **** 
  13:lvgl/examples/styles/lv_example_style_1.c ****     /*Make a gradient*/
  14:lvgl/examples/styles/lv_example_style_1.c ****     lv_style_set_width(&style, 150);
  53              		.loc 1 14 5 view .LVU4
  54 0012 9621     		movs	r1, #150
  55 0014 2046     		mov	r0, r4
  56 0016 FFF7FEFF 		bl	lv_style_set_width
  57              	.LVL2:
  15:lvgl/examples/styles/lv_example_style_1.c ****     lv_style_set_height(&style, LV_SIZE_CONTENT);
  58              		.loc 1 15 5 view .LVU5
  59 001a 42F2D171 		movw	r1, #10193
  60 001e 2046     		mov	r0, r4
  61 0020 FFF7FEFF 		bl	lv_style_set_height
  62              	.LVL3:
  16:lvgl/examples/styles/lv_example_style_1.c **** 
  17:lvgl/examples/styles/lv_example_style_1.c ****     lv_style_set_pad_ver(&style, 20);
  63              		.loc 1 17 5 view .LVU6
  64              	.LBB8:
  65              	.LBI8:
  66              		.file 2 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @file lv_style.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #ifndef LV_STYLE_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include <stdbool.h>
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include <stdint.h>
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "../font/lv_font.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_color.h"
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_area.h"
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_anim.h"
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_txt.h"
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_types.h"
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_assert.h"
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_bidi.h"
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /*********************
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *      DEFINES
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *********************/
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_SENTINEL_VALUE     0xAABBCCDD
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 3


  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Flags for style behavior
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * The rest of the flags will have _FLAG added to their name in v9.
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_FLAG_NONE             (0)
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_INHERIT               (1 << 0)  /*Inherited*/
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_EXT_DRAW              (1 << 1)  /*Requires ext. draw size update when changed
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_LAYOUT_REFR           (1 << 2)  /*Requires layout update when changed*/
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_PARENT_LAYOUT_REFR    (1 << 3)  /*Requires layout update on parent when chang
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_LAYER_REFR            (1 << 4)  /*Affects layer handling*/
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_ALL                   (0x1F)     /*Indicating all flags*/
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Other constants
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_IMG_ZOOM_NONE            256        /*Value for not zooming the image*/
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** LV_EXPORT_CONST_INT(LV_IMG_ZOOM_NONE);
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** // *INDENT-OFF*
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #if LV_USE_ASSERT_STYLE
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_CONST_INIT(var_name, prop_array)                       \
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     const lv_style_t var_name = {                                       \
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .sentinel = LV_STYLE_SENTINEL_VALUE,                            \
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .v_p = { .const_props = prop_array },                           \
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .has_group = 0xFF,                                              \
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .prop1 = LV_STYLE_PROP_ANY,                                     \
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .prop_cnt = (sizeof(prop_array) / sizeof((prop_array)[0])),     \
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #else
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_CONST_INIT(var_name, prop_array)                       \
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     const lv_style_t var_name = {                                       \
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .v_p = { .const_props = prop_array },                           \
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .has_group = 0xFF,                                              \
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .prop1 = LV_STYLE_PROP_ANY,                                     \
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .prop_cnt = (sizeof(prop_array) / sizeof((prop_array)[0])),     \
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #endif
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** // *INDENT-ON*
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_META_INHERIT 0x8000
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_META_INITIAL 0x4000
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_META_MASK (LV_STYLE_PROP_META_INHERIT | LV_STYLE_PROP_META_INITIAL)
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_ID_MASK(prop) ((lv_style_prop_t)((prop) & ~LV_STYLE_PROP_META_MASK))
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**********************
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *      TYPEDEFS
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  **********************/
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Possible options how to blend opaque drawings
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_NORMAL,     /**< Simply mix according to the opacity value*/
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_ADDITIVE,   /**< Add the respective color channels*/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 4


  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_SUBTRACTIVE,/**< Subtract the foreground from the background*/
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_MULTIPLY,   /**< Multiply the foreground and background*/
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_REPLACE,    /**< Replace background with foreground in the area*/
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_blend_mode_t;
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Some options to apply decorations on texts.
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * 'OR'ed values can be used.
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_TEXT_DECOR_NONE          = 0x00,
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_TEXT_DECOR_UNDERLINE     = 0x01,
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_TEXT_DECOR_STRIKETHROUGH = 0x02,
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_text_decor_t;
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Selects on which sides border should be drawn
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * 'OR'ed values can be used.
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_NONE     = 0x00,
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_BOTTOM   = 0x01,
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_TOP      = 0x02,
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_LEFT     = 0x04,
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_RIGHT    = 0x08,
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_FULL     = 0x0F,
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_INTERNAL = 0x10, /**< FOR matrix-like objects (e.g. Button matrix)*/
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_border_side_t;
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * The direction of the gradient.
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_GRAD_DIR_NONE, /**< No gradient (the `grad_color` property is ignored)*/
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_GRAD_DIR_VER,  /**< Vertical (top to bottom) gradient*/
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_GRAD_DIR_HOR,  /**< Horizontal (left to right) gradient*/
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_grad_dir_t;
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * The dithering algorithm for the gradient
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Depends on LV_DITHER_GRADIENT
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_DITHER_NONE,     /**< No dithering, colors are just quantized to the output resolution*/
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_DITHER_ORDERED,  /**< Ordered dithering. Faster to compute and use less memory but lower qua
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_DITHER_ERR_DIFF, /**< Error diffusion mode. Slower to compute and use more memory but give h
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_dither_mode_t;
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 5


 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /** A gradient stop definition.
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *  This matches a color and a position in a virtual 0-255 scale.
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_color_t color;   /**< The stop color */
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint8_t    frac;    /**< The stop position in 1/255 unit */
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_gradient_stop_t;
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /** A descriptor of a gradient. */
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_gradient_stop_t   stops[LV_GRADIENT_MAX_STOPS]; /**< A gradient stop array */
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint8_t              stops_count;                  /**< The number of used stops in the array *
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_grad_dir_t        dir : 3;                      /**< The gradient direction.
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                                         * Any of LV_GRAD_DIR_HOR, LV_GRAD_DIR_VER, 
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_dither_mode_t     dither : 3;                   /**< Whether to dither the gradient or not.
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                                         * Any of LV_DITHER_NONE, LV_DITHER_ORDERED,
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_grad_dsc_t;
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * A common type to handle all the property types in the same way.
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef union {
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     int32_t num;         /**< Number integer number (opacity, enums, booleans or "normal" numbers)*
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     const void * ptr;    /**< Constant pointers  (font, cone text, etc)*/
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_color_t color;    /**< Colors*/
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_value_t;
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Enumeration of all built in style properties
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Props are split into groups of 16. When adding a new prop to a group, ensure it does not overflo
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef enum {
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PROP_INV               = 0,
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 0*/
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_WIDTH                  = 1,
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_MIN_WIDTH              = 2,
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_MAX_WIDTH              = 3,
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_HEIGHT                 = 4,
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_MIN_HEIGHT             = 5,
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_MAX_HEIGHT             = 6,
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_X                      = 7,
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_Y                      = 8,
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ALIGN                  = 9,
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LAYOUT                 = 10,
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_RADIUS                 = 11,
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 1*/
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_TOP                = 16,
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_BOTTOM             = 17,
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_LEFT               = 18,
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_RIGHT              = 19,
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_ROW                = 20,
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_COLUMN             = 21,
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BASE_DIR               = 22,
 202:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_CLIP_CORNER            = 23,
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 6


 203:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 204:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 2*/
 205:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_COLOR               = 32,
 206:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_OPA                 = 33,
 207:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_GRAD_COLOR          = 34,
 208:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_GRAD_DIR            = 35,
 209:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_MAIN_STOP           = 36,
 210:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_GRAD_STOP           = 37,
 211:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_GRAD                = 38,
 212:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_DITHER_MODE         = 39,
 213:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_SRC             = 40,
 214:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_OPA             = 41,
 215:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_RECOLOR         = 42,
 216:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_RECOLOR_OPA     = 43,
 217:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_TILED           = 44,
 218:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 219:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 3*/
 220:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_COLOR           = 48,
 221:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_OPA             = 49,
 222:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_WIDTH           = 50,
 223:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_SIDE            = 51,
 224:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_POST            = 52,
 225:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OUTLINE_WIDTH          = 53,
 226:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OUTLINE_COLOR          = 54,
 227:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OUTLINE_OPA            = 55,
 228:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OUTLINE_PAD            = 56,
 229:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 230:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 4*/
 231:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_WIDTH           = 64,
 232:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_OFS_X           = 65,
 233:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_OFS_Y           = 66,
 234:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_SPREAD          = 67,
 235:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_COLOR           = 68,
 236:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_OPA             = 69,
 237:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_IMG_OPA                = 70,
 238:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_IMG_RECOLOR            = 71,
 239:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_IMG_RECOLOR_OPA        = 72,
 240:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_WIDTH             = 73,
 241:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_DASH_WIDTH        = 74,
 242:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_DASH_GAP          = 75,
 243:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_ROUNDED           = 76,
 244:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_COLOR             = 77,
 245:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_OPA               = 78,
 246:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 247:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 5*/
 248:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_WIDTH              = 80,
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_ROUNDED            = 81,
 250:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_COLOR              = 82,
 251:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_OPA                = 83,
 252:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_IMG_SRC            = 84,
 253:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_COLOR             = 85,
 254:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_OPA               = 86,
 255:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_FONT              = 87,
 256:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_LETTER_SPACE      = 88,
 257:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_LINE_SPACE        = 89,
 258:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_DECOR             = 90,
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_ALIGN             = 91,
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 7


 260:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 261:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 6*/
 262:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OPA                    = 96,
 263:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OPA_LAYERED            = 97,
 264:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_COLOR_FILTER_DSC       = 98,
 265:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_COLOR_FILTER_OPA       = 99,
 266:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ANIM                   = 100,
 267:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ANIM_TIME              = 101,
 268:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ANIM_SPEED             = 102,
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSITION             = 103,
 270:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BLEND_MODE             = 104,
 271:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_WIDTH        = 105,
 272:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_HEIGHT       = 106,
 273:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSLATE_X            = 107,
 274:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSLATE_Y            = 108,
 275:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_ZOOM         = 109,
 276:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_ANGLE        = 110,
 277:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_PIVOT_X      = 111,
 278:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_PIVOT_Y      = 112,
 279:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 280:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     _LV_STYLE_LAST_BUILT_IN_PROP     = 112,
 281:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     _LV_STYLE_NUM_BUILT_IN_PROPS     = _LV_STYLE_LAST_BUILT_IN_PROP + 1,
 282:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 283:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PROP_ANY                = 0xFFFF,
 284:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     _LV_STYLE_PROP_CONST             = 0xFFFF /* magic value for const styles */
 285:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_prop_t;
 286:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 287:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 288:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_RES_NOT_FOUND,
 289:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_RES_FOUND,
 290:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_RES_INHERIT
 291:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 292:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 293:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_style_res_t;
 294:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 295:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 296:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Descriptor for style transitions
 297:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 298:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 299:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     const lv_style_prop_t * props; /**< An array with the properties to animate.*/
 300:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #if LV_USE_USER_DATA
 301:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     void * user_data;              /**< A custom user data that will be passed to the animation's u
 302:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #endif
 303:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_anim_path_cb_t path_xcb;     /**< A path for the animation.*/
 304:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint32_t time;                 /**< Duration of the transition in [ms]*/
 305:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint32_t delay;                /**< Delay before the transition in [ms]*/
 306:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_transition_dsc_t;
 307:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 308:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 309:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Descriptor of a constant style property.
 310:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 311:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 312:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_prop_t prop;
 313:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_value_t value;
 314:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_const_prop_t;
 315:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 316:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 8


 317:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Descriptor of a style (a collection of properties and values).
 318:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 319:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 320:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 321:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #if LV_USE_ASSERT_STYLE
 322:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint32_t sentinel;
 323:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #endif
 324:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 325:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*If there is only one property store it directly.
 326:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****      *For more properties allocate an array*/
 327:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     union {
 328:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         lv_style_value_t value1;
 329:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint8_t * values_and_props;
 330:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         const lv_style_const_prop_t * const_props;
 331:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     } v_p;
 332:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 333:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint16_t prop1;
 334:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint8_t has_group;
 335:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint8_t prop_cnt;
 336:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_t;
 337:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 338:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**********************
 339:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * GLOBAL PROTOTYPES
 340:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  **********************/
 341:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 342:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 343:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Initialize a style
 344:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style to initialize
 345:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @note Do not call `lv_style_init` on styles that already have some properties
 346:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *       because this function won't free the used memory, just sets a default state for the style.
 347:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *       In other words be sure to initialize styles only once!
 348:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 349:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_init(lv_style_t * style);
 350:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 351:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 352:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Clear all properties from a style and free all allocated memories.
 353:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 354:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 355:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_reset(lv_style_t * style);
 356:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 357:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 358:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Register a new style property for custom usage
 359:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return a new property ID, or LV_STYLE_PROP_INV if there are no more available.
 360:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @example
 361:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * lv_style_prop_t MY_PROP;
 362:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * static inline void lv_style_set_my_prop(lv_style_t * style, lv_color_t value) {
 363:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * lv_style_value_t v = {.color = value}; lv_style_set_prop(style, MY_PROP, v); }
 364:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
 365:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * ...
 366:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * MY_PROP = lv_style_register_prop();
 367:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * ...
 368:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * lv_style_set_my_prop(&style1, lv_palette_main(LV_PALETTE_RED));
 369:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 370:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** lv_style_prop_t lv_style_register_prop(uint8_t flag);
 371:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 372:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 373:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the number of custom properties that have been registered thus far.
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 9


 374:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 375:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** lv_style_prop_t lv_style_get_num_custom_props(void);
 376:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 377:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 378:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Remove a property from a style
 379:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 380:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop  a style property ORed with a state.
 381:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return true: the property was found and removed; false: the property wasn't found
 382:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 383:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop);
 384:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 385:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 386:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Set the value of property in a style.
 387:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * This function shouldn't be used directly by the user.
 388:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Instead use `lv_style_set_<prop_name>()`. E.g. `lv_style_set_bg_color()`
 389:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to style
 390:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop the ID of a property (e.g. `LV_STYLE_BG_COLOR`)
 391:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param value `lv_style_value_t` variable in which a field is set according to the type of `prop`
 392:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 393:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_set_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t value);
 394:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 395:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 396:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Set a special meta state for a property in a style.
 397:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * This function shouldn't be used directly by the user.
 398:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to style
 399:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop the ID of a property (e.g. `LV_STYLE_BG_COLOR`)
 400:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param meta the meta value to attach to the property in the style
 401:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 402:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_set_prop_meta(lv_style_t * style, lv_style_prop_t prop, uint16_t meta);
 403:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 404:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 405:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the value of a property
 406:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 407:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop  the ID of a property
 408:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param value pointer to a `lv_style_value_t` variable to store the value
 409:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return LV_RES_INV: the property wasn't found in the style (`value` is unchanged)
 410:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *         LV_RES_OK: the property was fond, and `value` is set accordingly
 411:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @note For performance reasons there are no sanity check on `style`
 412:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 413:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** lv_style_res_t lv_style_get_prop(const lv_style_t * style, lv_style_prop_t prop, lv_style_value_t *
 414:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 415:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 416:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Initialize a transition descriptor.
 417:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param tr        pointer to a transition descriptor to initialize
 418:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param props     an array with the properties to transition. The last element must be zero.
 419:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param path_cb   an animation path (ease) callback. If `NULL` liner path will be used.
 420:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param time      duration of the transition in [ms]
 421:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param delay     delay before the transition in [ms]
 422:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param user_data any custom data that will be saved in the transition animation and will be avai
 423:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @example
 424:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * const static lv_style_prop_t trans_props[] = { LV_STYLE_BG_OPA, LV_STYLE_BG_COLOR, 0 };
 425:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *  static lv_style_transition_dsc_t trans1;
 426:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *  lv_style_transition_dsc_init(&trans1, trans_props, NULL, 300, 0, NULL);
 427:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 428:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_transition_dsc_init(lv_style_transition_dsc_t * tr, const lv_style_prop_t props[],
 429:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                   lv_anim_path_cb_t path_cb, uint32_t time, uint32_t delay, void * 
 430:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 10


 431:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 432:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the default value of a property
 433:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop the ID of a property
 434:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return the default value
 435:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 436:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop);
 437:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 438:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 439:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the value of a property
 440:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 441:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop  the ID of a property
 442:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param value pointer to a `lv_style_value_t` variable to store the value
 443:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return LV_RES_INV: the property wasn't found in the style (`value` is unchanged)
 444:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *         LV_RES_OK: the property was fond, and `value` is set accordingly
 445:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @note For performance reasons there are no sanity check on `style`
 446:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance c
 447:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 448:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t pr
 449:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                                        lv_style_value_t * value)
 450:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** {
 451:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     if(style->prop1 == LV_STYLE_PROP_ANY) {
 452:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         const lv_style_const_prop_t * const_prop;
 453:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint32_t i;
 454:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         for(i = 0; i < style->prop_cnt; i++) {
 455:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             const_prop = style->v_p.const_props + i;
 456:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 457:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             if(prop_id == prop) {
 458:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 459:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     return LV_STYLE_RES_INHERIT;
 460:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_defaul
 461:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 return LV_STYLE_RES_FOUND;
 462:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             }
 463:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         }
 464:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         return LV_STYLE_RES_NOT_FOUND;
 465:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
 466:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 467:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 468:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 469:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     if(style->prop_cnt > 1) {
 470:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 471:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint16_t * props = (uint16_t *)tmp;
 472:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint32_t i;
 473:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         for(i = 0; i < style->prop_cnt; i++) {
 474:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 475:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             if(prop_id == prop) {
 476:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 if(props[i] & LV_STYLE_PROP_META_INHERIT)
 477:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     return LV_STYLE_RES_INHERIT;
 478:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 if(props[i] & LV_STYLE_PROP_META_INITIAL)
 479:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     *value = lv_style_prop_get_default(prop_id);
 480:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 else {
 481:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 482:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     *value = values[i];
 483:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 }
 484:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 return LV_STYLE_RES_FOUND;
 485:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             }
 486:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         }
 487:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 11


 488:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 489:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 490:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             return LV_STYLE_RES_INHERIT;
 491:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_P
 492:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                                                                              style-
 493:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         return LV_STYLE_RES_FOUND;
 494:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
 495:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     return LV_STYLE_RES_NOT_FOUND;
 496:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** }
 497:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 498:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 499:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Checks if a style is empty (has no properties)
 500:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 501:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return true if the style is empty
 502:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 503:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** bool lv_style_is_empty(const lv_style_t * style);
 504:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 505:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 506:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Tell the group of a property. If the a property from a group is set in a style the (1 << group) 
 507:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * It allows early skipping the style if the property is not exists in the style at all.
 508:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop a style property
 509:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return the group [0..7] 7 means all the custom properties with index > 112
 510:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 511:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** uint8_t _lv_style_get_prop_group(lv_style_prop_t prop);
 512:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 513:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 514:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the flags of a built-in or custom property.
 515:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
 516:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop a style property
 517:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return the flags of the property
 518:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 519:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** uint8_t _lv_style_prop_lookup_flags(lv_style_prop_t prop);
 520:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 521:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_style_gen.h"
 522:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 523:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** static inline void lv_style_set_size(lv_style_t * style, lv_coord_t value)
 524:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** {
 525:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_width(style, value);
 526:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_height(style, value);
 527:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** }
 528:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 529:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** static inline void lv_style_set_pad_all(lv_style_t * style, lv_coord_t value)
 530:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** {
 531:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_left(style, value);
 532:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_right(style, value);
 533:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_top(style, value);
 534:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_bottom(style, value);
 535:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** }
 536:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 537:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** static inline void lv_style_set_pad_hor(lv_style_t * style, lv_coord_t value)
 538:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** {
 539:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_left(style, value);
 540:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_right(style, value);
 541:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** }
 542:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 543:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** static inline void lv_style_set_pad_ver(lv_style_t * style, lv_coord_t value)
  67              		.loc 2 543 20 view .LVU7
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 12


  68              	.LBB9:
 544:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** {
 545:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_top(style, value);
  69              		.loc 2 545 5 view .LVU8
  70 0024 1421     		movs	r1, #20
  71 0026 2046     		mov	r0, r4
  72 0028 FFF7FEFF 		bl	lv_style_set_pad_top
  73              	.LVL4:
 546:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_bottom(style, value);
  74              		.loc 2 546 5 view .LVU9
  75 002c 1421     		movs	r1, #20
  76 002e 2046     		mov	r0, r4
  77 0030 FFF7FEFF 		bl	lv_style_set_pad_bottom
  78              	.LVL5:
  79              		.loc 2 546 5 is_stmt 0 view .LVU10
  80              	.LBE9:
  81              	.LBE8:
  18:lvgl/examples/styles/lv_example_style_1.c ****     lv_style_set_pad_left(&style, 5);
  82              		.loc 1 18 5 is_stmt 1 view .LVU11
  83 0034 0521     		movs	r1, #5
  84 0036 2046     		mov	r0, r4
  85 0038 FFF7FEFF 		bl	lv_style_set_pad_left
  86              	.LVL6:
  19:lvgl/examples/styles/lv_example_style_1.c **** 
  20:lvgl/examples/styles/lv_example_style_1.c ****     lv_style_set_x(&style, lv_pct(50));
  87              		.loc 1 20 5 view .LVU12
  88              		.file 3 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_area.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @file lv_area.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #ifndef LV_AREA_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_AREA_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #include "../lv_conf_internal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #include <stdbool.h>
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #include <stdint.h>
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*********************
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      DEFINES
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *********************/
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #if LV_USE_LARGE_COORD
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef int32_t lv_coord_t;
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #else
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef int16_t lv_coord_t;
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #endif
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**********************
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 13


  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      TYPEDEFS
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  **********************/
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Represents a point on the screen.
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef struct {
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t x;
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t y;
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** } lv_point_t;
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /** Represents an area of the screen.*/
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef struct {
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t x1;
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t y1;
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t x2;
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t y2;
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** } lv_area_t;
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /** Alignments*/
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** enum {
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_DEFAULT = 0,
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_TOP_LEFT,
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_TOP_MID,
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_TOP_RIGHT,
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_BOTTOM_LEFT,
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_BOTTOM_MID,
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_BOTTOM_RIGHT,
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_LEFT_MID,
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_RIGHT_MID,
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_CENTER,
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_TOP_LEFT,
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_TOP_MID,
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_TOP_RIGHT,
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_BOTTOM_LEFT,
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_BOTTOM_MID,
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_BOTTOM_RIGHT,
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_LEFT_TOP,
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_LEFT_MID,
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_LEFT_BOTTOM,
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_RIGHT_TOP,
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_RIGHT_MID,
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_RIGHT_BOTTOM,
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** };
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef uint8_t lv_align_t;
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** enum {
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_NONE     = 0x00,
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_LEFT     = (1 << 0),
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_RIGHT    = (1 << 1),
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_TOP      = (1 << 2),
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_BOTTOM   = (1 << 3),
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_HOR      = LV_DIR_LEFT | LV_DIR_RIGHT,
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_VER      = LV_DIR_TOP | LV_DIR_BOTTOM,
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_ALL      = LV_DIR_HOR | LV_DIR_VER,
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** };
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 14


  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef uint8_t lv_dir_t;
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**********************
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * GLOBAL PROTOTYPES
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  **********************/
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Initialize an area
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x1 left coordinate of the area
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param y1 top coordinate of the area
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x2 right coordinate of the area
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param y2 bottom coordinate of the area
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2);
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Copy an area
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param dest pointer to the destination area
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param src pointer to the source area
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->x1 = src->x1;
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->y1 = src->y1;
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->x2 = src->x2;
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->y2 = src->y2;
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** }
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get the width of an area
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return the width of the area (if x1 == x2 -> width = 1)
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** }
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get the height of an area
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return the height of the area (if y1 == y2 -> height = 1)
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** }
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Set the width of an area
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param w the new width of the area (w == 1 makes x1 == x2)
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_set_width(lv_area_t * area_p, lv_coord_t w);
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 15


 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Set the height of an area
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param h the new height of the area (h == 1 makes y1 == y2)
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_set_height(lv_area_t * area_p, lv_coord_t h);
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Set the position of an area (width and height will be kept)
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x the new x coordinate of the area
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param y the new y coordinate of the area
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void _lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y);
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Return with area of an area (x * y)
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return size of area
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** uint32_t lv_area_get_size(const lv_area_t * area_p);
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_increase(lv_area_t * area, lv_coord_t w_extra, lv_coord_t h_extra);
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_move(lv_area_t * area, lv_coord_t x_ofs, lv_coord_t y_ofs);
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get the common parts of two areas
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param res_p pointer to an area, the result will be stored her
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to the first area
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to the second area
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return false: the two area has NO common parts, res_p is invalid
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get resulting sub areas after removing the common parts of two areas from the first area
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param res_p pointer to an array of areas with a count of 4, the resulting areas will be stored 
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to the first area
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to the second area
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return number of results (max 4) or -1 if no intersect
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** int8_t _lv_area_diff(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Join two areas into a third which involves the other two
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param res_p pointer to an area, the result will be stored here
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to the first area
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to the second area
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if a point is on an area
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a_p pointer to an area
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param p_p pointer to a point
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param radius radius of area (e.g. for rounded rectangle)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 16


 202:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return false:the point is out of the area
 203:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 204:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius);
 205:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 206:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 207:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if two area has common parts
 208:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to an area.
 209:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to an other area
 210:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return false: a1_p and a2_p has no common parts
 211:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 212:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p);
 213:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 214:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 215:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if an area is fully on an other
 216:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param ain_p pointer to an area which could be in 'aholder_p'
 217:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param aholder_p pointer to an area which could involve 'ain_p'
 218:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 219:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return true: `ain_p` is fully inside `aholder_p`
 220:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 221:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius);
 222:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 223:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 224:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if an area is fully out of an other
 225:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param aout_p pointer to an area which could be in 'aholder_p'
 226:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param aholder_p pointer to an area which could involve 'ain_p'
 227:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 228:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return true: `aout_p` is fully outside `aholder_p`
 229:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 230:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_out(const lv_area_t * aout_p, const lv_area_t * aholder_p, lv_coord_t radius);
 231:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 232:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 233:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if 2 area is the same
 234:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a pointer to an area
 235:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param b pointer to another area
 236:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 237:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_equal(const lv_area_t * a, const lv_area_t * b);
 238:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 239:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 240:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Align an area to an other
 241:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param base an are where the other will be aligned
 242:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param to_align the area to align
 243:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param align `LV_ALIGN_...`
 244:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 245:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_align(const lv_area_t * base, lv_area_t * to_align, lv_align_t align, lv_coord_t ofs_x
 246:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 247:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_point_transform(lv_point_t * p, int32_t angle, int32_t zoom, const lv_point_t * pivot);
 248:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**********************
 250:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      MACROS
 251:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  **********************/
 252:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 253:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #if LV_USE_LARGE_COORD
 254:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_SHIFT    (29U)
 255:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #else
 256:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_SHIFT    (13U)
 257:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #endif
 258:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 17


 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_MASK     (3 << _LV_COORD_TYPE_SHIFT)
 260:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE(x)       ((x) & _LV_COORD_TYPE_MASK)  /*Extract type specifiers*/
 261:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_PLAIN(x)      ((x) & ~_LV_COORD_TYPE_MASK) /*Remove type specifiers*/
 262:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 263:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_PX       (0 << _LV_COORD_TYPE_SHIFT)
 264:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_SPEC     (1 << _LV_COORD_TYPE_SHIFT)
 265:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_PX_NEG   (3 << _LV_COORD_TYPE_SHIFT)
 266:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 267:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_IS_PX(x)       (_LV_COORD_TYPE(x) == _LV_COORD_TYPE_PX || \
 268:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****                                  _LV_COORD_TYPE(x) == _LV_COORD_TYPE_PX_NEG ? true : false)
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_IS_SPEC(x)     (_LV_COORD_TYPE(x) == _LV_COORD_TYPE_SPEC ? true : false)
 270:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 271:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_SET_SPEC(x)    ((x) | _LV_COORD_TYPE_SPEC)
 272:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 273:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*Special coordinates*/
 274:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_PCT(x)               (x < 0 ? LV_COORD_SET_SPEC(1000 - (x)) : LV_COORD_SET_SPEC(x))
 275:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_IS_PCT(x)      ((LV_COORD_IS_SPEC(x) && _LV_COORD_PLAIN(x) <= 2000) ? true : false
 276:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_GET_PCT(x)     (_LV_COORD_PLAIN(x) > 1000 ? 1000 - _LV_COORD_PLAIN(x) : _LV_COORD_
 277:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_SIZE_CONTENT         LV_COORD_SET_SPEC(2001)
 278:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 279:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** LV_EXPORT_CONST_INT(LV_SIZE_CONTENT);
 280:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 281:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*Max coordinate value*/
 282:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_MAX            ((1 << _LV_COORD_TYPE_SHIFT) - 1)
 283:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_MIN            (-LV_COORD_MAX)
 284:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 285:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** LV_EXPORT_CONST_INT(LV_COORD_MAX);
 286:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** LV_EXPORT_CONST_INT(LV_COORD_MIN);
 287:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 288:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 289:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Convert a percentage value to `lv_coord_t`.
 290:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Percentage values are stored in special range
 291:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x the percentage (0..1000)
 292:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return a coordinate that stores the percentage
 293:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 294:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** static inline lv_coord_t lv_pct(lv_coord_t x)
 295:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 296:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     return LV_PCT(x);
  89              		.loc 3 296 5 view .LVU13
  90              		.loc 1 20 5 is_stmt 0 view .LVU14
  91 003c 42F23201 		movw	r1, #8242
  92 0040 2046     		mov	r0, r4
  93 0042 FFF7FEFF 		bl	lv_style_set_x
  94              	.LVL7:
  21:lvgl/examples/styles/lv_example_style_1.c ****     lv_style_set_y(&style, 80);
  95              		.loc 1 21 5 is_stmt 1 view .LVU15
  96 0046 5021     		movs	r1, #80
  97 0048 2046     		mov	r0, r4
  98 004a FFF7FEFF 		bl	lv_style_set_y
  99              	.LVL8:
  22:lvgl/examples/styles/lv_example_style_1.c **** 
  23:lvgl/examples/styles/lv_example_style_1.c ****     /*Create an object with the new style*/
  24:lvgl/examples/styles/lv_example_style_1.c ****     lv_obj_t * obj = lv_obj_create(lv_scr_act());
 100              		.loc 1 24 5 view .LVU16
 101              	.LBB10:
 102              	.LBI10:
 103              		.file 4 "lvgl/examples/styles/../../src/core/lv_disp.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 18


   1:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
   2:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @file lv_disp.h
   3:lvgl/examples/styles/../../src/core/lv_disp.h ****  *
   4:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
   5:lvgl/examples/styles/../../src/core/lv_disp.h **** 
   6:lvgl/examples/styles/../../src/core/lv_disp.h **** #ifndef LV_DISP_H
   7:lvgl/examples/styles/../../src/core/lv_disp.h **** #define LV_DISP_H
   8:lvgl/examples/styles/../../src/core/lv_disp.h **** 
   9:lvgl/examples/styles/../../src/core/lv_disp.h **** #ifdef __cplusplus
  10:lvgl/examples/styles/../../src/core/lv_disp.h **** extern "C" {
  11:lvgl/examples/styles/../../src/core/lv_disp.h **** #endif
  12:lvgl/examples/styles/../../src/core/lv_disp.h **** 
  13:lvgl/examples/styles/../../src/core/lv_disp.h **** /*********************
  14:lvgl/examples/styles/../../src/core/lv_disp.h ****  *      INCLUDES
  15:lvgl/examples/styles/../../src/core/lv_disp.h ****  *********************/
  16:lvgl/examples/styles/../../src/core/lv_disp.h **** #include "../hal/lv_hal.h"
  17:lvgl/examples/styles/../../src/core/lv_disp.h **** #include "lv_obj.h"
  18:lvgl/examples/styles/../../src/core/lv_disp.h **** #include "lv_theme.h"
  19:lvgl/examples/styles/../../src/core/lv_disp.h **** 
  20:lvgl/examples/styles/../../src/core/lv_disp.h **** /*********************
  21:lvgl/examples/styles/../../src/core/lv_disp.h ****  *      DEFINES
  22:lvgl/examples/styles/../../src/core/lv_disp.h ****  *********************/
  23:lvgl/examples/styles/../../src/core/lv_disp.h **** 
  24:lvgl/examples/styles/../../src/core/lv_disp.h **** /**********************
  25:lvgl/examples/styles/../../src/core/lv_disp.h ****  *      TYPEDEFS
  26:lvgl/examples/styles/../../src/core/lv_disp.h ****  **********************/
  27:lvgl/examples/styles/../../src/core/lv_disp.h **** 
  28:lvgl/examples/styles/../../src/core/lv_disp.h **** typedef enum {
  29:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_NONE,
  30:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_LEFT,
  31:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_RIGHT,
  32:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_TOP,
  33:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_BOTTOM,
  34:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_LEFT,
  35:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_RIGHT,
  36:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_TOP,
  37:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_BOTTOM,
  38:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_IN,
  39:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_ON = LV_SCR_LOAD_ANIM_FADE_IN, /*For backward compatibility*/
  40:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_OUT,
  41:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_LEFT,
  42:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_RIGHT,
  43:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_TOP,
  44:lvgl/examples/styles/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_BOTTOM,
  45:lvgl/examples/styles/../../src/core/lv_disp.h **** } lv_scr_load_anim_t;
  46:lvgl/examples/styles/../../src/core/lv_disp.h **** 
  47:lvgl/examples/styles/../../src/core/lv_disp.h **** /**********************
  48:lvgl/examples/styles/../../src/core/lv_disp.h ****  * GLOBAL PROTOTYPES
  49:lvgl/examples/styles/../../src/core/lv_disp.h ****  **********************/
  50:lvgl/examples/styles/../../src/core/lv_disp.h **** 
  51:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
  52:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Return with a pointer to the active screen
  53:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to display which active screen should be get. (NULL to use the default
  54:lvgl/examples/styles/../../src/core/lv_disp.h ****  * screen)
  55:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @return pointer to the active screen object (loaded by 'lv_scr_load()')
  56:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
  57:lvgl/examples/styles/../../src/core/lv_disp.h **** lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 19


  58:lvgl/examples/styles/../../src/core/lv_disp.h **** 
  59:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
  60:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Return with a pointer to the previous screen. Only used during screen transitions.
  61:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to display which previous screen should be get. (NULL to use the default
  62:lvgl/examples/styles/../../src/core/lv_disp.h ****  * screen)
  63:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @return pointer to the previous screen object or NULL if not used now
  64:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
  65:lvgl/examples/styles/../../src/core/lv_disp.h **** lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp);
  66:lvgl/examples/styles/../../src/core/lv_disp.h **** 
  67:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
  68:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Make a screen active
  69:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param scr pointer to a screen
  70:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
  71:lvgl/examples/styles/../../src/core/lv_disp.h **** void lv_disp_load_scr(lv_obj_t * scr);
  72:lvgl/examples/styles/../../src/core/lv_disp.h **** 
  73:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
  74:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Return with the top layer. (Same on every screen and it is above the normal screen layer)
  75:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
  76:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @return pointer to the top layer object (transparent screen sized lv_obj)
  77:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
  78:lvgl/examples/styles/../../src/core/lv_disp.h **** lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp);
  79:lvgl/examples/styles/../../src/core/lv_disp.h **** 
  80:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
  81:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Return with the sys. layer. (Same on every screen and it is above the normal screen and the top
  82:lvgl/examples/styles/../../src/core/lv_disp.h ****  * layer)
  83:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default sc
  84:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @return pointer to the sys layer object (transparent screen sized lv_obj)
  85:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
  86:lvgl/examples/styles/../../src/core/lv_disp.h **** lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp);
  87:lvgl/examples/styles/../../src/core/lv_disp.h **** 
  88:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
  89:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Set the theme of a display
  90:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to a display
  91:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
  92:lvgl/examples/styles/../../src/core/lv_disp.h **** void lv_disp_set_theme(lv_disp_t * disp, lv_theme_t * th);
  93:lvgl/examples/styles/../../src/core/lv_disp.h **** 
  94:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
  95:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Get the theme of a display
  96:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to a display
  97:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @return the display's theme (can be NULL)
  98:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
  99:lvgl/examples/styles/../../src/core/lv_disp.h **** lv_theme_t * lv_disp_get_theme(lv_disp_t * disp);
 100:lvgl/examples/styles/../../src/core/lv_disp.h **** 
 101:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
 102:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Set the background color of a display
 103:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to a display
 104:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param color color of the background
 105:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
 106:lvgl/examples/styles/../../src/core/lv_disp.h **** void lv_disp_set_bg_color(lv_disp_t * disp, lv_color_t color);
 107:lvgl/examples/styles/../../src/core/lv_disp.h **** 
 108:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
 109:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Set the background image of a display
 110:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to a display
 111:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param img_src path to file or pointer to an `lv_img_dsc_t` variable
 112:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
 113:lvgl/examples/styles/../../src/core/lv_disp.h **** void lv_disp_set_bg_image(lv_disp_t * disp, const void  * img_src);
 114:lvgl/examples/styles/../../src/core/lv_disp.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 20


 115:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
 116:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Set opacity of the background
 117:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to a display
 118:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param opa opacity (0..255)
 119:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
 120:lvgl/examples/styles/../../src/core/lv_disp.h **** void lv_disp_set_bg_opa(lv_disp_t * disp, lv_opa_t opa);
 121:lvgl/examples/styles/../../src/core/lv_disp.h **** 
 122:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
 123:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Switch screen with animation
 124:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param scr pointer to the new screen to load
 125:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param anim_type type of the animation from `lv_scr_load_anim_t`, e.g. `LV_SCR_LOAD_ANIM_MOVE_LE
 126:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param time time of the animation
 127:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param delay delay before the transition
 128:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param auto_del true: automatically delete the old screen
 129:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
 130:lvgl/examples/styles/../../src/core/lv_disp.h **** void lv_scr_load_anim(lv_obj_t * scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, 
 131:lvgl/examples/styles/../../src/core/lv_disp.h **** 
 132:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
 133:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Get elapsed time since last user activity on a display (e.g. click)
 134:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to get the overall smallest inactivity)
 135:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @return elapsed ticks (milliseconds) since the last activity
 136:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
 137:lvgl/examples/styles/../../src/core/lv_disp.h **** uint32_t lv_disp_get_inactive_time(const lv_disp_t * disp);
 138:lvgl/examples/styles/../../src/core/lv_disp.h **** 
 139:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
 140:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Manually trigger an activity on a display
 141:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 142:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
 143:lvgl/examples/styles/../../src/core/lv_disp.h **** void lv_disp_trig_activity(lv_disp_t * disp);
 144:lvgl/examples/styles/../../src/core/lv_disp.h **** 
 145:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
 146:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Clean any CPU cache that is related to the display.
 147:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 148:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
 149:lvgl/examples/styles/../../src/core/lv_disp.h **** void lv_disp_clean_dcache(lv_disp_t * disp);
 150:lvgl/examples/styles/../../src/core/lv_disp.h **** 
 151:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
 152:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Temporarily enable and disable the invalidation of the display.
 153:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 154:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param en true: enable invalidation; false: invalidation
 155:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
 156:lvgl/examples/styles/../../src/core/lv_disp.h **** void lv_disp_enable_invalidation(lv_disp_t * disp, bool en);
 157:lvgl/examples/styles/../../src/core/lv_disp.h **** 
 158:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
 159:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Get display invalidation is enabled.
 160:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 161:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @return return true if invalidation is enabled
 162:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
 163:lvgl/examples/styles/../../src/core/lv_disp.h **** bool lv_disp_is_invalidation_enabled(lv_disp_t * disp);
 164:lvgl/examples/styles/../../src/core/lv_disp.h **** 
 165:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
 166:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Get a pointer to the screen refresher timer to
 167:lvgl/examples/styles/../../src/core/lv_disp.h ****  * modify its parameters with `lv_timer_...` functions.
 168:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @param disp pointer to a display
 169:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @return pointer to the display refresher timer. (NULL on error)
 170:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
 171:lvgl/examples/styles/../../src/core/lv_disp.h **** lv_timer_t * _lv_disp_get_refr_timer(lv_disp_t * disp);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 21


 172:lvgl/examples/styles/../../src/core/lv_disp.h **** 
 173:lvgl/examples/styles/../../src/core/lv_disp.h **** /*------------------------------------------------
 174:lvgl/examples/styles/../../src/core/lv_disp.h ****  * To improve backward compatibility
 175:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Recommended only if you have one display
 176:lvgl/examples/styles/../../src/core/lv_disp.h ****  *------------------------------------------------*/
 177:lvgl/examples/styles/../../src/core/lv_disp.h **** 
 178:lvgl/examples/styles/../../src/core/lv_disp.h **** /**
 179:lvgl/examples/styles/../../src/core/lv_disp.h ****  * Get the active screen of the default display
 180:lvgl/examples/styles/../../src/core/lv_disp.h ****  * @return pointer to the active screen
 181:lvgl/examples/styles/../../src/core/lv_disp.h ****  */
 182:lvgl/examples/styles/../../src/core/lv_disp.h **** static inline lv_obj_t * lv_scr_act(void)
 104              		.loc 4 182 26 view .LVU17
 105              	.LBB11:
 183:lvgl/examples/styles/../../src/core/lv_disp.h **** {
 184:lvgl/examples/styles/../../src/core/lv_disp.h ****     return lv_disp_get_scr_act(lv_disp_get_default());
 106              		.loc 4 184 5 view .LVU18
 107              		.loc 4 184 12 is_stmt 0 view .LVU19
 108 004e FFF7FEFF 		bl	lv_disp_get_default
 109              	.LVL9:
 110 0052 FFF7FEFF 		bl	lv_disp_get_scr_act
 111              	.LVL10:
 112              	.LBE11:
 113              	.LBE10:
 114              		.loc 1 24 22 view .LVU20
 115 0056 FFF7FEFF 		bl	lv_obj_create
 116              	.LVL11:
 117 005a 0546     		mov	r5, r0
 118              	.LVL12:
  25:lvgl/examples/styles/lv_example_style_1.c ****     lv_obj_add_style(obj, &style, 0);
 119              		.loc 1 25 5 is_stmt 1 view .LVU21
 120 005c 0022     		movs	r2, #0
 121 005e 2146     		mov	r1, r4
 122 0060 FFF7FEFF 		bl	lv_obj_add_style
 123              	.LVL13:
  26:lvgl/examples/styles/lv_example_style_1.c **** 
  27:lvgl/examples/styles/lv_example_style_1.c ****     lv_obj_t * label = lv_label_create(obj);
 124              		.loc 1 27 5 view .LVU22
 125              		.loc 1 27 24 is_stmt 0 view .LVU23
 126 0064 2846     		mov	r0, r5
 127 0066 FFF7FEFF 		bl	lv_label_create
 128              	.LVL14:
  28:lvgl/examples/styles/lv_example_style_1.c ****     lv_label_set_text(label, "Hello");
 129              		.loc 1 28 5 is_stmt 1 view .LVU24
 130 006a 0349     		ldr	r1, .L3+4
 131 006c FFF7FEFF 		bl	lv_label_set_text
 132              	.LVL15:
  29:lvgl/examples/styles/lv_example_style_1.c **** }
 133              		.loc 1 29 1 is_stmt 0 view .LVU25
 134 0070 38BD     		pop	{r3, r4, r5, pc}
 135              	.LVL16:
 136              	.L4:
 137              		.loc 1 29 1 view .LVU26
 138 0072 00BF     		.align	2
 139              	.L3:
 140 0074 00000000 		.word	.LANCHOR0
 141 0078 00000000 		.word	.LC0
 142              		.cfi_endproc
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 22


 143              	.LFE204:
 145              		.section	.bss.style.0,"aw",%nobits
 146              		.align	2
 147              		.set	.LANCHOR0,. + 0
 150              	style.0:
 151 0000 00000000 		.space	8
 151      00000000 
 152              		.text
 153              	.Letext0:
 154              		.file 5 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 155              		.file 6 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 156              		.file 7 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_color.h"
 157              		.file 8 "lvgl/examples/styles/../../src/core/lv_obj.h"
 158              		.file 9 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_ll.h"
 159              		.file 10 "lvgl/examples/styles/../../src/core/lv_group.h"
 160              		.file 11 "lvgl/examples/styles/../../src/core/lv_obj_scroll.h"
 161              		.file 12 "lvgl/examples/styles/../../src/core/lv_obj_style.h"
 162              		.file 13 "lvgl/examples/styles/../../src/core/lv_obj_class.h"
 163              		.file 14 "lvgl/examples/styles/../../src/core/lv_event.h"
 164              		.file 15 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style_gen.h"
 165              		.file 16 "lvgl/examples/styles/../../src/hal/lv_hal_disp.h"
 166              		.file 17 "lvgl/examples/styles/../../src/widgets/lv_label.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s 			page 23


DEFINED SYMBOLS
                            *ABS*:00000000 lv_example_style_1.c
C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s:19     .rodata.lv_example_style_1.str1.4:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s:23     .text.lv_example_style_1:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s:29     .text.lv_example_style_1:00000000 lv_example_style_1
C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s:140    .text.lv_example_style_1:00000074 $d
C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s:146    .bss.style.0:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccuvKmE0.s:150    .bss.style.0:00000000 style.0

UNDEFINED SYMBOLS
lv_style_init
lv_style_set_radius
lv_style_set_width
lv_style_set_height
lv_style_set_pad_top
lv_style_set_pad_bottom
lv_style_set_pad_left
lv_style_set_x
lv_style_set_y
lv_disp_get_default
lv_disp_get_scr_act
lv_obj_create
lv_obj_add_style
lv_label_create
lv_label_set_text
