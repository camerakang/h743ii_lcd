ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_example_bar_2.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.lv_example_bar_2,"ax",%progbits
  19              		.align	1
  20              		.global	lv_example_bar_2
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	lv_example_bar_2:
  26              	.LFB204:
  27              		.file 1 "lvgl/examples/widgets/bar/lv_example_bar_2.c"
   1:lvgl/examples/widgets/bar/lv_example_bar_2.c **** #include "../../lv_examples.h"
   2:lvgl/examples/widgets/bar/lv_example_bar_2.c **** #if LV_USE_BAR && LV_BUILD_EXAMPLES
   3:lvgl/examples/widgets/bar/lv_example_bar_2.c **** 
   4:lvgl/examples/widgets/bar/lv_example_bar_2.c **** /**
   5:lvgl/examples/widgets/bar/lv_example_bar_2.c ****  * Example of styling the bar
   6:lvgl/examples/widgets/bar/lv_example_bar_2.c ****  */
   7:lvgl/examples/widgets/bar/lv_example_bar_2.c **** void lv_example_bar_2(void)
   8:lvgl/examples/widgets/bar/lv_example_bar_2.c **** {
  28              		.loc 1 8 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
   9:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     static lv_style_t style_bg;
  38              		.loc 1 9 5 view .LVU1
  10:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     static lv_style_t style_indic;
  39              		.loc 1 10 5 view .LVU2
  11:lvgl/examples/widgets/bar/lv_example_bar_2.c **** 
  12:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_style_init(&style_bg);
  40              		.loc 1 12 5 view .LVU3
  41 0002 314C     		ldr	r4, .L3
  42 0004 2046     		mov	r0, r4
  43 0006 FFF7FEFF 		bl	lv_style_init
  44              	.LVL0:
  13:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_style_set_border_color(&style_bg, lv_palette_main(LV_PALETTE_BLUE));
  45              		.loc 1 13 5 view .LVU4
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 2


  46 000a 0520     		movs	r0, #5
  47 000c FFF7FEFF 		bl	lv_palette_main
  48              	.LVL1:
  49 0010 0146     		mov	r1, r0
  50 0012 2046     		mov	r0, r4
  51 0014 FFF7FEFF 		bl	lv_style_set_border_color
  52              	.LVL2:
  14:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_style_set_border_width(&style_bg, 2);
  53              		.loc 1 14 5 view .LVU5
  54 0018 0221     		movs	r1, #2
  55 001a 2046     		mov	r0, r4
  56 001c FFF7FEFF 		bl	lv_style_set_border_width
  57              	.LVL3:
  15:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_style_set_pad_all(&style_bg, 6); /*To make the indicator smaller*/
  58              		.loc 1 15 5 view .LVU6
  59              	.LBB14:
  60              	.LBI14:
  61              		.file 2 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @file lv_style.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #ifndef LV_STYLE_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include <stdbool.h>
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include <stdint.h>
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "../font/lv_font.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_color.h"
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_area.h"
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_anim.h"
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_txt.h"
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_types.h"
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_assert.h"
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_bidi.h"
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /*********************
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *      DEFINES
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *********************/
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_SENTINEL_VALUE     0xAABBCCDD
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Flags for style behavior
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * The rest of the flags will have _FLAG added to their name in v9.
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_FLAG_NONE             (0)
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_INHERIT               (1 << 0)  /*Inherited*/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 3


  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_EXT_DRAW              (1 << 1)  /*Requires ext. draw size update when changed
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_LAYOUT_REFR           (1 << 2)  /*Requires layout update when changed*/
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_PARENT_LAYOUT_REFR    (1 << 3)  /*Requires layout update on parent when chang
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_LAYER_REFR            (1 << 4)  /*Affects layer handling*/
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_ALL                   (0x1F)     /*Indicating all flags*/
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Other constants
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_IMG_ZOOM_NONE            256        /*Value for not zooming the image*/
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** LV_EXPORT_CONST_INT(LV_IMG_ZOOM_NONE);
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** // *INDENT-OFF*
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #if LV_USE_ASSERT_STYLE
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_CONST_INIT(var_name, prop_array)                       \
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     const lv_style_t var_name = {                                       \
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .sentinel = LV_STYLE_SENTINEL_VALUE,                            \
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .v_p = { .const_props = prop_array },                           \
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .has_group = 0xFF,                                              \
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .prop1 = LV_STYLE_PROP_ANY,                                     \
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .prop_cnt = (sizeof(prop_array) / sizeof((prop_array)[0])),     \
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #else
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_CONST_INIT(var_name, prop_array)                       \
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     const lv_style_t var_name = {                                       \
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .v_p = { .const_props = prop_array },                           \
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .has_group = 0xFF,                                              \
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .prop1 = LV_STYLE_PROP_ANY,                                     \
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .prop_cnt = (sizeof(prop_array) / sizeof((prop_array)[0])),     \
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #endif
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** // *INDENT-ON*
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_META_INHERIT 0x8000
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_META_INITIAL 0x4000
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_META_MASK (LV_STYLE_PROP_META_INHERIT | LV_STYLE_PROP_META_INITIAL)
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_ID_MASK(prop) ((lv_style_prop_t)((prop) & ~LV_STYLE_PROP_META_MASK))
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**********************
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *      TYPEDEFS
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  **********************/
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Possible options how to blend opaque drawings
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_NORMAL,     /**< Simply mix according to the opacity value*/
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_ADDITIVE,   /**< Add the respective color channels*/
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_SUBTRACTIVE,/**< Subtract the foreground from the background*/
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_MULTIPLY,   /**< Multiply the foreground and background*/
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_REPLACE,    /**< Replace background with foreground in the area*/
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_blend_mode_t;
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 4


  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Some options to apply decorations on texts.
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * 'OR'ed values can be used.
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_TEXT_DECOR_NONE          = 0x00,
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_TEXT_DECOR_UNDERLINE     = 0x01,
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_TEXT_DECOR_STRIKETHROUGH = 0x02,
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_text_decor_t;
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Selects on which sides border should be drawn
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * 'OR'ed values can be used.
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_NONE     = 0x00,
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_BOTTOM   = 0x01,
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_TOP      = 0x02,
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_LEFT     = 0x04,
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_RIGHT    = 0x08,
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_FULL     = 0x0F,
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_INTERNAL = 0x10, /**< FOR matrix-like objects (e.g. Button matrix)*/
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_border_side_t;
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * The direction of the gradient.
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_GRAD_DIR_NONE, /**< No gradient (the `grad_color` property is ignored)*/
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_GRAD_DIR_VER,  /**< Vertical (top to bottom) gradient*/
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_GRAD_DIR_HOR,  /**< Horizontal (left to right) gradient*/
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_grad_dir_t;
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * The dithering algorithm for the gradient
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Depends on LV_DITHER_GRADIENT
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_DITHER_NONE,     /**< No dithering, colors are just quantized to the output resolution*/
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_DITHER_ORDERED,  /**< Ordered dithering. Faster to compute and use less memory but lower qua
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_DITHER_ERR_DIFF, /**< Error diffusion mode. Slower to compute and use more memory but give h
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_dither_mode_t;
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /** A gradient stop definition.
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *  This matches a color and a position in a virtual 0-255 scale.
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_color_t color;   /**< The stop color */
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint8_t    frac;    /**< The stop position in 1/255 unit */
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_gradient_stop_t;
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 5


 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /** A descriptor of a gradient. */
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_gradient_stop_t   stops[LV_GRADIENT_MAX_STOPS]; /**< A gradient stop array */
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint8_t              stops_count;                  /**< The number of used stops in the array *
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_grad_dir_t        dir : 3;                      /**< The gradient direction.
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                                         * Any of LV_GRAD_DIR_HOR, LV_GRAD_DIR_VER, 
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_dither_mode_t     dither : 3;                   /**< Whether to dither the gradient or not.
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                                         * Any of LV_DITHER_NONE, LV_DITHER_ORDERED,
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_grad_dsc_t;
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * A common type to handle all the property types in the same way.
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef union {
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     int32_t num;         /**< Number integer number (opacity, enums, booleans or "normal" numbers)*
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     const void * ptr;    /**< Constant pointers  (font, cone text, etc)*/
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_color_t color;    /**< Colors*/
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_value_t;
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Enumeration of all built in style properties
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Props are split into groups of 16. When adding a new prop to a group, ensure it does not overflo
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef enum {
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PROP_INV               = 0,
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 0*/
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_WIDTH                  = 1,
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_MIN_WIDTH              = 2,
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_MAX_WIDTH              = 3,
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_HEIGHT                 = 4,
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_MIN_HEIGHT             = 5,
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_MAX_HEIGHT             = 6,
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_X                      = 7,
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_Y                      = 8,
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ALIGN                  = 9,
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LAYOUT                 = 10,
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_RADIUS                 = 11,
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 1*/
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_TOP                = 16,
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_BOTTOM             = 17,
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_LEFT               = 18,
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_RIGHT              = 19,
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_ROW                = 20,
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_COLUMN             = 21,
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BASE_DIR               = 22,
 202:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_CLIP_CORNER            = 23,
 203:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 204:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 2*/
 205:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_COLOR               = 32,
 206:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_OPA                 = 33,
 207:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_GRAD_COLOR          = 34,
 208:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_GRAD_DIR            = 35,
 209:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_MAIN_STOP           = 36,
 210:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_GRAD_STOP           = 37,
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 6


 211:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_GRAD                = 38,
 212:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_DITHER_MODE         = 39,
 213:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_SRC             = 40,
 214:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_OPA             = 41,
 215:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_RECOLOR         = 42,
 216:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_RECOLOR_OPA     = 43,
 217:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_TILED           = 44,
 218:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 219:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 3*/
 220:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_COLOR           = 48,
 221:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_OPA             = 49,
 222:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_WIDTH           = 50,
 223:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_SIDE            = 51,
 224:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_POST            = 52,
 225:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OUTLINE_WIDTH          = 53,
 226:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OUTLINE_COLOR          = 54,
 227:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OUTLINE_OPA            = 55,
 228:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OUTLINE_PAD            = 56,
 229:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 230:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 4*/
 231:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_WIDTH           = 64,
 232:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_OFS_X           = 65,
 233:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_OFS_Y           = 66,
 234:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_SPREAD          = 67,
 235:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_COLOR           = 68,
 236:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_OPA             = 69,
 237:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_IMG_OPA                = 70,
 238:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_IMG_RECOLOR            = 71,
 239:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_IMG_RECOLOR_OPA        = 72,
 240:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_WIDTH             = 73,
 241:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_DASH_WIDTH        = 74,
 242:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_DASH_GAP          = 75,
 243:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_ROUNDED           = 76,
 244:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_COLOR             = 77,
 245:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_OPA               = 78,
 246:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 247:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 5*/
 248:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_WIDTH              = 80,
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_ROUNDED            = 81,
 250:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_COLOR              = 82,
 251:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_OPA                = 83,
 252:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_IMG_SRC            = 84,
 253:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_COLOR             = 85,
 254:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_OPA               = 86,
 255:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_FONT              = 87,
 256:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_LETTER_SPACE      = 88,
 257:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_LINE_SPACE        = 89,
 258:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_DECOR             = 90,
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_ALIGN             = 91,
 260:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 261:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 6*/
 262:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OPA                    = 96,
 263:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OPA_LAYERED            = 97,
 264:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_COLOR_FILTER_DSC       = 98,
 265:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_COLOR_FILTER_OPA       = 99,
 266:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ANIM                   = 100,
 267:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ANIM_TIME              = 101,
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 7


 268:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ANIM_SPEED             = 102,
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSITION             = 103,
 270:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BLEND_MODE             = 104,
 271:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_WIDTH        = 105,
 272:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_HEIGHT       = 106,
 273:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSLATE_X            = 107,
 274:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSLATE_Y            = 108,
 275:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_ZOOM         = 109,
 276:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_ANGLE        = 110,
 277:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_PIVOT_X      = 111,
 278:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_PIVOT_Y      = 112,
 279:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 280:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     _LV_STYLE_LAST_BUILT_IN_PROP     = 112,
 281:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     _LV_STYLE_NUM_BUILT_IN_PROPS     = _LV_STYLE_LAST_BUILT_IN_PROP + 1,
 282:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 283:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PROP_ANY                = 0xFFFF,
 284:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     _LV_STYLE_PROP_CONST             = 0xFFFF /* magic value for const styles */
 285:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_prop_t;
 286:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 287:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 288:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_RES_NOT_FOUND,
 289:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_RES_FOUND,
 290:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_RES_INHERIT
 291:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 292:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 293:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_style_res_t;
 294:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 295:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 296:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Descriptor for style transitions
 297:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 298:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 299:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     const lv_style_prop_t * props; /**< An array with the properties to animate.*/
 300:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #if LV_USE_USER_DATA
 301:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     void * user_data;              /**< A custom user data that will be passed to the animation's u
 302:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #endif
 303:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_anim_path_cb_t path_xcb;     /**< A path for the animation.*/
 304:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint32_t time;                 /**< Duration of the transition in [ms]*/
 305:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint32_t delay;                /**< Delay before the transition in [ms]*/
 306:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_transition_dsc_t;
 307:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 308:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 309:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Descriptor of a constant style property.
 310:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 311:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 312:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_prop_t prop;
 313:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_value_t value;
 314:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_const_prop_t;
 315:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 316:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 317:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Descriptor of a style (a collection of properties and values).
 318:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 319:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 320:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 321:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #if LV_USE_ASSERT_STYLE
 322:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint32_t sentinel;
 323:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #endif
 324:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 8


 325:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*If there is only one property store it directly.
 326:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****      *For more properties allocate an array*/
 327:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     union {
 328:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         lv_style_value_t value1;
 329:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint8_t * values_and_props;
 330:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         const lv_style_const_prop_t * const_props;
 331:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     } v_p;
 332:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 333:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint16_t prop1;
 334:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint8_t has_group;
 335:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint8_t prop_cnt;
 336:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_t;
 337:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 338:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**********************
 339:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * GLOBAL PROTOTYPES
 340:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  **********************/
 341:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 342:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 343:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Initialize a style
 344:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style to initialize
 345:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @note Do not call `lv_style_init` on styles that already have some properties
 346:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *       because this function won't free the used memory, just sets a default state for the style.
 347:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *       In other words be sure to initialize styles only once!
 348:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 349:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_init(lv_style_t * style);
 350:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 351:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 352:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Clear all properties from a style and free all allocated memories.
 353:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 354:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 355:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_reset(lv_style_t * style);
 356:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 357:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 358:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Register a new style property for custom usage
 359:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return a new property ID, or LV_STYLE_PROP_INV if there are no more available.
 360:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @example
 361:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * lv_style_prop_t MY_PROP;
 362:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * static inline void lv_style_set_my_prop(lv_style_t * style, lv_color_t value) {
 363:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * lv_style_value_t v = {.color = value}; lv_style_set_prop(style, MY_PROP, v); }
 364:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
 365:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * ...
 366:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * MY_PROP = lv_style_register_prop();
 367:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * ...
 368:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * lv_style_set_my_prop(&style1, lv_palette_main(LV_PALETTE_RED));
 369:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 370:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** lv_style_prop_t lv_style_register_prop(uint8_t flag);
 371:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 372:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 373:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the number of custom properties that have been registered thus far.
 374:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 375:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** lv_style_prop_t lv_style_get_num_custom_props(void);
 376:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 377:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 378:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Remove a property from a style
 379:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 380:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop  a style property ORed with a state.
 381:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return true: the property was found and removed; false: the property wasn't found
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 9


 382:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 383:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop);
 384:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 385:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 386:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Set the value of property in a style.
 387:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * This function shouldn't be used directly by the user.
 388:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Instead use `lv_style_set_<prop_name>()`. E.g. `lv_style_set_bg_color()`
 389:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to style
 390:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop the ID of a property (e.g. `LV_STYLE_BG_COLOR`)
 391:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param value `lv_style_value_t` variable in which a field is set according to the type of `prop`
 392:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 393:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_set_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t value);
 394:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 395:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 396:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Set a special meta state for a property in a style.
 397:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * This function shouldn't be used directly by the user.
 398:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to style
 399:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop the ID of a property (e.g. `LV_STYLE_BG_COLOR`)
 400:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param meta the meta value to attach to the property in the style
 401:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 402:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_set_prop_meta(lv_style_t * style, lv_style_prop_t prop, uint16_t meta);
 403:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 404:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 405:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the value of a property
 406:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 407:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop  the ID of a property
 408:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param value pointer to a `lv_style_value_t` variable to store the value
 409:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return LV_RES_INV: the property wasn't found in the style (`value` is unchanged)
 410:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *         LV_RES_OK: the property was fond, and `value` is set accordingly
 411:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @note For performance reasons there are no sanity check on `style`
 412:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 413:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** lv_style_res_t lv_style_get_prop(const lv_style_t * style, lv_style_prop_t prop, lv_style_value_t *
 414:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 415:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 416:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Initialize a transition descriptor.
 417:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param tr        pointer to a transition descriptor to initialize
 418:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param props     an array with the properties to transition. The last element must be zero.
 419:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param path_cb   an animation path (ease) callback. If `NULL` liner path will be used.
 420:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param time      duration of the transition in [ms]
 421:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param delay     delay before the transition in [ms]
 422:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param user_data any custom data that will be saved in the transition animation and will be avai
 423:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @example
 424:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * const static lv_style_prop_t trans_props[] = { LV_STYLE_BG_OPA, LV_STYLE_BG_COLOR, 0 };
 425:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *  static lv_style_transition_dsc_t trans1;
 426:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *  lv_style_transition_dsc_init(&trans1, trans_props, NULL, 300, 0, NULL);
 427:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 428:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_transition_dsc_init(lv_style_transition_dsc_t * tr, const lv_style_prop_t props[],
 429:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                   lv_anim_path_cb_t path_cb, uint32_t time, uint32_t delay, void * 
 430:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 431:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 432:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the default value of a property
 433:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop the ID of a property
 434:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return the default value
 435:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 436:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop);
 437:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 438:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 10


 439:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the value of a property
 440:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 441:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop  the ID of a property
 442:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param value pointer to a `lv_style_value_t` variable to store the value
 443:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return LV_RES_INV: the property wasn't found in the style (`value` is unchanged)
 444:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *         LV_RES_OK: the property was fond, and `value` is set accordingly
 445:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @note For performance reasons there are no sanity check on `style`
 446:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance c
 447:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 448:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t pr
 449:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                                        lv_style_value_t * value)
 450:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** {
 451:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     if(style->prop1 == LV_STYLE_PROP_ANY) {
 452:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         const lv_style_const_prop_t * const_prop;
 453:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint32_t i;
 454:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         for(i = 0; i < style->prop_cnt; i++) {
 455:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             const_prop = style->v_p.const_props + i;
 456:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 457:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             if(prop_id == prop) {
 458:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 459:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     return LV_STYLE_RES_INHERIT;
 460:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_defaul
 461:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 return LV_STYLE_RES_FOUND;
 462:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             }
 463:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         }
 464:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         return LV_STYLE_RES_NOT_FOUND;
 465:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
 466:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 467:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 468:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 469:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     if(style->prop_cnt > 1) {
 470:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 471:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint16_t * props = (uint16_t *)tmp;
 472:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint32_t i;
 473:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         for(i = 0; i < style->prop_cnt; i++) {
 474:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 475:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             if(prop_id == prop) {
 476:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 if(props[i] & LV_STYLE_PROP_META_INHERIT)
 477:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     return LV_STYLE_RES_INHERIT;
 478:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 if(props[i] & LV_STYLE_PROP_META_INITIAL)
 479:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     *value = lv_style_prop_get_default(prop_id);
 480:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 else {
 481:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 482:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     *value = values[i];
 483:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 }
 484:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 return LV_STYLE_RES_FOUND;
 485:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             }
 486:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         }
 487:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
 488:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 489:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 490:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             return LV_STYLE_RES_INHERIT;
 491:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_P
 492:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                                                                              style-
 493:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         return LV_STYLE_RES_FOUND;
 494:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
 495:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     return LV_STYLE_RES_NOT_FOUND;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 11


 496:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** }
 497:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 498:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 499:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Checks if a style is empty (has no properties)
 500:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 501:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return true if the style is empty
 502:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 503:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** bool lv_style_is_empty(const lv_style_t * style);
 504:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 505:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 506:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Tell the group of a property. If the a property from a group is set in a style the (1 << group) 
 507:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * It allows early skipping the style if the property is not exists in the style at all.
 508:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop a style property
 509:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return the group [0..7] 7 means all the custom properties with index > 112
 510:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 511:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** uint8_t _lv_style_get_prop_group(lv_style_prop_t prop);
 512:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 513:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 514:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the flags of a built-in or custom property.
 515:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
 516:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop a style property
 517:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return the flags of the property
 518:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 519:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** uint8_t _lv_style_prop_lookup_flags(lv_style_prop_t prop);
 520:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 521:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_style_gen.h"
 522:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 523:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** static inline void lv_style_set_size(lv_style_t * style, lv_coord_t value)
 524:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** {
 525:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_width(style, value);
 526:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_height(style, value);
 527:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** }
 528:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 529:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** static inline void lv_style_set_pad_all(lv_style_t * style, lv_coord_t value)
  62              		.loc 2 529 20 view .LVU7
  63              	.LBB15:
 530:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** {
 531:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_left(style, value);
  64              		.loc 2 531 5 view .LVU8
  65 0020 0621     		movs	r1, #6
  66 0022 2046     		mov	r0, r4
  67 0024 FFF7FEFF 		bl	lv_style_set_pad_left
  68              	.LVL4:
 532:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_right(style, value);
  69              		.loc 2 532 5 view .LVU9
  70 0028 0621     		movs	r1, #6
  71 002a 2046     		mov	r0, r4
  72 002c FFF7FEFF 		bl	lv_style_set_pad_right
  73              	.LVL5:
 533:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_top(style, value);
  74              		.loc 2 533 5 view .LVU10
  75 0030 0621     		movs	r1, #6
  76 0032 2046     		mov	r0, r4
  77 0034 FFF7FEFF 		bl	lv_style_set_pad_top
  78              	.LVL6:
 534:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_bottom(style, value);
  79              		.loc 2 534 5 view .LVU11
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 12


  80 0038 0621     		movs	r1, #6
  81 003a 2046     		mov	r0, r4
  82 003c FFF7FEFF 		bl	lv_style_set_pad_bottom
  83              	.LVL7:
  84              		.loc 2 534 5 is_stmt 0 view .LVU12
  85              	.LBE15:
  86              	.LBE14:
  16:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_style_set_radius(&style_bg, 6);
  87              		.loc 1 16 5 is_stmt 1 view .LVU13
  88 0040 0621     		movs	r1, #6
  89 0042 2046     		mov	r0, r4
  90 0044 FFF7FEFF 		bl	lv_style_set_radius
  91              	.LVL8:
  17:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_style_set_anim_time(&style_bg, 1000);
  92              		.loc 1 17 5 view .LVU14
  93 0048 4FF47A71 		mov	r1, #1000
  94 004c 2046     		mov	r0, r4
  95 004e FFF7FEFF 		bl	lv_style_set_anim_time
  96              	.LVL9:
  18:lvgl/examples/widgets/bar/lv_example_bar_2.c **** 
  19:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_style_init(&style_indic);
  97              		.loc 1 19 5 view .LVU15
  98 0052 1E4E     		ldr	r6, .L3+4
  99 0054 3046     		mov	r0, r6
 100 0056 FFF7FEFF 		bl	lv_style_init
 101              	.LVL10:
  20:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_style_set_bg_opa(&style_indic, LV_OPA_COVER);
 102              		.loc 1 20 5 view .LVU16
 103 005a FF21     		movs	r1, #255
 104 005c 3046     		mov	r0, r6
 105 005e FFF7FEFF 		bl	lv_style_set_bg_opa
 106              	.LVL11:
  21:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_style_set_bg_color(&style_indic, lv_palette_main(LV_PALETTE_BLUE));
 107              		.loc 1 21 5 view .LVU17
 108 0062 0520     		movs	r0, #5
 109 0064 FFF7FEFF 		bl	lv_palette_main
 110              	.LVL12:
 111 0068 0146     		mov	r1, r0
 112 006a 3046     		mov	r0, r6
 113 006c FFF7FEFF 		bl	lv_style_set_bg_color
 114              	.LVL13:
  22:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_style_set_radius(&style_indic, 3);
 115              		.loc 1 22 5 view .LVU18
 116 0070 0321     		movs	r1, #3
 117 0072 3046     		mov	r0, r6
 118 0074 FFF7FEFF 		bl	lv_style_set_radius
 119              	.LVL14:
  23:lvgl/examples/widgets/bar/lv_example_bar_2.c **** 
  24:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_obj_t * bar = lv_bar_create(lv_scr_act());
 120              		.loc 1 24 5 view .LVU19
 121              	.LBB16:
 122              	.LBI16:
 123              		.file 3 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_disp.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @file lv_disp.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 13


   5:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifndef LV_DISP_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #define LV_DISP_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "../hal/lv_hal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_obj.h"
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_theme.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      DEFINES
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      TYPEDEFS
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** typedef enum {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_NONE,
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_LEFT,
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_RIGHT,
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_TOP,
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_BOTTOM,
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_LEFT,
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_RIGHT,
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_TOP,
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_BOTTOM,
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_IN,
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_ON = LV_SCR_LOAD_ANIM_FADE_IN, /*For backward compatibility*/
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_OUT,
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_LEFT,
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_RIGHT,
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_TOP,
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_BOTTOM,
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** } lv_scr_load_anim_t;
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * GLOBAL PROTOTYPES
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the active screen
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which active screen should be get. (NULL to use the default
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen object (loaded by 'lv_scr_load()')
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp);
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the previous screen. Only used during screen transitions.
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which previous screen should be get. (NULL to use the default
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 14


  62:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the previous screen object or NULL if not used now
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp);
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Make a screen active
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to a screen
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_load_scr(lv_obj_t * scr);
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the top layer. (Same on every screen and it is above the normal screen layer)
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the top layer object (transparent screen sized lv_obj)
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp);
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the sys. layer. (Same on every screen and it is above the normal screen and the top
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * layer)
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default sc
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the sys layer object (transparent screen sized lv_obj)
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp);
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the theme of a display
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_theme(lv_disp_t * disp, lv_theme_t * th);
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the theme of a display
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return the display's theme (can be NULL)
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_theme_t * lv_disp_get_theme(lv_disp_t * disp);
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background color of a display
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param color color of the background
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_color(lv_disp_t * disp, lv_color_t color);
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background image of a display
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param img_src path to file or pointer to an `lv_img_dsc_t` variable
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_image(lv_disp_t * disp, const void  * img_src);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set opacity of the background
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param opa opacity (0..255)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 15


 119:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_opa(lv_disp_t * disp, lv_opa_t opa);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Switch screen with animation
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to the new screen to load
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param anim_type type of the animation from `lv_scr_load_anim_t`, e.g. `LV_SCR_LOAD_ANIM_MOVE_LE
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param time time of the animation
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param delay delay before the transition
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param auto_del true: automatically delete the old screen
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_scr_load_anim(lv_obj_t * scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, 
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get elapsed time since last user activity on a display (e.g. click)
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to get the overall smallest inactivity)
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return elapsed ticks (milliseconds) since the last activity
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** uint32_t lv_disp_get_inactive_time(const lv_disp_t * disp);
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Manually trigger an activity on a display
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_trig_activity(lv_disp_t * disp);
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Clean any CPU cache that is related to the display.
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_clean_dcache(lv_disp_t * disp);
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Temporarily enable and disable the invalidation of the display.
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param en true: enable invalidation; false: invalidation
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_enable_invalidation(lv_disp_t * disp, bool en);
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get display invalidation is enabled.
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return return true if invalidation is enabled
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** bool lv_disp_is_invalidation_enabled(lv_disp_t * disp);
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get a pointer to the screen refresher timer to
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * modify its parameters with `lv_timer_...` functions.
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the display refresher timer. (NULL on error)
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_timer_t * _lv_disp_get_refr_timer(lv_disp_t * disp);
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*------------------------------------------------
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * To improve backward compatibility
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Recommended only if you have one display
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 16


 176:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *------------------------------------------------*/
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the active screen of the default display
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** static inline lv_obj_t * lv_scr_act(void)
 124              		.loc 3 182 26 view .LVU20
 125              	.LBB17:
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     return lv_disp_get_scr_act(lv_disp_get_default());
 126              		.loc 3 184 5 view .LVU21
 127              		.loc 3 184 12 is_stmt 0 view .LVU22
 128 0078 FFF7FEFF 		bl	lv_disp_get_default
 129              	.LVL15:
 130 007c FFF7FEFF 		bl	lv_disp_get_scr_act
 131              	.LVL16:
 132              	.LBE17:
 133              	.LBE16:
 134              		.loc 1 24 22 view .LVU23
 135 0080 FFF7FEFF 		bl	lv_bar_create
 136              	.LVL17:
 137 0084 0546     		mov	r5, r0
 138              	.LVL18:
  25:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_obj_remove_style_all(bar);  /*To have a clean start*/
 139              		.loc 1 25 5 is_stmt 1 view .LVU24
 140              	.LBB18:
 141              	.LBI18:
 142              		.file 4 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_style.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * @file lv_obj_style.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** #ifndef LV_OBJ_STYLE_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** #define LV_OBJ_STYLE_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** #include <stdint.h>
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** #include <stdbool.h>
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** #include "../misc/lv_bidi.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** /*********************
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  *      DEFINES
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  *********************/
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** /**********************
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  *      TYPEDEFS
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  **********************/
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** /*Can't include lv_obj.h because it includes this header file*/
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** struct _lv_obj_t;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 17


  29:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** typedef enum {
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     _LV_STYLE_STATE_CMP_SAME,           /*The style properties in the 2 states are identical*/
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     _LV_STYLE_STATE_CMP_DIFF_REDRAW,    /*The differences can be shown with a simple redraw*/
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD,  /*The differences can be shown with a simple redraw*/
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     _LV_STYLE_STATE_CMP_DIFF_LAYOUT,    /*The differences can be shown with a simple redraw*/
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** } _lv_style_state_cmp_t;
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** typedef uint32_t lv_style_selector_t;
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** typedef struct {
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     lv_style_t * style;
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     uint32_t selector : 24;
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     uint32_t is_local : 1;
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     uint32_t is_trans : 1;
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** } _lv_obj_style_t;
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** typedef struct {
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     uint16_t time;
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     uint16_t delay;
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     lv_style_selector_t selector;
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     lv_style_prop_t prop;
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     lv_anim_path_cb_t path_cb;
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** #if LV_USE_USER_DATA
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     void * user_data;
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** #endif
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** } _lv_obj_style_transition_dsc_t;
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** /**********************
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * GLOBAL PROTOTYPES
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  **********************/
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** /**
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * Initialize the object related style manager module.
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * Called by LVGL in `lv_init()`
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  */
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** void _lv_obj_style_init(void);
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** /**
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * Add a style to an object.
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * @param obj       pointer to an object
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * @param style     pointer to a style to add
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * @param selector  OR-ed value of parts and state to which the style should be added
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * @example         lv_obj_add_style(btn, &style_btn, 0); //Default button style
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * @example         lv_obj_add_style(btn, &btn_red, LV_STATE_PRESSED); //Overwrite only some colors
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  */
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** void lv_obj_add_style(struct _lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector);
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** /**
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * Add a style to an object.
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * @param obj       pointer to an object
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * @param style     pointer to a style to remove. Can be NULL to check only the selector
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * @param selector  OR-ed values of states and a part to remove only styles with matching selectors
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * @example lv_obj_remove_style(obj, &style, LV_PART_ANY | LV_STATE_ANY); //Remove a specific style
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * @example lv_obj_remove_style(obj, NULL, LV_PART_MAIN | LV_STATE_ANY); //Remove all styles from t
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * @example lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY); //Remove all styles
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  */
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 18


  86:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** void lv_obj_remove_style(struct _lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector);
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** 
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** /**
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * Remove all styles from an object
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  * @param obj       pointer to an object
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****  */
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
 143              		.loc 4 92 20 view .LVU25
 144              	.LBB19:
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h **** {
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style.h ****     lv_obj_remove_style(obj, NULL, (lv_style_selector_t)LV_PART_ANY | (lv_style_selector_t)LV_STATE
 145              		.loc 4 94 5 view .LVU26
 146 0086 124A     		ldr	r2, .L3+8
 147 0088 0021     		movs	r1, #0
 148 008a FFF7FEFF 		bl	lv_obj_remove_style
 149              	.LVL19:
 150              		.loc 4 94 5 is_stmt 0 view .LVU27
 151              	.LBE19:
 152              	.LBE18:
  26:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_obj_add_style(bar, &style_bg, 0);
 153              		.loc 1 26 5 is_stmt 1 view .LVU28
 154 008e 0022     		movs	r2, #0
 155 0090 2146     		mov	r1, r4
 156 0092 2846     		mov	r0, r5
 157 0094 FFF7FEFF 		bl	lv_obj_add_style
 158              	.LVL20:
  27:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_obj_add_style(bar, &style_indic, LV_PART_INDICATOR);
 159              		.loc 1 27 5 view .LVU29
 160 0098 4FF40032 		mov	r2, #131072
 161 009c 3146     		mov	r1, r6
 162 009e 2846     		mov	r0, r5
 163 00a0 FFF7FEFF 		bl	lv_obj_add_style
 164              	.LVL21:
  28:lvgl/examples/widgets/bar/lv_example_bar_2.c **** 
  29:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_obj_set_size(bar, 200, 20);
 165              		.loc 1 29 5 view .LVU30
 166 00a4 1422     		movs	r2, #20
 167 00a6 C821     		movs	r1, #200
 168 00a8 2846     		mov	r0, r5
 169 00aa FFF7FEFF 		bl	lv_obj_set_size
 170              	.LVL22:
  30:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_obj_center(bar);
 171              		.loc 1 30 5 view .LVU31
 172              	.LBB20:
 173              	.LBI20:
 174              		.file 5 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\core\\lv_obj_pos.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @file lv_obj_pos.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #ifndef LV_OBJ_POS_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #define LV_OBJ_POS_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #endif
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 19


  12:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #include "../misc/lv_area.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /*********************
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *      DEFINES
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *********************/
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**********************
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *      TYPEDEFS
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  **********************/
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** struct _lv_obj_t;
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** typedef void (*lv_layout_update_cb_t)(struct _lv_obj_t *, void * user_data);
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** typedef struct {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****     lv_layout_update_cb_t cb;
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****     void * user_data;
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** } lv_layout_dsc_t;
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**********************
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * GLOBAL PROTOTYPES
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  **********************/
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the position of an object relative to the set alignment.
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param x         new x coordinate
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param y         new y coordinate
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_pos(struct _lv_obj_t * obj, lv_coord_t x, lv_coord_t y);
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the x coordinate of an object
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param x         new x coordinate
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_x(struct _lv_obj_t * obj, lv_coord_t x);
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the y coordinate of an object
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param y         new y coordinate
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 20


  69:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_y(struct _lv_obj_t * obj, lv_coord_t y);
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the size of an object.
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param w         the new width
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param h         the new height
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            possible values are:
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  LV_SIZE_PCT(x)     to set size in percentage of the parent's content area size 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_size(struct _lv_obj_t * obj, lv_coord_t w, lv_coord_t h);
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Recalculate the size of the object
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @return          true: the size has been changed
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** bool lv_obj_refr_size(struct _lv_obj_t * obj);
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the width of an object
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param w         the new width
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            possible values are:
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  lv_pct(x)           to set size in percentage of the parent's content area size
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_width(struct _lv_obj_t * obj, lv_coord_t w);
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the height of an object
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param h         the new height
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            possible values are:
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  lv_pct(x)           to set size in percentage of the parent's content area size
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_height(struct _lv_obj_t * obj, lv_coord_t h);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the width reduced by the left and right padding and the border width.
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param w         the width without paddings in pixels
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_content_width(struct _lv_obj_t * obj, lv_coord_t w);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the height reduced by the top and bottom padding and the border width.
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param h         the height without paddings in pixels
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 21


 126:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_content_height(struct _lv_obj_t * obj, lv_coord_t h);
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set a layout for an object
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param layout    pointer to a layout descriptor to set
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_layout(struct _lv_obj_t * obj, uint32_t layout);
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Test whether the and object is positioned by a layout or not
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to test
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @return true:    positioned by a layout; false: not positioned by a layout
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** bool lv_obj_is_layout_positioned(const struct _lv_obj_t * obj);
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Mark the object for layout update.
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj      pointer to an object whose children needs to be updated
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_mark_layout_as_dirty(struct _lv_obj_t * obj);
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Update the layout of an object.
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj      pointer to an object whose children needs to be updated
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_update_layout(const struct _lv_obj_t * obj);
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Register a new layout
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param cb        the layout update callback
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param user_data custom data that will be passed to `cb`
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @return          the ID of the new layout
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data);
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Change the alignment of an object.
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum) `LV_ALIGN_OUT_...` can't be used.
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_align(struct _lv_obj_t * obj, lv_align_t align);
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Change the alignment of an object and set new coordinates.
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Equivalent to:
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * lv_obj_set_align(obj, align);
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * lv_obj_set_pos(obj, x_ofs, y_ofs);
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum) `LV_ALIGN_OUT_...` can't be used.
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param x_ofs     x coordinate offset after alignment
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param y_ofs     y coordinate offset after alignment
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_align(struct _lv_obj_t * obj, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs);
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 22


 183:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Align an object to an other object.
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param base      pointer to an other object (if NULL `obj`s parent is used). 'obj' will be align
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum)
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param x_ofs     x coordinate offset after alignment
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param y_ofs     y coordinate offset after alignment
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            if the position or size of `base` changes `obj` needs to be aligned manually ag
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_align_to(struct _lv_obj_t * obj, const struct _lv_obj_t * base, lv_align_t align, lv_co
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****                      lv_coord_t y_ofs);
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Align an object to the center on its parent.
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            if the parent size changes `obj` needs to be aligned manually again
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** static inline void lv_obj_center(struct _lv_obj_t * obj)
 175              		.loc 5 199 20 view .LVU32
 176              	.LBB21:
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** {
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****     lv_obj_align(obj, LV_ALIGN_CENTER, 0, 0);
 177              		.loc 5 201 5 view .LVU33
 178 00ae 0023     		movs	r3, #0
 179 00b0 1A46     		mov	r2, r3
 180 00b2 0921     		movs	r1, #9
 181 00b4 2846     		mov	r0, r5
 182 00b6 FFF7FEFF 		bl	lv_obj_align
 183              	.LVL23:
 184              		.loc 5 201 5 is_stmt 0 view .LVU34
 185              	.LBE21:
 186              	.LBE20:
  31:lvgl/examples/widgets/bar/lv_example_bar_2.c ****     lv_bar_set_value(bar, 100, LV_ANIM_ON);
 187              		.loc 1 31 5 is_stmt 1 view .LVU35
 188 00ba 0122     		movs	r2, #1
 189 00bc 6421     		movs	r1, #100
 190 00be 2846     		mov	r0, r5
 191 00c0 FFF7FEFF 		bl	lv_bar_set_value
 192              	.LVL24:
  32:lvgl/examples/widgets/bar/lv_example_bar_2.c **** }
 193              		.loc 1 32 1 is_stmt 0 view .LVU36
 194 00c4 70BD     		pop	{r4, r5, r6, pc}
 195              	.LVL25:
 196              	.L4:
 197              		.loc 1 32 1 view .LVU37
 198 00c6 00BF     		.align	2
 199              	.L3:
 200 00c8 00000000 		.word	.LANCHOR0
 201 00cc 00000000 		.word	.LANCHOR1
 202 00d0 FFFF0F00 		.word	1048575
 203              		.cfi_endproc
 204              	.LFE204:
 206              		.section	.bss.style_bg.1,"aw",%nobits
 207              		.align	2
 208              		.set	.LANCHOR0,. + 0
 211              	style_bg.1:
 212 0000 00000000 		.space	8
 212      00000000 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 23


 213              		.section	.bss.style_indic.0,"aw",%nobits
 214              		.align	2
 215              		.set	.LANCHOR1,. + 0
 218              	style_indic.0:
 219 0000 00000000 		.space	8
 219      00000000 
 220              		.text
 221              	.Letext0:
 222              		.file 6 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 223              		.file 7 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 224              		.file 8 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_area.h"
 225              		.file 9 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/misc/lv_anim.h"
 226              		.file 10 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_color.h"
 227              		.file 11 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj.h"
 228              		.file 12 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_ll.h"
 229              		.file 13 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_group.h"
 230              		.file 14 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_scroll.h"
 231              		.file 15 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_class.h"
 232              		.file 16 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_event.h"
 233              		.file 17 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style_gen.h"
 234              		.file 18 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/hal/lv_hal_disp.h"
 235              		.file 19 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/widgets/lv_bar.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s 			page 24


DEFINED SYMBOLS
                            *ABS*:00000000 lv_example_bar_2.c
C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s:19     .text.lv_example_bar_2:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s:25     .text.lv_example_bar_2:00000000 lv_example_bar_2
C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s:200    .text.lv_example_bar_2:000000c8 $d
C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s:207    .bss.style_bg.1:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s:211    .bss.style_bg.1:00000000 style_bg.1
C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s:214    .bss.style_indic.0:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMfgndw.s:218    .bss.style_indic.0:00000000 style_indic.0

UNDEFINED SYMBOLS
lv_style_init
lv_palette_main
lv_style_set_border_color
lv_style_set_border_width
lv_style_set_pad_left
lv_style_set_pad_right
lv_style_set_pad_top
lv_style_set_pad_bottom
lv_style_set_radius
lv_style_set_anim_time
lv_style_set_bg_opa
lv_style_set_bg_color
lv_disp_get_default
lv_disp_get_scr_act
lv_bar_create
lv_obj_remove_style
lv_obj_add_style
lv_obj_set_size
lv_obj_align
lv_bar_set_value
