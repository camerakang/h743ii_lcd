ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_example_switch_1.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.event_handler,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	event_handler:
  25              	.LVL0:
  26              	.LFB204:
  27              		.file 1 "lvgl/examples/widgets/switch/lv_example_switch_1.c"
   1:lvgl/examples/widgets/switch/lv_example_switch_1.c **** #include "../../lv_examples.h"
   2:lvgl/examples/widgets/switch/lv_example_switch_1.c **** #if LV_USE_SWITCH && LV_BUILD_EXAMPLES
   3:lvgl/examples/widgets/switch/lv_example_switch_1.c **** 
   4:lvgl/examples/widgets/switch/lv_example_switch_1.c **** static void event_handler(lv_event_t * e)
   5:lvgl/examples/widgets/switch/lv_example_switch_1.c **** {
  28              		.loc 1 5 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 5 1 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 0446     		mov	r4, r0
   6:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     lv_event_code_t code = lv_event_get_code(e);
  38              		.loc 1 6 5 is_stmt 1 view .LVU2
  39              		.loc 1 6 28 is_stmt 0 view .LVU3
  40 0004 FFF7FEFF 		bl	lv_event_get_code
  41              	.LVL1:
   7:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     lv_obj_t * obj = lv_event_get_target(e);
  42              		.loc 1 7 5 is_stmt 1 view .LVU4
  43              		.loc 1 7 22 is_stmt 0 view .LVU5
  44 0008 2046     		mov	r0, r4
  45 000a FFF7FEFF 		bl	lv_event_get_target
  46              	.LVL2:
   8:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     if(code == LV_EVENT_VALUE_CHANGED) {
  47              		.loc 1 8 5 is_stmt 1 view .LVU6
   9:lvgl/examples/widgets/switch/lv_example_switch_1.c ****         LV_LOG_USER("State: %s\n", lv_obj_has_state(obj, LV_STATE_CHECKED) ? "On" : "Off");
  48              		.loc 1 9 9 view .LVU7
  49              		.loc 1 9 9 view .LVU8
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s 			page 2


  50              		.loc 1 9 9 view .LVU9
  10:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     }
  11:lvgl/examples/widgets/switch/lv_example_switch_1.c **** }
  51              		.loc 1 11 1 is_stmt 0 view .LVU10
  52 000e 10BD     		pop	{r4, pc}
  53              		.loc 1 11 1 view .LVU11
  54              		.cfi_endproc
  55              	.LFE204:
  57              		.section	.text.lv_example_switch_1,"ax",%progbits
  58              		.align	1
  59              		.global	lv_example_switch_1
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  64              	lv_example_switch_1:
  65              	.LFB205:
  12:lvgl/examples/widgets/switch/lv_example_switch_1.c **** 
  13:lvgl/examples/widgets/switch/lv_example_switch_1.c **** void lv_example_switch_1(void)
  14:lvgl/examples/widgets/switch/lv_example_switch_1.c **** {
  66              		.loc 1 14 1 is_stmt 1 view -0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70 0000 38B5     		push	{r3, r4, r5, lr}
  71              		.cfi_def_cfa_offset 16
  72              		.cfi_offset 3, -16
  73              		.cfi_offset 4, -12
  74              		.cfi_offset 5, -8
  75              		.cfi_offset 14, -4
  15:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     lv_obj_set_flex_flow(lv_scr_act(), LV_FLEX_FLOW_COLUMN);
  76              		.loc 1 15 5 view .LVU13
  77              	.LBB14:
  78              	.LBI14:
  79              		.file 2 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_disp.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @file lv_disp.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifndef LV_DISP_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #define LV_DISP_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "../hal/lv_hal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_obj.h"
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_theme.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      DEFINES
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s 			page 3


  24:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      TYPEDEFS
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** typedef enum {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_NONE,
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_LEFT,
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_RIGHT,
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_TOP,
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_BOTTOM,
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_LEFT,
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_RIGHT,
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_TOP,
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_BOTTOM,
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_IN,
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_ON = LV_SCR_LOAD_ANIM_FADE_IN, /*For backward compatibility*/
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_OUT,
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_LEFT,
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_RIGHT,
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_TOP,
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_BOTTOM,
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** } lv_scr_load_anim_t;
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * GLOBAL PROTOTYPES
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the active screen
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which active screen should be get. (NULL to use the default
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen object (loaded by 'lv_scr_load()')
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp);
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the previous screen. Only used during screen transitions.
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which previous screen should be get. (NULL to use the default
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the previous screen object or NULL if not used now
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp);
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Make a screen active
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to a screen
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_load_scr(lv_obj_t * scr);
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the top layer. (Same on every screen and it is above the normal screen layer)
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the top layer object (transparent screen sized lv_obj)
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp);
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s 			page 4


  81:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the sys. layer. (Same on every screen and it is above the normal screen and the top
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * layer)
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default sc
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the sys layer object (transparent screen sized lv_obj)
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp);
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the theme of a display
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_theme(lv_disp_t * disp, lv_theme_t * th);
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the theme of a display
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return the display's theme (can be NULL)
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_theme_t * lv_disp_get_theme(lv_disp_t * disp);
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background color of a display
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param color color of the background
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_color(lv_disp_t * disp, lv_color_t color);
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background image of a display
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param img_src path to file or pointer to an `lv_img_dsc_t` variable
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_image(lv_disp_t * disp, const void  * img_src);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set opacity of the background
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param opa opacity (0..255)
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_opa(lv_disp_t * disp, lv_opa_t opa);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Switch screen with animation
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to the new screen to load
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param anim_type type of the animation from `lv_scr_load_anim_t`, e.g. `LV_SCR_LOAD_ANIM_MOVE_LE
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param time time of the animation
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param delay delay before the transition
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param auto_del true: automatically delete the old screen
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_scr_load_anim(lv_obj_t * scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, 
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get elapsed time since last user activity on a display (e.g. click)
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to get the overall smallest inactivity)
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return elapsed ticks (milliseconds) since the last activity
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** uint32_t lv_disp_get_inactive_time(const lv_disp_t * disp);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s 			page 5


 138:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Manually trigger an activity on a display
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_trig_activity(lv_disp_t * disp);
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Clean any CPU cache that is related to the display.
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_clean_dcache(lv_disp_t * disp);
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Temporarily enable and disable the invalidation of the display.
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param en true: enable invalidation; false: invalidation
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_enable_invalidation(lv_disp_t * disp, bool en);
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get display invalidation is enabled.
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return return true if invalidation is enabled
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** bool lv_disp_is_invalidation_enabled(lv_disp_t * disp);
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get a pointer to the screen refresher timer to
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * modify its parameters with `lv_timer_...` functions.
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the display refresher timer. (NULL on error)
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_timer_t * _lv_disp_get_refr_timer(lv_disp_t * disp);
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*------------------------------------------------
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * To improve backward compatibility
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Recommended only if you have one display
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *------------------------------------------------*/
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the active screen of the default display
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** static inline lv_obj_t * lv_scr_act(void)
  80              		.loc 2 182 26 view .LVU14
  81              	.LBB15:
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     return lv_disp_get_scr_act(lv_disp_get_default());
  82              		.loc 2 184 5 view .LVU15
  83              		.loc 2 184 12 is_stmt 0 view .LVU16
  84 0002 FFF7FEFF 		bl	lv_disp_get_default
  85              	.LVL3:
  86 0006 FFF7FEFF 		bl	lv_disp_get_scr_act
  87              	.LVL4:
  88              	.LBE15:
  89              	.LBE14:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s 			page 6


  90              		.loc 1 15 5 view .LVU17
  91 000a 0121     		movs	r1, #1
  92 000c FFF7FEFF 		bl	lv_obj_set_flex_flow
  93              	.LVL5:
  16:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     lv_obj_set_flex_align(lv_scr_act(), LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_C
  94              		.loc 1 16 5 is_stmt 1 view .LVU18
  95              	.LBB16:
  96              	.LBI16:
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
  97              		.loc 2 182 26 view .LVU19
  98              	.LBB17:
  99              		.loc 2 184 5 view .LVU20
 100              		.loc 2 184 12 is_stmt 0 view .LVU21
 101 0010 FFF7FEFF 		bl	lv_disp_get_default
 102              	.LVL6:
 103 0014 FFF7FEFF 		bl	lv_disp_get_scr_act
 104              	.LVL7:
 105              	.LBE17:
 106              	.LBE16:
 107              		.loc 1 16 5 view .LVU22
 108 0018 0223     		movs	r3, #2
 109 001a 1A46     		mov	r2, r3
 110 001c 1946     		mov	r1, r3
 111 001e FFF7FEFF 		bl	lv_obj_set_flex_align
 112              	.LVL8:
  17:lvgl/examples/widgets/switch/lv_example_switch_1.c **** 
  18:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     lv_obj_t * sw;
 113              		.loc 1 18 5 is_stmt 1 view .LVU23
  19:lvgl/examples/widgets/switch/lv_example_switch_1.c **** 
  20:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     sw = lv_switch_create(lv_scr_act());
 114              		.loc 1 20 5 view .LVU24
 115              	.LBB18:
 116              	.LBI18:
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 117              		.loc 2 182 26 view .LVU25
 118              	.LBB19:
 119              		.loc 2 184 5 view .LVU26
 120              		.loc 2 184 12 is_stmt 0 view .LVU27
 121 0022 FFF7FEFF 		bl	lv_disp_get_default
 122              	.LVL9:
 123 0026 FFF7FEFF 		bl	lv_disp_get_scr_act
 124              	.LVL10:
 125              	.LBE19:
 126              	.LBE18:
 127              		.loc 1 20 10 view .LVU28
 128 002a FFF7FEFF 		bl	lv_switch_create
 129              	.LVL11:
  21:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     lv_obj_add_event_cb(sw, event_handler, LV_EVENT_ALL, NULL);
 130              		.loc 1 21 5 is_stmt 1 view .LVU29
 131 002e 1B4C     		ldr	r4, .L5
 132 0030 0023     		movs	r3, #0
 133 0032 1A46     		mov	r2, r3
 134 0034 2146     		mov	r1, r4
 135 0036 FFF7FEFF 		bl	lv_obj_add_event_cb
 136              	.LVL12:
  22:lvgl/examples/widgets/switch/lv_example_switch_1.c **** 
  23:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     sw = lv_switch_create(lv_scr_act());
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s 			page 7


 137              		.loc 1 23 5 view .LVU30
 138              	.LBB20:
 139              	.LBI20:
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 140              		.loc 2 182 26 view .LVU31
 141              	.LBB21:
 142              		.loc 2 184 5 view .LVU32
 143              		.loc 2 184 12 is_stmt 0 view .LVU33
 144 003a FFF7FEFF 		bl	lv_disp_get_default
 145              	.LVL13:
 146 003e FFF7FEFF 		bl	lv_disp_get_scr_act
 147              	.LVL14:
 148              	.LBE21:
 149              	.LBE20:
 150              		.loc 1 23 10 view .LVU34
 151 0042 FFF7FEFF 		bl	lv_switch_create
 152              	.LVL15:
 153 0046 0546     		mov	r5, r0
 154              	.LVL16:
  24:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     lv_obj_add_state(sw, LV_STATE_CHECKED);
 155              		.loc 1 24 5 is_stmt 1 view .LVU35
 156 0048 0121     		movs	r1, #1
 157 004a FFF7FEFF 		bl	lv_obj_add_state
 158              	.LVL17:
  25:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     lv_obj_add_event_cb(sw, event_handler, LV_EVENT_ALL, NULL);
 159              		.loc 1 25 5 view .LVU36
 160 004e 0023     		movs	r3, #0
 161 0050 1A46     		mov	r2, r3
 162 0052 2146     		mov	r1, r4
 163 0054 2846     		mov	r0, r5
 164 0056 FFF7FEFF 		bl	lv_obj_add_event_cb
 165              	.LVL18:
  26:lvgl/examples/widgets/switch/lv_example_switch_1.c **** 
  27:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     sw = lv_switch_create(lv_scr_act());
 166              		.loc 1 27 5 view .LVU37
 167              	.LBB22:
 168              	.LBI22:
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 169              		.loc 2 182 26 view .LVU38
 170              	.LBB23:
 171              		.loc 2 184 5 view .LVU39
 172              		.loc 2 184 12 is_stmt 0 view .LVU40
 173 005a FFF7FEFF 		bl	lv_disp_get_default
 174              	.LVL19:
 175 005e FFF7FEFF 		bl	lv_disp_get_scr_act
 176              	.LVL20:
 177              	.LBE23:
 178              	.LBE22:
 179              		.loc 1 27 10 view .LVU41
 180 0062 FFF7FEFF 		bl	lv_switch_create
 181              	.LVL21:
 182 0066 0546     		mov	r5, r0
 183              	.LVL22:
  28:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     lv_obj_add_state(sw, LV_STATE_DISABLED);
 184              		.loc 1 28 5 is_stmt 1 view .LVU42
 185 0068 8021     		movs	r1, #128
 186 006a FFF7FEFF 		bl	lv_obj_add_state
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s 			page 8


 187              	.LVL23:
  29:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     lv_obj_add_event_cb(sw, event_handler, LV_EVENT_ALL, NULL);
 188              		.loc 1 29 5 view .LVU43
 189 006e 0023     		movs	r3, #0
 190 0070 1A46     		mov	r2, r3
 191 0072 2146     		mov	r1, r4
 192 0074 2846     		mov	r0, r5
 193 0076 FFF7FEFF 		bl	lv_obj_add_event_cb
 194              	.LVL24:
  30:lvgl/examples/widgets/switch/lv_example_switch_1.c **** 
  31:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     sw = lv_switch_create(lv_scr_act());
 195              		.loc 1 31 5 view .LVU44
 196              	.LBB24:
 197              	.LBI24:
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 198              		.loc 2 182 26 view .LVU45
 199              	.LBB25:
 200              		.loc 2 184 5 view .LVU46
 201              		.loc 2 184 12 is_stmt 0 view .LVU47
 202 007a FFF7FEFF 		bl	lv_disp_get_default
 203              	.LVL25:
 204 007e FFF7FEFF 		bl	lv_disp_get_scr_act
 205              	.LVL26:
 206              	.LBE25:
 207              	.LBE24:
 208              		.loc 1 31 10 view .LVU48
 209 0082 FFF7FEFF 		bl	lv_switch_create
 210              	.LVL27:
 211 0086 0546     		mov	r5, r0
 212              	.LVL28:
  32:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     lv_obj_add_state(sw, LV_STATE_CHECKED | LV_STATE_DISABLED);
 213              		.loc 1 32 5 is_stmt 1 view .LVU49
 214 0088 8121     		movs	r1, #129
 215 008a FFF7FEFF 		bl	lv_obj_add_state
 216              	.LVL29:
  33:lvgl/examples/widgets/switch/lv_example_switch_1.c ****     lv_obj_add_event_cb(sw, event_handler, LV_EVENT_ALL, NULL);
 217              		.loc 1 33 5 view .LVU50
 218 008e 0023     		movs	r3, #0
 219 0090 1A46     		mov	r2, r3
 220 0092 2146     		mov	r1, r4
 221 0094 2846     		mov	r0, r5
 222 0096 FFF7FEFF 		bl	lv_obj_add_event_cb
 223              	.LVL30:
  34:lvgl/examples/widgets/switch/lv_example_switch_1.c **** }
 224              		.loc 1 34 1 is_stmt 0 view .LVU51
 225 009a 38BD     		pop	{r3, r4, r5, pc}
 226              	.LVL31:
 227              	.L6:
 228              		.loc 1 34 1 view .LVU52
 229              		.align	2
 230              	.L5:
 231 009c 00000000 		.word	event_handler
 232              		.cfi_endproc
 233              	.LFE205:
 235              		.text
 236              	.Letext0:
 237              		.file 3 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s 			page 9


 238              		.file 4 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 239              		.file 5 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_area.h"
 240              		.file 6 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_color.h"
 241              		.file 7 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style.h"
 242              		.file 8 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj.h"
 243              		.file 9 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_ll.h"
 244              		.file 10 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_group.h"
 245              		.file 11 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_scroll.h"
 246              		.file 12 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_style.h"
 247              		.file 13 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_class.h"
 248              		.file 14 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_event.h"
 249              		.file 15 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/extra/layouts/flex/lv_flex.h"
 250              		.file 16 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/hal/lv_hal_disp.h"
 251              		.file 17 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/widgets/lv_switch.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s 			page 10


DEFINED SYMBOLS
                            *ABS*:00000000 lv_example_switch_1.c
C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s:19     .text.event_handler:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s:24     .text.event_handler:00000000 event_handler
C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s:58     .text.lv_example_switch_1:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s:64     .text.lv_example_switch_1:00000000 lv_example_switch_1
C:\Users\OSD\AppData\Local\Temp\ccVnKurM.s:231    .text.lv_example_switch_1:0000009c $d

UNDEFINED SYMBOLS
lv_event_get_code
lv_event_get_target
lv_disp_get_default
lv_disp_get_scr_act
lv_obj_set_flex_flow
lv_obj_set_flex_align
lv_switch_create
lv_obj_add_event_cb
lv_obj_add_state
