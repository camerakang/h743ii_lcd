ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_example_roller_3.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.mask_event_cb,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	mask_event_cb:
  25              	.LVL0:
  26              	.LFB204:
  27              		.file 1 "lvgl/examples/widgets/roller/lv_example_roller_3.c"
   1:lvgl/examples/widgets/roller/lv_example_roller_3.c **** #include "../../lv_examples.h"
   2:lvgl/examples/widgets/roller/lv_example_roller_3.c **** #if LV_USE_ROLLER && LV_DRAW_COMPLEX && LV_BUILD_EXAMPLES
   3:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
   4:lvgl/examples/widgets/roller/lv_example_roller_3.c **** static void mask_event_cb(lv_event_t * e)
   5:lvgl/examples/widgets/roller/lv_example_roller_3.c **** {
  28              		.loc 1 5 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 5 1 is_stmt 0 view .LVU1
  33 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  34              		.cfi_def_cfa_offset 24
  35              		.cfi_offset 4, -24
  36              		.cfi_offset 5, -20
  37              		.cfi_offset 6, -16
  38              		.cfi_offset 7, -12
  39              		.cfi_offset 8, -8
  40              		.cfi_offset 14, -4
  41 0004 86B0     		sub	sp, sp, #24
  42              		.cfi_def_cfa_offset 48
  43 0006 0546     		mov	r5, r0
   6:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_event_code_t code = lv_event_get_code(e);
  44              		.loc 1 6 5 is_stmt 1 view .LVU2
  45              		.loc 1 6 28 is_stmt 0 view .LVU3
  46 0008 FFF7FEFF 		bl	lv_event_get_code
  47              	.LVL1:
  48              		.loc 1 6 28 view .LVU4
  49 000c 0446     		mov	r4, r0
  50              	.LVL2:
   7:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_obj_t * obj = lv_event_get_target(e);
  51              		.loc 1 7 5 is_stmt 1 view .LVU5
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 2


  52              		.loc 1 7 22 is_stmt 0 view .LVU6
  53 000e 2846     		mov	r0, r5
  54 0010 FFF7FEFF 		bl	lv_event_get_target
  55              	.LVL3:
   8:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
   9:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     static int16_t mask_top_id = -1;
  56              		.loc 1 9 5 is_stmt 1 view .LVU7
  10:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     static int16_t mask_bottom_id = -1;
  57              		.loc 1 10 5 view .LVU8
  11:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  12:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     if(code == LV_EVENT_COVER_CHECK) {
  58              		.loc 1 12 5 view .LVU9
  59              		.loc 1 12 7 is_stmt 0 view .LVU10
  60 0014 122C     		cmp	r4, #18
  61 0016 07D0     		beq	.L7
  62 0018 0646     		mov	r6, r0
  13:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_event_set_cover_res(e, LV_COVER_RES_MASKED);
  14:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  15:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     }
  16:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     else if(code == LV_EVENT_DRAW_MAIN_BEGIN) {
  63              		.loc 1 16 10 is_stmt 1 view .LVU11
  64              		.loc 1 16 12 is_stmt 0 view .LVU12
  65 001a 142C     		cmp	r4, #20
  66 001c 09D0     		beq	.L8
  17:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         /* add mask */
  18:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
  19:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
  20:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_coord_t font_h = lv_font_get_line_height(font);
  21:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  22:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_area_t roller_coords;
  23:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_obj_get_coords(obj, &roller_coords);
  24:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  25:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_area_t rect_area;
  26:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.x1 = roller_coords.x1;
  27:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.x2 = roller_coords.x2;
  28:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y1 = roller_coords.y1;
  29:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y2 = roller_coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
  30:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  31:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_fade_param_t * fade_mask_top = lv_mem_buf_get(sizeof(lv_draw_mask_fade_param_t
  32:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_fade_init(fade_mask_top, &rect_area, LV_OPA_TRANSP, rect_area.y1, LV_OPA_COVER
  33:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         mask_top_id = lv_draw_mask_add(fade_mask_top, NULL);
  34:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  35:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y1 = rect_area.y2 + font_h + line_space - 1;
  36:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y2 = roller_coords.y2;
  37:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  38:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_fade_param_t * fade_mask_bottom = lv_mem_buf_get(sizeof(lv_draw_mask_fade_para
  39:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_fade_init(fade_mask_bottom, &rect_area, LV_OPA_COVER, rect_area.y1, LV_OPA_TRA
  40:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         mask_bottom_id = lv_draw_mask_add(fade_mask_bottom, NULL);
  41:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  42:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     }
  43:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     else if(code == LV_EVENT_DRAW_POST_END) {
  67              		.loc 1 43 10 is_stmt 1 view .LVU13
  68              		.loc 1 43 12 is_stmt 0 view .LVU14
  69 001e 192C     		cmp	r4, #25
  70 0020 6CD0     		beq	.L9
  71              	.LVL4:
  72              	.L1:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 3


  44:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_fade_param_t * fade_mask_top = lv_draw_mask_remove_id(mask_top_id);
  45:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_fade_param_t * fade_mask_bottom = lv_draw_mask_remove_id(mask_bottom_id);
  46:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_free_param(fade_mask_top);
  47:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_free_param(fade_mask_bottom);
  48:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_mem_buf_release(fade_mask_top);
  49:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_mem_buf_release(fade_mask_bottom);
  50:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         mask_top_id = -1;
  51:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         mask_bottom_id = -1;
  52:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     }
  53:lvgl/examples/widgets/roller/lv_example_roller_3.c **** }
  73              		.loc 1 53 1 view .LVU15
  74 0022 06B0     		add	sp, sp, #24
  75              		.cfi_remember_state
  76              		.cfi_def_cfa_offset 24
  77              		@ sp needed
  78 0024 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
  79              	.LVL5:
  80              	.L7:
  81              		.cfi_restore_state
  13:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  82              		.loc 1 13 9 is_stmt 1 view .LVU16
  83 0028 0221     		movs	r1, #2
  84 002a 2846     		mov	r0, r5
  85              	.LVL6:
  13:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  86              		.loc 1 13 9 is_stmt 0 view .LVU17
  87 002c FFF7FEFF 		bl	lv_event_set_cover_res
  88              	.LVL7:
  89 0030 F7E7     		b	.L1
  90              	.LVL8:
  91              	.L8:
  92              	.LBB24:
  18:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
  93              		.loc 1 18 9 is_stmt 1 view .LVU18
  94              	.LBB25:
  95              	.LBI25:
  96              		.file 2 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_style_gen.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_min_width(const struct _lv_obj_t * obj, uint32_t part)
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_max_width(const struct _lv_obj_t * obj, uint32_t part)
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 4


  21:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_min_height(const struct _lv_obj_t * obj, uint32_t part)
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_max_height(const struct _lv_obj_t * obj, uint32_t part)
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_x(const struct _lv_obj_t * obj, uint32_t part)
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_y(const struct _lv_obj_t * obj, uint32_t part)
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_align_t lv_obj_get_style_align(const struct _lv_obj_t * obj, uint32_t part)
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_align_t)v.num;
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_transform_width(const struct _lv_obj_t * obj, uint32_t pa
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_transform_height(const struct _lv_obj_t * obj, uint32_t p
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_translate_x(const struct _lv_obj_t * obj, uint32_t part)
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_translate_y(const struct _lv_obj_t * obj, uint32_t part)
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 5


  78:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_transform_zoom(const struct _lv_obj_t * obj, uint32_t par
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_transform_angle(const struct _lv_obj_t * obj, uint32_t pa
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_transform_pivot_x(const struct _lv_obj_t * obj, uint32_t 
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_transform_pivot_y(const struct _lv_obj_t * obj, uint32_t 
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_pad_bottom(const struct _lv_obj_t * obj, uint32_t part)
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_pad_row(const struct _lv_obj_t * obj, uint32_t part)
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 6


 135:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_bg_color(const struct _lv_obj_t * obj, uint32_t part)
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_bg_color_filtered(const struct _lv_obj_t * obj, uint32_t 
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, par
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_opa_t lv_obj_get_style_bg_opa(const struct _lv_obj_t * obj, uint32_t part)
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_opa_t)v.num;
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_bg_grad_color(const struct _lv_obj_t * obj, uint32_t part
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR);
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_bg_grad_color_filtered(const struct _lv_obj_t * obj, uint
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, par
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_grad_dir_t lv_obj_get_style_bg_grad_dir(const struct _lv_obj_t * obj, uint32_t par
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_grad_dir_t)v.num;
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_bg_main_stop(const struct _lv_obj_t * obj, uint32_t part)
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_bg_grad_stop(const struct _lv_obj_t * obj, uint32_t part)
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline const lv_grad_dsc_t * lv_obj_get_style_bg_grad(const struct _lv_obj_t * obj, uint32_t
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (const lv_grad_dsc_t *)v.ptr;
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 7


 192:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_dither_mode_t lv_obj_get_style_bg_dither_mode(const struct _lv_obj_t * obj, uint32
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_dither_mode_t)v.num;
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline const void * lv_obj_get_style_bg_img_src(const struct _lv_obj_t * obj, uint32_t part)
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 202:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (const void *)v.ptr;
 203:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 204:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 205:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_opa_t lv_obj_get_style_bg_img_opa(const struct _lv_obj_t * obj, uint32_t part)
 206:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 207:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 208:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_opa_t)v.num;
 209:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 210:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 211:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_bg_img_recolor(const struct _lv_obj_t * obj, uint32_t par
 212:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 213:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR);
 214:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 215:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 216:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 217:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_bg_img_recolor_filtered(const struct _lv_obj_t * obj, uin
 218:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 219:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, par
 220:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 221:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 222:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 223:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_opa_t lv_obj_get_style_bg_img_recolor_opa(const struct _lv_obj_t * obj, uint32_t p
 224:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 225:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 226:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_opa_t)v.num;
 227:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 228:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 229:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline bool lv_obj_get_style_bg_img_tiled(const struct _lv_obj_t * obj, uint32_t part)
 230:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 231:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 232:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (bool)v.num;
 233:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 234:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 235:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_border_color(const struct _lv_obj_t * obj, uint32_t part)
 236:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 237:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 238:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 239:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 240:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 241:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_border_color_filtered(const struct _lv_obj_t * obj, uint3
 242:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 243:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, par
 244:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 245:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 246:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 247:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_opa_t lv_obj_get_style_border_opa(const struct _lv_obj_t * obj, uint32_t part)
 248:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 8


 249:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 250:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_opa_t)v.num;
 251:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 252:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 253:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
 254:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 255:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 256:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 257:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 258:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_border_side_t lv_obj_get_style_border_side(const struct _lv_obj_t * obj, uint32_t 
 260:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 261:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 262:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_border_side_t)v.num;
 263:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 264:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 265:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline bool lv_obj_get_style_border_post(const struct _lv_obj_t * obj, uint32_t part)
 266:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 267:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 268:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (bool)v.num;
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 270:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 271:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_outline_width(const struct _lv_obj_t * obj, uint32_t part
 272:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 273:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 274:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 275:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 276:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 277:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_outline_color(const struct _lv_obj_t * obj, uint32_t part
 278:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 279:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR);
 280:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 281:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 282:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 283:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_outline_color_filtered(const struct _lv_obj_t * obj, uint
 284:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 285:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, par
 286:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 287:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 288:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 289:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_opa_t lv_obj_get_style_outline_opa(const struct _lv_obj_t * obj, uint32_t part)
 290:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 291:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 292:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_opa_t)v.num;
 293:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 294:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 295:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_outline_pad(const struct _lv_obj_t * obj, uint32_t part)
 296:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 297:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 298:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 299:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 300:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 301:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_shadow_width(const struct _lv_obj_t * obj, uint32_t part)
 302:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 303:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 304:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 305:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 9


 306:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 307:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_shadow_ofs_x(const struct _lv_obj_t * obj, uint32_t part)
 308:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 309:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 310:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 311:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 312:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 313:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_shadow_ofs_y(const struct _lv_obj_t * obj, uint32_t part)
 314:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 315:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 316:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 317:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 318:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 319:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_shadow_spread(const struct _lv_obj_t * obj, uint32_t part
 320:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 321:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 322:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 323:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 324:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 325:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_shadow_color(const struct _lv_obj_t * obj, uint32_t part)
 326:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 327:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 328:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 329:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 330:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 331:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_shadow_color_filtered(const struct _lv_obj_t * obj, uint3
 332:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 333:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, par
 334:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 335:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 336:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 337:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_opa_t lv_obj_get_style_shadow_opa(const struct _lv_obj_t * obj, uint32_t part)
 338:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 339:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 340:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_opa_t)v.num;
 341:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 342:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 343:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_opa_t lv_obj_get_style_img_opa(const struct _lv_obj_t * obj, uint32_t part)
 344:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 345:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 346:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_opa_t)v.num;
 347:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 348:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 349:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_img_recolor(const struct _lv_obj_t * obj, uint32_t part)
 350:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 351:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR);
 352:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 353:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 354:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 355:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_img_recolor_filtered(const struct _lv_obj_t * obj, uint32
 356:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 357:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, par
 358:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 359:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 360:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 361:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_opa_t lv_obj_get_style_img_recolor_opa(const struct _lv_obj_t * obj, uint32_t part
 362:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 10


 363:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_OPA);
 364:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_opa_t)v.num;
 365:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 366:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 367:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_line_width(const struct _lv_obj_t * obj, uint32_t part)
 368:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 369:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 370:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 371:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 372:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 373:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_line_dash_width(const struct _lv_obj_t * obj, uint32_t pa
 374:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 375:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_WIDTH);
 376:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 377:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 378:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 379:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_line_dash_gap(const struct _lv_obj_t * obj, uint32_t part
 380:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 381:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_GAP);
 382:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 383:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 384:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 385:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline bool lv_obj_get_style_line_rounded(const struct _lv_obj_t * obj, uint32_t part)
 386:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 387:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_ROUNDED);
 388:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (bool)v.num;
 389:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 390:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 391:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_line_color(const struct _lv_obj_t * obj, uint32_t part)
 392:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 393:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_COLOR);
 394:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 395:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 396:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 397:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_line_color_filtered(const struct _lv_obj_t * obj, uint32_
 398:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 399:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, par
 400:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 401:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 402:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 403:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_opa_t lv_obj_get_style_line_opa(const struct _lv_obj_t * obj, uint32_t part)
 404:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 405:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_OPA);
 406:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_opa_t)v.num;
 407:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 408:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 409:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
 410:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 411:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 412:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 413:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 414:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 415:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline bool lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
 416:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 417:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 418:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (bool)v.num;
 419:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 11


 420:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 421:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_arc_color(const struct _lv_obj_t * obj, uint32_t part)
 422:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 423:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_COLOR);
 424:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 425:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 426:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 427:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_arc_color_filtered(const struct _lv_obj_t * obj, uint32_t
 428:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 429:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, par
 430:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 431:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 432:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 433:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_opa_t lv_obj_get_style_arc_opa(const struct _lv_obj_t * obj, uint32_t part)
 434:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 435:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_OPA);
 436:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_opa_t)v.num;
 437:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 438:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 439:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline const void * lv_obj_get_style_arc_img_src(const struct _lv_obj_t * obj, uint32_t part
 440:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 441:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_IMG_SRC);
 442:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (const void *)v.ptr;
 443:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 444:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 445:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_text_color(const struct _lv_obj_t * obj, uint32_t part)
 446:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 447:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
 448:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 449:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 450:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 451:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_color_t lv_obj_get_style_text_color_filtered(const struct _lv_obj_t * obj, uint32_
 452:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 453:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, par
 454:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return v.color;
 455:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 456:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 457:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_opa_t lv_obj_get_style_text_opa(const struct _lv_obj_t * obj, uint32_t part)
 458:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 459:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 460:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_opa_t)v.num;
 461:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 462:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 463:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t p
  97              		.loc 2 463 33 view .LVU19
  98              	.LBB26:
 464:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 465:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
  99              		.loc 2 465 5 view .LVU20
 100              		.loc 2 465 26 is_stmt 0 view .LVU21
 101 0032 5722     		movs	r2, #87
 102 0034 0021     		movs	r1, #0
 103 0036 FFF7FEFF 		bl	lv_obj_get_style_prop
 104              	.LVL9:
 105              		.loc 2 465 26 view .LVU22
 106 003a 0546     		mov	r5, r0
 107              	.LVL10:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 12


 466:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (const lv_font_t *)v.ptr;
 108              		.loc 2 466 5 is_stmt 1 view .LVU23
 109              		.loc 2 466 5 is_stmt 0 view .LVU24
 110              	.LBE26:
 111              	.LBE25:
  19:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_coord_t font_h = lv_font_get_line_height(font);
 112              		.loc 1 19 9 is_stmt 1 view .LVU25
 113              	.LBB27:
 114              	.LBI27:
 467:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 468:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 469:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_text_letter_space(const struct _lv_obj_t * obj, uint32_t 
 470:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 471:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 472:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 473:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** }
 474:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** 
 475:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t pa
 115              		.loc 2 475 26 view .LVU26
 116              	.LBB28:
 476:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h **** {
 477:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 117              		.loc 2 477 5 view .LVU27
 118              		.loc 2 477 26 is_stmt 0 view .LVU28
 119 003c 5922     		movs	r2, #89
 120 003e 0021     		movs	r1, #0
 121 0040 3046     		mov	r0, r6
 122              	.LVL11:
 123              		.loc 2 477 26 view .LVU29
 124 0042 FFF7FEFF 		bl	lv_obj_get_style_prop
 125              	.LVL12:
 126 0046 0446     		mov	r4, r0
 127              	.LVL13:
 478:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 128              		.loc 2 478 5 is_stmt 1 view .LVU30
 129              		.loc 2 478 12 is_stmt 0 view .LVU31
 130 0048 0FFA80F8 		sxth	r8, r0
 131              	.LVL14:
 132              		.loc 2 478 12 view .LVU32
 133              	.LBE28:
 134              	.LBE27:
  20:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 135              		.loc 1 20 9 is_stmt 1 view .LVU33
 136              	.LBB29:
 137              	.LBI29:
 138              		.file 3 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\font\\lv_font.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @file lv_font.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** #ifndef LV_FONT_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** #define LV_FONT_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** #endif
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 13


  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** #include "../lv_conf_internal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** #include <stdint.h>
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** #include <stddef.h>
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** #include <stdbool.h>
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** #include "lv_symbol_def.h"
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** #include "../misc/lv_area.h"
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /*********************
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  *      DEFINES
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  *********************/
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /* imgfont identifier */
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** #define LV_IMGFONT_BPP 9
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /**********************
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  *      TYPEDEFS
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  **********************/
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /*------------------
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * General types
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  *-----------------*/
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** struct _lv_font_t;
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /** Describes the properties of a glyph.*/
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** typedef struct {
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     const struct _lv_font_t *
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****         resolved_font; /**< Pointer to a font where the glyph was actually found after handling fal
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     uint16_t adv_w; /**< The glyph needs this space. Draw the next glyph after this width.*/
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     uint16_t box_w; /**< Width of the glyph's bounding box*/
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     uint16_t box_h; /**< Height of the glyph's bounding box*/
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     int16_t ofs_x;  /**< x offset of the bounding box*/
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     int16_t ofs_y;  /**< y offset of the bounding box*/
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     uint8_t bpp: 4;  /**< Bit-per-pixel: 1, 2, 4, 8*/
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     uint8_t is_placeholder: 1; /** Glyph is missing. But placeholder will still be displayed */
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** } lv_font_glyph_dsc_t;
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /** The bitmaps might be upscaled by 3 to achieve subpixel rendering.*/
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** enum {
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     LV_FONT_SUBPX_NONE,
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     LV_FONT_SUBPX_HOR,
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     LV_FONT_SUBPX_VER,
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     LV_FONT_SUBPX_BOTH,
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** };
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** typedef uint8_t lv_font_subpx_t;
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /** Describe the properties of a font*/
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** typedef struct _lv_font_t {
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     /** Get a glyph's descriptor from a font*/
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     bool (*get_glyph_dsc)(const struct _lv_font_t *, lv_font_glyph_dsc_t *, uint32_t letter, uint32
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     /** Get a glyph's bitmap from a font*/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 14


  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     const uint8_t * (*get_glyph_bitmap)(const struct _lv_font_t *, uint32_t);
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     /*Pointer to the font in a font pack (must have the same line height)*/
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     lv_coord_t line_height;         /**< The real line height where any text fits*/
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     lv_coord_t base_line;           /**< Base line measured from the top of the line_height*/
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     uint8_t subpx  : 2;             /**< An element of `lv_font_subpx_t`*/
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     int8_t underline_position;      /**< Distance between the top of the underline and base line (<
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     int8_t underline_thickness;     /**< Thickness of the underline*/
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     const void * dsc;               /**< Store implementation specific or run_time data or caching 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     const struct _lv_font_t * fallback;   /**< Fallback font for missing glyph. Resolved recursivel
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** #if LV_USE_USER_DATA
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     void * user_data;               /**< Custom user data for font.*/
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** #endif
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** } lv_font_t;
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /**********************
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * GLOBAL PROTOTYPES
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  **********************/
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /**
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * Return with the bitmap of a font.
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @param font_p pointer to a font
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @param letter a UNICODE character code
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @return pointer to the bitmap of the letter
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  */
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter);
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /**
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * Get the descriptor of a glyph
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @param font_p pointer to font
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @param dsc_out store the result descriptor here
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @param letter a UNICODE letter code
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @param letter_next the next letter after `letter`. Used for kerning
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @return true: descriptor is successfully loaded into `dsc_out`.
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  *         false: the letter was not found, no data is loaded to `dsc_out`
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  */
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****                            uint32_t letter_next);
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /**
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * Get the width of a glyph with kerning
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @param font pointer to a font
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @param letter a UNICODE letter
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @param letter_next the next letter after `letter`. Used for kerning
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @return the width of the glyph
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  */
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next);
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** 
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** /**
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * Get the line height of a font. All characters fit into this height
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @param font_p pointer to a font
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  * @return the height of a font
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****  */
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
 139              		.loc 3 124 26 view .LVU34
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 15


 140              	.LBB30:
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h **** {
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\font\lv_font.h ****     return font_p->line_height;
 141              		.loc 3 126 5 view .LVU35
 142              		.loc 3 126 18 is_stmt 0 view .LVU36
 143 004c B5F90850 		ldrsh	r5, [r5, #8]
 144              	.LVL15:
 145              		.loc 3 126 18 view .LVU37
 146              	.LBE30:
 147              	.LBE29:
  22:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_obj_get_coords(obj, &roller_coords);
 148              		.loc 1 22 9 is_stmt 1 view .LVU38
  23:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 149              		.loc 1 23 9 view .LVU39
 150 0050 02A9     		add	r1, sp, #8
 151 0052 3046     		mov	r0, r6
 152 0054 FFF7FEFF 		bl	lv_obj_get_coords
 153              	.LVL16:
  25:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.x1 = roller_coords.x1;
 154              		.loc 1 25 9 view .LVU40
  26:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.x2 = roller_coords.x2;
 155              		.loc 1 26 9 view .LVU41
  26:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.x2 = roller_coords.x2;
 156              		.loc 1 26 37 is_stmt 0 view .LVU42
 157 0058 BDF90830 		ldrsh	r3, [sp, #8]
  26:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.x2 = roller_coords.x2;
 158              		.loc 1 26 22 view .LVU43
 159 005c ADF81030 		strh	r3, [sp, #16]	@ movhi
  27:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y1 = roller_coords.y1;
 160              		.loc 1 27 9 is_stmt 1 view .LVU44
  27:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y1 = roller_coords.y1;
 161              		.loc 1 27 37 is_stmt 0 view .LVU45
 162 0060 BDF90C30 		ldrsh	r3, [sp, #12]
  27:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y1 = roller_coords.y1;
 163              		.loc 1 27 22 view .LVU46
 164 0064 ADF81430 		strh	r3, [sp, #20]	@ movhi
  28:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y2 = roller_coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 165              		.loc 1 28 9 is_stmt 1 view .LVU47
  28:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y2 = roller_coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 166              		.loc 1 28 37 is_stmt 0 view .LVU48
 167 0068 BDF90A20 		ldrsh	r2, [sp, #10]
  28:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y2 = roller_coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 168              		.loc 1 28 22 view .LVU49
 169 006c ADF81220 		strh	r2, [sp, #18]	@ movhi
  29:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 170              		.loc 1 29 9 is_stmt 1 view .LVU50
  29:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 171              		.loc 1 29 37 is_stmt 0 view .LVU51
 172 0070 97B2     		uxth	r7, r2
  29:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 173              		.loc 1 29 44 view .LVU52
 174 0072 3046     		mov	r0, r6
 175 0074 FFF7FEFF 		bl	lv_obj_get_height
 176              	.LVL17:
  29:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 177              		.loc 1 29 67 view .LVU53
 178 0078 421B     		subs	r2, r0, r5
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 16


  29:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 179              		.loc 1 29 90 view .LVU54
 180 007a B2EB0802 		subs	r2, r2, r8
 181 007e 3BD4     		bmi	.L10
 182              	.L5:
  29:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 183              		.loc 1 29 41 view .LVU55
 184 0080 07EB6202 		add	r2, r7, r2, asr #1
  29:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 185              		.loc 1 29 22 view .LVU56
 186 0084 ADF81620 		strh	r2, [sp, #22]	@ movhi
  31:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_fade_init(fade_mask_top, &rect_area, LV_OPA_TRANSP, rect_area.y1, LV_OPA_COVER
 187              		.loc 1 31 9 is_stmt 1 view .LVU57
  31:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_fade_init(fade_mask_top, &rect_area, LV_OPA_TRANSP, rect_area.y1, LV_OPA_COVER
 188              		.loc 1 31 53 is_stmt 0 view .LVU58
 189 0088 1820     		movs	r0, #24
 190 008a FFF7FEFF 		bl	lv_mem_buf_get
 191              	.LVL18:
 192 008e 0746     		mov	r7, r0
 193              	.LVL19:
  32:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         mask_top_id = lv_draw_mask_add(fade_mask_top, NULL);
 194              		.loc 1 32 9 is_stmt 1 view .LVU59
 195 0090 BDF91630 		ldrsh	r3, [sp, #22]
 196 0094 0193     		str	r3, [sp, #4]
 197 0096 FF26     		movs	r6, #255
 198              	.LVL20:
  32:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         mask_top_id = lv_draw_mask_add(fade_mask_top, NULL);
 199              		.loc 1 32 9 is_stmt 0 view .LVU60
 200 0098 0096     		str	r6, [sp]
 201 009a BDF91230 		ldrsh	r3, [sp, #18]
 202 009e 0022     		movs	r2, #0
 203 00a0 04A9     		add	r1, sp, #16
 204 00a2 FFF7FEFF 		bl	lv_draw_mask_fade_init
 205              	.LVL21:
  33:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 206              		.loc 1 33 9 is_stmt 1 view .LVU61
  33:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 207              		.loc 1 33 23 is_stmt 0 view .LVU62
 208 00a6 0021     		movs	r1, #0
 209 00a8 3846     		mov	r0, r7
 210 00aa FFF7FEFF 		bl	lv_draw_mask_add
 211              	.LVL22:
  33:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 212              		.loc 1 33 21 view .LVU63
 213 00ae 224B     		ldr	r3, .L11
 214 00b0 1880     		strh	r0, [r3]	@ movhi
  35:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y2 = roller_coords.y2;
 215              		.loc 1 35 9 is_stmt 1 view .LVU64
  35:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y2 = roller_coords.y2;
 216              		.loc 1 35 33 is_stmt 0 view .LVU65
 217 00b2 BDF81630 		ldrh	r3, [sp, #22]
  35:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y2 = roller_coords.y2;
 218              		.loc 1 35 37 view .LVU66
 219 00b6 2B44     		add	r3, r3, r5
  35:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y2 = roller_coords.y2;
 220              		.loc 1 35 46 view .LVU67
 221 00b8 14FA83F3 		uxtah	r3, r4, r3
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 17


 222 00bc 9BB2     		uxth	r3, r3
  35:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y2 = roller_coords.y2;
 223              		.loc 1 35 59 view .LVU68
 224 00be 013B     		subs	r3, r3, #1
  35:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         rect_area.y2 = roller_coords.y2;
 225              		.loc 1 35 22 view .LVU69
 226 00c0 ADF81230 		strh	r3, [sp, #18]	@ movhi
  36:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 227              		.loc 1 36 9 is_stmt 1 view .LVU70
  36:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 228              		.loc 1 36 37 is_stmt 0 view .LVU71
 229 00c4 BDF90E30 		ldrsh	r3, [sp, #14]
  36:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 230              		.loc 1 36 22 view .LVU72
 231 00c8 ADF81630 		strh	r3, [sp, #22]	@ movhi
  38:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_fade_init(fade_mask_bottom, &rect_area, LV_OPA_COVER, rect_area.y1, LV_OPA_TRA
 232              		.loc 1 38 9 is_stmt 1 view .LVU73
  38:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_fade_init(fade_mask_bottom, &rect_area, LV_OPA_COVER, rect_area.y1, LV_OPA_TRA
 233              		.loc 1 38 56 is_stmt 0 view .LVU74
 234 00cc 1820     		movs	r0, #24
 235 00ce FFF7FEFF 		bl	lv_mem_buf_get
 236              	.LVL23:
 237 00d2 0446     		mov	r4, r0
 238              	.LVL24:
  39:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         mask_bottom_id = lv_draw_mask_add(fade_mask_bottom, NULL);
 239              		.loc 1 39 9 is_stmt 1 view .LVU75
 240 00d4 BDF91630 		ldrsh	r3, [sp, #22]
 241 00d8 0193     		str	r3, [sp, #4]
 242 00da 0025     		movs	r5, #0
 243              	.LVL25:
  39:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         mask_bottom_id = lv_draw_mask_add(fade_mask_bottom, NULL);
 244              		.loc 1 39 9 is_stmt 0 view .LVU76
 245 00dc 0095     		str	r5, [sp]
 246 00de BDF91230 		ldrsh	r3, [sp, #18]
 247 00e2 3246     		mov	r2, r6
 248 00e4 04A9     		add	r1, sp, #16
 249 00e6 FFF7FEFF 		bl	lv_draw_mask_fade_init
 250              	.LVL26:
  40:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 251              		.loc 1 40 9 is_stmt 1 view .LVU77
  40:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 252              		.loc 1 40 26 is_stmt 0 view .LVU78
 253 00ea 2946     		mov	r1, r5
 254 00ec 2046     		mov	r0, r4
 255 00ee FFF7FEFF 		bl	lv_draw_mask_add
 256              	.LVL27:
  40:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 257              		.loc 1 40 24 view .LVU79
 258 00f2 124B     		ldr	r3, .L11+4
 259 00f4 1880     		strh	r0, [r3]	@ movhi
 260              	.LBE24:
 261 00f6 94E7     		b	.L1
 262              	.LVL28:
 263              	.L10:
 264              	.LBB31:
  29:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 265              		.loc 1 29 90 view .LVU80
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 18


 266 00f8 0132     		adds	r2, r2, #1
 267 00fa C1E7     		b	.L5
 268              	.LVL29:
 269              	.L9:
  29:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
 270              		.loc 1 29 90 view .LVU81
 271              	.LBE31:
 272              	.LBB32:
  44:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_fade_param_t * fade_mask_bottom = lv_draw_mask_remove_id(mask_bottom_id);
 273              		.loc 1 44 9 is_stmt 1 view .LVU82
  44:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_fade_param_t * fade_mask_bottom = lv_draw_mask_remove_id(mask_bottom_id);
 274              		.loc 1 44 53 is_stmt 0 view .LVU83
 275 00fc 0E4F     		ldr	r7, .L11
 276 00fe B7F90000 		ldrsh	r0, [r7]
 277              	.LVL30:
  44:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_fade_param_t * fade_mask_bottom = lv_draw_mask_remove_id(mask_bottom_id);
 278              		.loc 1 44 53 view .LVU84
 279 0102 FFF7FEFF 		bl	lv_draw_mask_remove_id
 280              	.LVL31:
 281 0106 0546     		mov	r5, r0
 282              	.LVL32:
  45:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_free_param(fade_mask_top);
 283              		.loc 1 45 9 is_stmt 1 view .LVU85
  45:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_free_param(fade_mask_top);
 284              		.loc 1 45 56 is_stmt 0 view .LVU86
 285 0108 0C4E     		ldr	r6, .L11+4
 286              	.LVL33:
  45:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_free_param(fade_mask_top);
 287              		.loc 1 45 56 view .LVU87
 288 010a B6F90000 		ldrsh	r0, [r6]
 289              	.LVL34:
  45:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_free_param(fade_mask_top);
 290              		.loc 1 45 56 view .LVU88
 291 010e FFF7FEFF 		bl	lv_draw_mask_remove_id
 292              	.LVL35:
 293 0112 0446     		mov	r4, r0
 294              	.LVL36:
  46:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_free_param(fade_mask_bottom);
 295              		.loc 1 46 9 is_stmt 1 view .LVU89
 296 0114 2846     		mov	r0, r5
 297              	.LVL37:
  46:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_draw_mask_free_param(fade_mask_bottom);
 298              		.loc 1 46 9 is_stmt 0 view .LVU90
 299 0116 FFF7FEFF 		bl	lv_draw_mask_free_param
 300              	.LVL38:
  47:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_mem_buf_release(fade_mask_top);
 301              		.loc 1 47 9 is_stmt 1 view .LVU91
 302 011a 2046     		mov	r0, r4
 303 011c FFF7FEFF 		bl	lv_draw_mask_free_param
 304              	.LVL39:
  48:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         lv_mem_buf_release(fade_mask_bottom);
 305              		.loc 1 48 9 view .LVU92
 306 0120 2846     		mov	r0, r5
 307 0122 FFF7FEFF 		bl	lv_mem_buf_release
 308              	.LVL40:
  49:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         mask_top_id = -1;
 309              		.loc 1 49 9 view .LVU93
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 19


 310 0126 2046     		mov	r0, r4
 311 0128 FFF7FEFF 		bl	lv_mem_buf_release
 312              	.LVL41:
  50:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         mask_bottom_id = -1;
 313              		.loc 1 50 9 view .LVU94
  50:lvgl/examples/widgets/roller/lv_example_roller_3.c ****         mask_bottom_id = -1;
 314              		.loc 1 50 21 is_stmt 0 view .LVU95
 315 012c 4FF6FF73 		movw	r3, #65535
 316 0130 3B80     		strh	r3, [r7]	@ movhi
  51:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     }
 317              		.loc 1 51 9 is_stmt 1 view .LVU96
  51:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     }
 318              		.loc 1 51 24 is_stmt 0 view .LVU97
 319 0132 3380     		strh	r3, [r6]	@ movhi
 320              	.LBE32:
 321              		.loc 1 53 1 view .LVU98
 322 0134 75E7     		b	.L1
 323              	.L12:
 324 0136 00BF     		.align	2
 325              	.L11:
 326 0138 00000000 		.word	.LANCHOR0
 327 013c 00000000 		.word	.LANCHOR1
 328              		.cfi_endproc
 329              	.LFE204:
 331              		.section	.rodata.lv_example_roller_3.str1.4,"aMS",%progbits,1
 332              		.align	2
 333              	.LC0:
 334 0000 4A616E75 		.ascii	"January\012February\012March\012April\012May\012Jun"
 334      6172790A 
 334      46656272 
 334      75617279 
 334      0A4D6172 
 335 0024 650A4A75 		.ascii	"e\012July\012August\012September\012October\012Nove"
 335      6C790A41 
 335      75677573 
 335      740A5365 
 335      7074656D 
 336 0048 6D626572 		.ascii	"mber\012December\000"
 336      0A446563 
 336      656D6265 
 336      7200
 337              		.section	.text.lv_example_roller_3,"ax",%progbits
 338              		.align	1
 339              		.global	lv_example_roller_3
 340              		.syntax unified
 341              		.thumb
 342              		.thumb_func
 344              	lv_example_roller_3:
 345              	.LFB205:
  54:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  55:lvgl/examples/widgets/roller/lv_example_roller_3.c **** /**
  56:lvgl/examples/widgets/roller/lv_example_roller_3.c ****  * Add a fade mask to roller.
  57:lvgl/examples/widgets/roller/lv_example_roller_3.c ****  */
  58:lvgl/examples/widgets/roller/lv_example_roller_3.c **** void lv_example_roller_3(void)
  59:lvgl/examples/widgets/roller/lv_example_roller_3.c **** {
 346              		.loc 1 59 1 is_stmt 1 view -0
 347              		.cfi_startproc
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 20


 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350 0000 38B5     		push	{r3, r4, r5, lr}
 351              		.cfi_def_cfa_offset 16
 352              		.cfi_offset 3, -16
 353              		.cfi_offset 4, -12
 354              		.cfi_offset 5, -8
 355              		.cfi_offset 14, -4
  60:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     static lv_style_t style;
 356              		.loc 1 60 5 view .LVU100
  61:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_style_init(&style);
 357              		.loc 1 61 5 view .LVU101
 358 0002 2C4C     		ldr	r4, .L15
 359 0004 2046     		mov	r0, r4
 360 0006 FFF7FEFF 		bl	lv_style_init
 361              	.LVL42:
  62:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_style_set_bg_color(&style, lv_color_black());
 362              		.loc 1 62 5 view .LVU102
 363              	.LBB47:
 364              	.LBI47:
 365              		.file 4 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_color.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @file lv_color.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #ifndef LV_COLOR_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include "../lv_conf_internal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include "lv_assert.h"
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include "lv_math.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include "lv_types.h"
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*Error checking*/
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 24
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #error "LV_COLOR_DEPTH 24 is deprecated. Use LV_COLOR_DEPTH 32 instead (lv_conf.h)"
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH != 16 && LV_COLOR_16_SWAP != 0
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #error "LV_COLOR_16_SWAP requires LV_COLOR_DEPTH == 16. Set it in lv_conf.h"
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include <stdint.h>
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*********************
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *      DEFINES
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *********************/
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_DEPTH);
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_16_SWAP);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 21


  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Opacity percentages.
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** enum {
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_TRANSP = 0,
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_0      = 0,
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_10     = 25,
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_20     = 51,
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_30     = 76,
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_40     = 102,
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_50     = 127,
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_60     = 153,
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_70     = 178,
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_80     = 204,
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_90     = 229,
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_100    = 255,
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_COVER  = 255,
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** };
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_OPA_MIN 2    /*Opacities below this will be transparent*/
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_OPA_MAX 253  /*Opacities above this will fully cover*/
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SIZE 8
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SIZE 8
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SIZE 16
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SIZE 32
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #error "Invalid LV_COLOR_DEPTH in lv_conf.h! Set it to 1, 8, 16 or 32!"
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if defined(__cplusplus) && !defined(_LV_COLOR_HAS_MODERN_CPP)
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** * MSVC compiler's definition of the __cplusplus indicating 199711L regardless to C++ standard versi
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** * see https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-cplusplus
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** * so we use _MSC_VER macro instead of __cplusplus
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** */
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #ifdef _MSC_VER
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if _MSC_VER >= 1900 /*Visual Studio 2015*/
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if __cplusplus >= 201103L
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif /*__cplusplus*/
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #ifndef _LV_COLOR_HAS_MODERN_CPP
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 0
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if _LV_COLOR_HAS_MODERN_CPP
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 22


  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*Fix msvc compiler error C4576 inside C++ code*/
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER lv_color_t
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER (lv_color_t)
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*---------------------------------------
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Macros for all existing color depths
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * to set/get values of the color channels
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *------------------------------------------*/
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_R1(c, v) (c).ch.red = (uint8_t)((v) & 0x1)
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G1(c, v) (c).ch.green = (uint8_t)((v) & 0x1)
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_B1(c, v) (c).ch.blue = (uint8_t)((v) & 0x1)
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_A1(c, v) do {} while(0)
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_R1(c) (c).ch.red
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G1(c) (c).ch.green
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_B1(c) (c).ch.blue
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_A1(c) 0xFF
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER1 {0x00}
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE1(r8, g8, b8)  {(uint8_t)((b8 >> 7) | (g8 >> 7) | (r8 >> 7))}
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_R8(c, v) (c).ch.red = (uint8_t)((v) & 0x7U)
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G8(c, v) (c).ch.green = (uint8_t)((v) & 0x7U)
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_B8(c, v) (c).ch.blue = (uint8_t)((v) & 0x3U)
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_A8(c, v) do {} while(0)
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_R8(c) (c).ch.red
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G8(c) (c).ch.green
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_B8(c) (c).ch.blue
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_A8(c) 0xFF
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER8 {{0x00, 0x00, 0x00}}
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE8(r8, g8, b8) {{(uint8_t)((b8 >> 6) & 0x3U), (uint8_t)((g8 >> 5) & 0x7U), (ui
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_R16(c, v) (c).ch.red = (uint8_t)((v) & 0x1FU)
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G16(c, v) (c).ch.green = (uint8_t)((v) & 0x3FU)
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G16(c, v) {(c).ch.green_h = (uint8_t)(((v) >> 3) & 0x7); (c).ch.green_l = (ui
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_B16(c, v) (c).ch.blue = (uint8_t)((v) & 0x1FU)
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_A16(c, v) do {} while(0)
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_R16(c) (c).ch.red
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G16(c) (c).ch.green
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G16(c) (((c).ch.green_h << 3) + (c).ch.green_l)
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_B16(c) (c).ch.blue
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_A16(c) 0xFF
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16  {{0x00, 0x00, 0x00}}
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((b8 >> 3) & 0x1FU), (uint8_t)((g8 >> 2) & 0x3FU), 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 23


 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16 {{0x00, 0x00, 0x00, 0x00}}
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((g8 >> 5) & 0x7U), (uint8_t)((r8 >> 3) & 0x1FU), (
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_R32(c, v) (c).ch.red = (uint8_t)((v) & 0xFF)
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G32(c, v) (c).ch.green = (uint8_t)((v) & 0xFF)
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_B32(c, v) (c).ch.blue = (uint8_t)((v) & 0xFF)
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_A32(c, v) (c).ch.alpha = (uint8_t)((v) & 0xFF)
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_R32(c) (c).ch.red
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G32(c) (c).ch.green
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_B32(c) (c).ch.blue
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_A32(c) (c).ch.alpha
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER32  {{0x00, 0x00, 0x00, 0x00}}
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE32(r8, g8, b8) {{b8, g8, r8, 0xff}} /*Fix 0xff alpha*/
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*---------------------------------------
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Macros for the current color depth
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * to set/get values of the color channels
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *------------------------------------------*/
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SET_R(c, v) LV_CONCAT(LV_COLOR_SET_R, LV_COLOR_DEPTH)(c, v)
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SET_G(c, v) LV_CONCAT(LV_COLOR_SET_G, LV_COLOR_DEPTH)(c, v)
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SET_B(c, v) LV_CONCAT(LV_COLOR_SET_B, LV_COLOR_DEPTH)(c, v)
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SET_A(c, v) LV_CONCAT(LV_COLOR_SET_A, LV_COLOR_DEPTH)(c, v)
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_GET_R(c) LV_CONCAT(LV_COLOR_GET_R, LV_COLOR_DEPTH)(c)
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_GET_G(c) LV_CONCAT(LV_COLOR_GET_G, LV_COLOR_DEPTH)(c)
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_GET_B(c) LV_CONCAT(LV_COLOR_GET_B, LV_COLOR_DEPTH)(c)
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_GET_A(c) LV_CONCAT(LV_COLOR_GET_A, LV_COLOR_DEPTH)(c)
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_ZERO_INITIALIZER LV_CONCAT(_LV_COLOR_ZERO_INITIALIZER, LV_COLOR_DEPTH)
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_MAKE(r8, g8, b8) LV_CONCAT(LV_COLOR_MAKE, LV_COLOR_DEPTH)(r8, g8, b8)
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**********************
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *      TYPEDEFS
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  **********************/
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef union {
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint8_t full; /*must be declared first to set all bits of byte via initializer list*/
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     union {
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t blue : 1;
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t green : 1;
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t red : 1;
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     } ch;
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color1_t;
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef union {
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     struct {
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t blue : 2;
 202:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t green : 3;
 203:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t red : 3;
 204:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     } ch;
 205:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint8_t full;
 206:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color8_t;
 207:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 24


 208:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef union {
 209:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     struct {
 210:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 211:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t blue : 5;
 212:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t green : 6;
 213:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t red : 5;
 214:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 215:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t green_h : 3;
 216:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t red : 5;
 217:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t blue : 5;
 218:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t green_l : 3;
 219:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 220:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     } ch;
 221:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint16_t full;
 222:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color16_t;
 223:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 224:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef union {
 225:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     struct {
 226:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t blue;
 227:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t green;
 228:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t red;
 229:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t alpha;
 230:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     } ch;
 231:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint32_t full;
 232:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color32_t;
 233:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 234:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef LV_CONCAT3(uint, LV_COLOR_SIZE, _t) lv_color_int_t;
 235:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef LV_CONCAT3(lv_color, LV_COLOR_DEPTH, _t) lv_color_t;
 236:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 237:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef struct {
 238:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint16_t h;
 239:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint8_t s;
 240:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint8_t v;
 241:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color_hsv_t;
 242:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 243:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @cond Doxygen_Suppress
 244:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*No idea where the guard is required but else throws warnings in the docs*/
 245:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef uint8_t lv_opa_t;
 246:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @endcond
 247:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 248:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** struct _lv_color_filter_dsc_t;
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 250:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef lv_color_t (*lv_color_filter_cb_t)(const struct _lv_color_filter_dsc_t *, lv_color_t, lv_op
 251:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 252:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef struct _lv_color_filter_dsc_t {
 253:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_filter_cb_t filter_cb;
 254:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     void * user_data;
 255:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color_filter_dsc_t;
 256:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 257:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef enum {
 258:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_RED,
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_PINK,
 260:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_PURPLE,
 261:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_DEEP_PURPLE,
 262:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_INDIGO,
 263:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_BLUE,
 264:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_LIGHT_BLUE,
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 25


 265:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_CYAN,
 266:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_TEAL,
 267:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_GREEN,
 268:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_LIGHT_GREEN,
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_LIME,
 270:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_YELLOW,
 271:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_AMBER,
 272:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_ORANGE,
 273:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_DEEP_ORANGE,
 274:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_BROWN,
 275:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_BLUE_GREY,
 276:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_GREY,
 277:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     _LV_PALETTE_LAST,
 278:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_NONE = 0xff,
 279:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_palette_t;
 280:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 281:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**********************
 282:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * GLOBAL PROTOTYPES
 283:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  **********************/
 284:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 285:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*In color conversations:
 286:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * - When converting to bigger color type the LSB weight of 1 LSB is calculated
 287:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *   E.g. 16 bit Red has 5 bits
 288:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *         8 bit Red has 3 bits
 289:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *        ----------------------
 290:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *        8 bit red LSB = (2^5 - 1) / (2^3 - 1) = 31 / 7 = 4
 291:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *
 292:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * - When calculating to smaller color type simply shift out the LSBs
 293:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *   E.g.  8 bit Red has 3 bits
 294:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *        16 bit Red has 5 bits
 295:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *        ----------------------
 296:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *         Shift right with 5 - 3 = 2
 297:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 298:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint8_t lv_color_to1(lv_color_t color)
 299:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 300:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
 301:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return color.full;
 302:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
 303:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x4) || (LV_COLOR_GET_G(color) & 0x4) || (LV_COLOR_GET_B(color) & 0
 304:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 1;
 305:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 306:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else {
 307:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 308:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 309:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
 310:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x10) || (LV_COLOR_GET_G(color) & 0x20) || (LV_COLOR_GET_B(color) &
 311:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 1;
 312:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 313:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else {
 314:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 315:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 316:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 317:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x80) || (LV_COLOR_GET_G(color) & 0x80) || (LV_COLOR_GET_B(color) &
 318:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 1;
 319:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 320:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else {
 321:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 26


 322:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 323:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 324:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 325:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 326:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint8_t lv_color_to8(lv_color_t color)
 327:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 328:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
 329:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if(color.full == 0)
 330:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 331:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else
 332:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0xFF;
 333:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
 334:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return color.full;
 335:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
 336:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color8_t ret;
 337:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 2); /*5 - 3  = 2*/
 338:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 3); /*6 - 3  = 3*/
 339:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 3); /*5 - 2  = 3*/
 340:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 341:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 342:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color8_t ret;
 343:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 5); /*8 - 3  = 5*/
 344:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 5); /*8 - 3  = 5*/
 345:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 6); /*8 - 2  = 6*/
 346:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 347:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 348:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 349:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 350:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint16_t lv_color_to16(lv_color_t color)
 351:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 352:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
 353:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if(color.full == 0)
 354:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 355:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else
 356:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0xFFFF;
 357:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
 358:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color16_t ret;
 359:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) * 4);  /*(2^5 - 1)/(2^3 - 1) = 31/7 = 4*/
 360:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) * 9);  /*(2^6 - 1)/(2^3 - 1) = 63/7 = 9*/
 361:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) * 10); /*(2^5 - 1)/(2^2 - 1) = 31/3 = 10*/
 362:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 363:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
 364:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return color.full;
 365:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 366:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color16_t ret;
 367:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) >> 3); /*8 - 5  = 3*/
 368:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) >> 2); /*8 - 6  = 2*/
 369:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) >> 3); /*8 - 5  = 3*/
 370:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 371:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 372:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 373:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 374:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint32_t lv_color_to32(lv_color_t color)
 375:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 376:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
 377:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if(color.full == 0)
 378:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0xFF000000;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 27


 379:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else
 380:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0xFFFFFFFF;
 381:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
 382:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color32_t ret;
 383:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R32(ret, LV_COLOR_GET_R(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 384:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G32(ret, LV_COLOR_GET_G(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 385:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B32(ret, LV_COLOR_GET_B(color) * 85); /*(2^8 - 1)/(2^2 - 1) = 255/3 = 85*/
 386:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 387:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 388:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
 389:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /**
 390:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * The floating point math for conversion is:
 391:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *  valueto = valuefrom * ( (2^bitsto - 1) / (float)(2^bitsfrom - 1) )
 392:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * The faster integer math for conversion is:
 393:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *  valueto = ( valuefrom * multiplier + adder ) >> divisor
 394:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *   multiplier = FLOOR( ( (2^bitsto - 1) << divisor ) / (float)(2^bitsfrom - 1) )
 395:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *
 396:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * Find the first divisor where ( adder >> divisor ) <= 0
 397:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *
 398:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * 5-bit to 8-bit: ( 31 * multiplier + adder ) >> divisor = 255
 399:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * divisor  multiplier  adder  min (0)  max (31)
 400:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       0           8      7        7       255
 401:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       1          16     14        7       255
 402:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       2          32     28        7       255
 403:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       3          65     25        3       255
 404:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       4         131     19        1       255
 405:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       5         263      7        0       255
 406:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *
 407:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * 6-bit to 8-bit: 255 = ( 63 * multiplier + adder ) >> divisor
 408:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * divisor  multiplier  adder  min (0)  max (63)
 409:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       0           4      3        3       255
 410:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       1           8      6        3       255
 411:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       2          16     12        3       255
 412:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       3          32     24        3       255
 413:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       4          64     48        3       255
 414:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       5         129     33        1       255
 415:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       6         259      3        0       255
 416:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      */
 417:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 418:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color32_t ret;
 419:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 420:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 421:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 422:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 423:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 424:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 425:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return color.full;
 426:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 427:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 428:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 429:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @cond Doxygen_Suppress
 430:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 431:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 432:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Mix two colors with a given ratio.
 433:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param c1 the first color to mix (usually the foreground)
 434:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param c2 the second color to mix (usually the background)
 435:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 28


 436:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the mixed color
 437:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 438:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t LV_ATTRIBUTE_FAST_MEM lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t m
 439:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 440:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t ret;
 441:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 442:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 16 && LV_COLOR_MIX_ROUND_OFS == 0
 443:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 1
 444:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     c1.full = c1.full << 8 | c1.full >> 8;
 445:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     c2.full = c2.full << 8 | c2.full >> 8;
 446:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 447:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Source: https://stackoverflow.com/a/50012418/1999969*/
 448:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 449:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 450:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                   0x7E0F81F; /*0b00000111111000001111100000011111*/
 451:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 452:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 453:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     ret.full = (uint16_t)((result >> 16) | result);
 454:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 1
 455:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     ret.full = ret.full << 8 | ret.full >> 8;
 456:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 457:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH != 1
 458:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*LV_COLOR_DEPTH == 8, 16 or 32*/
 459:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 460:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 461:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 462:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 463:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 464:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 465:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 466:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 467:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 468:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 469:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 470:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 471:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret;
 472:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 473:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 474:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline void LV_ATTRIBUTE_FAST_MEM lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out
 475:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 476:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH != 1
 477:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 478:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 479:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 480:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 481:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     (void) mix;
 482:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Pre-multiplication can't be used with 1 bpp*/
 483:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[0] = LV_COLOR_GET_R(c);
 484:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[1] = LV_COLOR_GET_G(c);
 485:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[2] = LV_COLOR_GET_B(c);
 486:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 487:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 488:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 489:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 490:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 491:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Mix two colors with a given ratio. It runs faster then `lv_color_mix` but requires some pre comp
 492:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param premult_c1 The first color. Should be preprocessed with `lv_color_premult(c1)`
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 29


 493:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param c2 The second color. As it is no pre computation required on it
 494:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param mix The ratio of the colors. 0: full `c1`, 255: full `c2`, 127: half `c1` and half `c2`.
 495:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *            Should be modified like mix = `255 - mix`
 496:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the mixed color
 497:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @note 255 won't give clearly `c1`.
 498:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 499:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t LV_ATTRIBUTE_FAST_MEM lv_color_mix_premult(uint16_t * premult_c1, lv_color
 500:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 501:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t ret;
 502:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH != 1
 503:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*LV_COLOR_DEPTH == 8 or 32*/
 504:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OF
 505:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OF
 506:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OF
 507:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 508:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 509:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 510:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Restore color1*/
 511:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t c1;
 512:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R(c1, premult_c1[0]);
 513:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G(c1, premult_c1[1]);
 514:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B(c1, premult_c1[2]);
 515:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 516:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 517:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 518:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret;
 519:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 520:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 521:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 522:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Mix two colors. Both color can have alpha value.
 523:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param bg_color background color
 524:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param bg_opa alpha of the background color
 525:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param fg_color foreground color
 526:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param fg_opa alpha of the foreground color
 527:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param res_color the result color
 528:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param res_opa the result opacity
 529:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 530:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline void LV_ATTRIBUTE_FAST_MEM lv_color_mix_with_alpha(lv_color_t bg_color, lv_opa_t bg_o
 531:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                                                  lv_color_t fg_color, lv_opa_t fg_o
 532:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                                                  lv_color_t * res_color, lv_opa_t *
 533:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 534:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Pick the foreground if it's fully opaque or the Background is fully transparent*/
 535:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if(fg_opa >= LV_OPA_MAX || bg_opa <= LV_OPA_MIN) {
 536:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         res_color->full = fg_color.full;
 537:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_opa = fg_opa;
 538:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 539:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Transparent foreground: use the Background*/
 540:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else if(fg_opa <= LV_OPA_MIN) {
 541:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         res_color->full = bg_color.full;
 542:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_opa = bg_opa;
 543:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 544:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Opaque background: use simple mix*/
 545:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else if(bg_opa >= LV_OPA_MAX) {
 546:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_color = lv_color_mix(fg_color, bg_color, fg_opa);
 547:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_opa = LV_OPA_COVER;
 548:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 549:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Both colors have alpha. Expensive calculation need to be applied*/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 30


 550:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else {
 551:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         /*Save the parameters and the result. If they will be asked again don't compute again*/
 552:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_opa_t fg_opa_save     = 0;
 553:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_opa_t bg_opa_save     = 0;
 554:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_color_t fg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 555:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_color_t bg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 556:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_color_t res_color_saved = _LV_COLOR_ZERO_INITIALIZER;
 557:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_opa_t res_opa_saved = 0;
 558:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 559:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         if(fg_opa != fg_opa_save || bg_opa != bg_opa_save || fg_color.full != fg_color_save.full ||
 560:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****            bg_color.full != bg_color_save.full) {
 561:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             fg_opa_save        = fg_opa;
 562:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             bg_opa_save        = bg_opa;
 563:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             fg_color_save.full = fg_color.full;
 564:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             bg_color_save.full = bg_color.full;
 565:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             /*Info:
 566:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****              * https://en.wikipedia.org/wiki/Alpha_compositing#Analytical_derivation_of_the_over_op
 567:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             res_opa_saved = 255 - ((uint16_t)((uint16_t)(255 - fg_opa) * (255 - bg_opa)) >> 8);
 568:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             LV_ASSERT(res_opa_saved != 0);
 569:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             lv_opa_t ratio = (uint16_t)((uint16_t)fg_opa * 255) / res_opa_saved;
 570:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             res_color_saved = lv_color_mix(fg_color, bg_color, ratio);
 571:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 572:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         }
 573:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 574:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         res_color->full = res_color_saved.full;
 575:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_opa = res_opa_saved;
 576:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 577:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 578:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 579:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @endcond
 580:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 581:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 582:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Get the brightness of a color
 583:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param color a color
 584:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the brightness [0..255]
 585:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 586:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint8_t lv_color_brightness(lv_color_t color)
 587:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 588:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color32_t c32;
 589:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     c32.full        = lv_color_to32(color);
 590:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR
 591:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return (uint8_t)(bright >> 3);
 592:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 593:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 594:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
 595:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 597:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 598:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 599:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_hex(uint32_t c)
 600:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 601:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 16
 602:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t r;
 603:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 604:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /* Convert a 4 bytes per pixel in format ARGB32 to R5G6B5 format
 605:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         naive way (by calling lv_color_make with components):
 606:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     r = ((c & 0xFF0000) >> 19)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 31


 607:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     g = ((c & 0xFF00) >> 10)
 608:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     b = ((c & 0xFF) >> 3)
 609:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     rgb565 = (r << 11) | (g << 5) | b
 610:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         That's 3 mask, 5 bitshift and 2 or operations
 611:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 612:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         A bit better:
 613:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     r = ((c & 0xF80000) >> 8)
 614:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     g = ((c & 0xFC00) >> 5)
 615:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     b = ((c & 0xFF) >> 3)
 616:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     rgb565 = r | g | b
 617:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         That's 3 mask, 3 bitshifts and 2 or operations */
 618:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 8) | ((c & 0xFC00) >> 5) | ((c & 0xFF) >> 3));
 619:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 620:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /* We want: rrrr rrrr GGGg gggg bbbb bbbb => gggb bbbb rrrr rGGG */
 621:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 16) | ((c & 0xFC00) >> 13) | ((c & 0x1C00) << 3) | ((c &
 622:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 623:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return r;
 624:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 625:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t r;
 626:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = c | 0xFF000000;
 627:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return r;
 628:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 629:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xF
 630:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 631:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 632:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 633:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_hex3(uint32_t c)
 634:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 635:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((
 636:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                          (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 637:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 638:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 639:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline void lv_color_filter_dsc_init(lv_color_filter_dsc_t * dsc, lv_color_filter_cb_t cb)
 640:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 641:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     dsc->filter_cb = cb;
 642:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 643:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 644:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @cond Doxygen_Suppress
 645:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //!
 646:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** void /* LV_ATTRIBUTE_FAST_MEM */ lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
 647:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 648:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @endcond
 649:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl);
 650:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 651:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl);
 652:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 653:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_t lv_color_change_lightness(lv_color_t c, lv_opa_t lvl);
 654:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 655:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 656:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Convert a HSV color to RGB
 657:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param h hue [0..359]
 658:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param s saturation [0..100]
 659:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param v value [0..100]
 660:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the given RGB color in RGB (with LV_COLOR_DEPTH depth)
 661:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 662:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v);
 663:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 32


 664:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 665:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Convert a 32-bit RGB color to HSV
 666:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param r8 8-bit red
 667:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param g8 8-bit green
 668:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param b8 8-bit blue
 669:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the given RGB color in HSV
 670:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 671:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_hsv_t lv_color_rgb_to_hsv(uint8_t r8, uint8_t g8, uint8_t b8);
 672:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 673:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 674:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Convert a color to HSV
 675:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param color color
 676:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the given color in HSV
 677:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 678:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_hsv_t lv_color_to_hsv(lv_color_t color);
 679:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 680:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 681:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Just a wrapper around LV_COLOR_CHROMA_KEY because it might be more convenient to use a function 
 682:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return LV_COLOR_CHROMA_KEY
 683:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 684:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_chroma_key(void)
 685:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 686:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return LV_COLOR_CHROMA_KEY;
 687:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 688:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 689:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**********************
 690:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *  PREDEFINED COLORS
 691:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  **********************/
 692:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/
 693:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 694:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_t lv_palette_main(lv_palette_t p);
 695:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_white(void)
 696:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 697:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return lv_color_make(0xff, 0xff, 0xff);
 698:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 699:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_black(void)
 366              		.loc 4 699 26 view .LVU103
 367              	.LBE47:
 700:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 701:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return lv_color_make(0x00, 0x0, 0x00);
 368              		.loc 4 701 5 view .LVU104
 369              	.LBB50:
 370              	.LBB48:
 371              	.LBI48:
 594:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 372              		.loc 4 594 26 view .LVU105
 373              	.LBB49:
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 374              		.loc 4 596 5 view .LVU106
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 375              		.loc 4 596 12 is_stmt 0 view .LVU107
 376 000a 0021     		movs	r1, #0
 377 000c 6FF30701 		bfc	r1, #0, #8
 378 0010 6FF30F21 		bfc	r1, #8, #8
 379 0014 6FF31741 		bfc	r1, #16, #8
 380              	.LVL43:
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 33


 381              		.loc 4 596 12 view .LVU108
 382              	.LBE49:
 383              	.LBE48:
 384              	.LBE50:
 385              		.loc 1 62 5 view .LVU109
 386 0018 41F07F41 		orr	r1, r1, #-16777216
 387 001c 2046     		mov	r0, r4
 388 001e FFF7FEFF 		bl	lv_style_set_bg_color
 389              	.LVL44:
  63:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_style_set_text_color(&style, lv_color_white());
 390              		.loc 1 63 5 is_stmt 1 view .LVU110
 391              	.LBB51:
 392              	.LBI51:
 695:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 393              		.loc 4 695 26 view .LVU111
 394              	.LBE51:
 697:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 395              		.loc 4 697 5 view .LVU112
 396              	.LBB54:
 397              	.LBB52:
 398              	.LBI52:
 594:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 399              		.loc 4 594 26 view .LVU113
 400              	.LBB53:
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 401              		.loc 4 596 5 view .LVU114
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 402              		.loc 4 596 5 is_stmt 0 view .LVU115
 403              	.LBE53:
 404              	.LBE52:
 405              	.LBE54:
 406              		.loc 1 63 5 view .LVU116
 407 0022 4FF0FF31 		mov	r1, #-1
 408 0026 2046     		mov	r0, r4
 409 0028 FFF7FEFF 		bl	lv_style_set_text_color
 410              	.LVL45:
  64:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_style_set_border_width(&style, 0);
 411              		.loc 1 64 5 is_stmt 1 view .LVU117
 412 002c 0021     		movs	r1, #0
 413 002e 2046     		mov	r0, r4
 414 0030 FFF7FEFF 		bl	lv_style_set_border_width
 415              	.LVL46:
  65:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_style_set_pad_all(&style, 0);
 416              		.loc 1 65 5 view .LVU118
 417              	.LBB55:
 418              	.LBI55:
 419              		.file 5 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @file lv_style.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #ifndef LV_STYLE_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** extern "C" {
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 34


  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include <stdbool.h>
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include <stdint.h>
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "../font/lv_font.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_color.h"
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_area.h"
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_anim.h"
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_txt.h"
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_types.h"
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_assert.h"
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_bidi.h"
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /*********************
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *      DEFINES
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *********************/
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_SENTINEL_VALUE     0xAABBCCDD
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Flags for style behavior
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * The rest of the flags will have _FLAG added to their name in v9.
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_FLAG_NONE             (0)
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_INHERIT               (1 << 0)  /*Inherited*/
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_EXT_DRAW              (1 << 1)  /*Requires ext. draw size update when changed
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_LAYOUT_REFR           (1 << 2)  /*Requires layout update when changed*/
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_PARENT_LAYOUT_REFR    (1 << 3)  /*Requires layout update on parent when chang
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_LAYER_REFR            (1 << 4)  /*Affects layer handling*/
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_ALL                   (0x1F)     /*Indicating all flags*/
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Other constants
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_IMG_ZOOM_NONE            256        /*Value for not zooming the image*/
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** LV_EXPORT_CONST_INT(LV_IMG_ZOOM_NONE);
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** // *INDENT-OFF*
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #if LV_USE_ASSERT_STYLE
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_CONST_INIT(var_name, prop_array)                       \
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     const lv_style_t var_name = {                                       \
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .sentinel = LV_STYLE_SENTINEL_VALUE,                            \
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .v_p = { .const_props = prop_array },                           \
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .has_group = 0xFF,                                              \
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .prop1 = LV_STYLE_PROP_ANY,                                     \
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .prop_cnt = (sizeof(prop_array) / sizeof((prop_array)[0])),     \
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #else
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_CONST_INIT(var_name, prop_array)                       \
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     const lv_style_t var_name = {                                       \
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .v_p = { .const_props = prop_array },                           \
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .has_group = 0xFF,                                              \
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .prop1 = LV_STYLE_PROP_ANY,                                     \
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 35


  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         .prop_cnt = (sizeof(prop_array) / sizeof((prop_array)[0])),     \
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #endif
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** // *INDENT-ON*
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_META_INHERIT 0x8000
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_META_INITIAL 0x4000
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_META_MASK (LV_STYLE_PROP_META_INHERIT | LV_STYLE_PROP_META_INITIAL)
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #define LV_STYLE_PROP_ID_MASK(prop) ((lv_style_prop_t)((prop) & ~LV_STYLE_PROP_META_MASK))
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**********************
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *      TYPEDEFS
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  **********************/
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Possible options how to blend opaque drawings
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_NORMAL,     /**< Simply mix according to the opacity value*/
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_ADDITIVE,   /**< Add the respective color channels*/
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_SUBTRACTIVE,/**< Subtract the foreground from the background*/
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_MULTIPLY,   /**< Multiply the foreground and background*/
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BLEND_MODE_REPLACE,    /**< Replace background with foreground in the area*/
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_blend_mode_t;
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Some options to apply decorations on texts.
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * 'OR'ed values can be used.
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_TEXT_DECOR_NONE          = 0x00,
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_TEXT_DECOR_UNDERLINE     = 0x01,
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_TEXT_DECOR_STRIKETHROUGH = 0x02,
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_text_decor_t;
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Selects on which sides border should be drawn
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * 'OR'ed values can be used.
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_NONE     = 0x00,
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_BOTTOM   = 0x01,
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_TOP      = 0x02,
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_LEFT     = 0x04,
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_RIGHT    = 0x08,
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_FULL     = 0x0F,
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_BORDER_SIDE_INTERNAL = 0x10, /**< FOR matrix-like objects (e.g. Button matrix)*/
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_border_side_t;
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * The direction of the gradient.
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 36


 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_GRAD_DIR_NONE, /**< No gradient (the `grad_color` property is ignored)*/
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_GRAD_DIR_VER,  /**< Vertical (top to bottom) gradient*/
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_GRAD_DIR_HOR,  /**< Horizontal (left to right) gradient*/
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_grad_dir_t;
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * The dithering algorithm for the gradient
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Depends on LV_DITHER_GRADIENT
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_DITHER_NONE,     /**< No dithering, colors are just quantized to the output resolution*/
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_DITHER_ORDERED,  /**< Ordered dithering. Faster to compute and use less memory but lower qua
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_DITHER_ERR_DIFF, /**< Error diffusion mode. Slower to compute and use more memory but give h
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_dither_mode_t;
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /** A gradient stop definition.
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *  This matches a color and a position in a virtual 0-255 scale.
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_color_t color;   /**< The stop color */
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint8_t    frac;    /**< The stop position in 1/255 unit */
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_gradient_stop_t;
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /** A descriptor of a gradient. */
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_gradient_stop_t   stops[LV_GRADIENT_MAX_STOPS]; /**< A gradient stop array */
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint8_t              stops_count;                  /**< The number of used stops in the array *
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_grad_dir_t        dir : 3;                      /**< The gradient direction.
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                                         * Any of LV_GRAD_DIR_HOR, LV_GRAD_DIR_VER, 
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_dither_mode_t     dither : 3;                   /**< Whether to dither the gradient or not.
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                                         * Any of LV_DITHER_NONE, LV_DITHER_ORDERED,
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_grad_dsc_t;
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * A common type to handle all the property types in the same way.
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef union {
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     int32_t num;         /**< Number integer number (opacity, enums, booleans or "normal" numbers)*
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     const void * ptr;    /**< Constant pointers  (font, cone text, etc)*/
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_color_t color;    /**< Colors*/
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_value_t;
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Enumeration of all built in style properties
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Props are split into groups of 16. When adding a new prop to a group, ensure it does not overflo
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef enum {
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PROP_INV               = 0,
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 0*/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 37


 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_WIDTH                  = 1,
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_MIN_WIDTH              = 2,
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_MAX_WIDTH              = 3,
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_HEIGHT                 = 4,
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_MIN_HEIGHT             = 5,
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_MAX_HEIGHT             = 6,
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_X                      = 7,
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_Y                      = 8,
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ALIGN                  = 9,
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LAYOUT                 = 10,
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_RADIUS                 = 11,
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 1*/
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_TOP                = 16,
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_BOTTOM             = 17,
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_LEFT               = 18,
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_RIGHT              = 19,
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_ROW                = 20,
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PAD_COLUMN             = 21,
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BASE_DIR               = 22,
 202:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_CLIP_CORNER            = 23,
 203:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 204:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 2*/
 205:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_COLOR               = 32,
 206:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_OPA                 = 33,
 207:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_GRAD_COLOR          = 34,
 208:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_GRAD_DIR            = 35,
 209:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_MAIN_STOP           = 36,
 210:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_GRAD_STOP           = 37,
 211:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_GRAD                = 38,
 212:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_DITHER_MODE         = 39,
 213:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_SRC             = 40,
 214:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_OPA             = 41,
 215:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_RECOLOR         = 42,
 216:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_RECOLOR_OPA     = 43,
 217:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BG_IMG_TILED           = 44,
 218:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 219:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 3*/
 220:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_COLOR           = 48,
 221:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_OPA             = 49,
 222:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_WIDTH           = 50,
 223:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_SIDE            = 51,
 224:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BORDER_POST            = 52,
 225:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OUTLINE_WIDTH          = 53,
 226:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OUTLINE_COLOR          = 54,
 227:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OUTLINE_OPA            = 55,
 228:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OUTLINE_PAD            = 56,
 229:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 230:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 4*/
 231:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_WIDTH           = 64,
 232:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_OFS_X           = 65,
 233:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_OFS_Y           = 66,
 234:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_SPREAD          = 67,
 235:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_COLOR           = 68,
 236:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_SHADOW_OPA             = 69,
 237:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_IMG_OPA                = 70,
 238:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_IMG_RECOLOR            = 71,
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 38


 239:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_IMG_RECOLOR_OPA        = 72,
 240:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_WIDTH             = 73,
 241:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_DASH_WIDTH        = 74,
 242:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_DASH_GAP          = 75,
 243:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_ROUNDED           = 76,
 244:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_COLOR             = 77,
 245:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_LINE_OPA               = 78,
 246:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 247:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 5*/
 248:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_WIDTH              = 80,
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_ROUNDED            = 81,
 250:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_COLOR              = 82,
 251:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_OPA                = 83,
 252:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ARC_IMG_SRC            = 84,
 253:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_COLOR             = 85,
 254:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_OPA               = 86,
 255:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_FONT              = 87,
 256:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_LETTER_SPACE      = 88,
 257:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_LINE_SPACE        = 89,
 258:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_DECOR             = 90,
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TEXT_ALIGN             = 91,
 260:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 261:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*Group 6*/
 262:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OPA                    = 96,
 263:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_OPA_LAYERED            = 97,
 264:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_COLOR_FILTER_DSC       = 98,
 265:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_COLOR_FILTER_OPA       = 99,
 266:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ANIM                   = 100,
 267:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ANIM_TIME              = 101,
 268:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_ANIM_SPEED             = 102,
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSITION             = 103,
 270:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_BLEND_MODE             = 104,
 271:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_WIDTH        = 105,
 272:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_HEIGHT       = 106,
 273:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSLATE_X            = 107,
 274:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSLATE_Y            = 108,
 275:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_ZOOM         = 109,
 276:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_ANGLE        = 110,
 277:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_PIVOT_X      = 111,
 278:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_TRANSFORM_PIVOT_Y      = 112,
 279:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 280:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     _LV_STYLE_LAST_BUILT_IN_PROP     = 112,
 281:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     _LV_STYLE_NUM_BUILT_IN_PROPS     = _LV_STYLE_LAST_BUILT_IN_PROP + 1,
 282:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 283:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_PROP_ANY                = 0xFFFF,
 284:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     _LV_STYLE_PROP_CONST             = 0xFFFF /* magic value for const styles */
 285:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_prop_t;
 286:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 287:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** enum {
 288:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_RES_NOT_FOUND,
 289:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_RES_FOUND,
 290:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     LV_STYLE_RES_INHERIT
 291:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** };
 292:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 293:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef uint8_t lv_style_res_t;
 294:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 295:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 39


 296:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Descriptor for style transitions
 297:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 298:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 299:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     const lv_style_prop_t * props; /**< An array with the properties to animate.*/
 300:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #if LV_USE_USER_DATA
 301:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     void * user_data;              /**< A custom user data that will be passed to the animation's u
 302:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #endif
 303:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_anim_path_cb_t path_xcb;     /**< A path for the animation.*/
 304:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint32_t time;                 /**< Duration of the transition in [ms]*/
 305:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint32_t delay;                /**< Delay before the transition in [ms]*/
 306:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_transition_dsc_t;
 307:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 308:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 309:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Descriptor of a constant style property.
 310:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 311:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 312:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_prop_t prop;
 313:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_value_t value;
 314:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_const_prop_t;
 315:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 316:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 317:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Descriptor of a style (a collection of properties and values).
 318:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 319:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** typedef struct {
 320:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 321:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #if LV_USE_ASSERT_STYLE
 322:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint32_t sentinel;
 323:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #endif
 324:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 325:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     /*If there is only one property store it directly.
 326:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****      *For more properties allocate an array*/
 327:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     union {
 328:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         lv_style_value_t value1;
 329:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint8_t * values_and_props;
 330:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         const lv_style_const_prop_t * const_props;
 331:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     } v_p;
 332:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 333:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint16_t prop1;
 334:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint8_t has_group;
 335:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     uint8_t prop_cnt;
 336:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** } lv_style_t;
 337:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 338:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**********************
 339:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * GLOBAL PROTOTYPES
 340:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  **********************/
 341:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 342:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 343:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Initialize a style
 344:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style to initialize
 345:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @note Do not call `lv_style_init` on styles that already have some properties
 346:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *       because this function won't free the used memory, just sets a default state for the style.
 347:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *       In other words be sure to initialize styles only once!
 348:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 349:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_init(lv_style_t * style);
 350:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 351:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 352:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Clear all properties from a style and free all allocated memories.
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 40


 353:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 354:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 355:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_reset(lv_style_t * style);
 356:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 357:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 358:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Register a new style property for custom usage
 359:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return a new property ID, or LV_STYLE_PROP_INV if there are no more available.
 360:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @example
 361:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * lv_style_prop_t MY_PROP;
 362:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * static inline void lv_style_set_my_prop(lv_style_t * style, lv_color_t value) {
 363:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * lv_style_value_t v = {.color = value}; lv_style_set_prop(style, MY_PROP, v); }
 364:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
 365:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * ...
 366:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * MY_PROP = lv_style_register_prop();
 367:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * ...
 368:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * lv_style_set_my_prop(&style1, lv_palette_main(LV_PALETTE_RED));
 369:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 370:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** lv_style_prop_t lv_style_register_prop(uint8_t flag);
 371:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 372:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 373:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the number of custom properties that have been registered thus far.
 374:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 375:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** lv_style_prop_t lv_style_get_num_custom_props(void);
 376:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 377:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 378:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Remove a property from a style
 379:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 380:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop  a style property ORed with a state.
 381:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return true: the property was found and removed; false: the property wasn't found
 382:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 383:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop);
 384:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 385:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 386:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Set the value of property in a style.
 387:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * This function shouldn't be used directly by the user.
 388:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Instead use `lv_style_set_<prop_name>()`. E.g. `lv_style_set_bg_color()`
 389:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to style
 390:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop the ID of a property (e.g. `LV_STYLE_BG_COLOR`)
 391:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param value `lv_style_value_t` variable in which a field is set according to the type of `prop`
 392:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 393:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_set_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t value);
 394:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 395:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 396:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Set a special meta state for a property in a style.
 397:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * This function shouldn't be used directly by the user.
 398:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to style
 399:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop the ID of a property (e.g. `LV_STYLE_BG_COLOR`)
 400:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param meta the meta value to attach to the property in the style
 401:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 402:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_set_prop_meta(lv_style_t * style, lv_style_prop_t prop, uint16_t meta);
 403:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 404:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 405:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the value of a property
 406:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 407:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop  the ID of a property
 408:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param value pointer to a `lv_style_value_t` variable to store the value
 409:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return LV_RES_INV: the property wasn't found in the style (`value` is unchanged)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 41


 410:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *         LV_RES_OK: the property was fond, and `value` is set accordingly
 411:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @note For performance reasons there are no sanity check on `style`
 412:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 413:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** lv_style_res_t lv_style_get_prop(const lv_style_t * style, lv_style_prop_t prop, lv_style_value_t *
 414:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 415:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 416:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Initialize a transition descriptor.
 417:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param tr        pointer to a transition descriptor to initialize
 418:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param props     an array with the properties to transition. The last element must be zero.
 419:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param path_cb   an animation path (ease) callback. If `NULL` liner path will be used.
 420:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param time      duration of the transition in [ms]
 421:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param delay     delay before the transition in [ms]
 422:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param user_data any custom data that will be saved in the transition animation and will be avai
 423:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @example
 424:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * const static lv_style_prop_t trans_props[] = { LV_STYLE_BG_OPA, LV_STYLE_BG_COLOR, 0 };
 425:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *  static lv_style_transition_dsc_t trans1;
 426:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *  lv_style_transition_dsc_init(&trans1, trans_props, NULL, 300, 0, NULL);
 427:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 428:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** void lv_style_transition_dsc_init(lv_style_transition_dsc_t * tr, const lv_style_prop_t props[],
 429:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                   lv_anim_path_cb_t path_cb, uint32_t time, uint32_t delay, void * 
 430:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 431:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 432:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the default value of a property
 433:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop the ID of a property
 434:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return the default value
 435:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 436:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop);
 437:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 438:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 439:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the value of a property
 440:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 441:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop  the ID of a property
 442:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param value pointer to a `lv_style_value_t` variable to store the value
 443:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return LV_RES_INV: the property wasn't found in the style (`value` is unchanged)
 444:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *         LV_RES_OK: the property was fond, and `value` is set accordingly
 445:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @note For performance reasons there are no sanity check on `style`
 446:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance c
 447:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 448:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t pr
 449:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                                        lv_style_value_t * value)
 450:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** {
 451:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     if(style->prop1 == LV_STYLE_PROP_ANY) {
 452:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         const lv_style_const_prop_t * const_prop;
 453:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint32_t i;
 454:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         for(i = 0; i < style->prop_cnt; i++) {
 455:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             const_prop = style->v_p.const_props + i;
 456:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 457:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             if(prop_id == prop) {
 458:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 459:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     return LV_STYLE_RES_INHERIT;
 460:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_defaul
 461:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 return LV_STYLE_RES_FOUND;
 462:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             }
 463:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         }
 464:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         return LV_STYLE_RES_NOT_FOUND;
 465:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
 466:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 42


 467:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 468:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 469:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     if(style->prop_cnt > 1) {
 470:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 471:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint16_t * props = (uint16_t *)tmp;
 472:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         uint32_t i;
 473:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         for(i = 0; i < style->prop_cnt; i++) {
 474:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 475:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             if(prop_id == prop) {
 476:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 if(props[i] & LV_STYLE_PROP_META_INHERIT)
 477:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     return LV_STYLE_RES_INHERIT;
 478:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 if(props[i] & LV_STYLE_PROP_META_INITIAL)
 479:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     *value = lv_style_prop_get_default(prop_id);
 480:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 else {
 481:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 482:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                     *value = values[i];
 483:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 }
 484:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                 return LV_STYLE_RES_FOUND;
 485:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             }
 486:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         }
 487:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
 488:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 489:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 490:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****             return LV_STYLE_RES_INHERIT;
 491:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_P
 492:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****                                                                                              style-
 493:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****         return LV_STYLE_RES_FOUND;
 494:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     }
 495:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     return LV_STYLE_RES_NOT_FOUND;
 496:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** }
 497:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 498:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 499:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Checks if a style is empty (has no properties)
 500:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param style pointer to a style
 501:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return true if the style is empty
 502:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 503:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** bool lv_style_is_empty(const lv_style_t * style);
 504:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 505:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 506:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Tell the group of a property. If the a property from a group is set in a style the (1 << group) 
 507:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * It allows early skipping the style if the property is not exists in the style at all.
 508:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop a style property
 509:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return the group [0..7] 7 means all the custom properties with index > 112
 510:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 511:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** uint8_t _lv_style_get_prop_group(lv_style_prop_t prop);
 512:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 513:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** /**
 514:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * Get the flags of a built-in or custom property.
 515:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  *
 516:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @param prop a style property
 517:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  * @return the flags of the property
 518:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****  */
 519:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** uint8_t _lv_style_prop_lookup_flags(lv_style_prop_t prop);
 520:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 521:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** #include "lv_style_gen.h"
 522:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 523:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** static inline void lv_style_set_size(lv_style_t * style, lv_coord_t value)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 43


 524:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** {
 525:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_width(style, value);
 526:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_height(style, value);
 527:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** }
 528:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** 
 529:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** static inline void lv_style_set_pad_all(lv_style_t * style, lv_coord_t value)
 420              		.loc 5 529 20 view .LVU119
 421              	.LBB56:
 530:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h **** {
 531:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_left(style, value);
 422              		.loc 5 531 5 view .LVU120
 423 0034 0021     		movs	r1, #0
 424 0036 2046     		mov	r0, r4
 425 0038 FFF7FEFF 		bl	lv_style_set_pad_left
 426              	.LVL47:
 532:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_right(style, value);
 427              		.loc 5 532 5 view .LVU121
 428 003c 0021     		movs	r1, #0
 429 003e 2046     		mov	r0, r4
 430 0040 FFF7FEFF 		bl	lv_style_set_pad_right
 431              	.LVL48:
 533:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_top(style, value);
 432              		.loc 5 533 5 view .LVU122
 433 0044 0021     		movs	r1, #0
 434 0046 2046     		mov	r0, r4
 435 0048 FFF7FEFF 		bl	lv_style_set_pad_top
 436              	.LVL49:
 534:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_style.h ****     lv_style_set_pad_bottom(style, value);
 437              		.loc 5 534 5 view .LVU123
 438 004c 0021     		movs	r1, #0
 439 004e 2046     		mov	r0, r4
 440 0050 FFF7FEFF 		bl	lv_style_set_pad_bottom
 441              	.LVL50:
 442              		.loc 5 534 5 is_stmt 0 view .LVU124
 443              	.LBE56:
 444              	.LBE55:
  66:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_obj_add_style(lv_scr_act(), &style, 0);
 445              		.loc 1 66 5 is_stmt 1 view .LVU125
 446              	.LBB57:
 447              	.LBI57:
 448              		.file 6 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_disp.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @file lv_disp.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifndef LV_DISP_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #define LV_DISP_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "../hal/lv_hal.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 44


  17:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_obj.h"
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_theme.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      DEFINES
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      TYPEDEFS
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** typedef enum {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_NONE,
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_LEFT,
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_RIGHT,
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_TOP,
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_BOTTOM,
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_LEFT,
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_RIGHT,
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_TOP,
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_BOTTOM,
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_IN,
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_ON = LV_SCR_LOAD_ANIM_FADE_IN, /*For backward compatibility*/
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_OUT,
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_LEFT,
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_RIGHT,
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_TOP,
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_BOTTOM,
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** } lv_scr_load_anim_t;
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * GLOBAL PROTOTYPES
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the active screen
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which active screen should be get. (NULL to use the default
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen object (loaded by 'lv_scr_load()')
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp);
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the previous screen. Only used during screen transitions.
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which previous screen should be get. (NULL to use the default
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the previous screen object or NULL if not used now
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp);
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Make a screen active
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to a screen
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_load_scr(lv_obj_t * scr);
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 45


  74:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the top layer. (Same on every screen and it is above the normal screen layer)
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the top layer object (transparent screen sized lv_obj)
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp);
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the sys. layer. (Same on every screen and it is above the normal screen and the top
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * layer)
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default sc
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the sys layer object (transparent screen sized lv_obj)
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp);
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the theme of a display
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_theme(lv_disp_t * disp, lv_theme_t * th);
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the theme of a display
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return the display's theme (can be NULL)
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_theme_t * lv_disp_get_theme(lv_disp_t * disp);
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background color of a display
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param color color of the background
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_color(lv_disp_t * disp, lv_color_t color);
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background image of a display
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param img_src path to file or pointer to an `lv_img_dsc_t` variable
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_image(lv_disp_t * disp, const void  * img_src);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set opacity of the background
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param opa opacity (0..255)
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_opa(lv_disp_t * disp, lv_opa_t opa);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Switch screen with animation
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to the new screen to load
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param anim_type type of the animation from `lv_scr_load_anim_t`, e.g. `LV_SCR_LOAD_ANIM_MOVE_LE
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param time time of the animation
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param delay delay before the transition
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param auto_del true: automatically delete the old screen
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_scr_load_anim(lv_obj_t * scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 46


 131:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get elapsed time since last user activity on a display (e.g. click)
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to get the overall smallest inactivity)
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return elapsed ticks (milliseconds) since the last activity
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** uint32_t lv_disp_get_inactive_time(const lv_disp_t * disp);
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Manually trigger an activity on a display
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_trig_activity(lv_disp_t * disp);
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Clean any CPU cache that is related to the display.
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_clean_dcache(lv_disp_t * disp);
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Temporarily enable and disable the invalidation of the display.
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param en true: enable invalidation; false: invalidation
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_enable_invalidation(lv_disp_t * disp, bool en);
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get display invalidation is enabled.
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return return true if invalidation is enabled
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** bool lv_disp_is_invalidation_enabled(lv_disp_t * disp);
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get a pointer to the screen refresher timer to
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * modify its parameters with `lv_timer_...` functions.
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the display refresher timer. (NULL on error)
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_timer_t * _lv_disp_get_refr_timer(lv_disp_t * disp);
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*------------------------------------------------
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * To improve backward compatibility
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Recommended only if you have one display
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *------------------------------------------------*/
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the active screen of the default display
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** static inline lv_obj_t * lv_scr_act(void)
 449              		.loc 6 182 26 view .LVU126
 450              	.LBB58:
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     return lv_disp_get_scr_act(lv_disp_get_default());
 451              		.loc 6 184 5 view .LVU127
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 47


 452              		.loc 6 184 12 is_stmt 0 view .LVU128
 453 0054 FFF7FEFF 		bl	lv_disp_get_default
 454              	.LVL51:
 455 0058 FFF7FEFF 		bl	lv_disp_get_scr_act
 456              	.LVL52:
 457              	.LBE58:
 458              	.LBE57:
 459              		.loc 1 66 5 view .LVU129
 460 005c 0022     		movs	r2, #0
 461 005e 2146     		mov	r1, r4
 462 0060 FFF7FEFF 		bl	lv_obj_add_style
 463              	.LVL53:
  67:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  68:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_obj_t * roller1 = lv_roller_create(lv_scr_act());
 464              		.loc 1 68 5 is_stmt 1 view .LVU130
 465              	.LBB59:
 466              	.LBI59:
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 467              		.loc 6 182 26 view .LVU131
 468              	.LBB60:
 469              		.loc 6 184 5 view .LVU132
 470              		.loc 6 184 12 is_stmt 0 view .LVU133
 471 0064 FFF7FEFF 		bl	lv_disp_get_default
 472              	.LVL54:
 473 0068 FFF7FEFF 		bl	lv_disp_get_scr_act
 474              	.LVL55:
 475              	.LBE60:
 476              	.LBE59:
 477              		.loc 1 68 26 view .LVU134
 478 006c FFF7FEFF 		bl	lv_roller_create
 479              	.LVL56:
 480 0070 0546     		mov	r5, r0
 481              	.LVL57:
  69:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_obj_add_style(roller1, &style, 0);
 482              		.loc 1 69 5 is_stmt 1 view .LVU135
 483 0072 0022     		movs	r2, #0
 484 0074 2146     		mov	r1, r4
 485 0076 FFF7FEFF 		bl	lv_obj_add_style
 486              	.LVL58:
  70:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_obj_set_style_bg_opa(roller1, LV_OPA_TRANSP, LV_PART_SELECTED);
 487              		.loc 1 70 5 view .LVU136
 488 007a 4FF48022 		mov	r2, #262144
 489 007e 0021     		movs	r1, #0
 490 0080 2846     		mov	r0, r5
 491 0082 FFF7FEFF 		bl	lv_obj_set_style_bg_opa
 492              	.LVL59:
  71:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  72:lvgl/examples/widgets/roller/lv_example_roller_3.c **** #if LV_FONT_MONTSERRAT_22
  73:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_obj_set_style_text_font(roller1, &lv_font_montserrat_22, LV_PART_SELECTED);
  74:lvgl/examples/widgets/roller/lv_example_roller_3.c **** #endif
  75:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  76:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_roller_set_options(roller1,
 493              		.loc 1 76 5 view .LVU137
 494 0086 0022     		movs	r2, #0
 495 0088 0B49     		ldr	r1, .L15+4
 496 008a 2846     		mov	r0, r5
 497 008c FFF7FEFF 		bl	lv_roller_set_options
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 48


 498              	.LVL60:
  77:lvgl/examples/widgets/roller/lv_example_roller_3.c ****                           "January\n"
  78:lvgl/examples/widgets/roller/lv_example_roller_3.c ****                           "February\n"
  79:lvgl/examples/widgets/roller/lv_example_roller_3.c ****                           "March\n"
  80:lvgl/examples/widgets/roller/lv_example_roller_3.c ****                           "April\n"
  81:lvgl/examples/widgets/roller/lv_example_roller_3.c ****                           "May\n"
  82:lvgl/examples/widgets/roller/lv_example_roller_3.c ****                           "June\n"
  83:lvgl/examples/widgets/roller/lv_example_roller_3.c ****                           "July\n"
  84:lvgl/examples/widgets/roller/lv_example_roller_3.c ****                           "August\n"
  85:lvgl/examples/widgets/roller/lv_example_roller_3.c ****                           "September\n"
  86:lvgl/examples/widgets/roller/lv_example_roller_3.c ****                           "October\n"
  87:lvgl/examples/widgets/roller/lv_example_roller_3.c ****                           "November\n"
  88:lvgl/examples/widgets/roller/lv_example_roller_3.c ****                           "December",
  89:lvgl/examples/widgets/roller/lv_example_roller_3.c ****                           LV_ROLLER_MODE_NORMAL);
  90:lvgl/examples/widgets/roller/lv_example_roller_3.c **** 
  91:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_obj_center(roller1);
 499              		.loc 1 91 5 view .LVU138
 500              	.LBB61:
 501              	.LBI61:
 502              		.file 7 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\core\\lv_obj_pos.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @file lv_obj_pos.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #ifndef LV_OBJ_POS_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #define LV_OBJ_POS_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #include "../misc/lv_area.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /*********************
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *      DEFINES
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *********************/
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**********************
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *      TYPEDEFS
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  **********************/
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** struct _lv_obj_t;
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** typedef void (*lv_layout_update_cb_t)(struct _lv_obj_t *, void * user_data);
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** typedef struct {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****     lv_layout_update_cb_t cb;
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****     void * user_data;
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** } lv_layout_dsc_t;
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**********************
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * GLOBAL PROTOTYPES
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  **********************/
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 49


  38:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the position of an object relative to the set alignment.
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param x         new x coordinate
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param y         new y coordinate
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_pos(struct _lv_obj_t * obj, lv_coord_t x, lv_coord_t y);
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the x coordinate of an object
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param x         new x coordinate
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_x(struct _lv_obj_t * obj, lv_coord_t x);
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the y coordinate of an object
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param y         new y coordinate
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_y(struct _lv_obj_t * obj, lv_coord_t y);
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the size of an object.
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param w         the new width
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param h         the new height
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            possible values are:
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  LV_SIZE_PCT(x)     to set size in percentage of the parent's content area size 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_size(struct _lv_obj_t * obj, lv_coord_t w, lv_coord_t h);
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Recalculate the size of the object
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @return          true: the size has been changed
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** bool lv_obj_refr_size(struct _lv_obj_t * obj);
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the width of an object
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param w         the new width
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 50


  95:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            possible values are:
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  lv_pct(x)           to set size in percentage of the parent's content area size
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_width(struct _lv_obj_t * obj, lv_coord_t w);
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the height of an object
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param h         the new height
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            possible values are:
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  lv_pct(x)           to set size in percentage of the parent's content area size
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_height(struct _lv_obj_t * obj, lv_coord_t h);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the width reduced by the left and right padding and the border width.
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param w         the width without paddings in pixels
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_content_width(struct _lv_obj_t * obj, lv_coord_t w);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the height reduced by the top and bottom padding and the border width.
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param h         the height without paddings in pixels
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_content_height(struct _lv_obj_t * obj, lv_coord_t h);
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set a layout for an object
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param layout    pointer to a layout descriptor to set
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_layout(struct _lv_obj_t * obj, uint32_t layout);
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Test whether the and object is positioned by a layout or not
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to test
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @return true:    positioned by a layout; false: not positioned by a layout
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** bool lv_obj_is_layout_positioned(const struct _lv_obj_t * obj);
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Mark the object for layout update.
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj      pointer to an object whose children needs to be updated
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_mark_layout_as_dirty(struct _lv_obj_t * obj);
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Update the layout of an object.
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj      pointer to an object whose children needs to be updated
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 51


 152:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_update_layout(const struct _lv_obj_t * obj);
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Register a new layout
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param cb        the layout update callback
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param user_data custom data that will be passed to `cb`
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @return          the ID of the new layout
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data);
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Change the alignment of an object.
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum) `LV_ALIGN_OUT_...` can't be used.
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_align(struct _lv_obj_t * obj, lv_align_t align);
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Change the alignment of an object and set new coordinates.
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Equivalent to:
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * lv_obj_set_align(obj, align);
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * lv_obj_set_pos(obj, x_ofs, y_ofs);
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum) `LV_ALIGN_OUT_...` can't be used.
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param x_ofs     x coordinate offset after alignment
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param y_ofs     y coordinate offset after alignment
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_align(struct _lv_obj_t * obj, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs);
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Align an object to an other object.
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param base      pointer to an other object (if NULL `obj`s parent is used). 'obj' will be align
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum)
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param x_ofs     x coordinate offset after alignment
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param y_ofs     y coordinate offset after alignment
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            if the position or size of `base` changes `obj` needs to be aligned manually ag
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_align_to(struct _lv_obj_t * obj, const struct _lv_obj_t * base, lv_align_t align, lv_co
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****                      lv_coord_t y_ofs);
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Align an object to the center on its parent.
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            if the parent size changes `obj` needs to be aligned manually again
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** static inline void lv_obj_center(struct _lv_obj_t * obj)
 503              		.loc 7 199 20 view .LVU139
 504              	.LBB62:
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** {
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****     lv_obj_align(obj, LV_ALIGN_CENTER, 0, 0);
 505              		.loc 7 201 5 view .LVU140
 506 0090 0023     		movs	r3, #0
 507 0092 1A46     		mov	r2, r3
 508 0094 0921     		movs	r1, #9
 509 0096 2846     		mov	r0, r5
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 52


 510 0098 FFF7FEFF 		bl	lv_obj_align
 511              	.LVL61:
 512              		.loc 7 201 5 is_stmt 0 view .LVU141
 513              	.LBE62:
 514              	.LBE61:
  92:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_roller_set_visible_row_count(roller1, 3);
 515              		.loc 1 92 5 is_stmt 1 view .LVU142
 516 009c 0321     		movs	r1, #3
 517 009e 2846     		mov	r0, r5
 518 00a0 FFF7FEFF 		bl	lv_roller_set_visible_row_count
 519              	.LVL62:
  93:lvgl/examples/widgets/roller/lv_example_roller_3.c ****     lv_obj_add_event_cb(roller1, mask_event_cb, LV_EVENT_ALL, NULL);
 520              		.loc 1 93 5 view .LVU143
 521 00a4 0023     		movs	r3, #0
 522 00a6 1A46     		mov	r2, r3
 523 00a8 0449     		ldr	r1, .L15+8
 524 00aa 2846     		mov	r0, r5
 525 00ac FFF7FEFF 		bl	lv_obj_add_event_cb
 526              	.LVL63:
  94:lvgl/examples/widgets/roller/lv_example_roller_3.c **** }
 527              		.loc 1 94 1 is_stmt 0 view .LVU144
 528 00b0 38BD     		pop	{r3, r4, r5, pc}
 529              	.LVL64:
 530              	.L16:
 531              		.loc 1 94 1 view .LVU145
 532 00b2 00BF     		.align	2
 533              	.L15:
 534 00b4 00000000 		.word	.LANCHOR2
 535 00b8 00000000 		.word	.LC0
 536 00bc 00000000 		.word	mask_event_cb
 537              		.cfi_endproc
 538              	.LFE205:
 540              		.section	.bss.style.2,"aw",%nobits
 541              		.align	2
 542              		.set	.LANCHOR2,. + 0
 545              	style.2:
 546 0000 00000000 		.space	8
 546      00000000 
 547              		.section	.data.mask_bottom_id.0,"aw"
 548              		.align	1
 549              		.set	.LANCHOR1,. + 0
 552              	mask_bottom_id.0:
 553 0000 FFFF     		.short	-1
 554              		.section	.data.mask_top_id.1,"aw"
 555              		.align	1
 556              		.set	.LANCHOR0,. + 0
 559              	mask_top_id.1:
 560 0000 FFFF     		.short	-1
 561              		.text
 562              	.Letext0:
 563              		.file 8 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 564              		.file 9 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 565              		.file 10 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_area.h"
 566              		.file 11 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj.h"
 567              		.file 12 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\draw\\lv_draw_mask.h"
 568              		.file 13 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_ll.h"
 569              		.file 14 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_group.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 53


 570              		.file 15 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_scroll.h"
 571              		.file 16 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_style.h"
 572              		.file 17 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_draw.h"
 573              		.file 18 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_class.h"
 574              		.file 19 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_event.h"
 575              		.file 20 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/widgets/lv_roller.h"
 576              		.file 21 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style_gen.h"
 577              		.file 22 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/hal/lv_hal_disp.h"
 578              		.file 23 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/misc/lv_mem.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s 			page 54


DEFINED SYMBOLS
                            *ABS*:00000000 lv_example_roller_3.c
C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s:19     .text.mask_event_cb:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s:24     .text.mask_event_cb:00000000 mask_event_cb
C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s:326    .text.mask_event_cb:00000138 $d
C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s:332    .rodata.lv_example_roller_3.str1.4:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s:338    .text.lv_example_roller_3:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s:344    .text.lv_example_roller_3:00000000 lv_example_roller_3
C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s:534    .text.lv_example_roller_3:000000b4 $d
C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s:541    .bss.style.2:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s:545    .bss.style.2:00000000 style.2
C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s:548    .data.mask_bottom_id.0:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s:552    .data.mask_bottom_id.0:00000000 mask_bottom_id.0
C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s:555    .data.mask_top_id.1:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccjFLrys.s:559    .data.mask_top_id.1:00000000 mask_top_id.1

UNDEFINED SYMBOLS
lv_event_get_code
lv_event_get_target
lv_event_set_cover_res
lv_obj_get_style_prop
lv_obj_get_coords
lv_obj_get_height
lv_mem_buf_get
lv_draw_mask_fade_init
lv_draw_mask_add
lv_draw_mask_remove_id
lv_draw_mask_free_param
lv_mem_buf_release
lv_style_init
lv_style_set_bg_color
lv_style_set_text_color
lv_style_set_border_width
lv_style_set_pad_left
lv_style_set_pad_right
lv_style_set_pad_top
lv_style_set_pad_bottom
lv_disp_get_default
lv_disp_get_scr_act
lv_obj_add_style
lv_roller_create
lv_obj_set_style_bg_opa
lv_roller_set_options
lv_obj_align
lv_roller_set_visible_row_count
lv_obj_add_event_cb
