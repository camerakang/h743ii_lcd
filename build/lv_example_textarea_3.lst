ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_example_textarea_3.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.ta_event_cb,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	ta_event_cb:
  25              	.LVL0:
  26              	.LFB205:
  27              		.file 1 "lvgl/examples/widgets/textarea/lv_example_textarea_3.c"
   1:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** #include "../../lv_examples.h"
   2:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** #if LV_USE_TEXTAREA && LV_USE_KEYBOARD && LV_BUILD_EXAMPLES
   3:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** 
   4:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** static void ta_event_cb(lv_event_t * e);
   5:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** 
   6:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** static lv_obj_t * kb;
   7:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** 
   8:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** /**
   9:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****  * Automatically format text like a clock. E.g. "12:34"
  10:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****  * Add the ':' automatically.
  11:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****  */
  12:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** void lv_example_textarea_3(void)
  13:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** {
  14:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     /*Create the text area*/
  15:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_obj_t * ta = lv_textarea_create(lv_scr_act());
  16:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_obj_add_event_cb(ta, ta_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
  17:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_textarea_set_accepted_chars(ta, "0123456789:");
  18:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_textarea_set_max_length(ta, 5);
  19:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_textarea_set_one_line(ta, true);
  20:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_textarea_set_text(ta, "");
  21:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** 
  22:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     /*Create a keyboard*/
  23:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     kb = lv_keyboard_create(lv_scr_act());
  24:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_obj_set_size(kb,  LV_HOR_RES, LV_VER_RES / 2);
  25:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_keyboard_set_mode(kb, LV_KEYBOARD_MODE_NUMBER);
  26:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_keyboard_set_textarea(kb, ta);
  27:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** }
  28:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** 
  29:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** static void ta_event_cb(lv_event_t * e)
  30:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** {
  28              		.loc 1 30 1 view -0
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s 			page 2


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 30 1 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  31:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_obj_t * ta = lv_event_get_target(e);
  37              		.loc 1 31 5 is_stmt 1 view .LVU2
  38              		.loc 1 31 21 is_stmt 0 view .LVU3
  39 0002 FFF7FEFF 		bl	lv_event_get_target
  40              	.LVL1:
  41              		.loc 1 31 21 view .LVU4
  42 0006 0446     		mov	r4, r0
  43              	.LVL2:
  32:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     const char * txt = lv_textarea_get_text(ta);
  44              		.loc 1 32 5 is_stmt 1 view .LVU5
  45              		.loc 1 32 24 is_stmt 0 view .LVU6
  46 0008 FFF7FEFF 		bl	lv_textarea_get_text
  47              	.LVL3:
  33:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     if(txt[0] >= '0' && txt[0] <= '9' &&
  48              		.loc 1 33 5 is_stmt 1 view .LVU7
  49              		.loc 1 33 11 is_stmt 0 view .LVU8
  50 000c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  51              		.loc 1 33 22 view .LVU9
  52 000e 303B     		subs	r3, r3, #48
  53 0010 DBB2     		uxtb	r3, r3
  54              		.loc 1 33 7 view .LVU10
  55 0012 092B     		cmp	r3, #9
  56 0014 07D8     		bhi	.L1
  34:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****        txt[1] >= '0' && txt[1] <= '9' &&
  57              		.loc 1 34 11 discriminator 1 view .LVU11
  58 0016 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  33:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     if(txt[0] >= '0' && txt[0] <= '9' &&
  59              		.loc 1 33 39 discriminator 1 view .LVU12
  60 0018 2F2B     		cmp	r3, #47
  61 001a 04D9     		bls	.L1
  62              		.loc 1 34 22 view .LVU13
  63 001c 392B     		cmp	r3, #57
  64 001e 02D8     		bhi	.L1
  35:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****        txt[2] != ':') {
  65              		.loc 1 35 11 discriminator 1 view .LVU14
  66 0020 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
  34:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****        txt[1] >= '0' && txt[1] <= '9' &&
  67              		.loc 1 34 39 discriminator 1 view .LVU15
  68 0022 3A2B     		cmp	r3, #58
  69 0024 00D1     		bne	.L4
  70              	.LVL4:
  71              	.L1:
  36:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****         lv_textarea_set_cursor_pos(ta, 2);
  37:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****         lv_textarea_add_char(ta, ':');
  38:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     }
  39:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** }
  72              		.loc 1 39 1 view .LVU16
  73 0026 10BD     		pop	{r4, pc}
  74              	.LVL5:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s 			page 3


  75              	.L4:
  36:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****         lv_textarea_set_cursor_pos(ta, 2);
  76              		.loc 1 36 9 is_stmt 1 view .LVU17
  77 0028 0221     		movs	r1, #2
  78 002a 2046     		mov	r0, r4
  79              	.LVL6:
  36:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****         lv_textarea_set_cursor_pos(ta, 2);
  80              		.loc 1 36 9 is_stmt 0 view .LVU18
  81 002c FFF7FEFF 		bl	lv_textarea_set_cursor_pos
  82              	.LVL7:
  37:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     }
  83              		.loc 1 37 9 is_stmt 1 view .LVU19
  84 0030 3A21     		movs	r1, #58
  85 0032 2046     		mov	r0, r4
  86 0034 FFF7FEFF 		bl	lv_textarea_add_char
  87              	.LVL8:
  88              		.loc 1 39 1 is_stmt 0 view .LVU20
  89 0038 F5E7     		b	.L1
  90              		.cfi_endproc
  91              	.LFE205:
  93              		.section	.rodata.lv_example_textarea_3.str1.4,"aMS",%progbits,1
  94              		.align	2
  95              	.LC0:
  96 0000 30313233 		.ascii	"0123456789:\000"
  96      34353637 
  96      38393A00 
  97              		.align	2
  98              	.LC1:
  99 000c 00       		.ascii	"\000"
 100              		.section	.text.lv_example_textarea_3,"ax",%progbits
 101              		.align	1
 102              		.global	lv_example_textarea_3
 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 107              	lv_example_textarea_3:
 108              	.LFB204:
  13:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     /*Create the text area*/
 109              		.loc 1 13 1 is_stmt 1 view -0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113 0000 70B5     		push	{r4, r5, r6, lr}
 114              		.cfi_def_cfa_offset 16
 115              		.cfi_offset 4, -16
 116              		.cfi_offset 5, -12
 117              		.cfi_offset 6, -8
 118              		.cfi_offset 14, -4
  15:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_obj_add_event_cb(ta, ta_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 119              		.loc 1 15 5 view .LVU22
 120              	.LBB6:
 121              	.LBI6:
 122              		.file 2 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_disp.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @file lv_disp.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s 			page 4


   5:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifndef LV_DISP_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #define LV_DISP_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "../hal/lv_hal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_obj.h"
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_theme.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      DEFINES
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      TYPEDEFS
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** typedef enum {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_NONE,
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_LEFT,
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_RIGHT,
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_TOP,
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_BOTTOM,
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_LEFT,
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_RIGHT,
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_TOP,
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_BOTTOM,
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_IN,
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_ON = LV_SCR_LOAD_ANIM_FADE_IN, /*For backward compatibility*/
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_OUT,
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_LEFT,
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_RIGHT,
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_TOP,
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_BOTTOM,
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** } lv_scr_load_anim_t;
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * GLOBAL PROTOTYPES
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the active screen
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which active screen should be get. (NULL to use the default
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen object (loaded by 'lv_scr_load()')
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp);
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the previous screen. Only used during screen transitions.
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which previous screen should be get. (NULL to use the default
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s 			page 5


  62:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the previous screen object or NULL if not used now
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp);
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Make a screen active
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to a screen
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_load_scr(lv_obj_t * scr);
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the top layer. (Same on every screen and it is above the normal screen layer)
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the top layer object (transparent screen sized lv_obj)
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp);
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the sys. layer. (Same on every screen and it is above the normal screen and the top
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * layer)
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default sc
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the sys layer object (transparent screen sized lv_obj)
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp);
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the theme of a display
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_theme(lv_disp_t * disp, lv_theme_t * th);
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the theme of a display
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return the display's theme (can be NULL)
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_theme_t * lv_disp_get_theme(lv_disp_t * disp);
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background color of a display
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param color color of the background
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_color(lv_disp_t * disp, lv_color_t color);
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background image of a display
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param img_src path to file or pointer to an `lv_img_dsc_t` variable
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_image(lv_disp_t * disp, const void  * img_src);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set opacity of the background
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param opa opacity (0..255)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s 			page 6


 119:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_opa(lv_disp_t * disp, lv_opa_t opa);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Switch screen with animation
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to the new screen to load
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param anim_type type of the animation from `lv_scr_load_anim_t`, e.g. `LV_SCR_LOAD_ANIM_MOVE_LE
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param time time of the animation
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param delay delay before the transition
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param auto_del true: automatically delete the old screen
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_scr_load_anim(lv_obj_t * scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, 
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get elapsed time since last user activity on a display (e.g. click)
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to get the overall smallest inactivity)
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return elapsed ticks (milliseconds) since the last activity
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** uint32_t lv_disp_get_inactive_time(const lv_disp_t * disp);
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Manually trigger an activity on a display
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_trig_activity(lv_disp_t * disp);
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Clean any CPU cache that is related to the display.
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_clean_dcache(lv_disp_t * disp);
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Temporarily enable and disable the invalidation of the display.
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param en true: enable invalidation; false: invalidation
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_enable_invalidation(lv_disp_t * disp, bool en);
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get display invalidation is enabled.
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return return true if invalidation is enabled
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** bool lv_disp_is_invalidation_enabled(lv_disp_t * disp);
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get a pointer to the screen refresher timer to
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * modify its parameters with `lv_timer_...` functions.
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the display refresher timer. (NULL on error)
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_timer_t * _lv_disp_get_refr_timer(lv_disp_t * disp);
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*------------------------------------------------
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * To improve backward compatibility
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Recommended only if you have one display
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s 			page 7


 176:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *------------------------------------------------*/
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the active screen of the default display
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** static inline lv_obj_t * lv_scr_act(void)
 123              		.loc 2 182 26 view .LVU23
 124              	.LBB7:
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     return lv_disp_get_scr_act(lv_disp_get_default());
 125              		.loc 2 184 5 view .LVU24
 126              		.loc 2 184 12 is_stmt 0 view .LVU25
 127 0002 FFF7FEFF 		bl	lv_disp_get_default
 128              	.LVL9:
 129 0006 FFF7FEFF 		bl	lv_disp_get_scr_act
 130              	.LVL10:
 131              	.LBE7:
 132              	.LBE6:
  15:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_obj_add_event_cb(ta, ta_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 133              		.loc 1 15 21 view .LVU26
 134 000a FFF7FEFF 		bl	lv_textarea_create
 135              	.LVL11:
 136 000e 0446     		mov	r4, r0
 137              	.LVL12:
  16:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_textarea_set_accepted_chars(ta, "0123456789:");
 138              		.loc 1 16 5 is_stmt 1 view .LVU27
 139 0010 0023     		movs	r3, #0
 140 0012 1C22     		movs	r2, #28
 141 0014 1C49     		ldr	r1, .L9
 142 0016 FFF7FEFF 		bl	lv_obj_add_event_cb
 143              	.LVL13:
  17:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_textarea_set_max_length(ta, 5);
 144              		.loc 1 17 5 view .LVU28
 145 001a 1C49     		ldr	r1, .L9+4
 146 001c 2046     		mov	r0, r4
 147 001e FFF7FEFF 		bl	lv_textarea_set_accepted_chars
 148              	.LVL14:
  18:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_textarea_set_one_line(ta, true);
 149              		.loc 1 18 5 view .LVU29
 150 0022 0521     		movs	r1, #5
 151 0024 2046     		mov	r0, r4
 152 0026 FFF7FEFF 		bl	lv_textarea_set_max_length
 153              	.LVL15:
  19:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_textarea_set_text(ta, "");
 154              		.loc 1 19 5 view .LVU30
 155 002a 0121     		movs	r1, #1
 156 002c 2046     		mov	r0, r4
 157 002e FFF7FEFF 		bl	lv_textarea_set_one_line
 158              	.LVL16:
  20:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** 
 159              		.loc 1 20 5 view .LVU31
 160 0032 1749     		ldr	r1, .L9+8
 161 0034 2046     		mov	r0, r4
 162 0036 FFF7FEFF 		bl	lv_textarea_set_text
 163              	.LVL17:
  23:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_obj_set_size(kb,  LV_HOR_RES, LV_VER_RES / 2);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s 			page 8


 164              		.loc 1 23 5 view .LVU32
 165              	.LBB8:
 166              	.LBI8:
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 167              		.loc 2 182 26 view .LVU33
 168              	.LBB9:
 169              		.loc 2 184 5 view .LVU34
 170              		.loc 2 184 12 is_stmt 0 view .LVU35
 171 003a FFF7FEFF 		bl	lv_disp_get_default
 172              	.LVL18:
 173 003e FFF7FEFF 		bl	lv_disp_get_scr_act
 174              	.LVL19:
 175              	.LBE9:
 176              	.LBE8:
  23:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_obj_set_size(kb,  LV_HOR_RES, LV_VER_RES / 2);
 177              		.loc 1 23 10 view .LVU36
 178 0042 FFF7FEFF 		bl	lv_keyboard_create
 179              	.LVL20:
 180 0046 0546     		mov	r5, r0
  23:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_obj_set_size(kb,  LV_HOR_RES, LV_VER_RES / 2);
 181              		.loc 1 23 8 view .LVU37
 182 0048 124B     		ldr	r3, .L9+12
 183 004a 1860     		str	r0, [r3]
  24:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_keyboard_set_mode(kb, LV_KEYBOARD_MODE_NUMBER);
 184              		.loc 1 24 5 is_stmt 1 view .LVU38
 185 004c FFF7FEFF 		bl	lv_disp_get_default
 186              	.LVL21:
 187 0050 FFF7FEFF 		bl	lv_disp_get_hor_res
 188              	.LVL22:
 189 0054 0646     		mov	r6, r0
  24:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_keyboard_set_mode(kb, LV_KEYBOARD_MODE_NUMBER);
 190              		.loc 1 24 38 is_stmt 0 view .LVU39
 191 0056 FFF7FEFF 		bl	lv_disp_get_default
 192              	.LVL23:
 193 005a FFF7FEFF 		bl	lv_disp_get_ver_res
 194              	.LVL24:
  24:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_keyboard_set_mode(kb, LV_KEYBOARD_MODE_NUMBER);
 195              		.loc 1 24 5 view .LVU40
 196 005e 0246     		mov	r2, r0
 197 0060 0028     		cmp	r0, #0
 198 0062 0FDB     		blt	.L8
 199              	.L6:
 200 0064 42F34F02 		sbfx	r2, r2, #1, #16
 201 0068 3146     		mov	r1, r6
 202 006a 2846     		mov	r0, r5
 203 006c FFF7FEFF 		bl	lv_obj_set_size
 204              	.LVL25:
  25:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_keyboard_set_textarea(kb, ta);
 205              		.loc 1 25 5 is_stmt 1 view .LVU41
 206 0070 084D     		ldr	r5, .L9+12
 207 0072 0321     		movs	r1, #3
 208 0074 2868     		ldr	r0, [r5]
 209 0076 FFF7FEFF 		bl	lv_keyboard_set_mode
 210              	.LVL26:
  26:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** }
 211              		.loc 1 26 5 view .LVU42
 212 007a 2146     		mov	r1, r4
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s 			page 9


 213 007c 2868     		ldr	r0, [r5]
 214 007e FFF7FEFF 		bl	lv_keyboard_set_textarea
 215              	.LVL27:
  27:lvgl/examples/widgets/textarea/lv_example_textarea_3.c **** 
 216              		.loc 1 27 1 is_stmt 0 view .LVU43
 217 0082 70BD     		pop	{r4, r5, r6, pc}
 218              	.LVL28:
 219              	.L8:
  24:lvgl/examples/widgets/textarea/lv_example_textarea_3.c ****     lv_keyboard_set_mode(kb, LV_KEYBOARD_MODE_NUMBER);
 220              		.loc 1 24 5 view .LVU44
 221 0084 421C     		adds	r2, r0, #1
 222 0086 EDE7     		b	.L6
 223              	.L10:
 224              		.align	2
 225              	.L9:
 226 0088 00000000 		.word	ta_event_cb
 227 008c 00000000 		.word	.LC0
 228 0090 0C000000 		.word	.LC1
 229 0094 00000000 		.word	.LANCHOR0
 230              		.cfi_endproc
 231              	.LFE204:
 233              		.section	.bss.kb,"aw",%nobits
 234              		.align	2
 235              		.set	.LANCHOR0,. + 0
 238              	kb:
 239 0000 00000000 		.space	4
 240              		.text
 241              	.Letext0:
 242              		.file 3 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 243              		.file 4 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 244              		.file 5 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_area.h"
 245              		.file 6 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_color.h"
 246              		.file 7 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style.h"
 247              		.file 8 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj.h"
 248              		.file 9 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_ll.h"
 249              		.file 10 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_group.h"
 250              		.file 11 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_scroll.h"
 251              		.file 12 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_style.h"
 252              		.file 13 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_class.h"
 253              		.file 14 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_event.h"
 254              		.file 15 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/widgets/lv_bar.h"
 255              		.file 16 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/extra/widgets/keyboard/lv_keyboard.h"
 256              		.file 17 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/extra/widgets/imgbtn/lv_imgbtn.h"
 257              		.file 18 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/widgets/lv_textarea.h"
 258              		.file 19 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/hal/lv_hal_disp.h"
 259              		.file 20 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\core\\lv_obj_pos.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s 			page 10


DEFINED SYMBOLS
                            *ABS*:00000000 lv_example_textarea_3.c
C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s:19     .text.ta_event_cb:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s:24     .text.ta_event_cb:00000000 ta_event_cb
C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s:94     .rodata.lv_example_textarea_3.str1.4:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s:101    .text.lv_example_textarea_3:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s:107    .text.lv_example_textarea_3:00000000 lv_example_textarea_3
C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s:226    .text.lv_example_textarea_3:00000088 $d
C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s:234    .bss.kb:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMuSxhn.s:238    .bss.kb:00000000 kb

UNDEFINED SYMBOLS
lv_event_get_target
lv_textarea_get_text
lv_textarea_set_cursor_pos
lv_textarea_add_char
lv_disp_get_default
lv_disp_get_scr_act
lv_textarea_create
lv_obj_add_event_cb
lv_textarea_set_accepted_chars
lv_textarea_set_max_length
lv_textarea_set_one_line
lv_textarea_set_text
lv_keyboard_create
lv_disp_get_hor_res
lv_disp_get_ver_res
lv_obj_set_size
lv_keyboard_set_mode
lv_keyboard_set_textarea
