ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_example_btnmatrix_1.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.event_handler,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	event_handler:
  25              	.LVL0:
  26              	.LFB204:
  27              		.file 1 "lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c"
   1:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** #include "../../lv_examples.h"
   2:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** #if LV_USE_BTNMATRIX && LV_BUILD_EXAMPLES
   3:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** 
   4:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** static void event_handler(lv_event_t * e)
   5:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** {
  28              		.loc 1 5 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 5 1 is_stmt 0 view .LVU1
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 3, -16
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39 0002 0546     		mov	r5, r0
   6:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     lv_event_code_t code = lv_event_get_code(e);
  40              		.loc 1 6 5 is_stmt 1 view .LVU2
  41              		.loc 1 6 28 is_stmt 0 view .LVU3
  42 0004 FFF7FEFF 		bl	lv_event_get_code
  43              	.LVL1:
  44              		.loc 1 6 28 view .LVU4
  45 0008 0446     		mov	r4, r0
  46              	.LVL2:
   7:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     lv_obj_t * obj = lv_event_get_target(e);
  47              		.loc 1 7 5 is_stmt 1 view .LVU5
  48              		.loc 1 7 22 is_stmt 0 view .LVU6
  49 000a 2846     		mov	r0, r5
  50 000c FFF7FEFF 		bl	lv_event_get_target
  51              	.LVL3:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s 			page 2


   8:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     if(code == LV_EVENT_VALUE_CHANGED) {
  52              		.loc 1 8 5 is_stmt 1 view .LVU7
  53              		.loc 1 8 7 is_stmt 0 view .LVU8
  54 0010 1C2C     		cmp	r4, #28
  55 0012 00D0     		beq	.L4
  56              	.LVL4:
  57              	.L1:
   9:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****         uint32_t id = lv_btnmatrix_get_selected_btn(obj);
  10:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****         const char * txt = lv_btnmatrix_get_btn_text(obj, id);
  11:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** 
  12:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****         LV_LOG_USER("%s was pressed\n", txt);
  13:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     }
  14:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** }
  58              		.loc 1 14 1 view .LVU9
  59 0014 38BD     		pop	{r3, r4, r5, pc}
  60              	.LVL5:
  61              	.L4:
  62              		.loc 1 14 1 view .LVU10
  63 0016 0546     		mov	r5, r0
  64              	.LVL6:
  65              	.LBB2:
   9:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****         uint32_t id = lv_btnmatrix_get_selected_btn(obj);
  66              		.loc 1 9 9 is_stmt 1 view .LVU11
   9:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****         uint32_t id = lv_btnmatrix_get_selected_btn(obj);
  67              		.loc 1 9 23 is_stmt 0 view .LVU12
  68 0018 FFF7FEFF 		bl	lv_btnmatrix_get_selected_btn
  69              	.LVL7:
   9:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****         uint32_t id = lv_btnmatrix_get_selected_btn(obj);
  70              		.loc 1 9 23 view .LVU13
  71 001c 0146     		mov	r1, r0
  72              	.LVL8:
  10:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** 
  73              		.loc 1 10 9 is_stmt 1 view .LVU14
  10:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** 
  74              		.loc 1 10 28 is_stmt 0 view .LVU15
  75 001e 2846     		mov	r0, r5
  76 0020 FFF7FEFF 		bl	lv_btnmatrix_get_btn_text
  77              	.LVL9:
  12:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     }
  78              		.loc 1 12 9 is_stmt 1 view .LVU16
  12:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     }
  79              		.loc 1 12 9 view .LVU17
  12:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     }
  80              		.loc 1 12 9 view .LVU18
  81              	.LBE2:
  82              		.loc 1 14 1 is_stmt 0 view .LVU19
  83 0024 F6E7     		b	.L1
  84              		.cfi_endproc
  85              	.LFE204:
  87              		.section	.text.lv_example_btnmatrix_1,"ax",%progbits
  88              		.align	1
  89              		.global	lv_example_btnmatrix_1
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  94              	lv_example_btnmatrix_1:
  95              	.LFB205:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s 			page 3


  15:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** 
  16:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** static const char * btnm_map[] = {"1", "2", "3", "4", "5", "\n",
  17:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****                                   "6", "7", "8", "9", "0", "\n",
  18:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****                                   "Action1", "Action2", ""
  19:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****                                  };
  20:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** 
  21:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** void lv_example_btnmatrix_1(void)
  22:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** {
  96              		.loc 1 22 1 is_stmt 1 view -0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100 0000 10B5     		push	{r4, lr}
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 4, -8
 103              		.cfi_offset 14, -4
  23:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     lv_obj_t * btnm1 = lv_btnmatrix_create(lv_scr_act());
 104              		.loc 1 23 5 view .LVU21
 105              	.LBB5:
 106              	.LBI5:
 107              		.file 2 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_disp.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @file lv_disp.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifndef LV_DISP_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #define LV_DISP_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "../hal/lv_hal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_obj.h"
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_theme.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      DEFINES
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      TYPEDEFS
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** typedef enum {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_NONE,
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_LEFT,
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_RIGHT,
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_TOP,
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_BOTTOM,
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_LEFT,
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_RIGHT,
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_TOP,
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s 			page 4


  37:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_BOTTOM,
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_IN,
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_ON = LV_SCR_LOAD_ANIM_FADE_IN, /*For backward compatibility*/
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_OUT,
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_LEFT,
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_RIGHT,
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_TOP,
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_BOTTOM,
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** } lv_scr_load_anim_t;
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * GLOBAL PROTOTYPES
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the active screen
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which active screen should be get. (NULL to use the default
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen object (loaded by 'lv_scr_load()')
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp);
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the previous screen. Only used during screen transitions.
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which previous screen should be get. (NULL to use the default
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the previous screen object or NULL if not used now
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp);
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Make a screen active
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to a screen
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_load_scr(lv_obj_t * scr);
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the top layer. (Same on every screen and it is above the normal screen layer)
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the top layer object (transparent screen sized lv_obj)
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp);
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the sys. layer. (Same on every screen and it is above the normal screen and the top
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * layer)
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default sc
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the sys layer object (transparent screen sized lv_obj)
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp);
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the theme of a display
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_theme(lv_disp_t * disp, lv_theme_t * th);
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s 			page 5


  94:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the theme of a display
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return the display's theme (can be NULL)
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_theme_t * lv_disp_get_theme(lv_disp_t * disp);
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background color of a display
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param color color of the background
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_color(lv_disp_t * disp, lv_color_t color);
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background image of a display
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param img_src path to file or pointer to an `lv_img_dsc_t` variable
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_image(lv_disp_t * disp, const void  * img_src);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set opacity of the background
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param opa opacity (0..255)
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_opa(lv_disp_t * disp, lv_opa_t opa);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Switch screen with animation
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to the new screen to load
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param anim_type type of the animation from `lv_scr_load_anim_t`, e.g. `LV_SCR_LOAD_ANIM_MOVE_LE
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param time time of the animation
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param delay delay before the transition
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param auto_del true: automatically delete the old screen
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_scr_load_anim(lv_obj_t * scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, 
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get elapsed time since last user activity on a display (e.g. click)
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to get the overall smallest inactivity)
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return elapsed ticks (milliseconds) since the last activity
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** uint32_t lv_disp_get_inactive_time(const lv_disp_t * disp);
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Manually trigger an activity on a display
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_trig_activity(lv_disp_t * disp);
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Clean any CPU cache that is related to the display.
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_clean_dcache(lv_disp_t * disp);
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s 			page 6


 151:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Temporarily enable and disable the invalidation of the display.
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param en true: enable invalidation; false: invalidation
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_enable_invalidation(lv_disp_t * disp, bool en);
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get display invalidation is enabled.
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return return true if invalidation is enabled
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** bool lv_disp_is_invalidation_enabled(lv_disp_t * disp);
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get a pointer to the screen refresher timer to
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * modify its parameters with `lv_timer_...` functions.
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the display refresher timer. (NULL on error)
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_timer_t * _lv_disp_get_refr_timer(lv_disp_t * disp);
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*------------------------------------------------
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * To improve backward compatibility
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Recommended only if you have one display
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *------------------------------------------------*/
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the active screen of the default display
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** static inline lv_obj_t * lv_scr_act(void)
 108              		.loc 2 182 26 view .LVU22
 109              	.LBB6:
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     return lv_disp_get_scr_act(lv_disp_get_default());
 110              		.loc 2 184 5 view .LVU23
 111              		.loc 2 184 12 is_stmt 0 view .LVU24
 112 0002 FFF7FEFF 		bl	lv_disp_get_default
 113              	.LVL10:
 114 0006 FFF7FEFF 		bl	lv_disp_get_scr_act
 115              	.LVL11:
 116              	.LBE6:
 117              	.LBE5:
 118              		.loc 1 23 24 view .LVU25
 119 000a FFF7FEFF 		bl	lv_btnmatrix_create
 120              	.LVL12:
 121 000e 0446     		mov	r4, r0
 122              	.LVL13:
  24:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     lv_btnmatrix_set_map(btnm1, btnm_map);
 123              		.loc 1 24 5 is_stmt 1 view .LVU26
 124 0010 0F49     		ldr	r1, .L7
 125 0012 FFF7FEFF 		bl	lv_btnmatrix_set_map
 126              	.LVL14:
  25:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     lv_btnmatrix_set_btn_width(btnm1, 10, 2);        /*Make "Action1" twice as wide as "Action2"*/
 127              		.loc 1 25 5 view .LVU27
 128 0016 0222     		movs	r2, #2
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s 			page 7


 129 0018 0A21     		movs	r1, #10
 130 001a 2046     		mov	r0, r4
 131 001c FFF7FEFF 		bl	lv_btnmatrix_set_btn_width
 132              	.LVL15:
  26:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     lv_btnmatrix_set_btn_ctrl(btnm1, 10, LV_BTNMATRIX_CTRL_CHECKABLE);
 133              		.loc 1 26 5 view .LVU28
 134 0020 8022     		movs	r2, #128
 135 0022 0A21     		movs	r1, #10
 136 0024 2046     		mov	r0, r4
 137 0026 FFF7FEFF 		bl	lv_btnmatrix_set_btn_ctrl
 138              	.LVL16:
  27:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     lv_btnmatrix_set_btn_ctrl(btnm1, 11, LV_BTNMATRIX_CTRL_CHECKED);
 139              		.loc 1 27 5 view .LVU29
 140 002a 4FF48072 		mov	r2, #256
 141 002e 0B21     		movs	r1, #11
 142 0030 2046     		mov	r0, r4
 143 0032 FFF7FEFF 		bl	lv_btnmatrix_set_btn_ctrl
 144              	.LVL17:
  28:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     lv_obj_align(btnm1, LV_ALIGN_CENTER, 0, 0);
 145              		.loc 1 28 5 view .LVU30
 146 0036 0023     		movs	r3, #0
 147 0038 1A46     		mov	r2, r3
 148 003a 0921     		movs	r1, #9
 149 003c 2046     		mov	r0, r4
 150 003e FFF7FEFF 		bl	lv_obj_align
 151              	.LVL18:
  29:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c ****     lv_obj_add_event_cb(btnm1, event_handler, LV_EVENT_ALL, NULL);
 152              		.loc 1 29 5 view .LVU31
 153 0042 0023     		movs	r3, #0
 154 0044 1A46     		mov	r2, r3
 155 0046 0349     		ldr	r1, .L7+4
 156 0048 2046     		mov	r0, r4
 157 004a FFF7FEFF 		bl	lv_obj_add_event_cb
 158              	.LVL19:
  30:lvgl/examples/widgets/btnmatrix/lv_example_btnmatrix_1.c **** }
 159              		.loc 1 30 1 is_stmt 0 view .LVU32
 160 004e 10BD     		pop	{r4, pc}
 161              	.LVL20:
 162              	.L8:
 163              		.loc 1 30 1 view .LVU33
 164              		.align	2
 165              	.L7:
 166 0050 00000000 		.word	.LANCHOR0
 167 0054 00000000 		.word	event_handler
 168              		.cfi_endproc
 169              	.LFE205:
 171              		.section	.rodata.str1.4,"aMS",%progbits,1
 172              		.align	2
 173              	.LC0:
 174 0000 3100     		.ascii	"1\000"
 175 0002 0000     		.align	2
 176              	.LC1:
 177 0004 3200     		.ascii	"2\000"
 178 0006 0000     		.align	2
 179              	.LC2:
 180 0008 3300     		.ascii	"3\000"
 181 000a 0000     		.align	2
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s 			page 8


 182              	.LC3:
 183 000c 3400     		.ascii	"4\000"
 184 000e 0000     		.align	2
 185              	.LC4:
 186 0010 3500     		.ascii	"5\000"
 187 0012 0000     		.align	2
 188              	.LC5:
 189 0014 0A00     		.ascii	"\012\000"
 190 0016 0000     		.align	2
 191              	.LC6:
 192 0018 3600     		.ascii	"6\000"
 193 001a 0000     		.align	2
 194              	.LC7:
 195 001c 3700     		.ascii	"7\000"
 196 001e 0000     		.align	2
 197              	.LC8:
 198 0020 3800     		.ascii	"8\000"
 199 0022 0000     		.align	2
 200              	.LC9:
 201 0024 3900     		.ascii	"9\000"
 202 0026 0000     		.align	2
 203              	.LC10:
 204 0028 3000     		.ascii	"0\000"
 205 002a 0000     		.align	2
 206              	.LC11:
 207 002c 41637469 		.ascii	"Action1\000"
 207      6F6E3100 
 208              		.align	2
 209              	.LC12:
 210 0034 41637469 		.ascii	"Action2\000"
 210      6F6E3200 
 211              		.align	2
 212              	.LC13:
 213 003c 00       		.ascii	"\000"
 214              		.section	.data.btnm_map,"aw"
 215              		.align	2
 216              		.set	.LANCHOR0,. + 0
 219              	btnm_map:
 220 0000 00000000 		.word	.LC0
 221 0004 04000000 		.word	.LC1
 222 0008 08000000 		.word	.LC2
 223 000c 0C000000 		.word	.LC3
 224 0010 10000000 		.word	.LC4
 225 0014 14000000 		.word	.LC5
 226 0018 18000000 		.word	.LC6
 227 001c 1C000000 		.word	.LC7
 228 0020 20000000 		.word	.LC8
 229 0024 24000000 		.word	.LC9
 230 0028 28000000 		.word	.LC10
 231 002c 14000000 		.word	.LC5
 232 0030 2C000000 		.word	.LC11
 233 0034 34000000 		.word	.LC12
 234 0038 3C000000 		.word	.LC13
 235              		.text
 236              	.Letext0:
 237              		.file 3 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 238              		.file 4 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s 			page 9


 239              		.file 5 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_area.h"
 240              		.file 6 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_color.h"
 241              		.file 7 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style.h"
 242              		.file 8 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj.h"
 243              		.file 9 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_ll.h"
 244              		.file 10 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_group.h"
 245              		.file 11 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_scroll.h"
 246              		.file 12 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_style.h"
 247              		.file 13 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_class.h"
 248              		.file 14 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_event.h"
 249              		.file 15 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/widgets/lv_bar.h"
 250              		.file 16 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/widgets/lv_btnmatrix.h"
 251              		.file 17 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/extra/widgets/imgbtn/lv_imgbtn.h"
 252              		.file 18 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/hal/lv_hal_disp.h"
 253              		.file 19 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\core\\lv_obj_pos.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s 			page 10


DEFINED SYMBOLS
                            *ABS*:00000000 lv_example_btnmatrix_1.c
C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s:19     .text.event_handler:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s:24     .text.event_handler:00000000 event_handler
C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s:88     .text.lv_example_btnmatrix_1:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s:94     .text.lv_example_btnmatrix_1:00000000 lv_example_btnmatrix_1
C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s:166    .text.lv_example_btnmatrix_1:00000050 $d
C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s:172    .rodata.str1.4:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s:215    .data.btnm_map:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccKSkdTb.s:219    .data.btnm_map:00000000 btnm_map

UNDEFINED SYMBOLS
lv_event_get_code
lv_event_get_target
lv_btnmatrix_get_selected_btn
lv_btnmatrix_get_btn_text
lv_disp_get_default
lv_disp_get_scr_act
lv_btnmatrix_create
lv_btnmatrix_set_map
lv_btnmatrix_set_btn_width
lv_btnmatrix_set_btn_ctrl
lv_obj_align
lv_obj_add_event_cb
