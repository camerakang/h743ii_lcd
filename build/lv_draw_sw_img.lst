ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_draw_sw_img.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.convert_cb,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	convert_cb:
  25              	.LVL0:
  26              	.LFB162:
  27              		.file 1 "lvgl/src/draw/sw/lv_draw_sw_img.c"
   1:lvgl/src/draw/sw/lv_draw_sw_img.c **** /**
   2:lvgl/src/draw/sw/lv_draw_sw_img.c ****  * @file lv_draw_img.c
   3:lvgl/src/draw/sw/lv_draw_sw_img.c ****  *
   4:lvgl/src/draw/sw/lv_draw_sw_img.c ****  */
   5:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
   6:lvgl/src/draw/sw/lv_draw_sw_img.c **** /*********************
   7:lvgl/src/draw/sw/lv_draw_sw_img.c ****  *      INCLUDES
   8:lvgl/src/draw/sw/lv_draw_sw_img.c ****  *********************/
   9:lvgl/src/draw/sw/lv_draw_sw_img.c **** #include "lv_draw_sw.h"
  10:lvgl/src/draw/sw/lv_draw_sw_img.c **** #include "../lv_img_cache.h"
  11:lvgl/src/draw/sw/lv_draw_sw_img.c **** #include "../../hal/lv_hal_disp.h"
  12:lvgl/src/draw/sw/lv_draw_sw_img.c **** #include "../../misc/lv_log.h"
  13:lvgl/src/draw/sw/lv_draw_sw_img.c **** #include "../../core/lv_refr.h"
  14:lvgl/src/draw/sw/lv_draw_sw_img.c **** #include "../../misc/lv_mem.h"
  15:lvgl/src/draw/sw/lv_draw_sw_img.c **** #include "../../misc/lv_math.h"
  16:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  17:lvgl/src/draw/sw/lv_draw_sw_img.c **** /*********************
  18:lvgl/src/draw/sw/lv_draw_sw_img.c ****  *      DEFINES
  19:lvgl/src/draw/sw/lv_draw_sw_img.c ****  *********************/
  20:lvgl/src/draw/sw/lv_draw_sw_img.c **** #define MAX_BUF_SIZE (uint32_t) lv_disp_get_hor_res(_lv_refr_get_disp_refreshing())
  21:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  22:lvgl/src/draw/sw/lv_draw_sw_img.c **** /**********************
  23:lvgl/src/draw/sw/lv_draw_sw_img.c ****  *      TYPEDEFS
  24:lvgl/src/draw/sw/lv_draw_sw_img.c ****  **********************/
  25:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  26:lvgl/src/draw/sw/lv_draw_sw_img.c **** /**********************
  27:lvgl/src/draw/sw/lv_draw_sw_img.c ****  *  STATIC PROTOTYPES
  28:lvgl/src/draw/sw/lv_draw_sw_img.c ****  **********************/
  29:lvgl/src/draw/sw/lv_draw_sw_img.c **** static void convert_cb(const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w, lv_coor
  30:lvgl/src/draw/sw/lv_draw_sw_img.c ****                        lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, l
  31:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 2


  32:lvgl/src/draw/sw/lv_draw_sw_img.c **** /**********************
  33:lvgl/src/draw/sw/lv_draw_sw_img.c ****  *  STATIC VARIABLES
  34:lvgl/src/draw/sw/lv_draw_sw_img.c ****  **********************/
  35:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  36:lvgl/src/draw/sw/lv_draw_sw_img.c **** /**********************
  37:lvgl/src/draw/sw/lv_draw_sw_img.c ****  *      MACROS
  38:lvgl/src/draw/sw/lv_draw_sw_img.c ****  **********************/
  39:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  40:lvgl/src/draw/sw/lv_draw_sw_img.c **** /**********************
  41:lvgl/src/draw/sw/lv_draw_sw_img.c ****  *   GLOBAL FUNCTIONS
  42:lvgl/src/draw/sw/lv_draw_sw_img.c ****  **********************/
  43:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  44:lvgl/src/draw/sw/lv_draw_sw_img.c **** void LV_ATTRIBUTE_FAST_MEM lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx,
  45:lvgl/src/draw/sw/lv_draw_sw_img.c ****                                                   const lv_draw_img_dsc_t * draw_dsc,
  46:lvgl/src/draw/sw/lv_draw_sw_img.c ****                                                   const lv_area_t * coords, const uint8_t * src_buf
  47:lvgl/src/draw/sw/lv_draw_sw_img.c ****                                                   lv_img_cf_t cf)
  48:lvgl/src/draw/sw/lv_draw_sw_img.c **** {
  49:lvgl/src/draw/sw/lv_draw_sw_img.c ****     /*Use the clip area as draw area*/
  50:lvgl/src/draw/sw/lv_draw_sw_img.c ****     lv_area_t draw_area;
  51:lvgl/src/draw/sw/lv_draw_sw_img.c ****     lv_area_copy(&draw_area, draw_ctx->clip_area);
  52:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  53:lvgl/src/draw/sw/lv_draw_sw_img.c ****     bool mask_any = lv_draw_mask_is_any(&draw_area);
  54:lvgl/src/draw/sw/lv_draw_sw_img.c ****     bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  55:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  56:lvgl/src/draw/sw/lv_draw_sw_img.c ****     lv_area_t blend_area;
  57:lvgl/src/draw/sw/lv_draw_sw_img.c ****     lv_draw_sw_blend_dsc_t blend_dsc;
  58:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  59:lvgl/src/draw/sw/lv_draw_sw_img.c ****     lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
  60:lvgl/src/draw/sw/lv_draw_sw_img.c ****     blend_dsc.opa = draw_dsc->opa;
  61:lvgl/src/draw/sw/lv_draw_sw_img.c ****     blend_dsc.blend_mode = draw_dsc->blend_mode;
  62:lvgl/src/draw/sw/lv_draw_sw_img.c ****     blend_dsc.blend_area = &blend_area;
  63:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  64:lvgl/src/draw/sw/lv_draw_sw_img.c ****     /*The simplest case just copy the pixels into the draw_buf*/
  65:lvgl/src/draw/sw/lv_draw_sw_img.c ****     if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRA
  66:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = (const lv_color_t *)src_buf;
  67:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  68:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.blend_area = coords;
  69:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_draw_sw_blend(draw_ctx, &blend_dsc);
  70:lvgl/src/draw/sw/lv_draw_sw_img.c ****     }
  71:lvgl/src/draw/sw/lv_draw_sw_img.c ****     else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
  72:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_area_t clipped_coords;
  73:lvgl/src/draw/sw/lv_draw_sw_img.c ****         if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
  74:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  75:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_buf = (lv_opa_t *)src_buf;
  76:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_area = coords;
  77:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = NULL;
  78:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.color = draw_dsc->recolor;
  79:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
  80:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  81:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.blend_area = coords;
  82:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_draw_sw_blend(draw_ctx, &blend_dsc);
  83:lvgl/src/draw/sw/lv_draw_sw_img.c ****     }
  84:lvgl/src/draw/sw/lv_draw_sw_img.c **** #if LV_COLOR_DEPTH == 16
  85:lvgl/src/draw/sw/lv_draw_sw_img.c ****     else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_
  86:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t src_w = lv_area_get_width(coords);
  87:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t src_h = lv_area_get_height(coords);
  88:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = (const lv_color_t *)src_buf;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 3


  89:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_buf = (lv_opa_t *)src_buf;
  90:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
  91:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.blend_area = coords;
  92:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_area = coords;
  93:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
  94:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_draw_sw_blend(draw_ctx, &blend_dsc);
  95:lvgl/src/draw/sw/lv_draw_sw_img.c ****     }
  96:lvgl/src/draw/sw/lv_draw_sw_img.c **** #endif
  97:lvgl/src/draw/sw/lv_draw_sw_img.c ****     /*In the other cases every pixel need to be checked one-by-one*/
  98:lvgl/src/draw/sw/lv_draw_sw_img.c ****     else {
  99:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.x1 = draw_ctx->clip_area->x1;
 100:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.x2 = draw_ctx->clip_area->x2;
 101:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.y1 = draw_ctx->clip_area->y1;
 102:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.y2 = draw_ctx->clip_area->y2;
 103:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 104:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t src_w = lv_area_get_width(coords);
 105:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t src_h = lv_area_get_height(coords);
 106:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t blend_h = lv_area_get_height(&blend_area);
 107:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t blend_w = lv_area_get_width(&blend_area);
 108:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 109:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t max_buf_size = MAX_BUF_SIZE;
 110:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t blend_size = lv_area_get_size(&blend_area);
 111:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t buf_h;
 112:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t buf_w = blend_w;
 113:lvgl/src/draw/sw/lv_draw_sw_img.c ****         if(blend_size <= max_buf_size) {
 114:lvgl/src/draw/sw/lv_draw_sw_img.c ****             buf_h = blend_h;
 115:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 116:lvgl/src/draw/sw/lv_draw_sw_img.c ****         else {
 117:lvgl/src/draw/sw/lv_draw_sw_img.c ****             /*Round to full lines*/
 118:lvgl/src/draw/sw/lv_draw_sw_img.c ****             buf_h = max_buf_size / blend_w;
 119:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 120:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 121:lvgl/src/draw/sw/lv_draw_sw_img.c ****         /*Create buffers and masks*/
 122:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t buf_size = buf_w * buf_h;
 123:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 124:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 125:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 126:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_buf = mask_buf;
 127:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_area = &blend_area;
 128:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 129:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = rgb_buf;
 130:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t y_last = blend_area.y2;
 131:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.y2 = blend_area.y1 + buf_h - 1;
 132:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 133:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 134:lvgl/src/draw/sw/lv_draw_sw_img.c ****                                            draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
 135:lvgl/src/draw/sw/lv_draw_sw_img.c ****                                           LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 136:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_res = mask_res_def;
 137:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 138:lvgl/src/draw/sw/lv_draw_sw_img.c ****         while(blend_area.y1 <= y_last) {
 139:lvgl/src/draw/sw/lv_draw_sw_img.c ****             /*Apply transformations if any or separate the channels*/
 140:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_area_t transform_area;
 141:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_area_copy(&transform_area, &blend_area);
 142:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_area_move(&transform_area, -coords->x1, -coords->y1);
 143:lvgl/src/draw/sw/lv_draw_sw_img.c ****             if(transform) {
 144:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 145:lvgl/src/draw/sw/lv_draw_sw_img.c ****                                   draw_dsc, cf, rgb_buf, mask_buf);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 4


 146:lvgl/src/draw/sw/lv_draw_sw_img.c ****             }
 147:lvgl/src/draw/sw/lv_draw_sw_img.c ****             else {
 148:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 convert_cb(&transform_area, src_buf, src_w, src_h, src_w, draw_dsc, cf, rgb_buf, ma
 149:lvgl/src/draw/sw/lv_draw_sw_img.c ****             }
 150:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 151:lvgl/src/draw/sw/lv_draw_sw_img.c ****             /*Apply recolor*/
 152:lvgl/src/draw/sw/lv_draw_sw_img.c ****             if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 153:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 uint16_t premult_v[3];
 154:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_opa_t recolor_opa = draw_dsc->recolor_opa;
 155:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_color_t recolor = draw_dsc->recolor;
 156:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_color_premult(recolor, recolor_opa, premult_v);
 157:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 recolor_opa = 255 - recolor_opa;
 158:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 uint32_t i;
 159:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 for(i = 0; i < buf_size; i++) {
 160:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 161:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 }
 162:lvgl/src/draw/sw/lv_draw_sw_img.c ****             }
 163:lvgl/src/draw/sw/lv_draw_sw_img.c **** #if LV_DRAW_COMPLEX
 164:lvgl/src/draw/sw/lv_draw_sw_img.c ****             /*Apply the masks if any*/
 165:lvgl/src/draw/sw/lv_draw_sw_img.c ****             if(mask_any) {
 166:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_coord_t y;
 167:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_opa_t * mask_buf_tmp = mask_buf;
 168:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 for(y = blend_area.y1; y <= blend_area.y2; y++) {
 169:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     lv_draw_mask_res_t mask_res_line;
 170:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 171:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 172:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     if(mask_res_line == LV_DRAW_MASK_RES_TRANSP) {
 173:lvgl/src/draw/sw/lv_draw_sw_img.c ****                         lv_memset_00(mask_buf_tmp, blend_w);
 174:lvgl/src/draw/sw/lv_draw_sw_img.c ****                         blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 175:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     }
 176:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     else if(mask_res_line == LV_DRAW_MASK_RES_CHANGED) {
 177:lvgl/src/draw/sw/lv_draw_sw_img.c ****                         blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 178:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     }
 179:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     mask_buf_tmp += blend_w;
 180:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 }
 181:lvgl/src/draw/sw/lv_draw_sw_img.c ****             }
 182:lvgl/src/draw/sw/lv_draw_sw_img.c **** #endif
 183:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 184:lvgl/src/draw/sw/lv_draw_sw_img.c ****             /*Blend*/
 185:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_draw_sw_blend(draw_ctx, &blend_dsc);
 186:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 187:lvgl/src/draw/sw/lv_draw_sw_img.c ****             /*Go the the next lines*/
 188:lvgl/src/draw/sw/lv_draw_sw_img.c ****             blend_area.y1 = blend_area.y2 + 1;
 189:lvgl/src/draw/sw/lv_draw_sw_img.c ****             blend_area.y2 = blend_area.y1 + buf_h - 1;
 190:lvgl/src/draw/sw/lv_draw_sw_img.c ****             if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 191:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 192:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 193:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_mem_buf_release(mask_buf);
 194:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_mem_buf_release(rgb_buf);
 195:lvgl/src/draw/sw/lv_draw_sw_img.c ****     }
 196:lvgl/src/draw/sw/lv_draw_sw_img.c **** }
 197:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 198:lvgl/src/draw/sw/lv_draw_sw_img.c **** /**********************
 199:lvgl/src/draw/sw/lv_draw_sw_img.c ****  *   STATIC FUNCTIONS
 200:lvgl/src/draw/sw/lv_draw_sw_img.c ****  **********************/
 201:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 202:lvgl/src/draw/sw/lv_draw_sw_img.c **** /* Separate the image channels to RGB and Alpha to match LV_COLOR_DEPTH settings*/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 5


 203:lvgl/src/draw/sw/lv_draw_sw_img.c **** static void convert_cb(const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w, lv_coor
 204:lvgl/src/draw/sw/lv_draw_sw_img.c ****                        lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, l
 205:lvgl/src/draw/sw/lv_draw_sw_img.c **** {
  28              		.loc 1 205 1 view -0
  29              		.cfi_startproc
  30              		@ args = 20, pretend = 0, frame = 24
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 205 1 is_stmt 0 view .LVU1
  33 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  34              		.cfi_def_cfa_offset 36
  35              		.cfi_offset 4, -36
  36              		.cfi_offset 5, -32
  37              		.cfi_offset 6, -28
  38              		.cfi_offset 7, -24
  39              		.cfi_offset 8, -20
  40              		.cfi_offset 9, -16
  41              		.cfi_offset 10, -12
  42              		.cfi_offset 11, -8
  43              		.cfi_offset 14, -4
  44 0004 87B0     		sub	sp, sp, #28
  45              		.cfi_def_cfa_offset 64
  46 0006 0090     		str	r0, [sp]
  47 0008 0191     		str	r1, [sp, #4]
  48 000a 0292     		str	r2, [sp, #8]
  49 000c 0393     		str	r3, [sp, #12]
  50 000e BDF940B0 		ldrsh	fp, [sp, #64]
  51 0012 9DF848A0 		ldrb	r10, [sp, #72]	@ zero_extendqisi2
  52 0016 139C     		ldr	r4, [sp, #76]
  53 0018 149D     		ldr	r5, [sp, #80]
 206:lvgl/src/draw/sw/lv_draw_sw_img.c ****     LV_UNUSED(draw_dsc);
  54              		.loc 1 206 5 is_stmt 1 view .LVU2
 207:lvgl/src/draw/sw/lv_draw_sw_img.c ****     LV_UNUSED(src_h);
  55              		.loc 1 207 5 view .LVU3
 208:lvgl/src/draw/sw/lv_draw_sw_img.c ****     LV_UNUSED(src_w);
  56              		.loc 1 208 5 view .LVU4
 209:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 210:lvgl/src/draw/sw/lv_draw_sw_img.c ****     const uint8_t * src_tmp8 = (const uint8_t *)src_buf;
  57              		.loc 1 210 5 view .LVU5
  58              	.LVL1:
 211:lvgl/src/draw/sw/lv_draw_sw_img.c ****     lv_coord_t y;
  59              		.loc 1 211 5 view .LVU6
 212:lvgl/src/draw/sw/lv_draw_sw_img.c ****     lv_coord_t x;
  60              		.loc 1 212 5 view .LVU7
 213:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 214:lvgl/src/draw/sw/lv_draw_sw_img.c ****     if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  61              		.loc 1 214 5 view .LVU8
  62              		.loc 1 214 7 is_stmt 0 view .LVU9
  63 001a BAF1060F 		cmp	r10, #6
  64 001e 18BF     		it	ne
  65 0020 BAF1040F 		cmpne	r10, #4
  66 0024 09D0     		beq	.L19
 215:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t px_cnt = lv_area_get_size(dest_area);
 216:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_memset_ff(abuf, px_cnt);
 217:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 218:lvgl/src/draw/sw/lv_draw_sw_img.c ****         src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_c
 219:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t dest_w = lv_area_get_width(dest_area);
 220:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 6


 221:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 222:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 223:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_color_t * cbuf_tmp = cbuf;
 224:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = dest_area->y1; y <= dest_area->y2; y++) {
 225:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 226:lvgl/src/draw/sw/lv_draw_sw_img.c ****             src_tmp8 += src_stride_byte;
 227:lvgl/src/draw/sw/lv_draw_sw_img.c ****             cbuf_tmp += dest_w;
 228:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 229:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 230:lvgl/src/draw/sw/lv_draw_sw_img.c ****         /*Make "holes" for with Chroma keying*/
 231:lvgl/src/draw/sw/lv_draw_sw_img.c ****         if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 232:lvgl/src/draw/sw/lv_draw_sw_img.c ****             uint32_t i;
 233:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_color_t chk = LV_COLOR_CHROMA_KEY;
 234:lvgl/src/draw/sw/lv_draw_sw_img.c **** #if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
 235:lvgl/src/draw/sw/lv_draw_sw_img.c ****             uint8_t * cbuf_uint = (uint8_t *)cbuf;
 236:lvgl/src/draw/sw/lv_draw_sw_img.c ****             uint8_t chk_v = chk.full;
 237:lvgl/src/draw/sw/lv_draw_sw_img.c **** #elif LV_COLOR_DEPTH == 16
 238:lvgl/src/draw/sw/lv_draw_sw_img.c ****             uint16_t * cbuf_uint = (uint16_t *)cbuf;
 239:lvgl/src/draw/sw/lv_draw_sw_img.c ****             uint16_t chk_v = chk.full;
 240:lvgl/src/draw/sw/lv_draw_sw_img.c **** #elif LV_COLOR_DEPTH == 32
 241:lvgl/src/draw/sw/lv_draw_sw_img.c ****             uint32_t * cbuf_uint = (uint32_t *)cbuf;
 242:lvgl/src/draw/sw/lv_draw_sw_img.c ****             uint32_t chk_v = chk.full;
 243:lvgl/src/draw/sw/lv_draw_sw_img.c **** #endif
 244:lvgl/src/draw/sw/lv_draw_sw_img.c ****             for(i = 0; i < px_cnt; i++) {
 245:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 246:lvgl/src/draw/sw/lv_draw_sw_img.c ****             }
 247:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 248:lvgl/src/draw/sw/lv_draw_sw_img.c ****     }
 249:lvgl/src/draw/sw/lv_draw_sw_img.c ****     else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
  67              		.loc 1 249 10 is_stmt 1 view .LVU10
  68              		.loc 1 249 12 is_stmt 0 view .LVU11
  69 0026 BAF1050F 		cmp	r10, #5
  70 002a 4ED0     		beq	.L20
 250:lvgl/src/draw/sw/lv_draw_sw_img.c ****         src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_I
 251:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 252:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 253:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 254:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 255:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t dest_h = lv_area_get_height(dest_area);
 256:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t dest_w = lv_area_get_width(dest_area);
 257:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = 0; y < dest_h; y++) {
 258:lvgl/src/draw/sw/lv_draw_sw_img.c ****             for(x = 0; x < dest_w; x++) {
 259:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 260:lvgl/src/draw/sw/lv_draw_sw_img.c **** #if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
 261:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 cbuf[x].full = *src_tmp8;
 262:lvgl/src/draw/sw/lv_draw_sw_img.c **** #elif LV_COLOR_DEPTH == 16
 263:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
 264:lvgl/src/draw/sw/lv_draw_sw_img.c **** #elif LV_COLOR_DEPTH == 32
 265:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 cbuf[x] = *((lv_color_t *) src_tmp8);
 266:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 cbuf[x].ch.alpha = 0xff;
 267:lvgl/src/draw/sw/lv_draw_sw_img.c **** #endif
 268:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;
 269:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 270:lvgl/src/draw/sw/lv_draw_sw_img.c ****             }
 271:lvgl/src/draw/sw/lv_draw_sw_img.c ****             cbuf += dest_w;
 272:lvgl/src/draw/sw/lv_draw_sw_img.c ****             abuf += dest_w;
 273:lvgl/src/draw/sw/lv_draw_sw_img.c ****             src_tmp8 += src_new_line_step_byte;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 7


 274:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 275:lvgl/src/draw/sw/lv_draw_sw_img.c ****     }
 276:lvgl/src/draw/sw/lv_draw_sw_img.c ****     else if(cf == LV_IMG_CF_RGB565A8) {
  71              		.loc 1 276 10 is_stmt 1 view .LVU12
  72              		.loc 1 276 12 is_stmt 0 view .LVU13
  73 002c BAF1140F 		cmp	r10, #20
  74 0030 00F08B80 		beq	.L21
  75              	.LVL2:
  76              	.L1:
 277:lvgl/src/draw/sw/lv_draw_sw_img.c ****         src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_c
 278:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 279:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 280:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 281:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t dest_h = lv_area_get_height(dest_area);
 282:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t dest_w = lv_area_get_width(dest_area);
 283:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = 0; y < dest_h; y++) {
 284:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 285:lvgl/src/draw/sw/lv_draw_sw_img.c ****             cbuf += dest_w;
 286:lvgl/src/draw/sw/lv_draw_sw_img.c ****             src_tmp8 += src_stride_byte;
 287:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 288:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 289:lvgl/src/draw/sw/lv_draw_sw_img.c ****         src_tmp8 = (const uint8_t *)src_buf;
 290:lvgl/src/draw/sw/lv_draw_sw_img.c ****         src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 291:lvgl/src/draw/sw/lv_draw_sw_img.c ****         src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 292:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = 0; y < dest_h; y++) {
 293:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(abuf, src_tmp8, dest_w);
 294:lvgl/src/draw/sw/lv_draw_sw_img.c ****             abuf += dest_w;
 295:lvgl/src/draw/sw/lv_draw_sw_img.c ****             src_tmp8 += src_stride;
 296:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 297:lvgl/src/draw/sw/lv_draw_sw_img.c ****     }
 298:lvgl/src/draw/sw/lv_draw_sw_img.c **** }
  77              		.loc 1 298 1 view .LVU14
  78 0034 07B0     		add	sp, sp, #28
  79              		.cfi_remember_state
  80              		.cfi_def_cfa_offset 36
  81              		@ sp needed
  82 0036 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
  83              	.LVL3:
  84              	.L19:
  85              		.cfi_restore_state
  86              	.LBB40:
 215:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_memset_ff(abuf, px_cnt);
  87              		.loc 1 215 9 is_stmt 1 view .LVU15
 215:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_memset_ff(abuf, px_cnt);
  88              		.loc 1 215 27 is_stmt 0 view .LVU16
  89 003a 0646     		mov	r6, r0
  90 003c FFF7FEFF 		bl	lv_area_get_size
  91              	.LVL4:
 215:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_memset_ff(abuf, px_cnt);
  92              		.loc 1 215 27 view .LVU17
  93 0040 0146     		mov	r1, r0
  94 0042 0290     		str	r0, [sp, #8]
  95              	.LVL5:
 216:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  96              		.loc 1 216 9 is_stmt 1 view .LVU18
  97 0044 2846     		mov	r0, r5
  98              	.LVL6:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 8


 216:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
  99              		.loc 1 216 9 is_stmt 0 view .LVU19
 100 0046 FFF7FEFF 		bl	lv_memset_ff
 101              	.LVL7:
 218:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t dest_w = lv_area_get_width(dest_area);
 102              		.loc 1 218 9 is_stmt 1 view .LVU20
 218:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t dest_w = lv_area_get_width(dest_area);
 103              		.loc 1 218 44 is_stmt 0 view .LVU21
 104 004a 3246     		mov	r2, r6
 105 004c B6F90260 		ldrsh	r6, [r6, #2]
 218:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t dest_w = lv_area_get_width(dest_area);
 106              		.loc 1 218 82 view .LVU22
 107 0050 B2F90030 		ldrsh	r3, [r2]
 218:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t dest_w = lv_area_get_width(dest_area);
 108              		.loc 1 218 71 view .LVU23
 109 0054 06FB0B37 		mla	r7, r6, fp, r3
 218:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t dest_w = lv_area_get_width(dest_area);
 110              		.loc 1 218 18 view .LVU24
 111 0058 0199     		ldr	r1, [sp, #4]
 112 005a 01EB8707 		add	r7, r1, r7, lsl #2
 113              	.LVL8:
 219:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 114              		.loc 1 219 9 is_stmt 1 view .LVU25
 115              	.LBB41:
 116              	.LBI41:
 117              		.file 2 "lvgl/src/draw/sw/../../misc/lv_area.h"
   1:lvgl/src/draw/sw/../../misc/lv_area.h **** /**
   2:lvgl/src/draw/sw/../../misc/lv_area.h ****  * @file lv_area.h
   3:lvgl/src/draw/sw/../../misc/lv_area.h ****  *
   4:lvgl/src/draw/sw/../../misc/lv_area.h ****  */
   5:lvgl/src/draw/sw/../../misc/lv_area.h **** 
   6:lvgl/src/draw/sw/../../misc/lv_area.h **** #ifndef LV_AREA_H
   7:lvgl/src/draw/sw/../../misc/lv_area.h **** #define LV_AREA_H
   8:lvgl/src/draw/sw/../../misc/lv_area.h **** 
   9:lvgl/src/draw/sw/../../misc/lv_area.h **** #ifdef __cplusplus
  10:lvgl/src/draw/sw/../../misc/lv_area.h **** extern "C" {
  11:lvgl/src/draw/sw/../../misc/lv_area.h **** #endif
  12:lvgl/src/draw/sw/../../misc/lv_area.h **** 
  13:lvgl/src/draw/sw/../../misc/lv_area.h **** /*********************
  14:lvgl/src/draw/sw/../../misc/lv_area.h ****  *      INCLUDES
  15:lvgl/src/draw/sw/../../misc/lv_area.h ****  *********************/
  16:lvgl/src/draw/sw/../../misc/lv_area.h **** #include "../lv_conf_internal.h"
  17:lvgl/src/draw/sw/../../misc/lv_area.h **** #include <stdbool.h>
  18:lvgl/src/draw/sw/../../misc/lv_area.h **** #include <stdint.h>
  19:lvgl/src/draw/sw/../../misc/lv_area.h **** 
  20:lvgl/src/draw/sw/../../misc/lv_area.h **** /*********************
  21:lvgl/src/draw/sw/../../misc/lv_area.h ****  *      DEFINES
  22:lvgl/src/draw/sw/../../misc/lv_area.h ****  *********************/
  23:lvgl/src/draw/sw/../../misc/lv_area.h **** 
  24:lvgl/src/draw/sw/../../misc/lv_area.h **** #if LV_USE_LARGE_COORD
  25:lvgl/src/draw/sw/../../misc/lv_area.h **** typedef int32_t lv_coord_t;
  26:lvgl/src/draw/sw/../../misc/lv_area.h **** #else
  27:lvgl/src/draw/sw/../../misc/lv_area.h **** typedef int16_t lv_coord_t;
  28:lvgl/src/draw/sw/../../misc/lv_area.h **** #endif
  29:lvgl/src/draw/sw/../../misc/lv_area.h **** 
  30:lvgl/src/draw/sw/../../misc/lv_area.h **** /**********************
  31:lvgl/src/draw/sw/../../misc/lv_area.h ****  *      TYPEDEFS
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 9


  32:lvgl/src/draw/sw/../../misc/lv_area.h ****  **********************/
  33:lvgl/src/draw/sw/../../misc/lv_area.h **** 
  34:lvgl/src/draw/sw/../../misc/lv_area.h **** /**
  35:lvgl/src/draw/sw/../../misc/lv_area.h ****  * Represents a point on the screen.
  36:lvgl/src/draw/sw/../../misc/lv_area.h ****  */
  37:lvgl/src/draw/sw/../../misc/lv_area.h **** typedef struct {
  38:lvgl/src/draw/sw/../../misc/lv_area.h ****     lv_coord_t x;
  39:lvgl/src/draw/sw/../../misc/lv_area.h ****     lv_coord_t y;
  40:lvgl/src/draw/sw/../../misc/lv_area.h **** } lv_point_t;
  41:lvgl/src/draw/sw/../../misc/lv_area.h **** 
  42:lvgl/src/draw/sw/../../misc/lv_area.h **** /** Represents an area of the screen.*/
  43:lvgl/src/draw/sw/../../misc/lv_area.h **** typedef struct {
  44:lvgl/src/draw/sw/../../misc/lv_area.h ****     lv_coord_t x1;
  45:lvgl/src/draw/sw/../../misc/lv_area.h ****     lv_coord_t y1;
  46:lvgl/src/draw/sw/../../misc/lv_area.h ****     lv_coord_t x2;
  47:lvgl/src/draw/sw/../../misc/lv_area.h ****     lv_coord_t y2;
  48:lvgl/src/draw/sw/../../misc/lv_area.h **** } lv_area_t;
  49:lvgl/src/draw/sw/../../misc/lv_area.h **** 
  50:lvgl/src/draw/sw/../../misc/lv_area.h **** /** Alignments*/
  51:lvgl/src/draw/sw/../../misc/lv_area.h **** enum {
  52:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_DEFAULT = 0,
  53:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_TOP_LEFT,
  54:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_TOP_MID,
  55:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_TOP_RIGHT,
  56:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_BOTTOM_LEFT,
  57:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_BOTTOM_MID,
  58:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_BOTTOM_RIGHT,
  59:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_LEFT_MID,
  60:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_RIGHT_MID,
  61:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_CENTER,
  62:lvgl/src/draw/sw/../../misc/lv_area.h **** 
  63:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_OUT_TOP_LEFT,
  64:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_OUT_TOP_MID,
  65:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_OUT_TOP_RIGHT,
  66:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_OUT_BOTTOM_LEFT,
  67:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_OUT_BOTTOM_MID,
  68:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_OUT_BOTTOM_RIGHT,
  69:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_OUT_LEFT_TOP,
  70:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_OUT_LEFT_MID,
  71:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_OUT_LEFT_BOTTOM,
  72:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_OUT_RIGHT_TOP,
  73:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_OUT_RIGHT_MID,
  74:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_ALIGN_OUT_RIGHT_BOTTOM,
  75:lvgl/src/draw/sw/../../misc/lv_area.h **** };
  76:lvgl/src/draw/sw/../../misc/lv_area.h **** typedef uint8_t lv_align_t;
  77:lvgl/src/draw/sw/../../misc/lv_area.h **** 
  78:lvgl/src/draw/sw/../../misc/lv_area.h **** enum {
  79:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_DIR_NONE     = 0x00,
  80:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_DIR_LEFT     = (1 << 0),
  81:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_DIR_RIGHT    = (1 << 1),
  82:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_DIR_TOP      = (1 << 2),
  83:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_DIR_BOTTOM   = (1 << 3),
  84:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_DIR_HOR      = LV_DIR_LEFT | LV_DIR_RIGHT,
  85:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_DIR_VER      = LV_DIR_TOP | LV_DIR_BOTTOM,
  86:lvgl/src/draw/sw/../../misc/lv_area.h ****     LV_DIR_ALL      = LV_DIR_HOR | LV_DIR_VER,
  87:lvgl/src/draw/sw/../../misc/lv_area.h **** };
  88:lvgl/src/draw/sw/../../misc/lv_area.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 10


  89:lvgl/src/draw/sw/../../misc/lv_area.h **** typedef uint8_t lv_dir_t;
  90:lvgl/src/draw/sw/../../misc/lv_area.h **** 
  91:lvgl/src/draw/sw/../../misc/lv_area.h **** /**********************
  92:lvgl/src/draw/sw/../../misc/lv_area.h ****  * GLOBAL PROTOTYPES
  93:lvgl/src/draw/sw/../../misc/lv_area.h ****  **********************/
  94:lvgl/src/draw/sw/../../misc/lv_area.h **** 
  95:lvgl/src/draw/sw/../../misc/lv_area.h **** /**
  96:lvgl/src/draw/sw/../../misc/lv_area.h ****  * Initialize an area
  97:lvgl/src/draw/sw/../../misc/lv_area.h ****  * @param area_p pointer to an area
  98:lvgl/src/draw/sw/../../misc/lv_area.h ****  * @param x1 left coordinate of the area
  99:lvgl/src/draw/sw/../../misc/lv_area.h ****  * @param y1 top coordinate of the area
 100:lvgl/src/draw/sw/../../misc/lv_area.h ****  * @param x2 right coordinate of the area
 101:lvgl/src/draw/sw/../../misc/lv_area.h ****  * @param y2 bottom coordinate of the area
 102:lvgl/src/draw/sw/../../misc/lv_area.h ****  */
 103:lvgl/src/draw/sw/../../misc/lv_area.h **** void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2);
 104:lvgl/src/draw/sw/../../misc/lv_area.h **** 
 105:lvgl/src/draw/sw/../../misc/lv_area.h **** /**
 106:lvgl/src/draw/sw/../../misc/lv_area.h ****  * Copy an area
 107:lvgl/src/draw/sw/../../misc/lv_area.h ****  * @param dest pointer to the destination area
 108:lvgl/src/draw/sw/../../misc/lv_area.h ****  * @param src pointer to the source area
 109:lvgl/src/draw/sw/../../misc/lv_area.h ****  */
 110:lvgl/src/draw/sw/../../misc/lv_area.h **** inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
 111:lvgl/src/draw/sw/../../misc/lv_area.h **** {
 112:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->x1 = src->x1;
 113:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y1 = src->y1;
 114:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->x2 = src->x2;
 115:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y2 = src->y2;
 116:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 117:lvgl/src/draw/sw/../../misc/lv_area.h **** 
 118:lvgl/src/draw/sw/../../misc/lv_area.h **** /**
 119:lvgl/src/draw/sw/../../misc/lv_area.h ****  * Get the width of an area
 120:lvgl/src/draw/sw/../../misc/lv_area.h ****  * @param area_p pointer to an area
 121:lvgl/src/draw/sw/../../misc/lv_area.h ****  * @return the width of the area (if x1 == x2 -> width = 1)
 122:lvgl/src/draw/sw/../../misc/lv_area.h ****  */
 123:lvgl/src/draw/sw/../../misc/lv_area.h **** static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
 118              		.loc 2 123 26 view .LVU26
 119              	.LBB42:
 124:lvgl/src/draw/sw/../../misc/lv_area.h **** {
 125:lvgl/src/draw/sw/../../misc/lv_area.h ****     return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 120              		.loc 2 125 5 view .LVU27
 121              		.loc 2 125 31 is_stmt 0 view .LVU28
 122 005e B2F80480 		ldrh	r8, [r2, #4]
 123              		.loc 2 125 44 view .LVU29
 124 0062 9BB2     		uxth	r3, r3
 125              		.loc 2 125 36 view .LVU30
 126 0064 A8EB0308 		sub	r8, r8, r3
 127 0068 1FFA88F8 		uxth	r8, r8
 128              		.loc 2 125 49 view .LVU31
 129 006c 08F10108 		add	r8, r8, #1
 130              		.loc 2 125 12 view .LVU32
 131 0070 0FFA88F8 		sxth	r8, r8
 132              	.LVL9:
 133              		.loc 2 125 12 view .LVU33
 134              	.LBE42:
 135              	.LBE41:
 220:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 136              		.loc 1 220 9 is_stmt 1 view .LVU34
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 11


 220:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 137              		.loc 1 220 18 is_stmt 0 view .LVU35
 138 0074 4FEA8808 		lsl	r8, r8, #2
 139              	.LVL10:
 222:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_color_t * cbuf_tmp = cbuf;
 140              		.loc 1 222 9 is_stmt 1 view .LVU36
 222:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_color_t * cbuf_tmp = cbuf;
 141              		.loc 1 222 20 is_stmt 0 view .LVU37
 142 0078 4FEA8B0B 		lsl	fp, fp, #2
 143 007c 0FFA8BFB 		sxth	fp, fp
 144              	.LVL11:
 223:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = dest_area->y1; y <= dest_area->y2; y++) {
 145              		.loc 1 223 9 is_stmt 1 view .LVU38
 224:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 146              		.loc 1 224 9 view .LVU39
 223:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = dest_area->y1; y <= dest_area->y2; y++) {
 147              		.loc 1 223 22 is_stmt 0 view .LVU40
 148 0080 A146     		mov	r9, r4
 149 0082 CDF800A0 		str	r10, [sp]
 150              	.LVL12:
 223:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = dest_area->y1; y <= dest_area->y2; y++) {
 151              		.loc 1 223 22 view .LVU41
 152 0086 9246     		mov	r10, r2
 224:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 153              		.loc 1 224 9 view .LVU42
 154 0088 08E0     		b	.L3
 155              	.LVL13:
 156              	.L4:
 225:lvgl/src/draw/sw/lv_draw_sw_img.c ****             src_tmp8 += src_stride_byte;
 157              		.loc 1 225 13 is_stmt 1 discriminator 3 view .LVU43
 158 008a 4246     		mov	r2, r8
 159 008c 3946     		mov	r1, r7
 160 008e 4846     		mov	r0, r9
 161 0090 FFF7FEFF 		bl	lv_memcpy
 162              	.LVL14:
 226:lvgl/src/draw/sw/lv_draw_sw_img.c ****             cbuf_tmp += dest_w;
 163              		.loc 1 226 13 discriminator 3 view .LVU44
 226:lvgl/src/draw/sw/lv_draw_sw_img.c ****             cbuf_tmp += dest_w;
 164              		.loc 1 226 22 is_stmt 0 discriminator 3 view .LVU45
 165 0094 5F44     		add	r7, r7, fp
 166              	.LVL15:
 227:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 167              		.loc 1 227 13 is_stmt 1 discriminator 3 view .LVU46
 227:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 168              		.loc 1 227 22 is_stmt 0 discriminator 3 view .LVU47
 169 0096 C144     		add	r9, r9, r8
 170              	.LVL16:
 224:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 171              		.loc 1 224 52 is_stmt 1 discriminator 3 view .LVU48
 224:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 172              		.loc 1 224 53 is_stmt 0 discriminator 3 view .LVU49
 173 0098 0136     		adds	r6, r6, #1
 174              	.LVL17:
 224:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 175              		.loc 1 224 53 discriminator 3 view .LVU50
 176 009a 36B2     		sxth	r6, r6
 177              	.LVL18:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 12


 178              	.L3:
 224:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 179              		.loc 1 224 32 is_stmt 1 discriminator 1 view .LVU51
 224:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 180              		.loc 1 224 46 is_stmt 0 discriminator 1 view .LVU52
 181 009c BAF90630 		ldrsh	r3, [r10, #6]
 224:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 182              		.loc 1 224 9 discriminator 1 view .LVU53
 183 00a0 B342     		cmp	r3, r6
 184 00a2 F2DA     		bge	.L4
 231:lvgl/src/draw/sw/lv_draw_sw_img.c ****             uint32_t i;
 185              		.loc 1 231 11 view .LVU54
 186 00a4 DDF800A0 		ldr	r10, [sp]
 187              	.LVL19:
 231:lvgl/src/draw/sw/lv_draw_sw_img.c ****             uint32_t i;
 188              		.loc 1 231 9 is_stmt 1 view .LVU55
 231:lvgl/src/draw/sw/lv_draw_sw_img.c ****             uint32_t i;
 189              		.loc 1 231 11 is_stmt 0 view .LVU56
 190 00a8 BAF1060F 		cmp	r10, #6
 191 00ac C2D1     		bne	.L1
 192              	.LBB43:
 232:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_color_t chk = LV_COLOR_CHROMA_KEY;
 193              		.loc 1 232 13 is_stmt 1 view .LVU57
 233:lvgl/src/draw/sw/lv_draw_sw_img.c **** #if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
 194              		.loc 1 233 13 view .LVU58
 195              	.LVL20:
 196              	.LBB44:
 197              	.LBI44:
 198              		.file 3 "lvgl/src/draw/sw/../../misc/lv_color.h"
   1:lvgl/src/draw/sw/../../misc/lv_color.h **** /**
   2:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @file lv_color.h
   3:lvgl/src/draw/sw/../../misc/lv_color.h ****  *
   4:lvgl/src/draw/sw/../../misc/lv_color.h ****  */
   5:lvgl/src/draw/sw/../../misc/lv_color.h **** 
   6:lvgl/src/draw/sw/../../misc/lv_color.h **** #ifndef LV_COLOR_H
   7:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_H
   8:lvgl/src/draw/sw/../../misc/lv_color.h **** 
   9:lvgl/src/draw/sw/../../misc/lv_color.h **** #ifdef __cplusplus
  10:lvgl/src/draw/sw/../../misc/lv_color.h **** extern "C" {
  11:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  12:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  13:lvgl/src/draw/sw/../../misc/lv_color.h **** /*********************
  14:lvgl/src/draw/sw/../../misc/lv_color.h ****  *      INCLUDES
  15:lvgl/src/draw/sw/../../misc/lv_color.h ****  *********************/
  16:lvgl/src/draw/sw/../../misc/lv_color.h **** #include "../lv_conf_internal.h"
  17:lvgl/src/draw/sw/../../misc/lv_color.h **** #include "lv_assert.h"
  18:lvgl/src/draw/sw/../../misc/lv_color.h **** #include "lv_math.h"
  19:lvgl/src/draw/sw/../../misc/lv_color.h **** #include "lv_types.h"
  20:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  21:lvgl/src/draw/sw/../../misc/lv_color.h **** /*Error checking*/
  22:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 24
  23:lvgl/src/draw/sw/../../misc/lv_color.h **** #error "LV_COLOR_DEPTH 24 is deprecated. Use LV_COLOR_DEPTH 32 instead (lv_conf.h)"
  24:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  25:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  26:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH != 16 && LV_COLOR_16_SWAP != 0
  27:lvgl/src/draw/sw/../../misc/lv_color.h **** #error "LV_COLOR_16_SWAP requires LV_COLOR_DEPTH == 16. Set it in lv_conf.h"
  28:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 13


  29:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  30:lvgl/src/draw/sw/../../misc/lv_color.h **** #include <stdint.h>
  31:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  32:lvgl/src/draw/sw/../../misc/lv_color.h **** /*********************
  33:lvgl/src/draw/sw/../../misc/lv_color.h ****  *      DEFINES
  34:lvgl/src/draw/sw/../../misc/lv_color.h ****  *********************/
  35:lvgl/src/draw/sw/../../misc/lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_DEPTH);
  36:lvgl/src/draw/sw/../../misc/lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_16_SWAP);
  37:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  38:lvgl/src/draw/sw/../../misc/lv_color.h **** /**
  39:lvgl/src/draw/sw/../../misc/lv_color.h ****  * Opacity percentages.
  40:lvgl/src/draw/sw/../../misc/lv_color.h ****  */
  41:lvgl/src/draw/sw/../../misc/lv_color.h **** enum {
  42:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_TRANSP = 0,
  43:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_0      = 0,
  44:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_10     = 25,
  45:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_20     = 51,
  46:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_30     = 76,
  47:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_40     = 102,
  48:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_50     = 127,
  49:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_60     = 153,
  50:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_70     = 178,
  51:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_80     = 204,
  52:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_90     = 229,
  53:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_100    = 255,
  54:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_COVER  = 255,
  55:lvgl/src/draw/sw/../../misc/lv_color.h **** };
  56:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  57:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_OPA_MIN 2    /*Opacities below this will be transparent*/
  58:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_OPA_MAX 253  /*Opacities above this will fully cover*/
  59:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  60:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
  61:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SIZE 8
  62:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
  63:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SIZE 8
  64:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
  65:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SIZE 16
  66:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
  67:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SIZE 32
  68:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
  69:lvgl/src/draw/sw/../../misc/lv_color.h **** #error "Invalid LV_COLOR_DEPTH in lv_conf.h! Set it to 1, 8, 16 or 32!"
  70:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  71:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  72:lvgl/src/draw/sw/../../misc/lv_color.h **** #if defined(__cplusplus) && !defined(_LV_COLOR_HAS_MODERN_CPP)
  73:lvgl/src/draw/sw/../../misc/lv_color.h **** /**
  74:lvgl/src/draw/sw/../../misc/lv_color.h **** * MSVC compiler's definition of the __cplusplus indicating 199711L regardless to C++ standard versi
  75:lvgl/src/draw/sw/../../misc/lv_color.h **** * see https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-cplusplus
  76:lvgl/src/draw/sw/../../misc/lv_color.h **** * so we use _MSC_VER macro instead of __cplusplus
  77:lvgl/src/draw/sw/../../misc/lv_color.h **** */
  78:lvgl/src/draw/sw/../../misc/lv_color.h **** #ifdef _MSC_VER
  79:lvgl/src/draw/sw/../../misc/lv_color.h **** #if _MSC_VER >= 1900 /*Visual Studio 2015*/
  80:lvgl/src/draw/sw/../../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  81:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  82:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
  83:lvgl/src/draw/sw/../../misc/lv_color.h **** #if __cplusplus >= 201103L
  84:lvgl/src/draw/sw/../../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  85:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 14


  86:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  87:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif /*__cplusplus*/
  88:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  89:lvgl/src/draw/sw/../../misc/lv_color.h **** #ifndef _LV_COLOR_HAS_MODERN_CPP
  90:lvgl/src/draw/sw/../../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 0
  91:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  92:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  93:lvgl/src/draw/sw/../../misc/lv_color.h **** #if _LV_COLOR_HAS_MODERN_CPP
  94:lvgl/src/draw/sw/../../misc/lv_color.h **** /*Fix msvc compiler error C4576 inside C++ code*/
  95:lvgl/src/draw/sw/../../misc/lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER lv_color_t
  96:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
  97:lvgl/src/draw/sw/../../misc/lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER (lv_color_t)
  98:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  99:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 100:lvgl/src/draw/sw/../../misc/lv_color.h **** /*---------------------------------------
 101:lvgl/src/draw/sw/../../misc/lv_color.h ****  * Macros for all existing color depths
 102:lvgl/src/draw/sw/../../misc/lv_color.h ****  * to set/get values of the color channels
 103:lvgl/src/draw/sw/../../misc/lv_color.h ****  *------------------------------------------*/
 104:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_R1(c, v) (c).ch.red = (uint8_t)((v) & 0x1)
 105:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_G1(c, v) (c).ch.green = (uint8_t)((v) & 0x1)
 106:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_B1(c, v) (c).ch.blue = (uint8_t)((v) & 0x1)
 107:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_A1(c, v) do {} while(0)
 108:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 109:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_R1(c) (c).ch.red
 110:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_G1(c) (c).ch.green
 111:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_B1(c) (c).ch.blue
 112:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_A1(c) 0xFF
 113:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 114:lvgl/src/draw/sw/../../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER1 {0x00}
 115:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_MAKE1(r8, g8, b8)  {(uint8_t)((b8 >> 7) | (g8 >> 7) | (r8 >> 7))}
 116:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 117:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_R8(c, v) (c).ch.red = (uint8_t)((v) & 0x7U)
 118:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_G8(c, v) (c).ch.green = (uint8_t)((v) & 0x7U)
 119:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_B8(c, v) (c).ch.blue = (uint8_t)((v) & 0x3U)
 120:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_A8(c, v) do {} while(0)
 121:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 122:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_R8(c) (c).ch.red
 123:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_G8(c) (c).ch.green
 124:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_B8(c) (c).ch.blue
 125:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_A8(c) 0xFF
 126:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 127:lvgl/src/draw/sw/../../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER8 {{0x00, 0x00, 0x00}}
 128:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_MAKE8(r8, g8, b8) {{(uint8_t)((b8 >> 6) & 0x3U), (uint8_t)((g8 >> 5) & 0x7U), (ui
 129:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 130:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_R16(c, v) (c).ch.red = (uint8_t)((v) & 0x1FU)
 131:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 132:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_G16(c, v) (c).ch.green = (uint8_t)((v) & 0x3FU)
 133:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 134:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_G16(c, v) {(c).ch.green_h = (uint8_t)(((v) >> 3) & 0x7); (c).ch.green_l = (ui
 135:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 136:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_B16(c, v) (c).ch.blue = (uint8_t)((v) & 0x1FU)
 137:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_A16(c, v) do {} while(0)
 138:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 139:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_R16(c) (c).ch.red
 140:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 141:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_G16(c) (c).ch.green
 142:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 15


 143:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_G16(c) (((c).ch.green_h << 3) + (c).ch.green_l)
 144:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 145:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_B16(c) (c).ch.blue
 146:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_A16(c) 0xFF
 147:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 148:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 149:lvgl/src/draw/sw/../../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16  {{0x00, 0x00, 0x00}}
 150:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((b8 >> 3) & 0x1FU), (uint8_t)((g8 >> 2) & 0x3FU), 
 151:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 152:lvgl/src/draw/sw/../../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16 {{0x00, 0x00, 0x00, 0x00}}
 153:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((g8 >> 5) & 0x7U), (uint8_t)((r8 >> 3) & 0x1FU), (
 154:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 155:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 156:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_R32(c, v) (c).ch.red = (uint8_t)((v) & 0xFF)
 157:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_G32(c, v) (c).ch.green = (uint8_t)((v) & 0xFF)
 158:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_B32(c, v) (c).ch.blue = (uint8_t)((v) & 0xFF)
 159:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_A32(c, v) (c).ch.alpha = (uint8_t)((v) & 0xFF)
 160:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 161:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_R32(c) (c).ch.red
 162:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_G32(c) (c).ch.green
 163:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_B32(c) (c).ch.blue
 164:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_A32(c) (c).ch.alpha
 165:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 166:lvgl/src/draw/sw/../../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER32  {{0x00, 0x00, 0x00, 0x00}}
 167:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_MAKE32(r8, g8, b8) {{b8, g8, r8, 0xff}} /*Fix 0xff alpha*/
 168:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 169:lvgl/src/draw/sw/../../misc/lv_color.h **** /*---------------------------------------
 170:lvgl/src/draw/sw/../../misc/lv_color.h ****  * Macros for the current color depth
 171:lvgl/src/draw/sw/../../misc/lv_color.h ****  * to set/get values of the color channels
 172:lvgl/src/draw/sw/../../misc/lv_color.h ****  *------------------------------------------*/
 173:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SET_R(c, v) LV_CONCAT(LV_COLOR_SET_R, LV_COLOR_DEPTH)(c, v)
 174:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SET_G(c, v) LV_CONCAT(LV_COLOR_SET_G, LV_COLOR_DEPTH)(c, v)
 175:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SET_B(c, v) LV_CONCAT(LV_COLOR_SET_B, LV_COLOR_DEPTH)(c, v)
 176:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SET_A(c, v) LV_CONCAT(LV_COLOR_SET_A, LV_COLOR_DEPTH)(c, v)
 177:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 178:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_GET_R(c) LV_CONCAT(LV_COLOR_GET_R, LV_COLOR_DEPTH)(c)
 179:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_GET_G(c) LV_CONCAT(LV_COLOR_GET_G, LV_COLOR_DEPTH)(c)
 180:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_GET_B(c) LV_CONCAT(LV_COLOR_GET_B, LV_COLOR_DEPTH)(c)
 181:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_GET_A(c) LV_CONCAT(LV_COLOR_GET_A, LV_COLOR_DEPTH)(c)
 182:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 183:lvgl/src/draw/sw/../../misc/lv_color.h **** #define _LV_COLOR_ZERO_INITIALIZER LV_CONCAT(_LV_COLOR_ZERO_INITIALIZER, LV_COLOR_DEPTH)
 184:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_MAKE(r8, g8, b8) LV_CONCAT(LV_COLOR_MAKE, LV_COLOR_DEPTH)(r8, g8, b8)
 185:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 186:lvgl/src/draw/sw/../../misc/lv_color.h **** /**********************
 187:lvgl/src/draw/sw/../../misc/lv_color.h ****  *      TYPEDEFS
 188:lvgl/src/draw/sw/../../misc/lv_color.h ****  **********************/
 189:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 190:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef union {
 191:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint8_t full; /*must be declared first to set all bits of byte via initializer list*/
 192:lvgl/src/draw/sw/../../misc/lv_color.h ****     union {
 193:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t blue : 1;
 194:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t green : 1;
 195:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t red : 1;
 196:lvgl/src/draw/sw/../../misc/lv_color.h ****     } ch;
 197:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_color1_t;
 198:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 199:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef union {
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 16


 200:lvgl/src/draw/sw/../../misc/lv_color.h ****     struct {
 201:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t blue : 2;
 202:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t green : 3;
 203:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t red : 3;
 204:lvgl/src/draw/sw/../../misc/lv_color.h ****     } ch;
 205:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint8_t full;
 206:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_color8_t;
 207:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 208:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef union {
 209:lvgl/src/draw/sw/../../misc/lv_color.h ****     struct {
 210:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 211:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t blue : 5;
 212:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t green : 6;
 213:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t red : 5;
 214:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 215:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t green_h : 3;
 216:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t red : 5;
 217:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t blue : 5;
 218:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t green_l : 3;
 219:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 220:lvgl/src/draw/sw/../../misc/lv_color.h ****     } ch;
 221:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint16_t full;
 222:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_color16_t;
 223:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 224:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef union {
 225:lvgl/src/draw/sw/../../misc/lv_color.h ****     struct {
 226:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t blue;
 227:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t green;
 228:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t red;
 229:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t alpha;
 230:lvgl/src/draw/sw/../../misc/lv_color.h ****     } ch;
 231:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint32_t full;
 232:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_color32_t;
 233:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 234:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef LV_CONCAT3(uint, LV_COLOR_SIZE, _t) lv_color_int_t;
 235:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef LV_CONCAT3(lv_color, LV_COLOR_DEPTH, _t) lv_color_t;
 236:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 237:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef struct {
 238:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint16_t h;
 239:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint8_t s;
 240:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint8_t v;
 241:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_color_hsv_t;
 242:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 243:lvgl/src/draw/sw/../../misc/lv_color.h **** //! @cond Doxygen_Suppress
 244:lvgl/src/draw/sw/../../misc/lv_color.h **** /*No idea where the guard is required but else throws warnings in the docs*/
 245:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef uint8_t lv_opa_t;
 246:lvgl/src/draw/sw/../../misc/lv_color.h **** //! @endcond
 247:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 248:lvgl/src/draw/sw/../../misc/lv_color.h **** struct _lv_color_filter_dsc_t;
 249:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 250:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef lv_color_t (*lv_color_filter_cb_t)(const struct _lv_color_filter_dsc_t *, lv_color_t, lv_op
 251:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 252:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef struct _lv_color_filter_dsc_t {
 253:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color_filter_cb_t filter_cb;
 254:lvgl/src/draw/sw/../../misc/lv_color.h ****     void * user_data;
 255:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_color_filter_dsc_t;
 256:lvgl/src/draw/sw/../../misc/lv_color.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 17


 257:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef enum {
 258:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_RED,
 259:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_PINK,
 260:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_PURPLE,
 261:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_DEEP_PURPLE,
 262:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_INDIGO,
 263:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_BLUE,
 264:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_LIGHT_BLUE,
 265:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_CYAN,
 266:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_TEAL,
 267:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_GREEN,
 268:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_LIGHT_GREEN,
 269:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_LIME,
 270:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_YELLOW,
 271:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_AMBER,
 272:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_ORANGE,
 273:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_DEEP_ORANGE,
 274:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_BROWN,
 275:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_BLUE_GREY,
 276:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_GREY,
 277:lvgl/src/draw/sw/../../misc/lv_color.h ****     _LV_PALETTE_LAST,
 278:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_NONE = 0xff,
 279:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_palette_t;
 280:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 281:lvgl/src/draw/sw/../../misc/lv_color.h **** /**********************
 282:lvgl/src/draw/sw/../../misc/lv_color.h ****  * GLOBAL PROTOTYPES
 283:lvgl/src/draw/sw/../../misc/lv_color.h ****  **********************/
 284:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 285:lvgl/src/draw/sw/../../misc/lv_color.h **** /*In color conversations:
 286:lvgl/src/draw/sw/../../misc/lv_color.h ****  * - When converting to bigger color type the LSB weight of 1 LSB is calculated
 287:lvgl/src/draw/sw/../../misc/lv_color.h ****  *   E.g. 16 bit Red has 5 bits
 288:lvgl/src/draw/sw/../../misc/lv_color.h ****  *         8 bit Red has 3 bits
 289:lvgl/src/draw/sw/../../misc/lv_color.h ****  *        ----------------------
 290:lvgl/src/draw/sw/../../misc/lv_color.h ****  *        8 bit red LSB = (2^5 - 1) / (2^3 - 1) = 31 / 7 = 4
 291:lvgl/src/draw/sw/../../misc/lv_color.h ****  *
 292:lvgl/src/draw/sw/../../misc/lv_color.h ****  * - When calculating to smaller color type simply shift out the LSBs
 293:lvgl/src/draw/sw/../../misc/lv_color.h ****  *   E.g.  8 bit Red has 3 bits
 294:lvgl/src/draw/sw/../../misc/lv_color.h ****  *        16 bit Red has 5 bits
 295:lvgl/src/draw/sw/../../misc/lv_color.h ****  *        ----------------------
 296:lvgl/src/draw/sw/../../misc/lv_color.h ****  *         Shift right with 5 - 3 = 2
 297:lvgl/src/draw/sw/../../misc/lv_color.h ****  */
 298:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline uint8_t lv_color_to1(lv_color_t color)
 299:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 300:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 301:lvgl/src/draw/sw/../../misc/lv_color.h ****     return color.full;
 302:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 303:lvgl/src/draw/sw/../../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x4) || (LV_COLOR_GET_G(color) & 0x4) || (LV_COLOR_GET_B(color) & 0
 304:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 1;
 305:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 306:lvgl/src/draw/sw/../../misc/lv_color.h ****     else {
 307:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0;
 308:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 309:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 310:lvgl/src/draw/sw/../../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x10) || (LV_COLOR_GET_G(color) & 0x20) || (LV_COLOR_GET_B(color) &
 311:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 1;
 312:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 313:lvgl/src/draw/sw/../../misc/lv_color.h ****     else {
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 18


 314:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0;
 315:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 316:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 317:lvgl/src/draw/sw/../../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x80) || (LV_COLOR_GET_G(color) & 0x80) || (LV_COLOR_GET_B(color) &
 318:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 1;
 319:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 320:lvgl/src/draw/sw/../../misc/lv_color.h ****     else {
 321:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0;
 322:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 323:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 324:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 325:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 326:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline uint8_t lv_color_to8(lv_color_t color)
 327:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 328:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 329:lvgl/src/draw/sw/../../misc/lv_color.h ****     if(color.full == 0)
 330:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0;
 331:lvgl/src/draw/sw/../../misc/lv_color.h ****     else
 332:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0xFF;
 333:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 334:lvgl/src/draw/sw/../../misc/lv_color.h ****     return color.full;
 335:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 336:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color8_t ret;
 337:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 2); /*5 - 3  = 2*/
 338:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 3); /*6 - 3  = 3*/
 339:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 3); /*5 - 2  = 3*/
 340:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret.full;
 341:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 342:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color8_t ret;
 343:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 5); /*8 - 3  = 5*/
 344:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 5); /*8 - 3  = 5*/
 345:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 6); /*8 - 2  = 6*/
 346:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret.full;
 347:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 348:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 349:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 350:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline uint16_t lv_color_to16(lv_color_t color)
 351:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 352:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 353:lvgl/src/draw/sw/../../misc/lv_color.h ****     if(color.full == 0)
 354:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0;
 355:lvgl/src/draw/sw/../../misc/lv_color.h ****     else
 356:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0xFFFF;
 357:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 358:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color16_t ret;
 359:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) * 4);  /*(2^5 - 1)/(2^3 - 1) = 31/7 = 4*/
 360:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) * 9);  /*(2^6 - 1)/(2^3 - 1) = 63/7 = 9*/
 361:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) * 10); /*(2^5 - 1)/(2^2 - 1) = 31/3 = 10*/
 362:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret.full;
 363:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 364:lvgl/src/draw/sw/../../misc/lv_color.h ****     return color.full;
 365:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 366:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color16_t ret;
 367:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) >> 3); /*8 - 5  = 3*/
 368:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) >> 2); /*8 - 6  = 2*/
 369:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) >> 3); /*8 - 5  = 3*/
 370:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret.full;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 19


 371:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 372:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 373:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 374:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline uint32_t lv_color_to32(lv_color_t color)
 375:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 376:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 377:lvgl/src/draw/sw/../../misc/lv_color.h ****     if(color.full == 0)
 378:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0xFF000000;
 379:lvgl/src/draw/sw/../../misc/lv_color.h ****     else
 380:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0xFFFFFFFF;
 381:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 382:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color32_t ret;
 383:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R32(ret, LV_COLOR_GET_R(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 384:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G32(ret, LV_COLOR_GET_G(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 385:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B32(ret, LV_COLOR_GET_B(color) * 85); /*(2^8 - 1)/(2^2 - 1) = 255/3 = 85*/
 386:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 387:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret.full;
 388:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 389:lvgl/src/draw/sw/../../misc/lv_color.h ****     /**
 390:lvgl/src/draw/sw/../../misc/lv_color.h ****      * The floating point math for conversion is:
 391:lvgl/src/draw/sw/../../misc/lv_color.h ****      *  valueto = valuefrom * ( (2^bitsto - 1) / (float)(2^bitsfrom - 1) )
 392:lvgl/src/draw/sw/../../misc/lv_color.h ****      * The faster integer math for conversion is:
 393:lvgl/src/draw/sw/../../misc/lv_color.h ****      *  valueto = ( valuefrom * multiplier + adder ) >> divisor
 394:lvgl/src/draw/sw/../../misc/lv_color.h ****      *   multiplier = FLOOR( ( (2^bitsto - 1) << divisor ) / (float)(2^bitsfrom - 1) )
 395:lvgl/src/draw/sw/../../misc/lv_color.h ****      *
 396:lvgl/src/draw/sw/../../misc/lv_color.h ****      * Find the first divisor where ( adder >> divisor ) <= 0
 397:lvgl/src/draw/sw/../../misc/lv_color.h ****      *
 398:lvgl/src/draw/sw/../../misc/lv_color.h ****      * 5-bit to 8-bit: ( 31 * multiplier + adder ) >> divisor = 255
 399:lvgl/src/draw/sw/../../misc/lv_color.h ****      * divisor  multiplier  adder  min (0)  max (31)
 400:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       0           8      7        7       255
 401:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       1          16     14        7       255
 402:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       2          32     28        7       255
 403:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       3          65     25        3       255
 404:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       4         131     19        1       255
 405:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       5         263      7        0       255
 406:lvgl/src/draw/sw/../../misc/lv_color.h ****      *
 407:lvgl/src/draw/sw/../../misc/lv_color.h ****      * 6-bit to 8-bit: 255 = ( 63 * multiplier + adder ) >> divisor
 408:lvgl/src/draw/sw/../../misc/lv_color.h ****      * divisor  multiplier  adder  min (0)  max (63)
 409:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       0           4      3        3       255
 410:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       1           8      6        3       255
 411:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       2          16     12        3       255
 412:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       3          32     24        3       255
 413:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       4          64     48        3       255
 414:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       5         129     33        1       255
 415:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       6         259      3        0       255
 416:lvgl/src/draw/sw/../../misc/lv_color.h ****      */
 417:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 418:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color32_t ret;
 419:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 420:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 421:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 422:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 423:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret.full;
 424:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 425:lvgl/src/draw/sw/../../misc/lv_color.h ****     return color.full;
 426:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 427:lvgl/src/draw/sw/../../misc/lv_color.h **** }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 20


 428:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 429:lvgl/src/draw/sw/../../misc/lv_color.h **** //! @cond Doxygen_Suppress
 430:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 431:lvgl/src/draw/sw/../../misc/lv_color.h **** /**
 432:lvgl/src/draw/sw/../../misc/lv_color.h ****  * Mix two colors with a given ratio.
 433:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @param c1 the first color to mix (usually the foreground)
 434:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @param c2 the second color to mix (usually the background)
 435:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 436:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @return the mixed color
 437:lvgl/src/draw/sw/../../misc/lv_color.h ****  */
 438:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline lv_color_t LV_ATTRIBUTE_FAST_MEM lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t m
 439:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 440:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color_t ret;
 441:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 442:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 16 && LV_COLOR_MIX_ROUND_OFS == 0
 443:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 1
 444:lvgl/src/draw/sw/../../misc/lv_color.h ****     c1.full = c1.full << 8 | c1.full >> 8;
 445:lvgl/src/draw/sw/../../misc/lv_color.h ****     c2.full = c2.full << 8 | c2.full >> 8;
 446:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 447:lvgl/src/draw/sw/../../misc/lv_color.h ****     /*Source: https://stackoverflow.com/a/50012418/1999969*/
 448:lvgl/src/draw/sw/../../misc/lv_color.h ****     mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 449:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 450:lvgl/src/draw/sw/../../misc/lv_color.h ****                   0x7E0F81F; /*0b00000111111000001111100000011111*/
 451:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 452:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 453:lvgl/src/draw/sw/../../misc/lv_color.h ****     ret.full = (uint16_t)((result >> 16) | result);
 454:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 1
 455:lvgl/src/draw/sw/../../misc/lv_color.h ****     ret.full = ret.full << 8 | ret.full >> 8;
 456:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 457:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH != 1
 458:lvgl/src/draw/sw/../../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 8, 16 or 32*/
 459:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 460:lvgl/src/draw/sw/../../misc/lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 461:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 462:lvgl/src/draw/sw/../../misc/lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 463:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 464:lvgl/src/draw/sw/../../misc/lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 465:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 466:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 467:lvgl/src/draw/sw/../../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 468:lvgl/src/draw/sw/../../misc/lv_color.h ****     ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 469:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 470:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 471:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret;
 472:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 473:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 474:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline void LV_ATTRIBUTE_FAST_MEM lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out
 475:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 476:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH != 1
 477:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 478:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 479:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 480:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 481:lvgl/src/draw/sw/../../misc/lv_color.h ****     (void) mix;
 482:lvgl/src/draw/sw/../../misc/lv_color.h ****     /*Pre-multiplication can't be used with 1 bpp*/
 483:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[0] = LV_COLOR_GET_R(c);
 484:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[1] = LV_COLOR_GET_G(c);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 21


 485:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[2] = LV_COLOR_GET_B(c);
 486:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 487:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 488:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 489:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 490:lvgl/src/draw/sw/../../misc/lv_color.h **** /**
 491:lvgl/src/draw/sw/../../misc/lv_color.h ****  * Mix two colors with a given ratio. It runs faster then `lv_color_mix` but requires some pre comp
 492:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @param premult_c1 The first color. Should be preprocessed with `lv_color_premult(c1)`
 493:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @param c2 The second color. As it is no pre computation required on it
 494:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @param mix The ratio of the colors. 0: full `c1`, 255: full `c2`, 127: half `c1` and half `c2`.
 495:lvgl/src/draw/sw/../../misc/lv_color.h ****  *            Should be modified like mix = `255 - mix`
 496:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @return the mixed color
 497:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @note 255 won't give clearly `c1`.
 498:lvgl/src/draw/sw/../../misc/lv_color.h ****  */
 499:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline lv_color_t LV_ATTRIBUTE_FAST_MEM lv_color_mix_premult(uint16_t * premult_c1, lv_color
 500:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 501:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color_t ret;
 502:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH != 1
 503:lvgl/src/draw/sw/../../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 8 or 32*/
 504:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OF
 505:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OF
 506:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OF
 507:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 508:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 509:lvgl/src/draw/sw/../../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 510:lvgl/src/draw/sw/../../misc/lv_color.h ****     /*Restore color1*/
 511:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color_t c1;
 512:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R(c1, premult_c1[0]);
 513:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G(c1, premult_c1[1]);
 514:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B(c1, premult_c1[2]);
 515:lvgl/src/draw/sw/../../misc/lv_color.h ****     ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 516:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 517:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 518:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret;
 519:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 520:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 521:lvgl/src/draw/sw/../../misc/lv_color.h **** /**
 522:lvgl/src/draw/sw/../../misc/lv_color.h ****  * Mix two colors. Both color can have alpha value.
 523:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @param bg_color background color
 524:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @param bg_opa alpha of the background color
 525:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @param fg_color foreground color
 526:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @param fg_opa alpha of the foreground color
 527:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @param res_color the result color
 528:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @param res_opa the result opacity
 529:lvgl/src/draw/sw/../../misc/lv_color.h ****  */
 530:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline void LV_ATTRIBUTE_FAST_MEM lv_color_mix_with_alpha(lv_color_t bg_color, lv_opa_t bg_o
 531:lvgl/src/draw/sw/../../misc/lv_color.h ****                                                                  lv_color_t fg_color, lv_opa_t fg_o
 532:lvgl/src/draw/sw/../../misc/lv_color.h ****                                                                  lv_color_t * res_color, lv_opa_t *
 533:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 534:lvgl/src/draw/sw/../../misc/lv_color.h ****     /*Pick the foreground if it's fully opaque or the Background is fully transparent*/
 535:lvgl/src/draw/sw/../../misc/lv_color.h ****     if(fg_opa >= LV_OPA_MAX || bg_opa <= LV_OPA_MIN) {
 536:lvgl/src/draw/sw/../../misc/lv_color.h ****         res_color->full = fg_color.full;
 537:lvgl/src/draw/sw/../../misc/lv_color.h ****         *res_opa = fg_opa;
 538:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 539:lvgl/src/draw/sw/../../misc/lv_color.h ****     /*Transparent foreground: use the Background*/
 540:lvgl/src/draw/sw/../../misc/lv_color.h ****     else if(fg_opa <= LV_OPA_MIN) {
 541:lvgl/src/draw/sw/../../misc/lv_color.h ****         res_color->full = bg_color.full;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 22


 542:lvgl/src/draw/sw/../../misc/lv_color.h ****         *res_opa = bg_opa;
 543:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 544:lvgl/src/draw/sw/../../misc/lv_color.h ****     /*Opaque background: use simple mix*/
 545:lvgl/src/draw/sw/../../misc/lv_color.h ****     else if(bg_opa >= LV_OPA_MAX) {
 546:lvgl/src/draw/sw/../../misc/lv_color.h ****         *res_color = lv_color_mix(fg_color, bg_color, fg_opa);
 547:lvgl/src/draw/sw/../../misc/lv_color.h ****         *res_opa = LV_OPA_COVER;
 548:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 549:lvgl/src/draw/sw/../../misc/lv_color.h ****     /*Both colors have alpha. Expensive calculation need to be applied*/
 550:lvgl/src/draw/sw/../../misc/lv_color.h ****     else {
 551:lvgl/src/draw/sw/../../misc/lv_color.h ****         /*Save the parameters and the result. If they will be asked again don't compute again*/
 552:lvgl/src/draw/sw/../../misc/lv_color.h ****         static lv_opa_t fg_opa_save     = 0;
 553:lvgl/src/draw/sw/../../misc/lv_color.h ****         static lv_opa_t bg_opa_save     = 0;
 554:lvgl/src/draw/sw/../../misc/lv_color.h ****         static lv_color_t fg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 555:lvgl/src/draw/sw/../../misc/lv_color.h ****         static lv_color_t bg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 556:lvgl/src/draw/sw/../../misc/lv_color.h ****         static lv_color_t res_color_saved = _LV_COLOR_ZERO_INITIALIZER;
 557:lvgl/src/draw/sw/../../misc/lv_color.h ****         static lv_opa_t res_opa_saved = 0;
 558:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 559:lvgl/src/draw/sw/../../misc/lv_color.h ****         if(fg_opa != fg_opa_save || bg_opa != bg_opa_save || fg_color.full != fg_color_save.full ||
 560:lvgl/src/draw/sw/../../misc/lv_color.h ****            bg_color.full != bg_color_save.full) {
 561:lvgl/src/draw/sw/../../misc/lv_color.h ****             fg_opa_save        = fg_opa;
 562:lvgl/src/draw/sw/../../misc/lv_color.h ****             bg_opa_save        = bg_opa;
 563:lvgl/src/draw/sw/../../misc/lv_color.h ****             fg_color_save.full = fg_color.full;
 564:lvgl/src/draw/sw/../../misc/lv_color.h ****             bg_color_save.full = bg_color.full;
 565:lvgl/src/draw/sw/../../misc/lv_color.h ****             /*Info:
 566:lvgl/src/draw/sw/../../misc/lv_color.h ****              * https://en.wikipedia.org/wiki/Alpha_compositing#Analytical_derivation_of_the_over_op
 567:lvgl/src/draw/sw/../../misc/lv_color.h ****             res_opa_saved = 255 - ((uint16_t)((uint16_t)(255 - fg_opa) * (255 - bg_opa)) >> 8);
 568:lvgl/src/draw/sw/../../misc/lv_color.h ****             LV_ASSERT(res_opa_saved != 0);
 569:lvgl/src/draw/sw/../../misc/lv_color.h ****             lv_opa_t ratio = (uint16_t)((uint16_t)fg_opa * 255) / res_opa_saved;
 570:lvgl/src/draw/sw/../../misc/lv_color.h ****             res_color_saved = lv_color_mix(fg_color, bg_color, ratio);
 571:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 572:lvgl/src/draw/sw/../../misc/lv_color.h ****         }
 573:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 574:lvgl/src/draw/sw/../../misc/lv_color.h ****         res_color->full = res_color_saved.full;
 575:lvgl/src/draw/sw/../../misc/lv_color.h ****         *res_opa = res_opa_saved;
 576:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 577:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 578:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 579:lvgl/src/draw/sw/../../misc/lv_color.h **** //! @endcond
 580:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 581:lvgl/src/draw/sw/../../misc/lv_color.h **** /**
 582:lvgl/src/draw/sw/../../misc/lv_color.h ****  * Get the brightness of a color
 583:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @param color a color
 584:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @return the brightness [0..255]
 585:lvgl/src/draw/sw/../../misc/lv_color.h ****  */
 586:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline uint8_t lv_color_brightness(lv_color_t color)
 587:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 588:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color32_t c32;
 589:lvgl/src/draw/sw/../../misc/lv_color.h ****     c32.full        = lv_color_to32(color);
 590:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR
 591:lvgl/src/draw/sw/../../misc/lv_color.h ****     return (uint8_t)(bright >> 3);
 592:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 593:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 594:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
 595:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 596:lvgl/src/draw/sw/../../misc/lv_color.h ****     return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 597:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 598:lvgl/src/draw/sw/../../misc/lv_color.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 23


 599:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline lv_color_t lv_color_hex(uint32_t c)
 199              		.loc 3 599 26 view .LVU59
 200              	.LBB45:
 600:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 601:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 16
 602:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color_t r;
 603:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 604:lvgl/src/draw/sw/../../misc/lv_color.h ****     /* Convert a 4 bytes per pixel in format ARGB32 to R5G6B5 format
 605:lvgl/src/draw/sw/../../misc/lv_color.h ****         naive way (by calling lv_color_make with components):
 606:lvgl/src/draw/sw/../../misc/lv_color.h ****                     r = ((c & 0xFF0000) >> 19)
 607:lvgl/src/draw/sw/../../misc/lv_color.h ****                     g = ((c & 0xFF00) >> 10)
 608:lvgl/src/draw/sw/../../misc/lv_color.h ****                     b = ((c & 0xFF) >> 3)
 609:lvgl/src/draw/sw/../../misc/lv_color.h ****                     rgb565 = (r << 11) | (g << 5) | b
 610:lvgl/src/draw/sw/../../misc/lv_color.h ****         That's 3 mask, 5 bitshift and 2 or operations
 611:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 612:lvgl/src/draw/sw/../../misc/lv_color.h ****         A bit better:
 613:lvgl/src/draw/sw/../../misc/lv_color.h ****                     r = ((c & 0xF80000) >> 8)
 614:lvgl/src/draw/sw/../../misc/lv_color.h ****                     g = ((c & 0xFC00) >> 5)
 615:lvgl/src/draw/sw/../../misc/lv_color.h ****                     b = ((c & 0xFF) >> 3)
 616:lvgl/src/draw/sw/../../misc/lv_color.h ****                     rgb565 = r | g | b
 617:lvgl/src/draw/sw/../../misc/lv_color.h ****         That's 3 mask, 3 bitshifts and 2 or operations */
 618:lvgl/src/draw/sw/../../misc/lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 8) | ((c & 0xFC00) >> 5) | ((c & 0xFF) >> 3));
 619:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 620:lvgl/src/draw/sw/../../misc/lv_color.h ****     /* We want: rrrr rrrr GGGg gggg bbbb bbbb => gggb bbbb rrrr rGGG */
 621:lvgl/src/draw/sw/../../misc/lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 16) | ((c & 0xFC00) >> 13) | ((c & 0x1C00) << 3) | ((c &
 622:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 623:lvgl/src/draw/sw/../../misc/lv_color.h ****     return r;
 624:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 625:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color_t r;
 201              		.loc 3 625 5 view .LVU60
 626:lvgl/src/draw/sw/../../misc/lv_color.h ****     r.full = c | 0xFF000000;
 202              		.loc 3 626 5 view .LVU61
 627:lvgl/src/draw/sw/../../misc/lv_color.h ****     return r;
 203              		.loc 3 627 5 view .LVU62
 204              		.loc 3 627 5 is_stmt 0 view .LVU63
 205              	.LBE45:
 206              	.LBE44:
 241:lvgl/src/draw/sw/lv_draw_sw_img.c ****             uint32_t chk_v = chk.full;
 207              		.loc 1 241 13 is_stmt 1 view .LVU64
 242:lvgl/src/draw/sw/lv_draw_sw_img.c **** #endif
 208              		.loc 1 242 13 view .LVU65
 244:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 209              		.loc 1 244 13 view .LVU66
 244:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 210              		.loc 1 244 19 is_stmt 0 view .LVU67
 211 00ae 0023     		movs	r3, #0
 212 00b0 0299     		ldr	r1, [sp, #8]
 244:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 213              		.loc 1 244 13 view .LVU68
 214 00b2 00E0     		b	.L6
 215              	.LVL21:
 216              	.L7:
 244:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 217              		.loc 1 244 36 is_stmt 1 discriminator 2 view .LVU69
 244:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 218              		.loc 1 244 37 is_stmt 0 discriminator 2 view .LVU70
 219 00b4 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 24


 220              	.LVL22:
 221              	.L6:
 244:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 222              		.loc 1 244 24 is_stmt 1 discriminator 1 view .LVU71
 244:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 223              		.loc 1 244 13 is_stmt 0 discriminator 1 view .LVU72
 224 00b6 8B42     		cmp	r3, r1
 225 00b8 BCD2     		bcs	.L1
 245:lvgl/src/draw/sw/lv_draw_sw_img.c ****             }
 226              		.loc 1 245 17 is_stmt 1 view .LVU73
 245:lvgl/src/draw/sw/lv_draw_sw_img.c ****             }
 227              		.loc 1 245 38 is_stmt 0 view .LVU74
 228 00ba 54F82320 		ldr	r2, [r4, r3, lsl #2]
 245:lvgl/src/draw/sw/lv_draw_sw_img.c ****             }
 229              		.loc 1 245 19 view .LVU75
 230 00be B2F1FF2F 		cmp	r2, #-16711936
 231 00c2 F7D1     		bne	.L7
 245:lvgl/src/draw/sw/lv_draw_sw_img.c ****             }
 232              		.loc 1 245 43 is_stmt 1 discriminator 1 view .LVU76
 245:lvgl/src/draw/sw/lv_draw_sw_img.c ****             }
 233              		.loc 1 245 51 is_stmt 0 discriminator 1 view .LVU77
 234 00c4 0022     		movs	r2, #0
 235 00c6 EA54     		strb	r2, [r5, r3]
 236 00c8 F4E7     		b	.L7
 237              	.LVL23:
 238              	.L20:
 245:lvgl/src/draw/sw/lv_draw_sw_img.c ****             }
 239              		.loc 1 245 51 discriminator 1 view .LVU78
 240              	.LBE43:
 241              	.LBE40:
 242              	.LBB46:
 250:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 243              		.loc 1 250 9 is_stmt 1 view .LVU79
 250:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 244              		.loc 1 250 44 is_stmt 0 view .LVU80
 245 00ca 0099     		ldr	r1, [sp]
 246              	.LVL24:
 250:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 247              		.loc 1 250 44 view .LVU81
 248 00cc B1F90230 		ldrsh	r3, [r1, #2]
 249              	.LVL25:
 250:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 250              		.loc 1 250 89 view .LVU82
 251 00d0 B1F90020 		ldrsh	r2, [r1]
 252              	.LVL26:
 250:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 253              		.loc 1 250 78 view .LVU83
 254 00d4 03FB0B27 		mla	r7, r3, fp, r2
 250:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 255              		.loc 1 250 18 view .LVU84
 256 00d8 0198     		ldr	r0, [sp, #4]
 257              	.LVL27:
 250:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 258              		.loc 1 250 18 view .LVU85
 259 00da 00EB8707 		add	r7, r0, r7, lsl #2
 260              	.LVL28:
 252:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 25


 261              		.loc 1 252 9 is_stmt 1 view .LVU86
 262              	.LBB47:
 263              	.LBI47:
 123:lvgl/src/draw/sw/../../misc/lv_area.h **** {
 264              		.loc 2 123 26 view .LVU87
 265              	.LBB48:
 266              		.loc 2 125 5 view .LVU88
 267              		.loc 2 125 31 is_stmt 0 view .LVU89
 268 00de 8888     		ldrh	r0, [r1, #4]
 269              		.loc 2 125 44 view .LVU90
 270 00e0 92B2     		uxth	r2, r2
 271              		.loc 2 125 36 view .LVU91
 272 00e2 801A     		subs	r0, r0, r2
 273 00e4 80B2     		uxth	r0, r0
 274              		.loc 2 125 49 view .LVU92
 275 00e6 0130     		adds	r0, r0, #1
 276 00e8 1FFA80FC 		uxth	ip, r0
 277              		.loc 2 125 12 view .LVU93
 278 00ec 00B2     		sxth	r0, r0
 279              	.LVL29:
 280              		.loc 2 125 12 view .LVU94
 281              	.LBE48:
 282              	.LBE47:
 252:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 283              		.loc 1 252 55 view .LVU95
 284 00ee ABEB0C0C 		sub	ip, fp, ip
 285 00f2 1FFA8CFC 		uxth	ip, ip
 286              	.LVL30:
 253:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 287              		.loc 1 253 9 is_stmt 1 view .LVU96
 253:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 288              		.loc 1 253 66 is_stmt 0 view .LVU97
 289 00f6 4FEA8C0C 		lsl	ip, ip, #2
 290              	.LVL31:
 253:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 291              		.loc 1 253 20 view .LVU98
 292 00fa 0FFA8CFC 		sxth	ip, ip
 293              	.LVL32:
 255:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t dest_w = lv_area_get_width(dest_area);
 294              		.loc 1 255 9 is_stmt 1 view .LVU99
 295              	.LBB49:
 296              	.LBI49:
 126:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 127:lvgl/src/draw/sw/../../misc/lv_area.h **** 
 128:lvgl/src/draw/sw/../../misc/lv_area.h **** /**
 129:lvgl/src/draw/sw/../../misc/lv_area.h ****  * Get the height of an area
 130:lvgl/src/draw/sw/../../misc/lv_area.h ****  * @param area_p pointer to an area
 131:lvgl/src/draw/sw/../../misc/lv_area.h ****  * @return the height of the area (if y1 == y2 -> height = 1)
 132:lvgl/src/draw/sw/../../misc/lv_area.h ****  */
 133:lvgl/src/draw/sw/../../misc/lv_area.h **** static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
 297              		.loc 2 133 26 view .LVU100
 298              	.LBB50:
 134:lvgl/src/draw/sw/../../misc/lv_area.h **** {
 135:lvgl/src/draw/sw/../../misc/lv_area.h ****     return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 299              		.loc 2 135 5 view .LVU101
 300              		.loc 2 135 31 is_stmt 0 view .LVU102
 301 00fe B1F806E0 		ldrh	lr, [r1, #6]
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 26


 302              		.loc 2 135 44 view .LVU103
 303 0102 9BB2     		uxth	r3, r3
 304              		.loc 2 135 36 view .LVU104
 305 0104 AEEB030E 		sub	lr, lr, r3
 306 0108 1FFA8EFE 		uxth	lr, lr
 307              		.loc 2 135 49 view .LVU105
 308 010c 0EF1010E 		add	lr, lr, #1
 309              		.loc 2 135 12 view .LVU106
 310 0110 0FFA8EFE 		sxth	lr, lr
 311              	.LVL33:
 312              		.loc 2 135 12 view .LVU107
 313              	.LBE50:
 314              	.LBE49:
 256:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = 0; y < dest_h; y++) {
 315              		.loc 1 256 9 is_stmt 1 view .LVU108
 256:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = 0; y < dest_h; y++) {
 316              		.loc 1 256 9 is_stmt 0 view .LVU109
 317              	.LBE46:
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 318              		.loc 2 125 5 is_stmt 1 view .LVU110
 319              	.LBB51:
 257:lvgl/src/draw/sw/lv_draw_sw_img.c ****             for(x = 0; x < dest_w; x++) {
 320              		.loc 1 257 9 view .LVU111
 257:lvgl/src/draw/sw/lv_draw_sw_img.c ****             for(x = 0; x < dest_w; x++) {
 321              		.loc 1 257 15 is_stmt 0 view .LVU112
 322 0114 0026     		movs	r6, #0
 257:lvgl/src/draw/sw/lv_draw_sw_img.c ****             for(x = 0; x < dest_w; x++) {
 323              		.loc 1 257 9 view .LVU113
 324 0116 13E0     		b	.L10
 325              	.LVL34:
 326              	.L11:
 259:lvgl/src/draw/sw/lv_draw_sw_img.c **** #if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
 327              		.loc 1 259 17 is_stmt 1 discriminator 3 view .LVU114
 259:lvgl/src/draw/sw/lv_draw_sw_img.c **** #if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
 328              		.loc 1 259 25 is_stmt 0 discriminator 3 view .LVU115
 329 0118 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 330 011a EA54     		strb	r2, [r5, r3]
 265:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 cbuf[x].ch.alpha = 0xff;
 331              		.loc 1 265 17 is_stmt 1 discriminator 3 view .LVU116
 265:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 cbuf[x].ch.alpha = 0xff;
 332              		.loc 1 265 21 is_stmt 0 discriminator 3 view .LVU117
 333 011c 04EB8302 		add	r2, r4, r3, lsl #2
 265:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 cbuf[x].ch.alpha = 0xff;
 334              		.loc 1 265 25 discriminator 3 view .LVU118
 335 0120 57F8041B 		ldr	r1, [r7], #4
 336              	.LVL35:
 265:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 cbuf[x].ch.alpha = 0xff;
 337              		.loc 1 265 25 discriminator 3 view .LVU119
 338 0124 44F82310 		str	r1, [r4, r3, lsl #2]
 266:lvgl/src/draw/sw/lv_draw_sw_img.c **** #endif
 339              		.loc 1 266 17 is_stmt 1 discriminator 3 view .LVU120
 266:lvgl/src/draw/sw/lv_draw_sw_img.c **** #endif
 340              		.loc 1 266 34 is_stmt 0 discriminator 3 view .LVU121
 341 0128 FF21     		movs	r1, #255
 342 012a D170     		strb	r1, [r2, #3]
 268:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 343              		.loc 1 268 17 is_stmt 1 discriminator 3 view .LVU122
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 27


 344              	.LVL36:
 258:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 345              		.loc 1 258 36 discriminator 3 view .LVU123
 258:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 346              		.loc 1 258 37 is_stmt 0 discriminator 3 view .LVU124
 347 012c 0133     		adds	r3, r3, #1
 348              	.LVL37:
 258:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 349              		.loc 1 258 37 discriminator 3 view .LVU125
 350 012e 1BB2     		sxth	r3, r3
 351              	.LVL38:
 352              	.L12:
 258:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 353              		.loc 1 258 24 is_stmt 1 discriminator 1 view .LVU126
 258:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 354              		.loc 1 258 13 is_stmt 0 discriminator 1 view .LVU127
 355 0130 8342     		cmp	r3, r0
 356 0132 F1DB     		blt	.L11
 271:lvgl/src/draw/sw/lv_draw_sw_img.c ****             abuf += dest_w;
 357              		.loc 1 271 13 is_stmt 1 discriminator 2 view .LVU128
 271:lvgl/src/draw/sw/lv_draw_sw_img.c ****             abuf += dest_w;
 358              		.loc 1 271 18 is_stmt 0 discriminator 2 view .LVU129
 359 0134 04EB8004 		add	r4, r4, r0, lsl #2
 360              	.LVL39:
 272:lvgl/src/draw/sw/lv_draw_sw_img.c ****             src_tmp8 += src_new_line_step_byte;
 361              		.loc 1 272 13 is_stmt 1 discriminator 2 view .LVU130
 272:lvgl/src/draw/sw/lv_draw_sw_img.c ****             src_tmp8 += src_new_line_step_byte;
 362              		.loc 1 272 18 is_stmt 0 discriminator 2 view .LVU131
 363 0138 0544     		add	r5, r5, r0
 364              	.LVL40:
 273:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 365              		.loc 1 273 13 is_stmt 1 discriminator 2 view .LVU132
 273:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 366              		.loc 1 273 22 is_stmt 0 discriminator 2 view .LVU133
 367 013a 6744     		add	r7, r7, ip
 368              	.LVL41:
 257:lvgl/src/draw/sw/lv_draw_sw_img.c ****             for(x = 0; x < dest_w; x++) {
 369              		.loc 1 257 32 is_stmt 1 discriminator 2 view .LVU134
 257:lvgl/src/draw/sw/lv_draw_sw_img.c ****             for(x = 0; x < dest_w; x++) {
 370              		.loc 1 257 33 is_stmt 0 discriminator 2 view .LVU135
 371 013c 0136     		adds	r6, r6, #1
 372              	.LVL42:
 257:lvgl/src/draw/sw/lv_draw_sw_img.c ****             for(x = 0; x < dest_w; x++) {
 373              		.loc 1 257 33 discriminator 2 view .LVU136
 374 013e 36B2     		sxth	r6, r6
 375              	.LVL43:
 376              	.L10:
 257:lvgl/src/draw/sw/lv_draw_sw_img.c ****             for(x = 0; x < dest_w; x++) {
 377              		.loc 1 257 20 is_stmt 1 discriminator 1 view .LVU137
 257:lvgl/src/draw/sw/lv_draw_sw_img.c ****             for(x = 0; x < dest_w; x++) {
 378              		.loc 1 257 9 is_stmt 0 discriminator 1 view .LVU138
 379 0140 7645     		cmp	r6, lr
 380 0142 BFF677AF 		bge	.L1
 258:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 381              		.loc 1 258 19 view .LVU139
 382 0146 0023     		movs	r3, #0
 383 0148 F2E7     		b	.L12
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 28


 384              	.LVL44:
 385              	.L21:
 258:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 386              		.loc 1 258 19 view .LVU140
 387              	.LBE51:
 388              	.LBB52:
 277:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 389              		.loc 1 277 9 is_stmt 1 view .LVU141
 277:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 390              		.loc 1 277 44 is_stmt 0 view .LVU142
 391 014a 0098     		ldr	r0, [sp]
 392              	.LVL45:
 277:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 393              		.loc 1 277 44 view .LVU143
 394 014c B0F90220 		ldrsh	r2, [r0, #2]
 395              	.LVL46:
 277:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 396              		.loc 1 277 82 view .LVU144
 397 0150 B0F90030 		ldrsh	r3, [r0]
 398              	.LVL47:
 277:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 399              		.loc 1 277 71 view .LVU145
 400 0154 02FB0B38 		mla	r8, r2, fp, r3
 277:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 401              		.loc 1 277 18 view .LVU146
 402 0158 0199     		ldr	r1, [sp, #4]
 403              	.LVL48:
 277:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 404              		.loc 1 277 18 view .LVU147
 405 015a 01EB8808 		add	r8, r1, r8, lsl #2
 406              	.LVL49:
 279:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 407              		.loc 1 279 9 is_stmt 1 view .LVU148
 279:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 408              		.loc 1 279 20 is_stmt 0 view .LVU149
 409 015e 4FEA8B01 		lsl	r1, fp, #2
 410 0162 09B2     		sxth	r1, r1
 411 0164 0491     		str	r1, [sp, #16]
 412              	.LVL50:
 281:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t dest_w = lv_area_get_width(dest_area);
 413              		.loc 1 281 9 is_stmt 1 view .LVU150
 414              	.LBB53:
 415              	.LBI53:
 133:lvgl/src/draw/sw/../../misc/lv_area.h **** {
 416              		.loc 2 133 26 view .LVU151
 417              	.LBB54:
 418              		.loc 2 135 5 view .LVU152
 419              		.loc 2 135 31 is_stmt 0 view .LVU153
 420 0166 B0F806A0 		ldrh	r10, [r0, #6]
 421              		.loc 2 135 44 view .LVU154
 422 016a 92B2     		uxth	r2, r2
 423              		.loc 2 135 36 view .LVU155
 424 016c AAEB020A 		sub	r10, r10, r2
 425 0170 1FFA8AFA 		uxth	r10, r10
 426              		.loc 2 135 49 view .LVU156
 427 0174 0AF1010A 		add	r10, r10, #1
 428              		.loc 2 135 12 view .LVU157
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 29


 429 0178 0FFA8AFA 		sxth	r10, r10
 430              	.LVL51:
 431              		.loc 2 135 12 view .LVU158
 432              	.LBE54:
 433              	.LBE53:
 282:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = 0; y < dest_h; y++) {
 434              		.loc 1 282 9 is_stmt 1 view .LVU159
 435              	.LBB55:
 436              	.LBI55:
 123:lvgl/src/draw/sw/../../misc/lv_area.h **** {
 437              		.loc 2 123 26 view .LVU160
 438              	.LBB56:
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 439              		.loc 2 125 5 view .LVU161
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 440              		.loc 2 125 31 is_stmt 0 view .LVU162
 441 017c 8788     		ldrh	r7, [r0, #4]
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 442              		.loc 2 125 44 view .LVU163
 443 017e 9BB2     		uxth	r3, r3
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 444              		.loc 2 125 36 view .LVU164
 445 0180 FF1A     		subs	r7, r7, r3
 446 0182 BFB2     		uxth	r7, r7
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 447              		.loc 2 125 49 view .LVU165
 448 0184 0137     		adds	r7, r7, #1
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 449              		.loc 2 125 12 view .LVU166
 450 0186 3FB2     		sxth	r7, r7
 451              	.LVL52:
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 452              		.loc 2 125 12 view .LVU167
 453              	.LBE56:
 454              	.LBE55:
 283:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 455              		.loc 1 283 9 is_stmt 1 view .LVU168
 283:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 456              		.loc 1 283 15 is_stmt 0 view .LVU169
 457 0188 0026     		movs	r6, #0
 458 018a CDF814B0 		str	fp, [sp, #20]
 459 018e DDF810B0 		ldr	fp, [sp, #16]
 283:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 460              		.loc 1 283 9 view .LVU170
 461 0192 0AE0     		b	.L13
 462              	.LVL53:
 463              	.L14:
 284:lvgl/src/draw/sw/lv_draw_sw_img.c ****             cbuf += dest_w;
 464              		.loc 1 284 13 is_stmt 1 discriminator 3 view .LVU171
 465 0194 4FEA8709 		lsl	r9, r7, #2
 466 0198 4A46     		mov	r2, r9
 467 019a 4146     		mov	r1, r8
 468 019c 2046     		mov	r0, r4
 469 019e FFF7FEFF 		bl	lv_memcpy
 470              	.LVL54:
 285:lvgl/src/draw/sw/lv_draw_sw_img.c ****             src_tmp8 += src_stride_byte;
 471              		.loc 1 285 13 discriminator 3 view .LVU172
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 30


 285:lvgl/src/draw/sw/lv_draw_sw_img.c ****             src_tmp8 += src_stride_byte;
 472              		.loc 1 285 18 is_stmt 0 discriminator 3 view .LVU173
 473 01a2 4C44     		add	r4, r4, r9
 474              	.LVL55:
 286:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 475              		.loc 1 286 13 is_stmt 1 discriminator 3 view .LVU174
 286:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 476              		.loc 1 286 22 is_stmt 0 discriminator 3 view .LVU175
 477 01a4 D844     		add	r8, r8, fp
 478              	.LVL56:
 283:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 479              		.loc 1 283 32 is_stmt 1 discriminator 3 view .LVU176
 283:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 480              		.loc 1 283 33 is_stmt 0 discriminator 3 view .LVU177
 481 01a6 0136     		adds	r6, r6, #1
 482              	.LVL57:
 283:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 483              		.loc 1 283 33 discriminator 3 view .LVU178
 484 01a8 36B2     		sxth	r6, r6
 485              	.LVL58:
 486              	.L13:
 283:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 487              		.loc 1 283 20 is_stmt 1 discriminator 1 view .LVU179
 283:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 488              		.loc 1 283 9 is_stmt 0 discriminator 1 view .LVU180
 489 01aa 5645     		cmp	r6, r10
 490 01ac F2DB     		blt	.L14
 290:lvgl/src/draw/sw/lv_draw_sw_img.c ****         src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 491              		.loc 1 290 48 view .LVU181
 492 01ae DDF814B0 		ldr	fp, [sp, #20]
 289:lvgl/src/draw/sw/lv_draw_sw_img.c ****         src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 493              		.loc 1 289 9 is_stmt 1 view .LVU182
 494              	.LVL59:
 290:lvgl/src/draw/sw/lv_draw_sw_img.c ****         src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 495              		.loc 1 290 9 view .LVU183
 290:lvgl/src/draw/sw/lv_draw_sw_img.c ****         src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 496              		.loc 1 290 48 is_stmt 0 view .LVU184
 497 01b2 029B     		ldr	r3, [sp, #8]
 498 01b4 039A     		ldr	r2, [sp, #12]
 499 01b6 02FB03F3 		mul	r3, r2, r3
 500              	.LVL60:
 291:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = 0; y < dest_h; y++) {
 501              		.loc 1 291 9 is_stmt 1 view .LVU185
 291:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = 0; y < dest_h; y++) {
 502              		.loc 1 291 43 is_stmt 0 view .LVU186
 503 01ba 0099     		ldr	r1, [sp]
 504 01bc B1F90220 		ldrsh	r2, [r1, #2]
 291:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = 0; y < dest_h; y++) {
 505              		.loc 1 291 59 view .LVU187
 506 01c0 B1F90060 		ldrsh	r6, [r1]
 507              	.LVL61:
 291:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = 0; y < dest_h; y++) {
 508              		.loc 1 291 48 view .LVU188
 509 01c4 02FB0B66 		mla	r6, r2, fp, r6
 291:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = 0; y < dest_h; y++) {
 510              		.loc 1 291 18 view .LVU189
 511 01c8 06EB8303 		add	r3, r6, r3, lsl #2
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 31


 512              	.LVL62:
 291:lvgl/src/draw/sw/lv_draw_sw_img.c ****         for(y = 0; y < dest_h; y++) {
 513              		.loc 1 291 18 view .LVU190
 514 01cc 019E     		ldr	r6, [sp, #4]
 515 01ce 1E44     		add	r6, r6, r3
 516              	.LVL63:
 292:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(abuf, src_tmp8, dest_w);
 517              		.loc 1 292 9 is_stmt 1 view .LVU191
 292:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(abuf, src_tmp8, dest_w);
 518              		.loc 1 292 15 is_stmt 0 view .LVU192
 519 01d0 0024     		movs	r4, #0
 520              	.LVL64:
 292:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(abuf, src_tmp8, dest_w);
 521              		.loc 1 292 9 view .LVU193
 522 01d2 08E0     		b	.L15
 523              	.LVL65:
 524              	.L16:
 293:lvgl/src/draw/sw/lv_draw_sw_img.c ****             abuf += dest_w;
 525              		.loc 1 293 13 is_stmt 1 discriminator 3 view .LVU194
 526 01d4 3A46     		mov	r2, r7
 527 01d6 3146     		mov	r1, r6
 528 01d8 2846     		mov	r0, r5
 529 01da FFF7FEFF 		bl	lv_memcpy
 530              	.LVL66:
 294:lvgl/src/draw/sw/lv_draw_sw_img.c ****             src_tmp8 += src_stride;
 531              		.loc 1 294 13 discriminator 3 view .LVU195
 294:lvgl/src/draw/sw/lv_draw_sw_img.c ****             src_tmp8 += src_stride;
 532              		.loc 1 294 18 is_stmt 0 discriminator 3 view .LVU196
 533 01de 3D44     		add	r5, r5, r7
 534              	.LVL67:
 295:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 535              		.loc 1 295 13 is_stmt 1 discriminator 3 view .LVU197
 295:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 536              		.loc 1 295 22 is_stmt 0 discriminator 3 view .LVU198
 537 01e0 5E44     		add	r6, r6, fp
 538              	.LVL68:
 292:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(abuf, src_tmp8, dest_w);
 539              		.loc 1 292 32 is_stmt 1 discriminator 3 view .LVU199
 292:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(abuf, src_tmp8, dest_w);
 540              		.loc 1 292 33 is_stmt 0 discriminator 3 view .LVU200
 541 01e2 0134     		adds	r4, r4, #1
 542              	.LVL69:
 292:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(abuf, src_tmp8, dest_w);
 543              		.loc 1 292 33 discriminator 3 view .LVU201
 544 01e4 24B2     		sxth	r4, r4
 545              	.LVL70:
 546              	.L15:
 292:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(abuf, src_tmp8, dest_w);
 547              		.loc 1 292 20 is_stmt 1 discriminator 1 view .LVU202
 292:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(abuf, src_tmp8, dest_w);
 548              		.loc 1 292 9 is_stmt 0 discriminator 1 view .LVU203
 549 01e6 5445     		cmp	r4, r10
 550 01e8 F4DB     		blt	.L16
 292:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_memcpy(abuf, src_tmp8, dest_w);
 551              		.loc 1 292 9 discriminator 1 view .LVU204
 552 01ea 23E7     		b	.L1
 553              	.LBE52:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 32


 554              		.cfi_endproc
 555              	.LFE162:
 557              		.section	.text.lv_draw_sw_img_decoded,"ax",%progbits
 558              		.align	1
 559              		.global	lv_draw_sw_img_decoded
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 564              	lv_draw_sw_img_decoded:
 565              	.LVL71:
 566              	.LFB161:
  48:lvgl/src/draw/sw/lv_draw_sw_img.c ****     /*Use the clip area as draw area*/
 567              		.loc 1 48 1 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 4, pretend = 0, frame = 104
 570              		@ frame_needed = 0, uses_anonymous_args = 0
  48:lvgl/src/draw/sw/lv_draw_sw_img.c ****     /*Use the clip area as draw area*/
 571              		.loc 1 48 1 is_stmt 0 view .LVU206
 572 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 573              		.cfi_def_cfa_offset 36
 574              		.cfi_offset 4, -36
 575              		.cfi_offset 5, -32
 576              		.cfi_offset 6, -28
 577              		.cfi_offset 7, -24
 578              		.cfi_offset 8, -20
 579              		.cfi_offset 9, -16
 580              		.cfi_offset 10, -12
 581              		.cfi_offset 11, -8
 582              		.cfi_offset 14, -4
 583 0004 A1B0     		sub	sp, sp, #132
 584              		.cfi_def_cfa_offset 168
 585 0006 0690     		str	r0, [sp, #24]
 586 0008 8946     		mov	r9, r1
 587 000a 0992     		str	r2, [sp, #36]
 588 000c 0A93     		str	r3, [sp, #40]
 589 000e 9DF8A860 		ldrb	r6, [sp, #168]	@ zero_extendqisi2
 590 0012 0896     		str	r6, [sp, #32]
  50:lvgl/src/draw/sw/lv_draw_sw_img.c ****     lv_area_copy(&draw_area, draw_ctx->clip_area);
 591              		.loc 1 50 5 is_stmt 1 view .LVU207
  51:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 592              		.loc 1 51 5 view .LVU208
 593 0014 8368     		ldr	r3, [r0, #8]
 594              	.LVL72:
 595              	.LBB79:
 596              	.LBI79:
 110:lvgl/src/draw/sw/../../misc/lv_area.h **** {
 597              		.loc 2 110 20 view .LVU209
 598              	.LBB80:
 112:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y1 = src->y1;
 599              		.loc 2 112 5 view .LVU210
 112:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y1 = src->y1;
 600              		.loc 2 112 19 is_stmt 0 view .LVU211
 601 0016 B3F90020 		ldrsh	r2, [r3]
 602              	.LVL73:
 112:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y1 = src->y1;
 603              		.loc 2 112 14 view .LVU212
 604 001a ADF87820 		strh	r2, [sp, #120]	@ movhi
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 33


 113:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->x2 = src->x2;
 605              		.loc 2 113 5 is_stmt 1 view .LVU213
 113:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->x2 = src->x2;
 606              		.loc 2 113 19 is_stmt 0 view .LVU214
 607 001e B3F90220 		ldrsh	r2, [r3, #2]
 113:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->x2 = src->x2;
 608              		.loc 2 113 14 view .LVU215
 609 0022 ADF87A20 		strh	r2, [sp, #122]	@ movhi
 114:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y2 = src->y2;
 610              		.loc 2 114 5 is_stmt 1 view .LVU216
 114:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y2 = src->y2;
 611              		.loc 2 114 19 is_stmt 0 view .LVU217
 612 0026 B3F90420 		ldrsh	r2, [r3, #4]
 114:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y2 = src->y2;
 613              		.loc 2 114 14 view .LVU218
 614 002a ADF87C20 		strh	r2, [sp, #124]	@ movhi
 115:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 615              		.loc 2 115 5 is_stmt 1 view .LVU219
 115:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 616              		.loc 2 115 19 is_stmt 0 view .LVU220
 617 002e B3F90630 		ldrsh	r3, [r3, #6]
 618              	.LVL74:
 115:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 619              		.loc 2 115 14 view .LVU221
 620 0032 ADF87E30 		strh	r3, [sp, #126]	@ movhi
 621              	.LVL75:
 115:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 622              		.loc 2 115 14 view .LVU222
 623              	.LBE80:
 624              	.LBE79:
  53:lvgl/src/draw/sw/lv_draw_sw_img.c ****     bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 625              		.loc 1 53 5 is_stmt 1 view .LVU223
  53:lvgl/src/draw/sw/lv_draw_sw_img.c ****     bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 626              		.loc 1 53 21 is_stmt 0 view .LVU224
 627 0036 1EA8     		add	r0, sp, #120
 628              	.LVL76:
  53:lvgl/src/draw/sw/lv_draw_sw_img.c ****     bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 629              		.loc 1 53 21 view .LVU225
 630 0038 FFF7FEFF 		bl	lv_draw_mask_is_any
 631              	.LVL77:
  53:lvgl/src/draw/sw/lv_draw_sw_img.c ****     bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 632              		.loc 1 53 21 view .LVU226
 633 003c 0746     		mov	r7, r0
 634 003e 0C90     		str	r0, [sp, #48]
 635              	.LVL78:
  54:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 636              		.loc 1 54 5 is_stmt 1 view .LVU227
  54:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 637              		.loc 1 54 43 is_stmt 0 view .LVU228
 638 0040 D9F80040 		ldr	r4, [r9]
 639 0044 0B94     		str	r4, [sp, #44]
 640              	.LVL79:
  56:lvgl/src/draw/sw/lv_draw_sw_img.c ****     lv_draw_sw_blend_dsc_t blend_dsc;
 641              		.loc 1 56 5 is_stmt 1 view .LVU229
  57:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 642              		.loc 1 57 5 view .LVU230
  59:lvgl/src/draw/sw/lv_draw_sw_img.c ****     blend_dsc.opa = draw_dsc->opa;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 34


 643              		.loc 1 59 5 view .LVU231
 644 0046 1C21     		movs	r1, #28
 645 0048 15A8     		add	r0, sp, #84
 646 004a FFF7FEFF 		bl	lv_memset_00
 647              	.LVL80:
  60:lvgl/src/draw/sw/lv_draw_sw_img.c ****     blend_dsc.blend_mode = draw_dsc->blend_mode;
 648              		.loc 1 60 5 view .LVU232
  60:lvgl/src/draw/sw/lv_draw_sw_img.c ****     blend_dsc.blend_mode = draw_dsc->blend_mode;
 649              		.loc 1 60 29 is_stmt 0 view .LVU233
 650 004e 99F80D30 		ldrb	r3, [r9, #13]	@ zero_extendqisi2
  60:lvgl/src/draw/sw/lv_draw_sw_img.c ****     blend_dsc.blend_mode = draw_dsc->blend_mode;
 651              		.loc 1 60 19 view .LVU234
 652 0052 8DF86C30 		strb	r3, [sp, #108]
  61:lvgl/src/draw/sw/lv_draw_sw_img.c ****     blend_dsc.blend_area = &blend_area;
 653              		.loc 1 61 5 is_stmt 1 view .LVU235
  61:lvgl/src/draw/sw/lv_draw_sw_img.c ****     blend_dsc.blend_area = &blend_area;
 654              		.loc 1 61 36 is_stmt 0 view .LVU236
 655 0056 99F80E30 		ldrb	r3, [r9, #14]	@ zero_extendqisi2
 656 005a C3F30303 		ubfx	r3, r3, #0, #4
  61:lvgl/src/draw/sw/lv_draw_sw_img.c ****     blend_dsc.blend_area = &blend_area;
 657              		.loc 1 61 26 view .LVU237
 658 005e 8DF86D30 		strb	r3, [sp, #109]
  62:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 659              		.loc 1 62 5 is_stmt 1 view .LVU238
  62:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 660              		.loc 1 62 26 is_stmt 0 view .LVU239
 661 0062 1CAB     		add	r3, sp, #112
 662 0064 1593     		str	r3, [sp, #84]
  65:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = (const lv_color_t *)src_buf;
 663              		.loc 1 65 5 is_stmt 1 view .LVU240
  65:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = (const lv_color_t *)src_buf;
 664              		.loc 1 65 8 is_stmt 0 view .LVU241
 665 0066 87F00103 		eor	r3, r7, #1
  65:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = (const lv_color_t *)src_buf;
 666              		.loc 1 65 18 view .LVU242
 667 006a B4F1807F 		cmp	r4, #16777216
 668 006e 14BF     		ite	ne
 669 0070 0023     		movne	r3, #0
 670 0072 03F00103 		andeq	r3, r3, #1
  65:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = (const lv_color_t *)src_buf;
 671              		.loc 1 65 7 view .LVU243
 672 0076 13B1     		cbz	r3, .L23
  65:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = (const lv_color_t *)src_buf;
 673              		.loc 1 65 32 discriminator 1 view .LVU244
 674 0078 042E     		cmp	r6, #4
 675 007a 00F0B280 		beq	.L47
 676              	.L23:
  71:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_area_t clipped_coords;
 677              		.loc 1 71 10 is_stmt 1 view .LVU245
  71:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_area_t clipped_coords;
 678              		.loc 1 71 12 is_stmt 0 view .LVU246
 679 007e 1BB1     		cbz	r3, .L25
  71:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_area_t clipped_coords;
 680              		.loc 1 71 37 discriminator 1 view .LVU247
 681 0080 089B     		ldr	r3, [sp, #32]
 682 0082 0E2B     		cmp	r3, #14
 683 0084 00F0BB80 		beq	.L48
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 35


 684              	.L25:
 685              	.LBB81:
  99:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.x2 = draw_ctx->clip_area->x2;
 686              		.loc 1 99 9 is_stmt 1 view .LVU248
  99:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.x2 = draw_ctx->clip_area->x2;
 687              		.loc 1 99 33 is_stmt 0 view .LVU249
 688 0088 069B     		ldr	r3, [sp, #24]
 689 008a 9A68     		ldr	r2, [r3, #8]
  99:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.x2 = draw_ctx->clip_area->x2;
 690              		.loc 1 99 44 view .LVU250
 691 008c B2F90010 		ldrsh	r1, [r2]
  99:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.x2 = draw_ctx->clip_area->x2;
 692              		.loc 1 99 23 view .LVU251
 693 0090 ADF87010 		strh	r1, [sp, #112]	@ movhi
 100:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.y1 = draw_ctx->clip_area->y1;
 694              		.loc 1 100 9 is_stmt 1 view .LVU252
 100:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.y1 = draw_ctx->clip_area->y1;
 695              		.loc 1 100 44 is_stmt 0 view .LVU253
 696 0094 B2F90430 		ldrsh	r3, [r2, #4]
 100:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.y1 = draw_ctx->clip_area->y1;
 697              		.loc 1 100 23 view .LVU254
 698 0098 ADF87430 		strh	r3, [sp, #116]	@ movhi
 101:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.y2 = draw_ctx->clip_area->y2;
 699              		.loc 1 101 9 is_stmt 1 view .LVU255
 101:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.y2 = draw_ctx->clip_area->y2;
 700              		.loc 1 101 44 is_stmt 0 view .LVU256
 701 009c B2F90260 		ldrsh	r6, [r2, #2]
 101:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.y2 = draw_ctx->clip_area->y2;
 702              		.loc 1 101 23 view .LVU257
 703 00a0 ADF87260 		strh	r6, [sp, #114]	@ movhi
 102:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 704              		.loc 1 102 9 is_stmt 1 view .LVU258
 102:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 705              		.loc 1 102 44 is_stmt 0 view .LVU259
 706 00a4 B2F90620 		ldrsh	r2, [r2, #6]
 102:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 707              		.loc 1 102 23 view .LVU260
 708 00a8 ADF87620 		strh	r2, [sp, #118]	@ movhi
 104:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t src_h = lv_area_get_height(coords);
 709              		.loc 1 104 9 is_stmt 1 view .LVU261
 710              	.LVL81:
 711              	.LBB82:
 712              	.LBI82:
 123:lvgl/src/draw/sw/../../misc/lv_area.h **** {
 713              		.loc 2 123 26 view .LVU262
 714              	.LBB83:
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 715              		.loc 2 125 5 view .LVU263
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 716              		.loc 2 125 31 is_stmt 0 view .LVU264
 717 00ac 099F     		ldr	r7, [sp, #36]
 718              	.LVL82:
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 719              		.loc 2 125 31 view .LVU265
 720 00ae B888     		ldrh	r0, [r7, #4]
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 721              		.loc 2 125 44 view .LVU266
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 36


 722 00b0 3C88     		ldrh	r4, [r7]
 723              	.LVL83:
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 724              		.loc 2 125 36 view .LVU267
 725 00b2 001B     		subs	r0, r0, r4
 726 00b4 80B2     		uxth	r0, r0
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 727              		.loc 2 125 49 view .LVU268
 728 00b6 0130     		adds	r0, r0, #1
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 729              		.loc 2 125 12 view .LVU269
 730 00b8 00B2     		sxth	r0, r0
 731 00ba 0F90     		str	r0, [sp, #60]
 732              	.LVL84:
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 733              		.loc 2 125 12 view .LVU270
 734              	.LBE83:
 735              	.LBE82:
 105:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t blend_h = lv_area_get_height(&blend_area);
 736              		.loc 1 105 9 is_stmt 1 view .LVU271
 737              	.LBB84:
 738              	.LBI84:
 133:lvgl/src/draw/sw/../../misc/lv_area.h **** {
 739              		.loc 2 133 26 view .LVU272
 740              	.LBB85:
 741              		.loc 2 135 5 view .LVU273
 742              		.loc 2 135 31 is_stmt 0 view .LVU274
 743 00bc F888     		ldrh	r0, [r7, #6]
 744              		.loc 2 135 44 view .LVU275
 745 00be 7C88     		ldrh	r4, [r7, #2]
 746              		.loc 2 135 36 view .LVU276
 747 00c0 001B     		subs	r0, r0, r4
 748 00c2 80B2     		uxth	r0, r0
 749              		.loc 2 135 49 view .LVU277
 750 00c4 0130     		adds	r0, r0, #1
 751              		.loc 2 135 12 view .LVU278
 752 00c6 00B2     		sxth	r0, r0
 753 00c8 0E90     		str	r0, [sp, #56]
 754              	.LVL85:
 755              		.loc 2 135 12 view .LVU279
 756              	.LBE85:
 757              	.LBE84:
 106:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t blend_w = lv_area_get_width(&blend_area);
 758              		.loc 1 106 9 is_stmt 1 view .LVU280
 759              	.LBB86:
 760              	.LBI86:
 133:lvgl/src/draw/sw/../../misc/lv_area.h **** {
 761              		.loc 2 133 26 view .LVU281
 762              	.LBB87:
 763              		.loc 2 135 5 view .LVU282
 764              		.loc 2 135 31 is_stmt 0 view .LVU283
 765 00ca 94B2     		uxth	r4, r2
 766              		.loc 2 135 44 view .LVU284
 767 00cc B6B2     		uxth	r6, r6
 768              		.loc 2 135 36 view .LVU285
 769 00ce A41B     		subs	r4, r4, r6
 770 00d0 A4B2     		uxth	r4, r4
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 37


 771              		.loc 2 135 49 view .LVU286
 772 00d2 0134     		adds	r4, r4, #1
 773              		.loc 2 135 12 view .LVU287
 774 00d4 24B2     		sxth	r4, r4
 775              	.LVL86:
 776              		.loc 2 135 12 view .LVU288
 777              	.LBE87:
 778              	.LBE86:
 107:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 779              		.loc 1 107 9 is_stmt 1 view .LVU289
 780              	.LBB88:
 781              	.LBI88:
 123:lvgl/src/draw/sw/../../misc/lv_area.h **** {
 782              		.loc 2 123 26 view .LVU290
 783              	.LBB89:
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 784              		.loc 2 125 5 view .LVU291
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 785              		.loc 2 125 31 is_stmt 0 view .LVU292
 786 00d6 9FB2     		uxth	r7, r3
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 787              		.loc 2 125 44 view .LVU293
 788 00d8 89B2     		uxth	r1, r1
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 789              		.loc 2 125 36 view .LVU294
 790 00da 7F1A     		subs	r7, r7, r1
 791 00dc BFB2     		uxth	r7, r7
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 792              		.loc 2 125 49 view .LVU295
 793 00de 0137     		adds	r7, r7, #1
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 794              		.loc 2 125 12 view .LVU296
 795 00e0 3FB2     		sxth	r7, r7
 796              	.LVL87:
 125:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 797              		.loc 2 125 12 view .LVU297
 798              	.LBE89:
 799              	.LBE88:
 109:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t blend_size = lv_area_get_size(&blend_area);
 800              		.loc 1 109 9 is_stmt 1 view .LVU298
 109:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t blend_size = lv_area_get_size(&blend_area);
 801              		.loc 1 109 33 is_stmt 0 view .LVU299
 802 00e2 FFF7FEFF 		bl	_lv_refr_get_disp_refreshing
 803              	.LVL88:
 804 00e6 FFF7FEFF 		bl	lv_disp_get_hor_res
 805              	.LVL89:
 806 00ea 0646     		mov	r6, r0
 807              	.LVL90:
 110:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t buf_h;
 808              		.loc 1 110 9 is_stmt 1 view .LVU300
 110:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t buf_h;
 809              		.loc 1 110 31 is_stmt 0 view .LVU301
 810 00ec 1CA8     		add	r0, sp, #112
 811              	.LVL91:
 110:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t buf_h;
 812              		.loc 1 110 31 view .LVU302
 813 00ee FFF7FEFF 		bl	lv_area_get_size
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 38


 814              	.LVL92:
 111:lvgl/src/draw/sw/lv_draw_sw_img.c ****         uint32_t buf_w = blend_w;
 815              		.loc 1 111 9 is_stmt 1 view .LVU303
 112:lvgl/src/draw/sw/lv_draw_sw_img.c ****         if(blend_size <= max_buf_size) {
 816              		.loc 1 112 9 view .LVU304
 113:lvgl/src/draw/sw/lv_draw_sw_img.c ****             buf_h = blend_h;
 817              		.loc 1 113 9 view .LVU305
 113:lvgl/src/draw/sw/lv_draw_sw_img.c ****             buf_h = blend_h;
 818              		.loc 1 113 11 is_stmt 0 view .LVU306
 819 00f2 8642     		cmp	r6, r0
 820 00f4 01D2     		bcs	.L29
 118:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 821              		.loc 1 118 13 is_stmt 1 view .LVU307
 118:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 822              		.loc 1 118 19 is_stmt 0 view .LVU308
 823 00f6 B6FBF7F4 		udiv	r4, r6, r7
 824              	.LVL93:
 825              	.L29:
 122:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 826              		.loc 1 122 9 is_stmt 1 view .LVU309
 122:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 827              		.loc 1 122 18 is_stmt 0 view .LVU310
 828 00fa 07FB04FA 		mul	r10, r7, r4
 829              	.LVL94:
 124:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 830              		.loc 1 124 9 is_stmt 1 view .LVU311
 124:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 831              		.loc 1 124 32 is_stmt 0 view .LVU312
 832 00fe 4FEA8A00 		lsl	r0, r10, #2
 833              	.LVL95:
 124:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 834              		.loc 1 124 32 view .LVU313
 835 0102 FFF7FEFF 		bl	lv_mem_buf_get
 836              	.LVL96:
 837 0106 8046     		mov	r8, r0
 838              	.LVL97:
 125:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_buf = mask_buf;
 839              		.loc 1 125 9 is_stmt 1 view .LVU314
 125:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_buf = mask_buf;
 840              		.loc 1 125 31 is_stmt 0 view .LVU315
 841 0108 5046     		mov	r0, r10
 842              	.LVL98:
 125:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_buf = mask_buf;
 843              		.loc 1 125 31 view .LVU316
 844 010a FFF7FEFF 		bl	lv_mem_buf_get
 845              	.LVL99:
 846 010e 0790     		str	r0, [sp, #28]
 847              	.LVL100:
 126:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_area = &blend_area;
 848              		.loc 1 126 9 is_stmt 1 view .LVU317
 126:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_area = &blend_area;
 849              		.loc 1 126 28 is_stmt 0 view .LVU318
 850 0110 1890     		str	r0, [sp, #96]
 127:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 851              		.loc 1 127 9 is_stmt 1 view .LVU319
 127:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 852              		.loc 1 127 29 is_stmt 0 view .LVU320
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 39


 853 0112 1CAB     		add	r3, sp, #112
 854 0114 1A93     		str	r3, [sp, #104]
 128:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = rgb_buf;
 855              		.loc 1 128 9 is_stmt 1 view .LVU321
 128:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = rgb_buf;
 856              		.loc 1 128 28 is_stmt 0 view .LVU322
 857 0116 0223     		movs	r3, #2
 858 0118 8DF86430 		strb	r3, [sp, #100]
 129:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t y_last = blend_area.y2;
 859              		.loc 1 129 9 is_stmt 1 view .LVU323
 129:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_coord_t y_last = blend_area.y2;
 860              		.loc 1 129 27 is_stmt 0 view .LVU324
 861 011c CDF85880 		str	r8, [sp, #88]
 130:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.y2 = blend_area.y1 + buf_h - 1;
 862              		.loc 1 130 9 is_stmt 1 view .LVU325
 130:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_area.y2 = blend_area.y1 + buf_h - 1;
 863              		.loc 1 130 20 is_stmt 0 view .LVU326
 864 0120 BDF976B0 		ldrsh	fp, [sp, #118]
 865              	.LVL101:
 131:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 866              		.loc 1 131 9 is_stmt 1 view .LVU327
 131:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 867              		.loc 1 131 35 is_stmt 0 view .LVU328
 868 0124 BDF87230 		ldrh	r3, [sp, #114]
 131:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 869              		.loc 1 131 39 view .LVU329
 870 0128 A2B2     		uxth	r2, r4
 871 012a 0D92     		str	r2, [sp, #52]
 872 012c 1344     		add	r3, r3, r2
 873 012e 9BB2     		uxth	r3, r3
 131:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 874              		.loc 1 131 47 view .LVU330
 875 0130 013B     		subs	r3, r3, #1
 131:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 876              		.loc 1 131 23 view .LVU331
 877 0132 ADF87630 		strh	r3, [sp, #118]	@ movhi
 133:lvgl/src/draw/sw/lv_draw_sw_img.c ****                                            draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
 878              		.loc 1 133 9 is_stmt 1 view .LVU332
 133:lvgl/src/draw/sw/lv_draw_sw_img.c ****                                            draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
 879              		.loc 1 133 28 is_stmt 0 view .LVU333
 880 0136 089B     		ldr	r3, [sp, #32]
 881 0138 042B     		cmp	r3, #4
 882 013a 7BD0     		beq	.L49
 883 013c 0223     		movs	r3, #2
 884              	.L30:
 885              	.LVL102:
 136:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 886              		.loc 1 136 9 is_stmt 1 discriminator 6 view .LVU334
 136:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 887              		.loc 1 136 28 is_stmt 0 discriminator 6 view .LVU335
 888 013e 8DF86430 		strb	r3, [sp, #100]
 138:lvgl/src/draw/sw/lv_draw_sw_img.c ****             /*Apply transformations if any or separate the channels*/
 889              		.loc 1 138 9 is_stmt 1 discriminator 6 view .LVU336
 890              	.LVL103:
 891              	.L31:
 138:lvgl/src/draw/sw/lv_draw_sw_img.c ****             /*Apply transformations if any or separate the channels*/
 892              		.loc 1 138 14 view .LVU337
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 40


 138:lvgl/src/draw/sw/lv_draw_sw_img.c ****             /*Apply transformations if any or separate the channels*/
 893              		.loc 1 138 25 is_stmt 0 view .LVU338
 894 0142 BDF97230 		ldrsh	r3, [sp, #114]
 138:lvgl/src/draw/sw/lv_draw_sw_img.c ****             /*Apply transformations if any or separate the channels*/
 895              		.loc 1 138 14 view .LVU339
 896 0146 5B45     		cmp	r3, fp
 897 0148 00F3F880 		bgt	.L50
 898              	.LBB90:
 140:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_area_copy(&transform_area, &blend_area);
 899              		.loc 1 140 13 is_stmt 1 view .LVU340
 141:lvgl/src/draw/sw/lv_draw_sw_img.c ****             lv_area_move(&transform_area, -coords->x1, -coords->y1);
 900              		.loc 1 141 13 view .LVU341
 901              	.LVL104:
 902              	.LBB91:
 903              	.LBI91:
 110:lvgl/src/draw/sw/../../misc/lv_area.h **** {
 904              		.loc 2 110 20 view .LVU342
 905              	.LBB92:
 112:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y1 = src->y1;
 906              		.loc 2 112 5 view .LVU343
 112:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y1 = src->y1;
 907              		.loc 2 112 19 is_stmt 0 view .LVU344
 908 014c BDF97020 		ldrsh	r2, [sp, #112]
 112:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y1 = src->y1;
 909              		.loc 2 112 14 view .LVU345
 910 0150 ADF84C20 		strh	r2, [sp, #76]	@ movhi
 113:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->x2 = src->x2;
 911              		.loc 2 113 5 is_stmt 1 view .LVU346
 113:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->x2 = src->x2;
 912              		.loc 2 113 14 is_stmt 0 view .LVU347
 913 0154 ADF84E30 		strh	r3, [sp, #78]	@ movhi
 114:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y2 = src->y2;
 914              		.loc 2 114 5 is_stmt 1 view .LVU348
 114:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y2 = src->y2;
 915              		.loc 2 114 19 is_stmt 0 view .LVU349
 916 0158 BDF97430 		ldrsh	r3, [sp, #116]
 114:lvgl/src/draw/sw/../../misc/lv_area.h ****     dest->y2 = src->y2;
 917              		.loc 2 114 14 view .LVU350
 918 015c ADF85030 		strh	r3, [sp, #80]	@ movhi
 115:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 919              		.loc 2 115 5 is_stmt 1 view .LVU351
 115:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 920              		.loc 2 115 19 is_stmt 0 view .LVU352
 921 0160 BDF97630 		ldrsh	r3, [sp, #118]
 115:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 922              		.loc 2 115 14 view .LVU353
 923 0164 ADF85230 		strh	r3, [sp, #82]	@ movhi
 924              	.LVL105:
 115:lvgl/src/draw/sw/../../misc/lv_area.h **** }
 925              		.loc 2 115 14 view .LVU354
 926              	.LBE92:
 927              	.LBE91:
 142:lvgl/src/draw/sw/lv_draw_sw_img.c ****             if(transform) {
 928              		.loc 1 142 13 is_stmt 1 view .LVU355
 142:lvgl/src/draw/sw/lv_draw_sw_img.c ****             if(transform) {
 929              		.loc 1 142 50 is_stmt 0 view .LVU356
 930 0168 099B     		ldr	r3, [sp, #36]
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 41


 931 016a 1988     		ldrh	r1, [r3]
 142:lvgl/src/draw/sw/lv_draw_sw_img.c ****             if(transform) {
 932              		.loc 1 142 63 view .LVU357
 933 016c 5A88     		ldrh	r2, [r3, #2]
 142:lvgl/src/draw/sw/lv_draw_sw_img.c ****             if(transform) {
 934              		.loc 1 142 13 view .LVU358
 935 016e 5242     		rsbs	r2, r2, #0
 936 0170 4942     		rsbs	r1, r1, #0
 937 0172 12B2     		sxth	r2, r2
 938 0174 09B2     		sxth	r1, r1
 939 0176 13A8     		add	r0, sp, #76
 940 0178 FFF7FEFF 		bl	lv_area_move
 941              	.LVL106:
 143:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 942              		.loc 1 143 13 is_stmt 1 view .LVU359
 143:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 943              		.loc 1 143 15 is_stmt 0 view .LVU360
 944 017c 0B9B     		ldr	r3, [sp, #44]
 945 017e B3F1807F 		cmp	r3, #16777216
 946 0182 60D0     		beq	.L32
 144:lvgl/src/draw/sw/lv_draw_sw_img.c ****                                   draw_dsc, cf, rgb_buf, mask_buf);
 947              		.loc 1 144 17 is_stmt 1 view .LVU361
 948 0184 079B     		ldr	r3, [sp, #28]
 949 0186 0593     		str	r3, [sp, #20]
 950 0188 CDF81080 		str	r8, [sp, #16]
 951 018c 089B     		ldr	r3, [sp, #32]
 952 018e 0393     		str	r3, [sp, #12]
 953 0190 CDF80890 		str	r9, [sp, #8]
 954 0194 0F9B     		ldr	r3, [sp, #60]
 955 0196 0193     		str	r3, [sp, #4]
 956 0198 0E9A     		ldr	r2, [sp, #56]
 957 019a 0092     		str	r2, [sp]
 958 019c 0A9A     		ldr	r2, [sp, #40]
 959 019e 13A9     		add	r1, sp, #76
 960 01a0 0698     		ldr	r0, [sp, #24]
 961 01a2 FFF7FEFF 		bl	lv_draw_transform
 962              	.LVL107:
 963              	.L33:
 152:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 uint16_t premult_v[3];
 964              		.loc 1 152 13 view .LVU362
 152:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 uint16_t premult_v[3];
 965              		.loc 1 152 24 is_stmt 0 view .LVU363
 966 01a6 99F80C10 		ldrb	r1, [r9, #12]	@ zero_extendqisi2
 152:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 uint16_t premult_v[3];
 967              		.loc 1 152 15 view .LVU364
 968 01aa 0229     		cmp	r1, #2
 969 01ac 5BD8     		bhi	.L51
 970              	.L34:
 165:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_coord_t y;
 971              		.loc 1 165 13 is_stmt 1 view .LVU365
 165:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_coord_t y;
 972              		.loc 1 165 15 is_stmt 0 view .LVU366
 973 01ae 0C9B     		ldr	r3, [sp, #48]
 974 01b0 002B     		cmp	r3, #0
 975 01b2 40F0A280 		bne	.L52
 976              	.L37:
 185:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 42


 977              		.loc 1 185 13 is_stmt 1 view .LVU367
 978 01b6 15A9     		add	r1, sp, #84
 979 01b8 0698     		ldr	r0, [sp, #24]
 980 01ba FFF7FEFF 		bl	lv_draw_sw_blend
 981              	.LVL108:
 188:lvgl/src/draw/sw/lv_draw_sw_img.c ****             blend_area.y2 = blend_area.y1 + buf_h - 1;
 982              		.loc 1 188 13 view .LVU368
 188:lvgl/src/draw/sw/lv_draw_sw_img.c ****             blend_area.y2 = blend_area.y1 + buf_h - 1;
 983              		.loc 1 188 39 is_stmt 0 view .LVU369
 984 01be BDF87630 		ldrh	r3, [sp, #118]
 188:lvgl/src/draw/sw/lv_draw_sw_img.c ****             blend_area.y2 = blend_area.y1 + buf_h - 1;
 985              		.loc 1 188 43 view .LVU370
 986 01c2 0133     		adds	r3, r3, #1
 188:lvgl/src/draw/sw/lv_draw_sw_img.c ****             blend_area.y2 = blend_area.y1 + buf_h - 1;
 987              		.loc 1 188 27 view .LVU371
 988 01c4 ADF87230 		strh	r3, [sp, #114]	@ movhi
 189:lvgl/src/draw/sw/lv_draw_sw_img.c ****             if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 989              		.loc 1 189 13 is_stmt 1 view .LVU372
 189:lvgl/src/draw/sw/lv_draw_sw_img.c ****             if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 990              		.loc 1 189 43 is_stmt 0 view .LVU373
 991 01c8 0D9A     		ldr	r2, [sp, #52]
 992 01ca 12FA83F3 		uxtah	r3, r2, r3
 993 01ce 9BB2     		uxth	r3, r3
 189:lvgl/src/draw/sw/lv_draw_sw_img.c ****             if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 994              		.loc 1 189 51 view .LVU374
 995 01d0 013B     		subs	r3, r3, #1
 996 01d2 1BB2     		sxth	r3, r3
 189:lvgl/src/draw/sw/lv_draw_sw_img.c ****             if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 997              		.loc 1 189 27 view .LVU375
 998 01d4 ADF87630 		strh	r3, [sp, #118]	@ movhi
 190:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 999              		.loc 1 190 13 is_stmt 1 view .LVU376
 190:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 1000              		.loc 1 190 15 is_stmt 0 view .LVU377
 1001 01d8 5B45     		cmp	r3, fp
 1002 01da B2DD     		ble	.L31
 190:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 1003              		.loc 1 190 40 is_stmt 1 discriminator 1 view .LVU378
 190:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 1004              		.loc 1 190 54 is_stmt 0 discriminator 1 view .LVU379
 1005 01dc ADF876B0 		strh	fp, [sp, #118]	@ movhi
 1006 01e0 AFE7     		b	.L31
 1007              	.LVL109:
 1008              	.L47:
 190:lvgl/src/draw/sw/lv_draw_sw_img.c ****         }
 1009              		.loc 1 190 54 discriminator 1 view .LVU380
 1010              	.LBE90:
 1011              	.LBE81:
  65:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = (const lv_color_t *)src_buf;
 1012              		.loc 1 65 73 discriminator 2 view .LVU381
 1013 01e2 99F80C20 		ldrb	r2, [r9, #12]	@ zero_extendqisi2
  65:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = (const lv_color_t *)src_buf;
 1014              		.loc 1 65 62 discriminator 2 view .LVU382
 1015 01e6 002A     		cmp	r2, #0
 1016 01e8 7FF449AF 		bne	.L23
  66:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 1017              		.loc 1 66 9 is_stmt 1 view .LVU383
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 43


  66:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 1018              		.loc 1 66 27 is_stmt 0 view .LVU384
 1019 01ec 0A9B     		ldr	r3, [sp, #40]
 1020 01ee 1693     		str	r3, [sp, #88]
  68:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_draw_sw_blend(draw_ctx, &blend_dsc);
 1021              		.loc 1 68 9 is_stmt 1 view .LVU385
  68:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_draw_sw_blend(draw_ctx, &blend_dsc);
 1022              		.loc 1 68 30 is_stmt 0 view .LVU386
 1023 01f0 099B     		ldr	r3, [sp, #36]
 1024 01f2 1593     		str	r3, [sp, #84]
  69:lvgl/src/draw/sw/lv_draw_sw_img.c ****     }
 1025              		.loc 1 69 9 is_stmt 1 view .LVU387
 1026 01f4 15A9     		add	r1, sp, #84
 1027 01f6 0698     		ldr	r0, [sp, #24]
 1028 01f8 FFF7FEFF 		bl	lv_draw_sw_blend
 1029              	.LVL110:
 1030 01fc A4E0     		b	.L22
 1031              	.L48:
 1032              	.LBB102:
  72:lvgl/src/draw/sw/lv_draw_sw_img.c ****         if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 1033              		.loc 1 72 9 view .LVU388
  73:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 1034              		.loc 1 73 9 view .LVU389
  73:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 1035              		.loc 1 73 13 is_stmt 0 view .LVU390
 1036 01fe 069C     		ldr	r4, [sp, #24]
 1037              	.LVL111:
  73:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 1038              		.loc 1 73 13 view .LVU391
 1039 0200 A268     		ldr	r2, [r4, #8]
 1040 0202 099D     		ldr	r5, [sp, #36]
 1041 0204 2946     		mov	r1, r5
 1042 0206 13A8     		add	r0, sp, #76
 1043 0208 FFF7FEFF 		bl	_lv_area_intersect
 1044              	.LVL112:
  73:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 1045              		.loc 1 73 11 view .LVU392
 1046 020c 0028     		cmp	r0, #0
 1047 020e 00F09B80 		beq	.L22
  75:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_area = coords;
 1048              		.loc 1 75 9 is_stmt 1 view .LVU393
  75:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_area = coords;
 1049              		.loc 1 75 28 is_stmt 0 view .LVU394
 1050 0212 0A9B     		ldr	r3, [sp, #40]
 1051 0214 1893     		str	r3, [sp, #96]
  76:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = NULL;
 1052              		.loc 1 76 9 is_stmt 1 view .LVU395
  76:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.src_buf = NULL;
 1053              		.loc 1 76 29 is_stmt 0 view .LVU396
 1054 0216 1A95     		str	r5, [sp, #104]
  77:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.color = draw_dsc->recolor;
 1055              		.loc 1 77 9 is_stmt 1 view .LVU397
  77:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.color = draw_dsc->recolor;
 1056              		.loc 1 77 27 is_stmt 0 view .LVU398
 1057 0218 0023     		movs	r3, #0
 1058 021a 1693     		str	r3, [sp, #88]
  78:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 44


 1059              		.loc 1 78 9 is_stmt 1 view .LVU399
  78:lvgl/src/draw/sw/lv_draw_sw_img.c ****         blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 1060              		.loc 1 78 25 is_stmt 0 view .LVU400
 1061 021c D9F80830 		ldr	r3, [r9, #8]
 1062 0220 1793     		str	r3, [sp, #92]
  79:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 1063              		.loc 1 79 9 is_stmt 1 view .LVU401
  79:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 1064              		.loc 1 79 28 is_stmt 0 view .LVU402
 1065 0222 0223     		movs	r3, #2
 1066 0224 8DF86430 		strb	r3, [sp, #100]
  81:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_draw_sw_blend(draw_ctx, &blend_dsc);
 1067              		.loc 1 81 9 is_stmt 1 view .LVU403
  81:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_draw_sw_blend(draw_ctx, &blend_dsc);
 1068              		.loc 1 81 30 is_stmt 0 view .LVU404
 1069 0228 1595     		str	r5, [sp, #84]
  82:lvgl/src/draw/sw/lv_draw_sw_img.c ****     }
 1070              		.loc 1 82 9 is_stmt 1 view .LVU405
 1071 022a 15A9     		add	r1, sp, #84
 1072 022c 2046     		mov	r0, r4
 1073 022e FFF7FEFF 		bl	lv_draw_sw_blend
 1074              	.LVL113:
 1075              	.LBE102:
  71:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_area_t clipped_coords;
 1076              		.loc 1 71 68 is_stmt 0 view .LVU406
 1077 0232 89E0     		b	.L22
 1078              	.LVL114:
 1079              	.L49:
 1080              	.LBB103:
 133:lvgl/src/draw/sw/lv_draw_sw_img.c ****                                            draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
 1081              		.loc 1 133 90 discriminator 2 view .LVU407
 1082 0234 D9F80030 		ldr	r3, [r9]
 1083 0238 B3F1807F 		cmp	r3, #16777216
 1084 023c 01D0     		beq	.L45
 133:lvgl/src/draw/sw/lv_draw_sw_img.c ****                                            draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
 1085              		.loc 1 133 28 view .LVU408
 1086 023e 0223     		movs	r3, #2
 1087 0240 7DE7     		b	.L30
 1088              	.L45:
 1089 0242 0123     		movs	r3, #1
 1090 0244 7BE7     		b	.L30
 1091              	.LVL115:
 1092              	.L32:
 1093              	.LBB101:
 148:lvgl/src/draw/sw/lv_draw_sw_img.c ****             }
 1094              		.loc 1 148 17 is_stmt 1 view .LVU409
 1095 0246 079B     		ldr	r3, [sp, #28]
 1096 0248 0493     		str	r3, [sp, #16]
 1097 024a CDF80C80 		str	r8, [sp, #12]
 1098 024e 089B     		ldr	r3, [sp, #32]
 1099 0250 0293     		str	r3, [sp, #8]
 1100 0252 CDF80490 		str	r9, [sp, #4]
 1101 0256 0F9A     		ldr	r2, [sp, #60]
 1102 0258 0092     		str	r2, [sp]
 1103 025a 0E9B     		ldr	r3, [sp, #56]
 1104 025c 0A99     		ldr	r1, [sp, #40]
 1105 025e 13A8     		add	r0, sp, #76
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 45


 1106 0260 FFF7FEFF 		bl	convert_cb
 1107              	.LVL116:
 1108 0264 9FE7     		b	.L33
 1109              	.L51:
 1110              	.LBB93:
 153:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_opa_t recolor_opa = draw_dsc->recolor_opa;
 1111              		.loc 1 153 17 view .LVU410
 154:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_color_t recolor = draw_dsc->recolor;
 1112              		.loc 1 154 17 view .LVU411
 1113              	.LVL117:
 155:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_color_premult(recolor, recolor_opa, premult_v);
 1114              		.loc 1 155 17 view .LVU412
 155:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_color_premult(recolor, recolor_opa, premult_v);
 1115              		.loc 1 155 28 is_stmt 0 view .LVU413
 1116 0266 D9F80830 		ldr	r3, [r9, #8]
 1117              	.LVL118:
 156:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 recolor_opa = 255 - recolor_opa;
 1118              		.loc 1 156 17 is_stmt 1 view .LVU414
 1119              	.LBB94:
 1120              	.LBI94:
 474:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 1121              		.loc 3 474 42 view .LVU415
 1122              	.LBB95:
 477:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 1123              		.loc 3 477 5 view .LVU416
 477:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 1124              		.loc 3 477 24 is_stmt 0 view .LVU417
 1125 026a C3F30742 		ubfx	r2, r3, #16, #8
 477:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 1126              		.loc 3 477 42 view .LVU418
 1127 026e 01FB02F2 		mul	r2, r1, r2
 477:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 1128              		.loc 3 477 12 view .LVU419
 1129 0272 ADF84420 		strh	r2, [sp, #68]	@ movhi
 478:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 1130              		.loc 3 478 5 is_stmt 1 view .LVU420
 478:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 1131              		.loc 3 478 24 is_stmt 0 view .LVU421
 1132 0276 C3F30722 		ubfx	r2, r3, #8, #8
 478:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 1133              		.loc 3 478 42 view .LVU422
 1134 027a 01FB02F2 		mul	r2, r1, r2
 478:lvgl/src/draw/sw/../../misc/lv_color.h ****     out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 1135              		.loc 3 478 12 view .LVU423
 1136 027e ADF84620 		strh	r2, [sp, #70]	@ movhi
 479:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 1137              		.loc 3 479 5 is_stmt 1 view .LVU424
 479:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 1138              		.loc 3 479 24 is_stmt 0 view .LVU425
 1139 0282 DBB2     		uxtb	r3, r3
 1140              	.LVL119:
 479:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 1141              		.loc 3 479 42 view .LVU426
 1142 0284 01FB03F3 		mul	r3, r1, r3
 479:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 1143              		.loc 3 479 12 view .LVU427
 1144 0288 ADF84830 		strh	r3, [sp, #72]	@ movhi
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 46


 1145              	.LVL120:
 479:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 1146              		.loc 3 479 12 view .LVU428
 1147              	.LBE95:
 1148              	.LBE94:
 157:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 uint32_t i;
 1149              		.loc 1 157 17 is_stmt 1 view .LVU429
 157:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 uint32_t i;
 1150              		.loc 1 157 29 is_stmt 0 view .LVU430
 1151 028c C943     		mvns	r1, r1
 1152              	.LVL121:
 157:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 uint32_t i;
 1153              		.loc 1 157 29 view .LVU431
 1154 028e C9B2     		uxtb	r1, r1
 1155              	.LVL122:
 158:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 for(i = 0; i < buf_size; i++) {
 1156              		.loc 1 158 17 is_stmt 1 view .LVU432
 159:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 1157              		.loc 1 159 17 view .LVU433
 159:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 1158              		.loc 1 159 23 is_stmt 0 view .LVU434
 1159 0290 0022     		movs	r2, #0
 159:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 1160              		.loc 1 159 17 view .LVU435
 1161 0292 2FE0     		b	.L35
 1162              	.LVL123:
 1163              	.L36:
 160:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 }
 1164              		.loc 1 160 21 is_stmt 1 discriminator 3 view .LVU436
 160:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 }
 1165              		.loc 1 160 21 is_stmt 0 discriminator 3 view .LVU437
 1166 0294 58F82240 		ldr	r4, [r8, r2, lsl #2]
 1167              	.LVL124:
 1168              	.LBB96:
 1169              	.LBI96:
 499:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 1170              		.loc 3 499 48 is_stmt 1 discriminator 3 view .LVU438
 1171              	.LBB97:
 501:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH != 1
 1172              		.loc 3 501 5 discriminator 3 view .LVU439
 504:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OF
 1173              		.loc 3 504 5 discriminator 3 view .LVU440
 1174 0298 BDF84430 		ldrh	r3, [sp, #68]
 1175              	.LVL125:
 504:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OF
 1176              		.loc 3 504 5 is_stmt 0 discriminator 3 view .LVU441
 1177 029c C4F30740 		ubfx	r0, r4, #16, #8
 1178 02a0 01FB0033 		mla	r3, r1, r0, r3
 1179 02a4 03EB0320 		add	r0, r3, r3, lsl #8
 1180 02a8 03EBC013 		add	r3, r3, r0, lsl #7
 1181 02ac C3F3C753 		ubfx	r3, r3, #23, #8
 1182 02b0 63F31745 		bfi	r5, r3, #16, #8
 505:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OF
 1183              		.loc 3 505 5 is_stmt 1 discriminator 3 view .LVU442
 1184 02b4 BDF84600 		ldrh	r0, [sp, #70]
 1185 02b8 C4F30723 		ubfx	r3, r4, #8, #8
 1186 02bc 03FB0100 		mla	r0, r3, r1, r0
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 47


 1187 02c0 00EB0023 		add	r3, r0, r0, lsl #8
 1188 02c4 00EBC310 		add	r0, r0, r3, lsl #7
 1189 02c8 C0F3C750 		ubfx	r0, r0, #23, #8
 1190 02cc 60F30F25 		bfi	r5, r0, #8, #8
 506:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 1191              		.loc 3 506 5 discriminator 3 view .LVU443
 1192 02d0 BDF84830 		ldrh	r3, [sp, #72]
 1193 02d4 E4B2     		uxtb	r4, r4
 1194              	.LVL126:
 506:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 1195              		.loc 3 506 5 is_stmt 0 discriminator 3 view .LVU444
 1196 02d6 04FB0133 		mla	r3, r4, r1, r3
 1197 02da 03EB0320 		add	r0, r3, r3, lsl #8
 1198 02de 03EBC013 		add	r3, r3, r0, lsl #7
 1199 02e2 C3F3C753 		ubfx	r3, r3, #23, #8
 1200 02e6 63F30705 		bfi	r5, r3, #0, #8
 507:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 1201              		.loc 3 507 5 is_stmt 1 discriminator 3 view .LVU445
 1202 02ea 45F07F45 		orr	r5, r5, #-16777216
 1203              	.LVL127:
 518:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 1204              		.loc 3 518 5 discriminator 3 view .LVU446
 518:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 1205              		.loc 3 518 5 is_stmt 0 discriminator 3 view .LVU447
 1206              	.LBE97:
 1207              	.LBE96:
 160:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 }
 1208              		.loc 1 160 34 discriminator 3 view .LVU448
 1209 02ee 48F82250 		str	r5, [r8, r2, lsl #2]
 159:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 1210              		.loc 1 159 42 is_stmt 1 discriminator 3 view .LVU449
 159:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 1211              		.loc 1 159 43 is_stmt 0 discriminator 3 view .LVU450
 1212 02f2 0132     		adds	r2, r2, #1
 1213              	.LVL128:
 1214              	.L35:
 159:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 1215              		.loc 1 159 28 is_stmt 1 discriminator 1 view .LVU451
 159:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 1216              		.loc 1 159 17 is_stmt 0 discriminator 1 view .LVU452
 1217 02f4 5245     		cmp	r2, r10
 1218 02f6 CDD3     		bcc	.L36
 1219 02f8 59E7     		b	.L34
 1220              	.LVL129:
 1221              	.L52:
 159:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 1222              		.loc 1 159 17 discriminator 1 view .LVU453
 1223              	.LBE93:
 1224              	.LBB98:
 166:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 lv_opa_t * mask_buf_tmp = mask_buf;
 1225              		.loc 1 166 17 is_stmt 1 view .LVU454
 167:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 for(y = blend_area.y1; y <= blend_area.y2; y++) {
 1226              		.loc 1 167 17 view .LVU455
 168:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     lv_draw_mask_res_t mask_res_line;
 1227              		.loc 1 168 17 view .LVU456
 168:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     lv_draw_mask_res_t mask_res_line;
 1228              		.loc 1 168 23 is_stmt 0 view .LVU457
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 48


 1229 02fa BDF97240 		ldrsh	r4, [sp, #114]
 1230              	.LVL130:
 167:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 for(y = blend_area.y1; y <= blend_area.y2; y++) {
 1231              		.loc 1 167 28 view .LVU458
 1232 02fe 079E     		ldr	r6, [sp, #28]
 168:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     lv_draw_mask_res_t mask_res_line;
 1233              		.loc 1 168 17 view .LVU459
 1234 0300 09E0     		b	.L38
 1235              	.LVL131:
 1236              	.L53:
 1237              	.LBB99:
 173:lvgl/src/draw/sw/lv_draw_sw_img.c ****                         blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 1238              		.loc 1 173 25 is_stmt 1 view .LVU460
 1239 0302 3946     		mov	r1, r7
 1240 0304 3046     		mov	r0, r6
 1241              	.LVL132:
 173:lvgl/src/draw/sw/lv_draw_sw_img.c ****                         blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 1242              		.loc 1 173 25 is_stmt 0 view .LVU461
 1243 0306 FFF7FEFF 		bl	lv_memset_00
 1244              	.LVL133:
 174:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     }
 1245              		.loc 1 174 25 is_stmt 1 view .LVU462
 174:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     }
 1246              		.loc 1 174 44 is_stmt 0 view .LVU463
 1247 030a 0223     		movs	r3, #2
 1248 030c 8DF86430 		strb	r3, [sp, #100]
 1249              	.L40:
 179:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 }
 1250              		.loc 1 179 21 is_stmt 1 discriminator 2 view .LVU464
 179:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 }
 1251              		.loc 1 179 34 is_stmt 0 discriminator 2 view .LVU465
 1252 0310 3E44     		add	r6, r6, r7
 1253              	.LVL134:
 179:lvgl/src/draw/sw/lv_draw_sw_img.c ****                 }
 1254              		.loc 1 179 34 discriminator 2 view .LVU466
 1255              	.LBE99:
 168:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     lv_draw_mask_res_t mask_res_line;
 1256              		.loc 1 168 60 is_stmt 1 discriminator 2 view .LVU467
 168:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     lv_draw_mask_res_t mask_res_line;
 1257              		.loc 1 168 61 is_stmt 0 discriminator 2 view .LVU468
 1258 0312 0134     		adds	r4, r4, #1
 1259              	.LVL135:
 168:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     lv_draw_mask_res_t mask_res_line;
 1260              		.loc 1 168 61 discriminator 2 view .LVU469
 1261 0314 24B2     		sxth	r4, r4
 1262              	.LVL136:
 1263              	.L38:
 168:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     lv_draw_mask_res_t mask_res_line;
 1264              		.loc 1 168 40 is_stmt 1 discriminator 1 view .LVU470
 168:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     lv_draw_mask_res_t mask_res_line;
 1265              		.loc 1 168 55 is_stmt 0 discriminator 1 view .LVU471
 1266 0316 BDF97630 		ldrsh	r3, [sp, #118]
 168:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     lv_draw_mask_res_t mask_res_line;
 1267              		.loc 1 168 17 discriminator 1 view .LVU472
 1268 031a A342     		cmp	r3, r4
 1269 031c FFF64BAF 		blt	.L37
 1270              	.LBB100:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 49


 169:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 1271              		.loc 1 169 21 is_stmt 1 view .LVU473
 170:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 1272              		.loc 1 170 21 view .LVU474
 170:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 1273              		.loc 1 170 37 is_stmt 0 view .LVU475
 1274 0320 3B46     		mov	r3, r7
 1275 0322 2246     		mov	r2, r4
 1276 0324 BDF97010 		ldrsh	r1, [sp, #112]
 1277 0328 3046     		mov	r0, r6
 1278 032a FFF7FEFF 		bl	lv_draw_mask_apply
 1279              	.LVL137:
 172:lvgl/src/draw/sw/lv_draw_sw_img.c ****                         lv_memset_00(mask_buf_tmp, blend_w);
 1280              		.loc 1 172 21 is_stmt 1 view .LVU476
 172:lvgl/src/draw/sw/lv_draw_sw_img.c ****                         lv_memset_00(mask_buf_tmp, blend_w);
 1281              		.loc 1 172 23 is_stmt 0 view .LVU477
 1282 032e 0028     		cmp	r0, #0
 1283 0330 E7D0     		beq	.L53
 176:lvgl/src/draw/sw/lv_draw_sw_img.c ****                         blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 1284              		.loc 1 176 26 is_stmt 1 view .LVU478
 176:lvgl/src/draw/sw/lv_draw_sw_img.c ****                         blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 1285              		.loc 1 176 28 is_stmt 0 view .LVU479
 1286 0332 0228     		cmp	r0, #2
 1287 0334 ECD1     		bne	.L40
 177:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     }
 1288              		.loc 1 177 25 is_stmt 1 view .LVU480
 177:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     }
 1289              		.loc 1 177 44 is_stmt 0 view .LVU481
 1290 0336 8DF86400 		strb	r0, [sp, #100]
 1291 033a E9E7     		b	.L40
 1292              	.LVL138:
 1293              	.L50:
 177:lvgl/src/draw/sw/lv_draw_sw_img.c ****                     }
 1294              		.loc 1 177 44 view .LVU482
 1295              	.LBE100:
 1296              	.LBE98:
 1297              	.LBE101:
 193:lvgl/src/draw/sw/lv_draw_sw_img.c ****         lv_mem_buf_release(rgb_buf);
 1298              		.loc 1 193 9 is_stmt 1 view .LVU483
 1299 033c 0798     		ldr	r0, [sp, #28]
 1300 033e FFF7FEFF 		bl	lv_mem_buf_release
 1301              	.LVL139:
 194:lvgl/src/draw/sw/lv_draw_sw_img.c ****     }
 1302              		.loc 1 194 9 view .LVU484
 1303 0342 4046     		mov	r0, r8
 1304 0344 FFF7FEFF 		bl	lv_mem_buf_release
 1305              	.LVL140:
 1306              	.L22:
 194:lvgl/src/draw/sw/lv_draw_sw_img.c ****     }
 1307              		.loc 1 194 9 is_stmt 0 view .LVU485
 1308              	.LBE103:
 196:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 1309              		.loc 1 196 1 view .LVU486
 1310 0348 21B0     		add	sp, sp, #132
 1311              		.cfi_def_cfa_offset 36
 1312              		@ sp needed
 1313 034a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 50


 196:lvgl/src/draw/sw/lv_draw_sw_img.c **** 
 1314              		.loc 1 196 1 view .LVU487
 1315              		.cfi_endproc
 1316              	.LFE161:
 1318              		.text
 1319              	.Letext0:
 1320              		.file 4 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 1321              		.file 5 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 1322              		.file 6 "lvgl/src/draw/sw/../../misc/lv_types.h"
 1323              		.file 7 "c:\\tools\\gcc-arm-none-eabi\\lib\\gcc\\arm-none-eabi\\10.3.1\\include\\stddef.h"
 1324              		.file 8 "lvgl/src/draw/sw/../../misc/../font/lv_font.h"
 1325              		.file 9 "lvgl/src/draw/sw/../../misc/lv_txt.h"
 1326              		.file 10 "lvgl/src/draw/sw/../../misc/lv_bidi.h"
 1327              		.file 11 "lvgl/src/draw/sw/../../misc/lv_style.h"
 1328              		.file 12 "lvgl/src/draw/sw/../lv_draw_mask.h"
 1329              		.file 13 "lvgl/src/draw/sw/lv_draw_sw_blend.h"
 1330              		.file 14 "lvgl/src/draw/sw/../lv_img_buf.h"
 1331              		.file 15 "lvgl/src/draw/sw/../lv_draw_rect.h"
 1332              		.file 16 "lvgl/src/draw/sw/../lv_draw_label.h"
 1333              		.file 17 "lvgl/src/draw/sw/../lv_draw_img.h"
 1334              		.file 18 "lvgl/src/draw/sw/../lv_draw_line.h"
 1335              		.file 19 "lvgl/src/draw/sw/../lv_draw_arc.h"
 1336              		.file 20 "lvgl/src/draw/sw/../lv_draw_layer.h"
 1337              		.file 21 "lvgl/src/draw/sw/../lv_draw.h"
 1338              		.file 22 "lvgl/src/draw/sw/../../misc/lv_mem.h"
 1339              		.file 23 "lvgl/src/draw/sw/../lv_draw_transform.h"
 1340              		.file 24 "lvgl/src/draw/sw/../../core/lv_refr.h"
 1341              		.file 25 "lvgl/src/draw/sw/../../hal/lv_hal_disp.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s 			page 51


DEFINED SYMBOLS
                            *ABS*:00000000 lv_draw_sw_img.c
C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s:19     .text.convert_cb:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s:24     .text.convert_cb:00000000 convert_cb
C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s:558    .text.lv_draw_sw_img_decoded:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccfdR9WX.s:564    .text.lv_draw_sw_img_decoded:00000000 lv_draw_sw_img_decoded

UNDEFINED SYMBOLS
lv_area_get_size
lv_memset_ff
lv_memcpy
lv_draw_mask_is_any
lv_memset_00
_lv_refr_get_disp_refreshing
lv_disp_get_hor_res
lv_mem_buf_get
lv_area_move
lv_draw_transform
lv_draw_sw_blend
_lv_area_intersect
lv_draw_mask_apply
lv_mem_buf_release
