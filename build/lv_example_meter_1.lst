ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_example_meter_1.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.set_value,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	set_value:
  25              	.LVL0:
  26              	.LFB204:
  27              		.file 1 "lvgl/examples/widgets/meter/lv_example_meter_1.c"
   1:lvgl/examples/widgets/meter/lv_example_meter_1.c **** #include "../../lv_examples.h"
   2:lvgl/examples/widgets/meter/lv_example_meter_1.c **** #if LV_USE_METER && LV_BUILD_EXAMPLES
   3:lvgl/examples/widgets/meter/lv_example_meter_1.c **** 
   4:lvgl/examples/widgets/meter/lv_example_meter_1.c **** static lv_obj_t * meter;
   5:lvgl/examples/widgets/meter/lv_example_meter_1.c **** 
   6:lvgl/examples/widgets/meter/lv_example_meter_1.c **** static void set_value(void * indic, int32_t v)
   7:lvgl/examples/widgets/meter/lv_example_meter_1.c **** {
  28              		.loc 1 7 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 7 1 is_stmt 0 view .LVU1
  33 0000 08B5     		push	{r3, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  37 0002 0A46     		mov	r2, r1
   8:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_meter_set_indicator_value(meter, indic, v);
  38              		.loc 1 8 5 is_stmt 1 view .LVU2
  39 0004 0146     		mov	r1, r0
  40              	.LVL1:
  41              		.loc 1 8 5 is_stmt 0 view .LVU3
  42 0006 024B     		ldr	r3, .L3
  43 0008 1868     		ldr	r0, [r3]
  44              	.LVL2:
  45              		.loc 1 8 5 view .LVU4
  46 000a FFF7FEFF 		bl	lv_meter_set_indicator_value
  47              	.LVL3:
   9:lvgl/examples/widgets/meter/lv_example_meter_1.c **** }
  48              		.loc 1 9 1 view .LVU5
  49 000e 08BD     		pop	{r3, pc}
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 2


  50              	.L4:
  51              		.align	2
  52              	.L3:
  53 0010 00000000 		.word	.LANCHOR0
  54              		.cfi_endproc
  55              	.LFE204:
  57              		.section	.text.lv_example_meter_1,"ax",%progbits
  58              		.align	1
  59              		.global	lv_example_meter_1
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  64              	lv_example_meter_1:
  65              	.LFB205:
  10:lvgl/examples/widgets/meter/lv_example_meter_1.c **** 
  11:lvgl/examples/widgets/meter/lv_example_meter_1.c **** /**
  12:lvgl/examples/widgets/meter/lv_example_meter_1.c ****  * A simple meter
  13:lvgl/examples/widgets/meter/lv_example_meter_1.c ****  */
  14:lvgl/examples/widgets/meter/lv_example_meter_1.c **** void lv_example_meter_1(void)
  15:lvgl/examples/widgets/meter/lv_example_meter_1.c **** {
  66              		.loc 1 15 1 is_stmt 1 view -0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 72
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  71              		.cfi_def_cfa_offset 24
  72              		.cfi_offset 4, -24
  73              		.cfi_offset 5, -20
  74              		.cfi_offset 6, -16
  75              		.cfi_offset 7, -12
  76              		.cfi_offset 8, -8
  77              		.cfi_offset 14, -4
  78 0004 96B0     		sub	sp, sp, #88
  79              		.cfi_def_cfa_offset 112
  16:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     meter = lv_meter_create(lv_scr_act());
  80              		.loc 1 16 5 view .LVU7
  81              	.LBB49:
  82              	.LBI49:
  83              		.file 2 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_disp.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @file lv_disp.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifndef LV_DISP_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #define LV_DISP_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "../hal/lv_hal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_obj.h"
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_theme.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 3


  19:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      DEFINES
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      TYPEDEFS
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** typedef enum {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_NONE,
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_LEFT,
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_RIGHT,
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_TOP,
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_BOTTOM,
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_LEFT,
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_RIGHT,
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_TOP,
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_BOTTOM,
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_IN,
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_ON = LV_SCR_LOAD_ANIM_FADE_IN, /*For backward compatibility*/
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_OUT,
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_LEFT,
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_RIGHT,
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_TOP,
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_BOTTOM,
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** } lv_scr_load_anim_t;
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * GLOBAL PROTOTYPES
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the active screen
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which active screen should be get. (NULL to use the default
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen object (loaded by 'lv_scr_load()')
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp);
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the previous screen. Only used during screen transitions.
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which previous screen should be get. (NULL to use the default
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the previous screen object or NULL if not used now
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp);
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Make a screen active
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to a screen
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_load_scr(lv_obj_t * scr);
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the top layer. (Same on every screen and it is above the normal screen layer)
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 4


  76:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the top layer object (transparent screen sized lv_obj)
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp);
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the sys. layer. (Same on every screen and it is above the normal screen and the top
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * layer)
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default sc
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the sys layer object (transparent screen sized lv_obj)
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp);
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the theme of a display
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_theme(lv_disp_t * disp, lv_theme_t * th);
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the theme of a display
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return the display's theme (can be NULL)
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_theme_t * lv_disp_get_theme(lv_disp_t * disp);
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background color of a display
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param color color of the background
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_color(lv_disp_t * disp, lv_color_t color);
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background image of a display
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param img_src path to file or pointer to an `lv_img_dsc_t` variable
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_image(lv_disp_t * disp, const void  * img_src);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set opacity of the background
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param opa opacity (0..255)
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_opa(lv_disp_t * disp, lv_opa_t opa);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Switch screen with animation
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to the new screen to load
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param anim_type type of the animation from `lv_scr_load_anim_t`, e.g. `LV_SCR_LOAD_ANIM_MOVE_LE
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param time time of the animation
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param delay delay before the transition
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param auto_del true: automatically delete the old screen
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_scr_load_anim(lv_obj_t * scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, 
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 5


 133:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get elapsed time since last user activity on a display (e.g. click)
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to get the overall smallest inactivity)
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return elapsed ticks (milliseconds) since the last activity
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** uint32_t lv_disp_get_inactive_time(const lv_disp_t * disp);
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Manually trigger an activity on a display
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_trig_activity(lv_disp_t * disp);
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Clean any CPU cache that is related to the display.
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_clean_dcache(lv_disp_t * disp);
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Temporarily enable and disable the invalidation of the display.
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param en true: enable invalidation; false: invalidation
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_enable_invalidation(lv_disp_t * disp, bool en);
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get display invalidation is enabled.
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return return true if invalidation is enabled
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** bool lv_disp_is_invalidation_enabled(lv_disp_t * disp);
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get a pointer to the screen refresher timer to
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * modify its parameters with `lv_timer_...` functions.
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the display refresher timer. (NULL on error)
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_timer_t * _lv_disp_get_refr_timer(lv_disp_t * disp);
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*------------------------------------------------
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * To improve backward compatibility
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Recommended only if you have one display
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *------------------------------------------------*/
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the active screen of the default display
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** static inline lv_obj_t * lv_scr_act(void)
  84              		.loc 2 182 26 view .LVU8
  85              	.LBB50:
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     return lv_disp_get_scr_act(lv_disp_get_default());
  86              		.loc 2 184 5 view .LVU9
  87              		.loc 2 184 12 is_stmt 0 view .LVU10
  88 0006 FFF7FEFF 		bl	lv_disp_get_default
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 6


  89              	.LVL4:
  90 000a FFF7FEFF 		bl	lv_disp_get_scr_act
  91              	.LVL5:
  92              	.LBE50:
  93              	.LBE49:
  94              		.loc 1 16 13 view .LVU11
  95 000e FFF7FEFF 		bl	lv_meter_create
  96              	.LVL6:
  97              		.loc 1 16 11 view .LVU12
  98 0012 5F4C     		ldr	r4, .L7
  99 0014 2060     		str	r0, [r4]
  17:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_obj_center(meter);
 100              		.loc 1 17 5 is_stmt 1 view .LVU13
 101              	.LVL7:
 102              	.LBB51:
 103              	.LBI51:
 104              		.file 3 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\core\\lv_obj_pos.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @file lv_obj_pos.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #ifndef LV_OBJ_POS_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #define LV_OBJ_POS_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** #include "../misc/lv_area.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /*********************
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *      DEFINES
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *********************/
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**********************
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *      TYPEDEFS
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  **********************/
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** struct _lv_obj_t;
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** typedef void (*lv_layout_update_cb_t)(struct _lv_obj_t *, void * user_data);
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** typedef struct {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****     lv_layout_update_cb_t cb;
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****     void * user_data;
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** } lv_layout_dsc_t;
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**********************
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * GLOBAL PROTOTYPES
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  **********************/
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the position of an object relative to the set alignment.
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param x         new x coordinate
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 7


  41:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param y         new y coordinate
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_pos(struct _lv_obj_t * obj, lv_coord_t x, lv_coord_t y);
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the x coordinate of an object
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param x         new x coordinate
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_x(struct _lv_obj_t * obj, lv_coord_t x);
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the y coordinate of an object
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param y         new y coordinate
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_y(struct _lv_obj_t * obj, lv_coord_t y);
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the size of an object.
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param w         the new width
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param h         the new height
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            possible values are:
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  LV_SIZE_PCT(x)     to set size in percentage of the parent's content area size 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_size(struct _lv_obj_t * obj, lv_coord_t w, lv_coord_t h);
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Recalculate the size of the object
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @return          true: the size has been changed
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** bool lv_obj_refr_size(struct _lv_obj_t * obj);
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the width of an object
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param w         the new width
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            possible values are:
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 8


  98:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  lv_pct(x)           to set size in percentage of the parent's content area size
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_width(struct _lv_obj_t * obj, lv_coord_t w);
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the height of an object
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param h         the new height
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            possible values are:
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                  lv_pct(x)           to set size in percentage of the parent's content area size
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_height(struct _lv_obj_t * obj, lv_coord_t h);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the width reduced by the left and right padding and the border width.
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param w         the width without paddings in pixels
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_content_width(struct _lv_obj_t * obj, lv_coord_t w);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set the height reduced by the top and bottom padding and the border width.
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param h         the height without paddings in pixels
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_content_height(struct _lv_obj_t * obj, lv_coord_t h);
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Set a layout for an object
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param layout    pointer to a layout descriptor to set
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_layout(struct _lv_obj_t * obj, uint32_t layout);
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Test whether the and object is positioned by a layout or not
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to test
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @return true:    positioned by a layout; false: not positioned by a layout
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** bool lv_obj_is_layout_positioned(const struct _lv_obj_t * obj);
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Mark the object for layout update.
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj      pointer to an object whose children needs to be updated
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_mark_layout_as_dirty(struct _lv_obj_t * obj);
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Update the layout of an object.
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj      pointer to an object whose children needs to be updated
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_update_layout(const struct _lv_obj_t * obj);
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 9


 155:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Register a new layout
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param cb        the layout update callback
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param user_data custom data that will be passed to `cb`
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @return          the ID of the new layout
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data);
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Change the alignment of an object.
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum) `LV_ALIGN_OUT_...` can't be used.
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_set_align(struct _lv_obj_t * obj, lv_align_t align);
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Change the alignment of an object and set new coordinates.
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Equivalent to:
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * lv_obj_set_align(obj, align);
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * lv_obj_set_pos(obj, x_ofs, y_ofs);
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum) `LV_ALIGN_OUT_...` can't be used.
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param x_ofs     x coordinate offset after alignment
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param y_ofs     y coordinate offset after alignment
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_align(struct _lv_obj_t * obj, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs);
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Align an object to an other object.
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param base      pointer to an other object (if NULL `obj`s parent is used). 'obj' will be align
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum)
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param x_ofs     x coordinate offset after alignment
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param y_ofs     y coordinate offset after alignment
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            if the position or size of `base` changes `obj` needs to be aligned manually ag
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** void lv_obj_align_to(struct _lv_obj_t * obj, const struct _lv_obj_t * base, lv_align_t align, lv_co
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****                      lv_coord_t y_ofs);
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** 
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** /**
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * Align an object to the center on its parent.
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  * @note            if the parent size changes `obj` needs to be aligned manually again
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****  */
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** static inline void lv_obj_center(struct _lv_obj_t * obj)
 105              		.loc 3 199 20 view .LVU14
 106              	.LBB52:
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h **** {
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_obj_pos.h ****     lv_obj_align(obj, LV_ALIGN_CENTER, 0, 0);
 107              		.loc 3 201 5 view .LVU15
 108 0016 0023     		movs	r3, #0
 109 0018 1A46     		mov	r2, r3
 110 001a 0921     		movs	r1, #9
 111 001c FFF7FEFF 		bl	lv_obj_align
 112              	.LVL8:
 113              		.loc 3 201 5 is_stmt 0 view .LVU16
 114              	.LBE52:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 10


 115              	.LBE51:
  18:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_obj_set_size(meter, 200, 200);
 116              		.loc 1 18 5 is_stmt 1 view .LVU17
 117 0020 C822     		movs	r2, #200
 118 0022 1146     		mov	r1, r2
 119 0024 2068     		ldr	r0, [r4]
 120 0026 FFF7FEFF 		bl	lv_obj_set_size
 121              	.LVL9:
  19:lvgl/examples/widgets/meter/lv_example_meter_1.c **** 
  20:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     /*Add a scale first*/
  21:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_meter_scale_t * scale = lv_meter_add_scale(meter);
 122              		.loc 1 21 5 view .LVU18
 123              		.loc 1 21 32 is_stmt 0 view .LVU19
 124 002a 2068     		ldr	r0, [r4]
 125 002c FFF7FEFF 		bl	lv_meter_add_scale
 126              	.LVL10:
 127 0030 0646     		mov	r6, r0
 128              	.LVL11:
  22:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_meter_set_scale_ticks(meter, scale, 41, 2, 10, lv_palette_main(LV_PALETTE_GREY));
 129              		.loc 1 22 5 is_stmt 1 view .LVU20
 130 0032 2768     		ldr	r7, [r4]
 131 0034 1220     		movs	r0, #18
 132              	.LVL12:
 133              		.loc 1 22 5 is_stmt 0 view .LVU21
 134 0036 FFF7FEFF 		bl	lv_palette_main
 135              	.LVL13:
 136 003a 0190     		str	r0, [sp, #4]
 137 003c 0A25     		movs	r5, #10
 138 003e 0095     		str	r5, [sp]
 139 0040 0223     		movs	r3, #2
 140 0042 2922     		movs	r2, #41
 141 0044 3146     		mov	r1, r6
 142 0046 3846     		mov	r0, r7
 143 0048 FFF7FEFF 		bl	lv_meter_set_scale_ticks
 144              	.LVL14:
  23:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_meter_set_scale_major_ticks(meter, scale, 8, 4, 15, lv_color_black(), 10);
 145              		.loc 1 23 5 is_stmt 1 view .LVU22
 146              	.LBB53:
 147              	.LBI53:
 148              		.file 4 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_color.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @file lv_color.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #ifndef LV_COLOR_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include "../lv_conf_internal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include "lv_assert.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 11


  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include "lv_math.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include "lv_types.h"
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*Error checking*/
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 24
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #error "LV_COLOR_DEPTH 24 is deprecated. Use LV_COLOR_DEPTH 32 instead (lv_conf.h)"
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH != 16 && LV_COLOR_16_SWAP != 0
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #error "LV_COLOR_16_SWAP requires LV_COLOR_DEPTH == 16. Set it in lv_conf.h"
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include <stdint.h>
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*********************
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *      DEFINES
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *********************/
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_DEPTH);
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_16_SWAP);
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Opacity percentages.
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** enum {
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_TRANSP = 0,
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_0      = 0,
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_10     = 25,
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_20     = 51,
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_30     = 76,
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_40     = 102,
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_50     = 127,
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_60     = 153,
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_70     = 178,
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_80     = 204,
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_90     = 229,
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_100    = 255,
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_COVER  = 255,
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** };
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_OPA_MIN 2    /*Opacities below this will be transparent*/
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_OPA_MAX 253  /*Opacities above this will fully cover*/
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SIZE 8
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SIZE 8
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SIZE 16
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SIZE 32
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #error "Invalid LV_COLOR_DEPTH in lv_conf.h! Set it to 1, 8, 16 or 32!"
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if defined(__cplusplus) && !defined(_LV_COLOR_HAS_MODERN_CPP)
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** * MSVC compiler's definition of the __cplusplus indicating 199711L regardless to C++ standard versi
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 12


  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** * see https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-cplusplus
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** * so we use _MSC_VER macro instead of __cplusplus
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** */
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #ifdef _MSC_VER
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if _MSC_VER >= 1900 /*Visual Studio 2015*/
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if __cplusplus >= 201103L
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif /*__cplusplus*/
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #ifndef _LV_COLOR_HAS_MODERN_CPP
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 0
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if _LV_COLOR_HAS_MODERN_CPP
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*Fix msvc compiler error C4576 inside C++ code*/
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER lv_color_t
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER (lv_color_t)
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*---------------------------------------
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Macros for all existing color depths
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * to set/get values of the color channels
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *------------------------------------------*/
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_R1(c, v) (c).ch.red = (uint8_t)((v) & 0x1)
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G1(c, v) (c).ch.green = (uint8_t)((v) & 0x1)
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_B1(c, v) (c).ch.blue = (uint8_t)((v) & 0x1)
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_A1(c, v) do {} while(0)
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_R1(c) (c).ch.red
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G1(c) (c).ch.green
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_B1(c) (c).ch.blue
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_A1(c) 0xFF
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER1 {0x00}
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE1(r8, g8, b8)  {(uint8_t)((b8 >> 7) | (g8 >> 7) | (r8 >> 7))}
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_R8(c, v) (c).ch.red = (uint8_t)((v) & 0x7U)
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G8(c, v) (c).ch.green = (uint8_t)((v) & 0x7U)
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_B8(c, v) (c).ch.blue = (uint8_t)((v) & 0x3U)
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_A8(c, v) do {} while(0)
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_R8(c) (c).ch.red
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G8(c) (c).ch.green
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_B8(c) (c).ch.blue
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_A8(c) 0xFF
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER8 {{0x00, 0x00, 0x00}}
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE8(r8, g8, b8) {{(uint8_t)((b8 >> 6) & 0x3U), (uint8_t)((g8 >> 5) & 0x7U), (ui
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_R16(c, v) (c).ch.red = (uint8_t)((v) & 0x1FU)
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 13


 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G16(c, v) (c).ch.green = (uint8_t)((v) & 0x3FU)
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G16(c, v) {(c).ch.green_h = (uint8_t)(((v) >> 3) & 0x7); (c).ch.green_l = (ui
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_B16(c, v) (c).ch.blue = (uint8_t)((v) & 0x1FU)
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_A16(c, v) do {} while(0)
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_R16(c) (c).ch.red
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G16(c) (c).ch.green
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G16(c) (((c).ch.green_h << 3) + (c).ch.green_l)
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_B16(c) (c).ch.blue
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_A16(c) 0xFF
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16  {{0x00, 0x00, 0x00}}
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((b8 >> 3) & 0x1FU), (uint8_t)((g8 >> 2) & 0x3FU), 
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16 {{0x00, 0x00, 0x00, 0x00}}
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((g8 >> 5) & 0x7U), (uint8_t)((r8 >> 3) & 0x1FU), (
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_R32(c, v) (c).ch.red = (uint8_t)((v) & 0xFF)
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G32(c, v) (c).ch.green = (uint8_t)((v) & 0xFF)
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_B32(c, v) (c).ch.blue = (uint8_t)((v) & 0xFF)
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_A32(c, v) (c).ch.alpha = (uint8_t)((v) & 0xFF)
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_R32(c) (c).ch.red
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G32(c) (c).ch.green
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_B32(c) (c).ch.blue
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_A32(c) (c).ch.alpha
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER32  {{0x00, 0x00, 0x00, 0x00}}
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE32(r8, g8, b8) {{b8, g8, r8, 0xff}} /*Fix 0xff alpha*/
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*---------------------------------------
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Macros for the current color depth
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * to set/get values of the color channels
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *------------------------------------------*/
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SET_R(c, v) LV_CONCAT(LV_COLOR_SET_R, LV_COLOR_DEPTH)(c, v)
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SET_G(c, v) LV_CONCAT(LV_COLOR_SET_G, LV_COLOR_DEPTH)(c, v)
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SET_B(c, v) LV_CONCAT(LV_COLOR_SET_B, LV_COLOR_DEPTH)(c, v)
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SET_A(c, v) LV_CONCAT(LV_COLOR_SET_A, LV_COLOR_DEPTH)(c, v)
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_GET_R(c) LV_CONCAT(LV_COLOR_GET_R, LV_COLOR_DEPTH)(c)
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_GET_G(c) LV_CONCAT(LV_COLOR_GET_G, LV_COLOR_DEPTH)(c)
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_GET_B(c) LV_CONCAT(LV_COLOR_GET_B, LV_COLOR_DEPTH)(c)
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_GET_A(c) LV_CONCAT(LV_COLOR_GET_A, LV_COLOR_DEPTH)(c)
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_ZERO_INITIALIZER LV_CONCAT(_LV_COLOR_ZERO_INITIALIZER, LV_COLOR_DEPTH)
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_MAKE(r8, g8, b8) LV_CONCAT(LV_COLOR_MAKE, LV_COLOR_DEPTH)(r8, g8, b8)
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**********************
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *      TYPEDEFS
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  **********************/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 14


 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef union {
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint8_t full; /*must be declared first to set all bits of byte via initializer list*/
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     union {
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t blue : 1;
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t green : 1;
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t red : 1;
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     } ch;
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color1_t;
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef union {
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     struct {
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t blue : 2;
 202:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t green : 3;
 203:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t red : 3;
 204:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     } ch;
 205:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint8_t full;
 206:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color8_t;
 207:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 208:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef union {
 209:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     struct {
 210:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 211:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t blue : 5;
 212:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t green : 6;
 213:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t red : 5;
 214:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 215:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t green_h : 3;
 216:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t red : 5;
 217:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t blue : 5;
 218:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t green_l : 3;
 219:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 220:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     } ch;
 221:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint16_t full;
 222:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color16_t;
 223:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 224:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef union {
 225:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     struct {
 226:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t blue;
 227:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t green;
 228:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t red;
 229:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t alpha;
 230:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     } ch;
 231:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint32_t full;
 232:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color32_t;
 233:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 234:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef LV_CONCAT3(uint, LV_COLOR_SIZE, _t) lv_color_int_t;
 235:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef LV_CONCAT3(lv_color, LV_COLOR_DEPTH, _t) lv_color_t;
 236:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 237:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef struct {
 238:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint16_t h;
 239:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint8_t s;
 240:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint8_t v;
 241:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color_hsv_t;
 242:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 243:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @cond Doxygen_Suppress
 244:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*No idea where the guard is required but else throws warnings in the docs*/
 245:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef uint8_t lv_opa_t;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 15


 246:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @endcond
 247:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 248:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** struct _lv_color_filter_dsc_t;
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 250:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef lv_color_t (*lv_color_filter_cb_t)(const struct _lv_color_filter_dsc_t *, lv_color_t, lv_op
 251:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 252:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef struct _lv_color_filter_dsc_t {
 253:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_filter_cb_t filter_cb;
 254:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     void * user_data;
 255:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color_filter_dsc_t;
 256:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 257:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef enum {
 258:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_RED,
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_PINK,
 260:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_PURPLE,
 261:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_DEEP_PURPLE,
 262:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_INDIGO,
 263:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_BLUE,
 264:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_LIGHT_BLUE,
 265:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_CYAN,
 266:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_TEAL,
 267:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_GREEN,
 268:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_LIGHT_GREEN,
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_LIME,
 270:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_YELLOW,
 271:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_AMBER,
 272:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_ORANGE,
 273:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_DEEP_ORANGE,
 274:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_BROWN,
 275:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_BLUE_GREY,
 276:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_GREY,
 277:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     _LV_PALETTE_LAST,
 278:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_NONE = 0xff,
 279:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_palette_t;
 280:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 281:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**********************
 282:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * GLOBAL PROTOTYPES
 283:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  **********************/
 284:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 285:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*In color conversations:
 286:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * - When converting to bigger color type the LSB weight of 1 LSB is calculated
 287:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *   E.g. 16 bit Red has 5 bits
 288:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *         8 bit Red has 3 bits
 289:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *        ----------------------
 290:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *        8 bit red LSB = (2^5 - 1) / (2^3 - 1) = 31 / 7 = 4
 291:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *
 292:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * - When calculating to smaller color type simply shift out the LSBs
 293:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *   E.g.  8 bit Red has 3 bits
 294:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *        16 bit Red has 5 bits
 295:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *        ----------------------
 296:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *         Shift right with 5 - 3 = 2
 297:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 298:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint8_t lv_color_to1(lv_color_t color)
 299:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 300:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
 301:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return color.full;
 302:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 16


 303:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x4) || (LV_COLOR_GET_G(color) & 0x4) || (LV_COLOR_GET_B(color) & 0
 304:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 1;
 305:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 306:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else {
 307:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 308:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 309:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
 310:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x10) || (LV_COLOR_GET_G(color) & 0x20) || (LV_COLOR_GET_B(color) &
 311:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 1;
 312:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 313:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else {
 314:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 315:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 316:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 317:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x80) || (LV_COLOR_GET_G(color) & 0x80) || (LV_COLOR_GET_B(color) &
 318:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 1;
 319:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 320:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else {
 321:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 322:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 323:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 324:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 325:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 326:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint8_t lv_color_to8(lv_color_t color)
 327:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 328:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
 329:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if(color.full == 0)
 330:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 331:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else
 332:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0xFF;
 333:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
 334:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return color.full;
 335:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
 336:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color8_t ret;
 337:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 2); /*5 - 3  = 2*/
 338:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 3); /*6 - 3  = 3*/
 339:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 3); /*5 - 2  = 3*/
 340:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 341:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 342:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color8_t ret;
 343:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 5); /*8 - 3  = 5*/
 344:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 5); /*8 - 3  = 5*/
 345:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 6); /*8 - 2  = 6*/
 346:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 347:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 348:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 349:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 350:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint16_t lv_color_to16(lv_color_t color)
 351:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 352:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
 353:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if(color.full == 0)
 354:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 355:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else
 356:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0xFFFF;
 357:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
 358:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color16_t ret;
 359:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) * 4);  /*(2^5 - 1)/(2^3 - 1) = 31/7 = 4*/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 17


 360:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) * 9);  /*(2^6 - 1)/(2^3 - 1) = 63/7 = 9*/
 361:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) * 10); /*(2^5 - 1)/(2^2 - 1) = 31/3 = 10*/
 362:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 363:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
 364:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return color.full;
 365:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 366:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color16_t ret;
 367:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) >> 3); /*8 - 5  = 3*/
 368:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) >> 2); /*8 - 6  = 2*/
 369:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) >> 3); /*8 - 5  = 3*/
 370:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 371:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 372:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 373:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 374:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint32_t lv_color_to32(lv_color_t color)
 375:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 376:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
 377:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if(color.full == 0)
 378:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0xFF000000;
 379:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else
 380:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0xFFFFFFFF;
 381:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
 382:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color32_t ret;
 383:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R32(ret, LV_COLOR_GET_R(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 384:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G32(ret, LV_COLOR_GET_G(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 385:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B32(ret, LV_COLOR_GET_B(color) * 85); /*(2^8 - 1)/(2^2 - 1) = 255/3 = 85*/
 386:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 387:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 388:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
 389:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /**
 390:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * The floating point math for conversion is:
 391:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *  valueto = valuefrom * ( (2^bitsto - 1) / (float)(2^bitsfrom - 1) )
 392:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * The faster integer math for conversion is:
 393:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *  valueto = ( valuefrom * multiplier + adder ) >> divisor
 394:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *   multiplier = FLOOR( ( (2^bitsto - 1) << divisor ) / (float)(2^bitsfrom - 1) )
 395:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *
 396:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * Find the first divisor where ( adder >> divisor ) <= 0
 397:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *
 398:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * 5-bit to 8-bit: ( 31 * multiplier + adder ) >> divisor = 255
 399:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * divisor  multiplier  adder  min (0)  max (31)
 400:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       0           8      7        7       255
 401:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       1          16     14        7       255
 402:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       2          32     28        7       255
 403:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       3          65     25        3       255
 404:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       4         131     19        1       255
 405:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       5         263      7        0       255
 406:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *
 407:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * 6-bit to 8-bit: 255 = ( 63 * multiplier + adder ) >> divisor
 408:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * divisor  multiplier  adder  min (0)  max (63)
 409:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       0           4      3        3       255
 410:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       1           8      6        3       255
 411:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       2          16     12        3       255
 412:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       3          32     24        3       255
 413:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       4          64     48        3       255
 414:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       5         129     33        1       255
 415:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       6         259      3        0       255
 416:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      */
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 18


 417:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 418:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color32_t ret;
 419:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 420:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 421:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 422:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 423:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 424:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 425:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return color.full;
 426:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 427:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 428:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 429:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @cond Doxygen_Suppress
 430:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 431:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 432:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Mix two colors with a given ratio.
 433:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param c1 the first color to mix (usually the foreground)
 434:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param c2 the second color to mix (usually the background)
 435:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 436:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the mixed color
 437:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 438:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t LV_ATTRIBUTE_FAST_MEM lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t m
 439:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 440:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t ret;
 441:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 442:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 16 && LV_COLOR_MIX_ROUND_OFS == 0
 443:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 1
 444:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     c1.full = c1.full << 8 | c1.full >> 8;
 445:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     c2.full = c2.full << 8 | c2.full >> 8;
 446:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 447:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Source: https://stackoverflow.com/a/50012418/1999969*/
 448:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 449:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 450:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                   0x7E0F81F; /*0b00000111111000001111100000011111*/
 451:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 452:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 453:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     ret.full = (uint16_t)((result >> 16) | result);
 454:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 1
 455:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     ret.full = ret.full << 8 | ret.full >> 8;
 456:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 457:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH != 1
 458:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*LV_COLOR_DEPTH == 8, 16 or 32*/
 459:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 460:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 461:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 462:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 463:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 464:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 465:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 466:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 467:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 468:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 469:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 470:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 471:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret;
 472:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 473:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 19


 474:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline void LV_ATTRIBUTE_FAST_MEM lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out
 475:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 476:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH != 1
 477:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 478:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 479:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 480:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 481:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     (void) mix;
 482:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Pre-multiplication can't be used with 1 bpp*/
 483:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[0] = LV_COLOR_GET_R(c);
 484:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[1] = LV_COLOR_GET_G(c);
 485:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[2] = LV_COLOR_GET_B(c);
 486:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 487:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 488:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 489:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 490:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 491:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Mix two colors with a given ratio. It runs faster then `lv_color_mix` but requires some pre comp
 492:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param premult_c1 The first color. Should be preprocessed with `lv_color_premult(c1)`
 493:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param c2 The second color. As it is no pre computation required on it
 494:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param mix The ratio of the colors. 0: full `c1`, 255: full `c2`, 127: half `c1` and half `c2`.
 495:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *            Should be modified like mix = `255 - mix`
 496:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the mixed color
 497:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @note 255 won't give clearly `c1`.
 498:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 499:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t LV_ATTRIBUTE_FAST_MEM lv_color_mix_premult(uint16_t * premult_c1, lv_color
 500:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 501:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t ret;
 502:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH != 1
 503:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*LV_COLOR_DEPTH == 8 or 32*/
 504:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OF
 505:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OF
 506:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OF
 507:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 508:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 509:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 510:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Restore color1*/
 511:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t c1;
 512:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R(c1, premult_c1[0]);
 513:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G(c1, premult_c1[1]);
 514:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B(c1, premult_c1[2]);
 515:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 516:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 517:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 518:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret;
 519:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 520:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 521:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 522:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Mix two colors. Both color can have alpha value.
 523:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param bg_color background color
 524:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param bg_opa alpha of the background color
 525:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param fg_color foreground color
 526:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param fg_opa alpha of the foreground color
 527:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param res_color the result color
 528:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param res_opa the result opacity
 529:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 530:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline void LV_ATTRIBUTE_FAST_MEM lv_color_mix_with_alpha(lv_color_t bg_color, lv_opa_t bg_o
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 20


 531:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                                                  lv_color_t fg_color, lv_opa_t fg_o
 532:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                                                  lv_color_t * res_color, lv_opa_t *
 533:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 534:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Pick the foreground if it's fully opaque or the Background is fully transparent*/
 535:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if(fg_opa >= LV_OPA_MAX || bg_opa <= LV_OPA_MIN) {
 536:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         res_color->full = fg_color.full;
 537:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_opa = fg_opa;
 538:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 539:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Transparent foreground: use the Background*/
 540:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else if(fg_opa <= LV_OPA_MIN) {
 541:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         res_color->full = bg_color.full;
 542:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_opa = bg_opa;
 543:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 544:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Opaque background: use simple mix*/
 545:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else if(bg_opa >= LV_OPA_MAX) {
 546:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_color = lv_color_mix(fg_color, bg_color, fg_opa);
 547:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_opa = LV_OPA_COVER;
 548:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 549:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Both colors have alpha. Expensive calculation need to be applied*/
 550:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else {
 551:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         /*Save the parameters and the result. If they will be asked again don't compute again*/
 552:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_opa_t fg_opa_save     = 0;
 553:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_opa_t bg_opa_save     = 0;
 554:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_color_t fg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 555:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_color_t bg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 556:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_color_t res_color_saved = _LV_COLOR_ZERO_INITIALIZER;
 557:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_opa_t res_opa_saved = 0;
 558:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 559:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         if(fg_opa != fg_opa_save || bg_opa != bg_opa_save || fg_color.full != fg_color_save.full ||
 560:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****            bg_color.full != bg_color_save.full) {
 561:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             fg_opa_save        = fg_opa;
 562:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             bg_opa_save        = bg_opa;
 563:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             fg_color_save.full = fg_color.full;
 564:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             bg_color_save.full = bg_color.full;
 565:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             /*Info:
 566:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****              * https://en.wikipedia.org/wiki/Alpha_compositing#Analytical_derivation_of_the_over_op
 567:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             res_opa_saved = 255 - ((uint16_t)((uint16_t)(255 - fg_opa) * (255 - bg_opa)) >> 8);
 568:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             LV_ASSERT(res_opa_saved != 0);
 569:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             lv_opa_t ratio = (uint16_t)((uint16_t)fg_opa * 255) / res_opa_saved;
 570:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             res_color_saved = lv_color_mix(fg_color, bg_color, ratio);
 571:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 572:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         }
 573:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 574:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         res_color->full = res_color_saved.full;
 575:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_opa = res_opa_saved;
 576:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 577:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 578:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 579:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @endcond
 580:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 581:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 582:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Get the brightness of a color
 583:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param color a color
 584:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the brightness [0..255]
 585:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 586:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint8_t lv_color_brightness(lv_color_t color)
 587:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 21


 588:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color32_t c32;
 589:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     c32.full        = lv_color_to32(color);
 590:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR
 591:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return (uint8_t)(bright >> 3);
 592:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 593:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 594:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
 595:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 597:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 598:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 599:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_hex(uint32_t c)
 600:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 601:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 16
 602:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t r;
 603:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 604:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /* Convert a 4 bytes per pixel in format ARGB32 to R5G6B5 format
 605:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         naive way (by calling lv_color_make with components):
 606:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     r = ((c & 0xFF0000) >> 19)
 607:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     g = ((c & 0xFF00) >> 10)
 608:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     b = ((c & 0xFF) >> 3)
 609:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     rgb565 = (r << 11) | (g << 5) | b
 610:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         That's 3 mask, 5 bitshift and 2 or operations
 611:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 612:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         A bit better:
 613:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     r = ((c & 0xF80000) >> 8)
 614:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     g = ((c & 0xFC00) >> 5)
 615:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     b = ((c & 0xFF) >> 3)
 616:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     rgb565 = r | g | b
 617:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         That's 3 mask, 3 bitshifts and 2 or operations */
 618:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 8) | ((c & 0xFC00) >> 5) | ((c & 0xFF) >> 3));
 619:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 620:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /* We want: rrrr rrrr GGGg gggg bbbb bbbb => gggb bbbb rrrr rGGG */
 621:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 16) | ((c & 0xFC00) >> 13) | ((c & 0x1C00) << 3) | ((c &
 622:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 623:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return r;
 624:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 625:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t r;
 626:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = c | 0xFF000000;
 627:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return r;
 628:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 629:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xF
 630:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 631:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 632:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 633:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_hex3(uint32_t c)
 634:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 635:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((
 636:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                          (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 637:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 638:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 639:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline void lv_color_filter_dsc_init(lv_color_filter_dsc_t * dsc, lv_color_filter_cb_t cb)
 640:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 641:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     dsc->filter_cb = cb;
 642:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 643:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 644:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @cond Doxygen_Suppress
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 22


 645:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //!
 646:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** void /* LV_ATTRIBUTE_FAST_MEM */ lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
 647:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 648:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @endcond
 649:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl);
 650:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 651:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl);
 652:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 653:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_t lv_color_change_lightness(lv_color_t c, lv_opa_t lvl);
 654:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 655:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 656:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Convert a HSV color to RGB
 657:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param h hue [0..359]
 658:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param s saturation [0..100]
 659:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param v value [0..100]
 660:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the given RGB color in RGB (with LV_COLOR_DEPTH depth)
 661:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 662:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v);
 663:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 664:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 665:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Convert a 32-bit RGB color to HSV
 666:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param r8 8-bit red
 667:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param g8 8-bit green
 668:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param b8 8-bit blue
 669:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the given RGB color in HSV
 670:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 671:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_hsv_t lv_color_rgb_to_hsv(uint8_t r8, uint8_t g8, uint8_t b8);
 672:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 673:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 674:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Convert a color to HSV
 675:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param color color
 676:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the given color in HSV
 677:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 678:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_hsv_t lv_color_to_hsv(lv_color_t color);
 679:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 680:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 681:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Just a wrapper around LV_COLOR_CHROMA_KEY because it might be more convenient to use a function 
 682:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return LV_COLOR_CHROMA_KEY
 683:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 684:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_chroma_key(void)
 685:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 686:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return LV_COLOR_CHROMA_KEY;
 687:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 688:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 689:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**********************
 690:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *  PREDEFINED COLORS
 691:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  **********************/
 692:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/
 693:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 694:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** lv_color_t lv_palette_main(lv_palette_t p);
 695:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_white(void)
 696:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 697:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return lv_color_make(0xff, 0xff, 0xff);
 698:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 699:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_black(void)
 149              		.loc 4 699 26 view .LVU23
 150              	.LBE53:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 23


 700:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 701:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return lv_color_make(0x00, 0x0, 0x00);
 151              		.loc 4 701 5 view .LVU24
 152              	.LBB56:
 153              	.LBB54:
 154              	.LBI54:
 594:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 155              		.loc 4 594 26 view .LVU25
 156              	.LBB55:
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 157              		.loc 4 596 5 view .LVU26
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 158              		.loc 4 596 12 is_stmt 0 view .LVU27
 159 004c 0023     		movs	r3, #0
 160 004e 6FF30703 		bfc	r3, #0, #8
 161 0052 6FF30F23 		bfc	r3, #8, #8
 162 0056 6FF31743 		bfc	r3, #16, #8
 163 005a 43F07F43 		orr	r3, r3, #-16777216
 164              	.LVL15:
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 165              		.loc 4 596 12 view .LVU28
 166              	.LBE55:
 167              	.LBE54:
 168              	.LBE56:
 169              		.loc 1 23 5 view .LVU29
 170 005e 0295     		str	r5, [sp, #8]
 171 0060 0193     		str	r3, [sp, #4]
 172 0062 0F23     		movs	r3, #15
 173 0064 0093     		str	r3, [sp]
 174 0066 0423     		movs	r3, #4
 175 0068 0822     		movs	r2, #8
 176 006a 3146     		mov	r1, r6
 177 006c 2068     		ldr	r0, [r4]
 178 006e FFF7FEFF 		bl	lv_meter_set_scale_major_ticks
 179              	.LVL16:
  24:lvgl/examples/widgets/meter/lv_example_meter_1.c **** 
  25:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_meter_indicator_t * indic;
 180              		.loc 1 25 5 is_stmt 1 view .LVU30
  26:lvgl/examples/widgets/meter/lv_example_meter_1.c **** 
  27:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     /*Add a blue arc to the start*/
  28:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     indic = lv_meter_add_arc(meter, scale, 3, lv_palette_main(LV_PALETTE_BLUE), 0);
 181              		.loc 1 28 5 view .LVU31
 182              		.loc 1 28 13 is_stmt 0 view .LVU32
 183 0072 2768     		ldr	r7, [r4]
 184 0074 0520     		movs	r0, #5
 185 0076 FFF7FEFF 		bl	lv_palette_main
 186              	.LVL17:
 187 007a 0346     		mov	r3, r0
 188 007c 0025     		movs	r5, #0
 189 007e 0095     		str	r5, [sp]
 190 0080 0322     		movs	r2, #3
 191 0082 3146     		mov	r1, r6
 192 0084 3846     		mov	r0, r7
 193 0086 FFF7FEFF 		bl	lv_meter_add_arc
 194              	.LVL18:
 195 008a 0746     		mov	r7, r0
 196              	.LVL19:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 24


  29:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_meter_set_indicator_start_value(meter, indic, 0);
 197              		.loc 1 29 5 is_stmt 1 view .LVU33
 198 008c 2A46     		mov	r2, r5
 199 008e 0146     		mov	r1, r0
 200 0090 2068     		ldr	r0, [r4]
 201              	.LVL20:
 202              		.loc 1 29 5 is_stmt 0 view .LVU34
 203 0092 FFF7FEFF 		bl	lv_meter_set_indicator_start_value
 204              	.LVL21:
  30:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_meter_set_indicator_end_value(meter, indic, 20);
 205              		.loc 1 30 5 is_stmt 1 view .LVU35
 206 0096 1422     		movs	r2, #20
 207 0098 3946     		mov	r1, r7
 208 009a 2068     		ldr	r0, [r4]
 209 009c FFF7FEFF 		bl	lv_meter_set_indicator_end_value
 210              	.LVL22:
  31:lvgl/examples/widgets/meter/lv_example_meter_1.c **** 
  32:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     /*Make the tick lines blue at the start of the scale*/
  33:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     indic = lv_meter_add_scale_lines(meter, scale, lv_palette_main(LV_PALETTE_BLUE), lv_palette_mai
 211              		.loc 1 33 5 view .LVU36
 212              		.loc 1 33 13 is_stmt 0 view .LVU37
 213 00a0 D4F80080 		ldr	r8, [r4]
 214 00a4 0520     		movs	r0, #5
 215 00a6 FFF7FEFF 		bl	lv_palette_main
 216              	.LVL23:
 217 00aa 0746     		mov	r7, r0
 218              	.LVL24:
 219              		.loc 1 33 13 view .LVU38
 220 00ac 0520     		movs	r0, #5
 221 00ae FFF7FEFF 		bl	lv_palette_main
 222              	.LVL25:
 223 00b2 0346     		mov	r3, r0
 224 00b4 0195     		str	r5, [sp, #4]
 225 00b6 0095     		str	r5, [sp]
 226 00b8 3A46     		mov	r2, r7
 227 00ba 3146     		mov	r1, r6
 228 00bc 4046     		mov	r0, r8
 229 00be FFF7FEFF 		bl	lv_meter_add_scale_lines
 230              	.LVL26:
 231 00c2 0746     		mov	r7, r0
 232              	.LVL27:
  34:lvgl/examples/widgets/meter/lv_example_meter_1.c ****                                      false, 0);
  35:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_meter_set_indicator_start_value(meter, indic, 0);
 233              		.loc 1 35 5 is_stmt 1 view .LVU39
 234 00c4 2A46     		mov	r2, r5
 235 00c6 0146     		mov	r1, r0
 236 00c8 2068     		ldr	r0, [r4]
 237              	.LVL28:
 238              		.loc 1 35 5 is_stmt 0 view .LVU40
 239 00ca FFF7FEFF 		bl	lv_meter_set_indicator_start_value
 240              	.LVL29:
  36:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_meter_set_indicator_end_value(meter, indic, 20);
 241              		.loc 1 36 5 is_stmt 1 view .LVU41
 242 00ce 1422     		movs	r2, #20
 243 00d0 3946     		mov	r1, r7
 244 00d2 2068     		ldr	r0, [r4]
 245 00d4 FFF7FEFF 		bl	lv_meter_set_indicator_end_value
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 25


 246              	.LVL30:
  37:lvgl/examples/widgets/meter/lv_example_meter_1.c **** 
  38:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     /*Add a red arc to the end*/
  39:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     indic = lv_meter_add_arc(meter, scale, 3, lv_palette_main(LV_PALETTE_RED), 0);
 247              		.loc 1 39 5 view .LVU42
 248              		.loc 1 39 13 is_stmt 0 view .LVU43
 249 00d8 2768     		ldr	r7, [r4]
 250              	.LVL31:
 251              		.loc 1 39 13 view .LVU44
 252 00da 2846     		mov	r0, r5
 253 00dc FFF7FEFF 		bl	lv_palette_main
 254              	.LVL32:
 255 00e0 0346     		mov	r3, r0
 256 00e2 0095     		str	r5, [sp]
 257 00e4 0322     		movs	r2, #3
 258 00e6 3146     		mov	r1, r6
 259 00e8 3846     		mov	r0, r7
 260 00ea FFF7FEFF 		bl	lv_meter_add_arc
 261              	.LVL33:
 262 00ee 0746     		mov	r7, r0
 263              	.LVL34:
  40:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_meter_set_indicator_start_value(meter, indic, 80);
 264              		.loc 1 40 5 is_stmt 1 view .LVU45
 265 00f0 5022     		movs	r2, #80
 266 00f2 0146     		mov	r1, r0
 267 00f4 2068     		ldr	r0, [r4]
 268              	.LVL35:
 269              		.loc 1 40 5 is_stmt 0 view .LVU46
 270 00f6 FFF7FEFF 		bl	lv_meter_set_indicator_start_value
 271              	.LVL36:
  41:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_meter_set_indicator_end_value(meter, indic, 100);
 272              		.loc 1 41 5 is_stmt 1 view .LVU47
 273 00fa 6422     		movs	r2, #100
 274 00fc 3946     		mov	r1, r7
 275 00fe 2068     		ldr	r0, [r4]
 276 0100 FFF7FEFF 		bl	lv_meter_set_indicator_end_value
 277              	.LVL37:
  42:lvgl/examples/widgets/meter/lv_example_meter_1.c **** 
  43:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     /*Make the tick lines red at the end of the scale*/
  44:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     indic = lv_meter_add_scale_lines(meter, scale, lv_palette_main(LV_PALETTE_RED), lv_palette_main
 278              		.loc 1 44 5 view .LVU48
 279              		.loc 1 44 13 is_stmt 0 view .LVU49
 280 0104 D4F80080 		ldr	r8, [r4]
 281 0108 2846     		mov	r0, r5
 282 010a FFF7FEFF 		bl	lv_palette_main
 283              	.LVL38:
 284 010e 0746     		mov	r7, r0
 285              	.LVL39:
 286              		.loc 1 44 13 view .LVU50
 287 0110 2846     		mov	r0, r5
 288 0112 FFF7FEFF 		bl	lv_palette_main
 289              	.LVL40:
 290 0116 0346     		mov	r3, r0
 291 0118 0195     		str	r5, [sp, #4]
 292 011a 0095     		str	r5, [sp]
 293 011c 3A46     		mov	r2, r7
 294 011e 3146     		mov	r1, r6
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 26


 295 0120 4046     		mov	r0, r8
 296 0122 FFF7FEFF 		bl	lv_meter_add_scale_lines
 297              	.LVL41:
 298 0126 0746     		mov	r7, r0
 299              	.LVL42:
  45:lvgl/examples/widgets/meter/lv_example_meter_1.c ****                                      0);
  46:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_meter_set_indicator_start_value(meter, indic, 80);
 300              		.loc 1 46 5 is_stmt 1 view .LVU51
 301 0128 5022     		movs	r2, #80
 302 012a 0146     		mov	r1, r0
 303 012c 2068     		ldr	r0, [r4]
 304              	.LVL43:
 305              		.loc 1 46 5 is_stmt 0 view .LVU52
 306 012e FFF7FEFF 		bl	lv_meter_set_indicator_start_value
 307              	.LVL44:
  47:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_meter_set_indicator_end_value(meter, indic, 100);
 308              		.loc 1 47 5 is_stmt 1 view .LVU53
 309 0132 6422     		movs	r2, #100
 310 0134 3946     		mov	r1, r7
 311 0136 2068     		ldr	r0, [r4]
 312 0138 FFF7FEFF 		bl	lv_meter_set_indicator_end_value
 313              	.LVL45:
  48:lvgl/examples/widgets/meter/lv_example_meter_1.c **** 
  49:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     /*Add a needle line indicator*/
  50:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     indic = lv_meter_add_needle_line(meter, scale, 4, lv_palette_main(LV_PALETTE_GREY), -10);
 314              		.loc 1 50 5 view .LVU54
 315              		.loc 1 50 13 is_stmt 0 view .LVU55
 316 013c 2468     		ldr	r4, [r4]
 317 013e 1220     		movs	r0, #18
 318 0140 FFF7FEFF 		bl	lv_palette_main
 319              	.LVL46:
 320 0144 0346     		mov	r3, r0
 321 0146 6FF00902 		mvn	r2, #9
 322 014a 0092     		str	r2, [sp]
 323 014c 0422     		movs	r2, #4
 324 014e 3146     		mov	r1, r6
 325 0150 2046     		mov	r0, r4
 326 0152 FFF7FEFF 		bl	lv_meter_add_needle_line
 327              	.LVL47:
 328 0156 0446     		mov	r4, r0
 329              	.LVL48:
  51:lvgl/examples/widgets/meter/lv_example_meter_1.c **** 
  52:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     /*Create an animation to set the value*/
  53:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_anim_t a;
 330              		.loc 1 53 5 is_stmt 1 view .LVU56
  54:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_anim_init(&a);
 331              		.loc 1 54 5 view .LVU57
 332 0158 05A8     		add	r0, sp, #20
 333              	.LVL49:
 334              		.loc 1 54 5 is_stmt 0 view .LVU58
 335 015a FFF7FEFF 		bl	lv_anim_init
 336              	.LVL50:
  55:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_anim_set_exec_cb(&a, set_value);
 337              		.loc 1 55 5 is_stmt 1 view .LVU59
 338              	.LBB57:
 339              	.LBI57:
 340              		.file 5 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/misc/lv_anim.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 27


   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @file lv_anim.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** #ifndef LV_ANIM_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** #define LV_ANIM_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** #include "../lv_conf_internal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** #include <stdint.h>
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** #include <stdbool.h>
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** #include <stddef.h>
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /*********************
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  *      DEFINES
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  *********************/
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** #define LV_ANIM_REPEAT_INFINITE      0xFFFF
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** #define LV_ANIM_PLAYTIME_INFINITE    0xFFFFFFFF
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** LV_EXPORT_CONST_INT(LV_ANIM_REPEAT_INFINITE);
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** LV_EXPORT_CONST_INT(LV_ANIM_PLAYTIME_INFINITE);
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**********************
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  *      TYPEDEFS
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  **********************/
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /** Can be used to indicate if animations are enabled or disabled in a case*/
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** typedef enum {
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     LV_ANIM_OFF,
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     LV_ANIM_ON,
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** } lv_anim_enable_t;
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** struct _lv_anim_t;
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** struct _lv_timer_t;
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /** Get the current value during an animation*/
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** typedef int32_t (*lv_anim_path_cb_t)(const struct _lv_anim_t *);
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /** Generic prototype of "animator" functions.
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * First parameter is the variable to animate.
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Second parameter is the value to set.
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Compatible with `lv_xxx_set_yyy(obj, value)` functions
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * The `x` in `_xcb_t` means it's not a fully generic prototype because
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * it doesn't receive `lv_anim_t *` as its first argument*/
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** typedef void (*lv_anim_exec_xcb_t)(void *, int32_t);
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /** Same as `lv_anim_exec_xcb_t` but receives `lv_anim_t *` as the first parameter.
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * It's more consistent but less convenient. Might be used by binding generator functions.*/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 28


  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** typedef void (*lv_anim_custom_exec_cb_t)(struct _lv_anim_t *, int32_t);
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /** Callback to call when the animation is ready*/
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** typedef void (*lv_anim_ready_cb_t)(struct _lv_anim_t *);
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /** Callback to call when the animation really stars (considering `delay`)*/
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** typedef void (*lv_anim_start_cb_t)(struct _lv_anim_t *);
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /** Callback used when the animation values are relative to get the current value*/
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** typedef int32_t (*lv_anim_get_value_cb_t)(struct _lv_anim_t *);
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /** Callback used when the animation is deleted*/
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** typedef void (*lv_anim_deleted_cb_t)(struct _lv_anim_t *);
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /** Describes an animation*/
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** typedef struct _lv_anim_t {
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     void * var;                          /**<Variable to animate*/
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     lv_anim_exec_xcb_t exec_cb;          /**< Function to execute to animate*/
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     lv_anim_start_cb_t start_cb;         /**< Call it when the animation is starts (considering `de
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     lv_anim_ready_cb_t ready_cb;         /**< Call it when the animation is ready*/
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     lv_anim_deleted_cb_t deleted_cb;     /**< Call it when the animation is deleted*/
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     lv_anim_get_value_cb_t get_value_cb; /**< Get the current value in relative mode*/
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** #if LV_USE_USER_DATA
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     void * user_data; /**< Custom user data*/
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** #endif
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     lv_anim_path_cb_t path_cb;         /**< Describe the path (curve) of animations*/
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     int32_t start_value;               /**< Start value*/
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     int32_t current_value;             /**< Current value*/
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     int32_t end_value;                 /**< End value*/
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     int32_t time;                /**< Animation time in ms*/
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     int32_t act_time;            /**< Current time in animation. Set to negative to make delay.*/
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     uint32_t playback_delay;     /**< Wait before play back*/
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     uint32_t playback_time;      /**< Duration of playback animation*/
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     uint32_t repeat_delay;       /**< Wait before repeat*/
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     uint16_t repeat_cnt;         /**< Repeat count for the animation*/
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     uint8_t early_apply  : 1;    /**< 1: Apply start value immediately even is there is `delay`*/
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     /*Animation system use these - user shouldn't set*/
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     uint8_t playback_now : 1; /**< Play back is in progress*/
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     uint8_t run_round : 1;    /**< Indicates the animation has run in this round*/
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     uint8_t start_cb_called : 1;    /**< Indicates that the `start_cb` was already called*/
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** } lv_anim_t;
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**********************
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * GLOBAL PROTOTYPES
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  **********************/
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Init. the animation module
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** void _lv_anim_core_init(void);
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Initialize an animation variable.
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * E.g.:
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * lv_anim_t a;
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * lv_anim_init(&a);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 29


 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * lv_anim_set_...(&a);
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * lv_anim_start(&a);
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a     pointer to an `lv_anim_t` variable to initialize
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** void lv_anim_init(lv_anim_t * a);
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Set a variable to animate
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a     pointer to an initialized `lv_anim_t` variable
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param var   pointer to a variable to animate
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_var(lv_anim_t * a, void * var)
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->var = var;
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Set a function to animate `var`
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a         pointer to an initialized `lv_anim_t` variable
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param exec_cb   a function to execute during animation
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  *                  LVGL's built-in functions can be used.
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  *                  E.g. lv_obj_set_x
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
 341              		.loc 5 138 20 view .LVU60
 342              	.LBB58:
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->exec_cb = exec_cb;
 343              		.loc 5 140 5 view .LVU61
 344              		.loc 5 140 16 is_stmt 0 view .LVU62
 345 015e 0D4B     		ldr	r3, .L7+4
 346 0160 0693     		str	r3, [sp, #24]
 347              	.LVL51:
 348              		.loc 5 140 16 view .LVU63
 349              	.LBE58:
 350              	.LBE57:
  56:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_anim_set_var(&a, indic);
 351              		.loc 1 56 5 is_stmt 1 view .LVU64
 352              	.LBB59:
 353              	.LBI59:
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 354              		.loc 5 126 20 view .LVU65
 355              	.LBB60:
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 356              		.loc 5 128 5 view .LVU66
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 357              		.loc 5 128 12 is_stmt 0 view .LVU67
 358 0162 0594     		str	r4, [sp, #20]
 359              	.LVL52:
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 360              		.loc 5 128 12 view .LVU68
 361              	.LBE60:
 362              	.LBE59:
  57:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_anim_set_values(&a, 0, 100);
 363              		.loc 1 57 5 is_stmt 1 view .LVU69
 364              	.LBB61:
 365              	.LBI61:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 30


 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Set the duration of an animation
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a         pointer to an initialized `lv_anim_t` variable
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param duration  duration of the animation in milliseconds
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->time = duration;
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Set a delay before starting the animation
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a         pointer to an initialized `lv_anim_t` variable
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param delay     delay before the animation in milliseconds
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_delay(lv_anim_t * a, uint32_t delay)
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->act_time = -(int32_t)(delay);
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Set the start and end values of an animation
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a         pointer to an initialized `lv_anim_t` variable
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param start     the start value
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param end       the end value
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
 366              		.loc 5 169 20 view .LVU70
 367              	.LBB62:
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->start_value = start;
 368              		.loc 5 171 5 view .LVU71
 369              		.loc 5 171 20 is_stmt 0 view .LVU72
 370 0164 0D95     		str	r5, [sp, #52]
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->current_value = start;
 371              		.loc 5 172 5 is_stmt 1 view .LVU73
 372              		.loc 5 172 22 is_stmt 0 view .LVU74
 373 0166 0E95     		str	r5, [sp, #56]
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->end_value = end;
 374              		.loc 5 173 5 is_stmt 1 view .LVU75
 375              		.loc 5 173 18 is_stmt 0 view .LVU76
 376 0168 6423     		movs	r3, #100
 377 016a 0F93     		str	r3, [sp, #60]
 378              	.LVL53:
 379              		.loc 5 173 18 view .LVU77
 380              	.LBE62:
 381              	.LBE61:
  58:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_anim_set_time(&a, 2000);
 382              		.loc 1 58 5 is_stmt 1 view .LVU78
 383              	.LBB63:
 384              	.LBI63:
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 385              		.loc 5 148 20 view .LVU79
 386              	.LBB64:
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 31


 387              		.loc 5 150 5 view .LVU80
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 388              		.loc 5 150 13 is_stmt 0 view .LVU81
 389 016c 4FF4FA62 		mov	r2, #2000
 390 0170 1092     		str	r2, [sp, #64]
 391              	.LVL54:
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 392              		.loc 5 150 13 view .LVU82
 393              	.LBE64:
 394              	.LBE63:
  59:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_anim_set_repeat_delay(&a, 100);
 395              		.loc 1 59 5 is_stmt 1 view .LVU83
 396              	.LBB65:
 397              	.LBI65:
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Similar to `lv_anim_set_exec_cb` but `lv_anim_custom_exec_cb_t` receives
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * `lv_anim_t * ` as its first parameter instead of `void *`.
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * This function might be used when LVGL is bound to other languages because
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * it's more consistent to have `lv_anim_t *` as first parameter.
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * The variable to animate can be stored in the animation's `user_data`
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a         pointer to an initialized `lv_anim_t` variable
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param exec_cb   a function to execute.
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_custom_exec_cb(lv_anim_t * a, lv_anim_custom_exec_cb_t exec_cb)
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->var     = a;
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->exec_cb = (lv_anim_exec_xcb_t)exec_cb;
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Set the path (curve) of the animation.
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a         pointer to an initialized `lv_anim_t` variable
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param path_cb a function to set the current value of the animation.
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_path_cb(lv_anim_t * a, lv_anim_path_cb_t path_cb)
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->path_cb = path_cb;
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 202:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Set a function call when the animation really starts (considering `delay`)
 203:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a         pointer to an initialized `lv_anim_t` variable
 204:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param start_cb  a function call when the animation starts
 205:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 206:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_start_cb_t start_cb)
 207:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 208:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->start_cb = start_cb;
 209:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 210:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 211:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 212:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Set a function to use the current value of the variable and make start and end value
 213:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * relative to the returned current value.
 214:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a             pointer to an initialized `lv_anim_t` variable
 215:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param get_value_cb  a function call when the animation starts
 216:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 32


 217:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_get_value_cb(lv_anim_t * a, lv_anim_get_value_cb_t get_value_cb)
 218:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 219:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->get_value_cb = get_value_cb;
 220:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 221:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 222:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 223:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Set a function call when the animation is ready
 224:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a         pointer to an initialized `lv_anim_t` variable
 225:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param ready_cb  a function call when the animation is ready
 226:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 227:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
 228:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 229:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->ready_cb = ready_cb;
 230:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 231:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 232:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 233:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Set a function call when the animation is deleted.
 234:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a         pointer to an initialized `lv_anim_t` variable
 235:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param deleted_cb  a function call when the animation is deleted
 236:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 237:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_deleted_cb(lv_anim_t * a, lv_anim_deleted_cb_t deleted_cb)
 238:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 239:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->deleted_cb = deleted_cb;
 240:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 241:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 242:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 243:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Make the animation to play back to when the forward direction is ready
 244:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a         pointer to an initialized `lv_anim_t` variable
 245:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param time      the duration of the playback animation in milliseconds. 0: disable playback
 246:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 247:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_playback_time(lv_anim_t * a, uint32_t time)
 248:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->playback_time = time;
 250:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 251:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 252:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 253:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Make the animation to play back to when the forward direction is ready
 254:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a         pointer to an initialized `lv_anim_t` variable
 255:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param delay     delay in milliseconds before starting the playback animation.
 256:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 257:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_playback_delay(lv_anim_t * a, uint32_t delay)
 258:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->playback_delay = delay;
 260:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 261:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 262:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 263:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Make the animation repeat itself.
 264:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a         pointer to an initialized `lv_anim_t` variable
 265:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disabl
 266:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 267:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
 268:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->repeat_cnt = cnt;
 270:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 271:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** 
 272:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** /**
 273:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * Set a delay before repeating the animation.
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 33


 274:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param a         pointer to an initialized `lv_anim_t` variable
 275:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  * @param delay     delay in milliseconds before repeating the animation.
 276:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****  */
 277:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
 398              		.loc 5 277 20 view .LVU84
 399              	.LBB66:
 278:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 279:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h ****     a->repeat_delay = delay;
 400              		.loc 5 279 5 view .LVU85
 401              		.loc 5 279 21 is_stmt 0 view .LVU86
 402 0172 1493     		str	r3, [sp, #80]
 403              	.LVL55:
 404              		.loc 5 279 21 view .LVU87
 405              	.LBE66:
 406              	.LBE65:
  60:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_anim_set_playback_time(&a, 500);
 407              		.loc 1 60 5 is_stmt 1 view .LVU88
 408              	.LBB67:
 409              	.LBI67:
 247:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 410              		.loc 5 247 20 view .LVU89
 411              	.LBB68:
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 412              		.loc 5 249 5 view .LVU90
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 413              		.loc 5 249 22 is_stmt 0 view .LVU91
 414 0174 4FF4FA72 		mov	r2, #500
 415 0178 1392     		str	r2, [sp, #76]
 416              	.LVL56:
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 417              		.loc 5 249 22 view .LVU92
 418              	.LBE68:
 419              	.LBE67:
  61:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_anim_set_playback_delay(&a, 100);
 420              		.loc 1 61 5 is_stmt 1 view .LVU93
 421              	.LBB69:
 422              	.LBI69:
 257:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 423              		.loc 5 257 20 view .LVU94
 424              	.LBB70:
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 425              		.loc 5 259 5 view .LVU95
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 426              		.loc 5 259 23 is_stmt 0 view .LVU96
 427 017a 1293     		str	r3, [sp, #72]
 428              	.LVL57:
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 429              		.loc 5 259 23 view .LVU97
 430              	.LBE70:
 431              	.LBE69:
  62:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
 432              		.loc 1 62 5 is_stmt 1 view .LVU98
 433              	.LBB71:
 434              	.LBI71:
 267:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** {
 435              		.loc 5 267 20 view .LVU99
 436              	.LBB72:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 34


 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 437              		.loc 5 269 5 view .LVU100
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 438              		.loc 5 269 19 is_stmt 0 view .LVU101
 439 017c 4FF6FF73 		movw	r3, #65535
 440 0180 ADF85430 		strh	r3, [sp, #84]	@ movhi
 441              	.LVL58:
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_anim.h **** }
 442              		.loc 5 269 19 view .LVU102
 443              	.LBE72:
 444              	.LBE71:
  63:lvgl/examples/widgets/meter/lv_example_meter_1.c ****     lv_anim_start(&a);
 445              		.loc 1 63 5 is_stmt 1 view .LVU103
 446 0184 05A8     		add	r0, sp, #20
 447 0186 FFF7FEFF 		bl	lv_anim_start
 448              	.LVL59:
  64:lvgl/examples/widgets/meter/lv_example_meter_1.c **** }
 449              		.loc 1 64 1 is_stmt 0 view .LVU104
 450 018a 16B0     		add	sp, sp, #88
 451              		.cfi_def_cfa_offset 24
 452              		@ sp needed
 453 018c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 454              	.LVL60:
 455              	.L8:
 456              		.loc 1 64 1 view .LVU105
 457              		.align	2
 458              	.L7:
 459 0190 00000000 		.word	.LANCHOR0
 460 0194 00000000 		.word	set_value
 461              		.cfi_endproc
 462              	.LFE205:
 464              		.section	.bss.meter,"aw",%nobits
 465              		.align	2
 466              		.set	.LANCHOR0,. + 0
 469              	meter:
 470 0000 00000000 		.space	4
 471              		.text
 472              	.Letext0:
 473              		.file 6 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 474              		.file 7 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 475              		.file 8 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_area.h"
 476              		.file 9 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style.h"
 477              		.file 10 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj.h"
 478              		.file 11 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_ll.h"
 479              		.file 12 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_group.h"
 480              		.file 13 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_scroll.h"
 481              		.file 14 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_style.h"
 482              		.file 15 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_class.h"
 483              		.file 16 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_event.h"
 484              		.file 17 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/widgets/lv_bar.h"
 485              		.file 18 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/extra/widgets/meter/lv_meter.h"
 486              		.file 19 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/extra/widgets/imgbtn/lv_imgbtn.h"
 487              		.file 20 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/hal/lv_hal_disp.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 lv_example_meter_1.c
C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s:19     .text.set_value:00000000 $t
C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s:24     .text.set_value:00000000 set_value
C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s:53     .text.set_value:00000010 $d
C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s:58     .text.lv_example_meter_1:00000000 $t
C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s:64     .text.lv_example_meter_1:00000000 lv_example_meter_1
C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s:459    .text.lv_example_meter_1:00000190 $d
C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s:465    .bss.meter:00000000 $d
C:\Users\OSD\AppData\Local\Temp\cc6rldeo.s:469    .bss.meter:00000000 meter

UNDEFINED SYMBOLS
lv_meter_set_indicator_value
lv_disp_get_default
lv_disp_get_scr_act
lv_meter_create
lv_obj_align
lv_obj_set_size
lv_meter_add_scale
lv_palette_main
lv_meter_set_scale_ticks
lv_meter_set_scale_major_ticks
lv_meter_add_arc
lv_meter_set_indicator_start_value
lv_meter_set_indicator_end_value
lv_meter_add_scale_lines
lv_meter_add_needle_line
lv_anim_init
lv_anim_start
