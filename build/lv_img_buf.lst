ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_img_buf.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.lv_img_buf_get_px_color,"ax",%progbits
  19              		.align	1
  20              		.global	lv_img_buf_get_px_color
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	lv_img_buf_get_px_color:
  26              	.LVL0:
  27              	.LFB54:
  28              		.file 1 "lvgl/src/draw/lv_img_buf.c"
   1:lvgl/src/draw/lv_img_buf.c **** /**
   2:lvgl/src/draw/lv_img_buf.c ****  * @file lv_img_buf.c
   3:lvgl/src/draw/lv_img_buf.c ****  *
   4:lvgl/src/draw/lv_img_buf.c ****  */
   5:lvgl/src/draw/lv_img_buf.c **** 
   6:lvgl/src/draw/lv_img_buf.c **** /*********************
   7:lvgl/src/draw/lv_img_buf.c ****  *      INCLUDES
   8:lvgl/src/draw/lv_img_buf.c ****  *********************/
   9:lvgl/src/draw/lv_img_buf.c **** #include <stddef.h>
  10:lvgl/src/draw/lv_img_buf.c **** #include <string.h>
  11:lvgl/src/draw/lv_img_buf.c **** #include "lv_img_buf.h"
  12:lvgl/src/draw/lv_img_buf.c **** #include "lv_draw_img.h"
  13:lvgl/src/draw/lv_img_buf.c **** #include "../misc/lv_math.h"
  14:lvgl/src/draw/lv_img_buf.c **** #include "../misc/lv_log.h"
  15:lvgl/src/draw/lv_img_buf.c **** #include "../misc/lv_mem.h"
  16:lvgl/src/draw/lv_img_buf.c **** 
  17:lvgl/src/draw/lv_img_buf.c **** /*********************
  18:lvgl/src/draw/lv_img_buf.c ****  *      DEFINES
  19:lvgl/src/draw/lv_img_buf.c ****  *********************/
  20:lvgl/src/draw/lv_img_buf.c **** 
  21:lvgl/src/draw/lv_img_buf.c **** /**********************
  22:lvgl/src/draw/lv_img_buf.c ****  *      TYPEDEFS
  23:lvgl/src/draw/lv_img_buf.c ****  **********************/
  24:lvgl/src/draw/lv_img_buf.c **** 
  25:lvgl/src/draw/lv_img_buf.c **** /**********************
  26:lvgl/src/draw/lv_img_buf.c ****  *  STATIC PROTOTYPES
  27:lvgl/src/draw/lv_img_buf.c ****  **********************/
  28:lvgl/src/draw/lv_img_buf.c **** 
  29:lvgl/src/draw/lv_img_buf.c **** /**********************
  30:lvgl/src/draw/lv_img_buf.c ****  *  STATIC VARIABLES
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 2


  31:lvgl/src/draw/lv_img_buf.c ****  **********************/
  32:lvgl/src/draw/lv_img_buf.c **** 
  33:lvgl/src/draw/lv_img_buf.c **** /**********************
  34:lvgl/src/draw/lv_img_buf.c ****  *      MACROS
  35:lvgl/src/draw/lv_img_buf.c ****  **********************/
  36:lvgl/src/draw/lv_img_buf.c **** 
  37:lvgl/src/draw/lv_img_buf.c **** /**********************
  38:lvgl/src/draw/lv_img_buf.c ****  *   GLOBAL FUNCTIONS
  39:lvgl/src/draw/lv_img_buf.c ****  **********************/
  40:lvgl/src/draw/lv_img_buf.c **** 
  41:lvgl/src/draw/lv_img_buf.c **** lv_color_t lv_img_buf_get_px_color(const lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t
  42:lvgl/src/draw/lv_img_buf.c **** {
  29              		.loc 1 42 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 42 1 is_stmt 0 view .LVU1
  34 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  35              		.cfi_def_cfa_offset 20
  36              		.cfi_offset 4, -20
  37              		.cfi_offset 5, -16
  38              		.cfi_offset 6, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 83B0     		sub	sp, sp, #12
  42              		.cfi_def_cfa_offset 32
  43 0004 0546     		mov	r5, r0
  44 0006 0C46     		mov	r4, r1
  45 0008 1746     		mov	r7, r2
  43:lvgl/src/draw/lv_img_buf.c ****     lv_color_t p_color = lv_color_black();
  46              		.loc 1 43 5 is_stmt 1 view .LVU2
  47              	.LBB29:
  48              	.LBI29:
  49              		.file 2 "lvgl/src/draw/../misc/lv_color.h"
   1:lvgl/src/draw/../misc/lv_color.h **** /**
   2:lvgl/src/draw/../misc/lv_color.h ****  * @file lv_color.h
   3:lvgl/src/draw/../misc/lv_color.h ****  *
   4:lvgl/src/draw/../misc/lv_color.h ****  */
   5:lvgl/src/draw/../misc/lv_color.h **** 
   6:lvgl/src/draw/../misc/lv_color.h **** #ifndef LV_COLOR_H
   7:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_H
   8:lvgl/src/draw/../misc/lv_color.h **** 
   9:lvgl/src/draw/../misc/lv_color.h **** #ifdef __cplusplus
  10:lvgl/src/draw/../misc/lv_color.h **** extern "C" {
  11:lvgl/src/draw/../misc/lv_color.h **** #endif
  12:lvgl/src/draw/../misc/lv_color.h **** 
  13:lvgl/src/draw/../misc/lv_color.h **** /*********************
  14:lvgl/src/draw/../misc/lv_color.h ****  *      INCLUDES
  15:lvgl/src/draw/../misc/lv_color.h ****  *********************/
  16:lvgl/src/draw/../misc/lv_color.h **** #include "../lv_conf_internal.h"
  17:lvgl/src/draw/../misc/lv_color.h **** #include "lv_assert.h"
  18:lvgl/src/draw/../misc/lv_color.h **** #include "lv_math.h"
  19:lvgl/src/draw/../misc/lv_color.h **** #include "lv_types.h"
  20:lvgl/src/draw/../misc/lv_color.h **** 
  21:lvgl/src/draw/../misc/lv_color.h **** /*Error checking*/
  22:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 24
  23:lvgl/src/draw/../misc/lv_color.h **** #error "LV_COLOR_DEPTH 24 is deprecated. Use LV_COLOR_DEPTH 32 instead (lv_conf.h)"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 3


  24:lvgl/src/draw/../misc/lv_color.h **** #endif
  25:lvgl/src/draw/../misc/lv_color.h **** 
  26:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH != 16 && LV_COLOR_16_SWAP != 0
  27:lvgl/src/draw/../misc/lv_color.h **** #error "LV_COLOR_16_SWAP requires LV_COLOR_DEPTH == 16. Set it in lv_conf.h"
  28:lvgl/src/draw/../misc/lv_color.h **** #endif
  29:lvgl/src/draw/../misc/lv_color.h **** 
  30:lvgl/src/draw/../misc/lv_color.h **** #include <stdint.h>
  31:lvgl/src/draw/../misc/lv_color.h **** 
  32:lvgl/src/draw/../misc/lv_color.h **** /*********************
  33:lvgl/src/draw/../misc/lv_color.h ****  *      DEFINES
  34:lvgl/src/draw/../misc/lv_color.h ****  *********************/
  35:lvgl/src/draw/../misc/lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_DEPTH);
  36:lvgl/src/draw/../misc/lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_16_SWAP);
  37:lvgl/src/draw/../misc/lv_color.h **** 
  38:lvgl/src/draw/../misc/lv_color.h **** /**
  39:lvgl/src/draw/../misc/lv_color.h ****  * Opacity percentages.
  40:lvgl/src/draw/../misc/lv_color.h ****  */
  41:lvgl/src/draw/../misc/lv_color.h **** enum {
  42:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_TRANSP = 0,
  43:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_0      = 0,
  44:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_10     = 25,
  45:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_20     = 51,
  46:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_30     = 76,
  47:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_40     = 102,
  48:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_50     = 127,
  49:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_60     = 153,
  50:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_70     = 178,
  51:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_80     = 204,
  52:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_90     = 229,
  53:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_100    = 255,
  54:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_COVER  = 255,
  55:lvgl/src/draw/../misc/lv_color.h **** };
  56:lvgl/src/draw/../misc/lv_color.h **** 
  57:lvgl/src/draw/../misc/lv_color.h **** #define LV_OPA_MIN 2    /*Opacities below this will be transparent*/
  58:lvgl/src/draw/../misc/lv_color.h **** #define LV_OPA_MAX 253  /*Opacities above this will fully cover*/
  59:lvgl/src/draw/../misc/lv_color.h **** 
  60:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
  61:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SIZE 8
  62:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
  63:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SIZE 8
  64:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
  65:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SIZE 16
  66:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
  67:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SIZE 32
  68:lvgl/src/draw/../misc/lv_color.h **** #else
  69:lvgl/src/draw/../misc/lv_color.h **** #error "Invalid LV_COLOR_DEPTH in lv_conf.h! Set it to 1, 8, 16 or 32!"
  70:lvgl/src/draw/../misc/lv_color.h **** #endif
  71:lvgl/src/draw/../misc/lv_color.h **** 
  72:lvgl/src/draw/../misc/lv_color.h **** #if defined(__cplusplus) && !defined(_LV_COLOR_HAS_MODERN_CPP)
  73:lvgl/src/draw/../misc/lv_color.h **** /**
  74:lvgl/src/draw/../misc/lv_color.h **** * MSVC compiler's definition of the __cplusplus indicating 199711L regardless to C++ standard versi
  75:lvgl/src/draw/../misc/lv_color.h **** * see https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-cplusplus
  76:lvgl/src/draw/../misc/lv_color.h **** * so we use _MSC_VER macro instead of __cplusplus
  77:lvgl/src/draw/../misc/lv_color.h **** */
  78:lvgl/src/draw/../misc/lv_color.h **** #ifdef _MSC_VER
  79:lvgl/src/draw/../misc/lv_color.h **** #if _MSC_VER >= 1900 /*Visual Studio 2015*/
  80:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 4


  81:lvgl/src/draw/../misc/lv_color.h **** #endif
  82:lvgl/src/draw/../misc/lv_color.h **** #else
  83:lvgl/src/draw/../misc/lv_color.h **** #if __cplusplus >= 201103L
  84:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  85:lvgl/src/draw/../misc/lv_color.h **** #endif
  86:lvgl/src/draw/../misc/lv_color.h **** #endif
  87:lvgl/src/draw/../misc/lv_color.h **** #endif /*__cplusplus*/
  88:lvgl/src/draw/../misc/lv_color.h **** 
  89:lvgl/src/draw/../misc/lv_color.h **** #ifndef _LV_COLOR_HAS_MODERN_CPP
  90:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 0
  91:lvgl/src/draw/../misc/lv_color.h **** #endif
  92:lvgl/src/draw/../misc/lv_color.h **** 
  93:lvgl/src/draw/../misc/lv_color.h **** #if _LV_COLOR_HAS_MODERN_CPP
  94:lvgl/src/draw/../misc/lv_color.h **** /*Fix msvc compiler error C4576 inside C++ code*/
  95:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER lv_color_t
  96:lvgl/src/draw/../misc/lv_color.h **** #else
  97:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER (lv_color_t)
  98:lvgl/src/draw/../misc/lv_color.h **** #endif
  99:lvgl/src/draw/../misc/lv_color.h **** 
 100:lvgl/src/draw/../misc/lv_color.h **** /*---------------------------------------
 101:lvgl/src/draw/../misc/lv_color.h ****  * Macros for all existing color depths
 102:lvgl/src/draw/../misc/lv_color.h ****  * to set/get values of the color channels
 103:lvgl/src/draw/../misc/lv_color.h ****  *------------------------------------------*/
 104:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_R1(c, v) (c).ch.red = (uint8_t)((v) & 0x1)
 105:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G1(c, v) (c).ch.green = (uint8_t)((v) & 0x1)
 106:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_B1(c, v) (c).ch.blue = (uint8_t)((v) & 0x1)
 107:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_A1(c, v) do {} while(0)
 108:lvgl/src/draw/../misc/lv_color.h **** 
 109:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_R1(c) (c).ch.red
 110:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G1(c) (c).ch.green
 111:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_B1(c) (c).ch.blue
 112:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_A1(c) 0xFF
 113:lvgl/src/draw/../misc/lv_color.h **** 
 114:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER1 {0x00}
 115:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE1(r8, g8, b8)  {(uint8_t)((b8 >> 7) | (g8 >> 7) | (r8 >> 7))}
 116:lvgl/src/draw/../misc/lv_color.h **** 
 117:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_R8(c, v) (c).ch.red = (uint8_t)((v) & 0x7U)
 118:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G8(c, v) (c).ch.green = (uint8_t)((v) & 0x7U)
 119:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_B8(c, v) (c).ch.blue = (uint8_t)((v) & 0x3U)
 120:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_A8(c, v) do {} while(0)
 121:lvgl/src/draw/../misc/lv_color.h **** 
 122:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_R8(c) (c).ch.red
 123:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G8(c) (c).ch.green
 124:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_B8(c) (c).ch.blue
 125:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_A8(c) 0xFF
 126:lvgl/src/draw/../misc/lv_color.h **** 
 127:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER8 {{0x00, 0x00, 0x00}}
 128:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE8(r8, g8, b8) {{(uint8_t)((b8 >> 6) & 0x3U), (uint8_t)((g8 >> 5) & 0x7U), (ui
 129:lvgl/src/draw/../misc/lv_color.h **** 
 130:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_R16(c, v) (c).ch.red = (uint8_t)((v) & 0x1FU)
 131:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 132:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G16(c, v) (c).ch.green = (uint8_t)((v) & 0x3FU)
 133:lvgl/src/draw/../misc/lv_color.h **** #else
 134:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G16(c, v) {(c).ch.green_h = (uint8_t)(((v) >> 3) & 0x7); (c).ch.green_l = (ui
 135:lvgl/src/draw/../misc/lv_color.h **** #endif
 136:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_B16(c, v) (c).ch.blue = (uint8_t)((v) & 0x1FU)
 137:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_A16(c, v) do {} while(0)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 5


 138:lvgl/src/draw/../misc/lv_color.h **** 
 139:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_R16(c) (c).ch.red
 140:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 141:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G16(c) (c).ch.green
 142:lvgl/src/draw/../misc/lv_color.h **** #else
 143:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G16(c) (((c).ch.green_h << 3) + (c).ch.green_l)
 144:lvgl/src/draw/../misc/lv_color.h **** #endif
 145:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_B16(c) (c).ch.blue
 146:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_A16(c) 0xFF
 147:lvgl/src/draw/../misc/lv_color.h **** 
 148:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 149:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16  {{0x00, 0x00, 0x00}}
 150:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((b8 >> 3) & 0x1FU), (uint8_t)((g8 >> 2) & 0x3FU), 
 151:lvgl/src/draw/../misc/lv_color.h **** #else
 152:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16 {{0x00, 0x00, 0x00, 0x00}}
 153:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((g8 >> 5) & 0x7U), (uint8_t)((r8 >> 3) & 0x1FU), (
 154:lvgl/src/draw/../misc/lv_color.h **** #endif
 155:lvgl/src/draw/../misc/lv_color.h **** 
 156:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_R32(c, v) (c).ch.red = (uint8_t)((v) & 0xFF)
 157:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G32(c, v) (c).ch.green = (uint8_t)((v) & 0xFF)
 158:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_B32(c, v) (c).ch.blue = (uint8_t)((v) & 0xFF)
 159:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_A32(c, v) (c).ch.alpha = (uint8_t)((v) & 0xFF)
 160:lvgl/src/draw/../misc/lv_color.h **** 
 161:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_R32(c) (c).ch.red
 162:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G32(c) (c).ch.green
 163:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_B32(c) (c).ch.blue
 164:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_A32(c) (c).ch.alpha
 165:lvgl/src/draw/../misc/lv_color.h **** 
 166:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER32  {{0x00, 0x00, 0x00, 0x00}}
 167:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE32(r8, g8, b8) {{b8, g8, r8, 0xff}} /*Fix 0xff alpha*/
 168:lvgl/src/draw/../misc/lv_color.h **** 
 169:lvgl/src/draw/../misc/lv_color.h **** /*---------------------------------------
 170:lvgl/src/draw/../misc/lv_color.h ****  * Macros for the current color depth
 171:lvgl/src/draw/../misc/lv_color.h ****  * to set/get values of the color channels
 172:lvgl/src/draw/../misc/lv_color.h ****  *------------------------------------------*/
 173:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SET_R(c, v) LV_CONCAT(LV_COLOR_SET_R, LV_COLOR_DEPTH)(c, v)
 174:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SET_G(c, v) LV_CONCAT(LV_COLOR_SET_G, LV_COLOR_DEPTH)(c, v)
 175:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SET_B(c, v) LV_CONCAT(LV_COLOR_SET_B, LV_COLOR_DEPTH)(c, v)
 176:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SET_A(c, v) LV_CONCAT(LV_COLOR_SET_A, LV_COLOR_DEPTH)(c, v)
 177:lvgl/src/draw/../misc/lv_color.h **** 
 178:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_GET_R(c) LV_CONCAT(LV_COLOR_GET_R, LV_COLOR_DEPTH)(c)
 179:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_GET_G(c) LV_CONCAT(LV_COLOR_GET_G, LV_COLOR_DEPTH)(c)
 180:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_GET_B(c) LV_CONCAT(LV_COLOR_GET_B, LV_COLOR_DEPTH)(c)
 181:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_GET_A(c) LV_CONCAT(LV_COLOR_GET_A, LV_COLOR_DEPTH)(c)
 182:lvgl/src/draw/../misc/lv_color.h **** 
 183:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_ZERO_INITIALIZER LV_CONCAT(_LV_COLOR_ZERO_INITIALIZER, LV_COLOR_DEPTH)
 184:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_MAKE(r8, g8, b8) LV_CONCAT(LV_COLOR_MAKE, LV_COLOR_DEPTH)(r8, g8, b8)
 185:lvgl/src/draw/../misc/lv_color.h **** 
 186:lvgl/src/draw/../misc/lv_color.h **** /**********************
 187:lvgl/src/draw/../misc/lv_color.h ****  *      TYPEDEFS
 188:lvgl/src/draw/../misc/lv_color.h ****  **********************/
 189:lvgl/src/draw/../misc/lv_color.h **** 
 190:lvgl/src/draw/../misc/lv_color.h **** typedef union {
 191:lvgl/src/draw/../misc/lv_color.h ****     uint8_t full; /*must be declared first to set all bits of byte via initializer list*/
 192:lvgl/src/draw/../misc/lv_color.h ****     union {
 193:lvgl/src/draw/../misc/lv_color.h ****         uint8_t blue : 1;
 194:lvgl/src/draw/../misc/lv_color.h ****         uint8_t green : 1;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 6


 195:lvgl/src/draw/../misc/lv_color.h ****         uint8_t red : 1;
 196:lvgl/src/draw/../misc/lv_color.h ****     } ch;
 197:lvgl/src/draw/../misc/lv_color.h **** } lv_color1_t;
 198:lvgl/src/draw/../misc/lv_color.h **** 
 199:lvgl/src/draw/../misc/lv_color.h **** typedef union {
 200:lvgl/src/draw/../misc/lv_color.h ****     struct {
 201:lvgl/src/draw/../misc/lv_color.h ****         uint8_t blue : 2;
 202:lvgl/src/draw/../misc/lv_color.h ****         uint8_t green : 3;
 203:lvgl/src/draw/../misc/lv_color.h ****         uint8_t red : 3;
 204:lvgl/src/draw/../misc/lv_color.h ****     } ch;
 205:lvgl/src/draw/../misc/lv_color.h ****     uint8_t full;
 206:lvgl/src/draw/../misc/lv_color.h **** } lv_color8_t;
 207:lvgl/src/draw/../misc/lv_color.h **** 
 208:lvgl/src/draw/../misc/lv_color.h **** typedef union {
 209:lvgl/src/draw/../misc/lv_color.h ****     struct {
 210:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 211:lvgl/src/draw/../misc/lv_color.h ****         uint16_t blue : 5;
 212:lvgl/src/draw/../misc/lv_color.h ****         uint16_t green : 6;
 213:lvgl/src/draw/../misc/lv_color.h ****         uint16_t red : 5;
 214:lvgl/src/draw/../misc/lv_color.h **** #else
 215:lvgl/src/draw/../misc/lv_color.h ****         uint16_t green_h : 3;
 216:lvgl/src/draw/../misc/lv_color.h ****         uint16_t red : 5;
 217:lvgl/src/draw/../misc/lv_color.h ****         uint16_t blue : 5;
 218:lvgl/src/draw/../misc/lv_color.h ****         uint16_t green_l : 3;
 219:lvgl/src/draw/../misc/lv_color.h **** #endif
 220:lvgl/src/draw/../misc/lv_color.h ****     } ch;
 221:lvgl/src/draw/../misc/lv_color.h ****     uint16_t full;
 222:lvgl/src/draw/../misc/lv_color.h **** } lv_color16_t;
 223:lvgl/src/draw/../misc/lv_color.h **** 
 224:lvgl/src/draw/../misc/lv_color.h **** typedef union {
 225:lvgl/src/draw/../misc/lv_color.h ****     struct {
 226:lvgl/src/draw/../misc/lv_color.h ****         uint8_t blue;
 227:lvgl/src/draw/../misc/lv_color.h ****         uint8_t green;
 228:lvgl/src/draw/../misc/lv_color.h ****         uint8_t red;
 229:lvgl/src/draw/../misc/lv_color.h ****         uint8_t alpha;
 230:lvgl/src/draw/../misc/lv_color.h ****     } ch;
 231:lvgl/src/draw/../misc/lv_color.h ****     uint32_t full;
 232:lvgl/src/draw/../misc/lv_color.h **** } lv_color32_t;
 233:lvgl/src/draw/../misc/lv_color.h **** 
 234:lvgl/src/draw/../misc/lv_color.h **** typedef LV_CONCAT3(uint, LV_COLOR_SIZE, _t) lv_color_int_t;
 235:lvgl/src/draw/../misc/lv_color.h **** typedef LV_CONCAT3(lv_color, LV_COLOR_DEPTH, _t) lv_color_t;
 236:lvgl/src/draw/../misc/lv_color.h **** 
 237:lvgl/src/draw/../misc/lv_color.h **** typedef struct {
 238:lvgl/src/draw/../misc/lv_color.h ****     uint16_t h;
 239:lvgl/src/draw/../misc/lv_color.h ****     uint8_t s;
 240:lvgl/src/draw/../misc/lv_color.h ****     uint8_t v;
 241:lvgl/src/draw/../misc/lv_color.h **** } lv_color_hsv_t;
 242:lvgl/src/draw/../misc/lv_color.h **** 
 243:lvgl/src/draw/../misc/lv_color.h **** //! @cond Doxygen_Suppress
 244:lvgl/src/draw/../misc/lv_color.h **** /*No idea where the guard is required but else throws warnings in the docs*/
 245:lvgl/src/draw/../misc/lv_color.h **** typedef uint8_t lv_opa_t;
 246:lvgl/src/draw/../misc/lv_color.h **** //! @endcond
 247:lvgl/src/draw/../misc/lv_color.h **** 
 248:lvgl/src/draw/../misc/lv_color.h **** struct _lv_color_filter_dsc_t;
 249:lvgl/src/draw/../misc/lv_color.h **** 
 250:lvgl/src/draw/../misc/lv_color.h **** typedef lv_color_t (*lv_color_filter_cb_t)(const struct _lv_color_filter_dsc_t *, lv_color_t, lv_op
 251:lvgl/src/draw/../misc/lv_color.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 7


 252:lvgl/src/draw/../misc/lv_color.h **** typedef struct _lv_color_filter_dsc_t {
 253:lvgl/src/draw/../misc/lv_color.h ****     lv_color_filter_cb_t filter_cb;
 254:lvgl/src/draw/../misc/lv_color.h ****     void * user_data;
 255:lvgl/src/draw/../misc/lv_color.h **** } lv_color_filter_dsc_t;
 256:lvgl/src/draw/../misc/lv_color.h **** 
 257:lvgl/src/draw/../misc/lv_color.h **** typedef enum {
 258:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_RED,
 259:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_PINK,
 260:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_PURPLE,
 261:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_DEEP_PURPLE,
 262:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_INDIGO,
 263:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_BLUE,
 264:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_LIGHT_BLUE,
 265:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_CYAN,
 266:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_TEAL,
 267:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_GREEN,
 268:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_LIGHT_GREEN,
 269:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_LIME,
 270:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_YELLOW,
 271:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_AMBER,
 272:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_ORANGE,
 273:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_DEEP_ORANGE,
 274:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_BROWN,
 275:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_BLUE_GREY,
 276:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_GREY,
 277:lvgl/src/draw/../misc/lv_color.h ****     _LV_PALETTE_LAST,
 278:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_NONE = 0xff,
 279:lvgl/src/draw/../misc/lv_color.h **** } lv_palette_t;
 280:lvgl/src/draw/../misc/lv_color.h **** 
 281:lvgl/src/draw/../misc/lv_color.h **** /**********************
 282:lvgl/src/draw/../misc/lv_color.h ****  * GLOBAL PROTOTYPES
 283:lvgl/src/draw/../misc/lv_color.h ****  **********************/
 284:lvgl/src/draw/../misc/lv_color.h **** 
 285:lvgl/src/draw/../misc/lv_color.h **** /*In color conversations:
 286:lvgl/src/draw/../misc/lv_color.h ****  * - When converting to bigger color type the LSB weight of 1 LSB is calculated
 287:lvgl/src/draw/../misc/lv_color.h ****  *   E.g. 16 bit Red has 5 bits
 288:lvgl/src/draw/../misc/lv_color.h ****  *         8 bit Red has 3 bits
 289:lvgl/src/draw/../misc/lv_color.h ****  *        ----------------------
 290:lvgl/src/draw/../misc/lv_color.h ****  *        8 bit red LSB = (2^5 - 1) / (2^3 - 1) = 31 / 7 = 4
 291:lvgl/src/draw/../misc/lv_color.h ****  *
 292:lvgl/src/draw/../misc/lv_color.h ****  * - When calculating to smaller color type simply shift out the LSBs
 293:lvgl/src/draw/../misc/lv_color.h ****  *   E.g.  8 bit Red has 3 bits
 294:lvgl/src/draw/../misc/lv_color.h ****  *        16 bit Red has 5 bits
 295:lvgl/src/draw/../misc/lv_color.h ****  *        ----------------------
 296:lvgl/src/draw/../misc/lv_color.h ****  *         Shift right with 5 - 3 = 2
 297:lvgl/src/draw/../misc/lv_color.h ****  */
 298:lvgl/src/draw/../misc/lv_color.h **** static inline uint8_t lv_color_to1(lv_color_t color)
 299:lvgl/src/draw/../misc/lv_color.h **** {
 300:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 301:lvgl/src/draw/../misc/lv_color.h ****     return color.full;
 302:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 303:lvgl/src/draw/../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x4) || (LV_COLOR_GET_G(color) & 0x4) || (LV_COLOR_GET_B(color) & 0
 304:lvgl/src/draw/../misc/lv_color.h ****         return 1;
 305:lvgl/src/draw/../misc/lv_color.h ****     }
 306:lvgl/src/draw/../misc/lv_color.h ****     else {
 307:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 308:lvgl/src/draw/../misc/lv_color.h ****     }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 8


 309:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 310:lvgl/src/draw/../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x10) || (LV_COLOR_GET_G(color) & 0x20) || (LV_COLOR_GET_B(color) &
 311:lvgl/src/draw/../misc/lv_color.h ****         return 1;
 312:lvgl/src/draw/../misc/lv_color.h ****     }
 313:lvgl/src/draw/../misc/lv_color.h ****     else {
 314:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 315:lvgl/src/draw/../misc/lv_color.h ****     }
 316:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 317:lvgl/src/draw/../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x80) || (LV_COLOR_GET_G(color) & 0x80) || (LV_COLOR_GET_B(color) &
 318:lvgl/src/draw/../misc/lv_color.h ****         return 1;
 319:lvgl/src/draw/../misc/lv_color.h ****     }
 320:lvgl/src/draw/../misc/lv_color.h ****     else {
 321:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 322:lvgl/src/draw/../misc/lv_color.h ****     }
 323:lvgl/src/draw/../misc/lv_color.h **** #endif
 324:lvgl/src/draw/../misc/lv_color.h **** }
 325:lvgl/src/draw/../misc/lv_color.h **** 
 326:lvgl/src/draw/../misc/lv_color.h **** static inline uint8_t lv_color_to8(lv_color_t color)
 327:lvgl/src/draw/../misc/lv_color.h **** {
 328:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 329:lvgl/src/draw/../misc/lv_color.h ****     if(color.full == 0)
 330:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 331:lvgl/src/draw/../misc/lv_color.h ****     else
 332:lvgl/src/draw/../misc/lv_color.h ****         return 0xFF;
 333:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 334:lvgl/src/draw/../misc/lv_color.h ****     return color.full;
 335:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 336:lvgl/src/draw/../misc/lv_color.h ****     lv_color8_t ret;
 337:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 2); /*5 - 3  = 2*/
 338:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 3); /*6 - 3  = 3*/
 339:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 3); /*5 - 2  = 3*/
 340:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 341:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 342:lvgl/src/draw/../misc/lv_color.h ****     lv_color8_t ret;
 343:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 5); /*8 - 3  = 5*/
 344:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 5); /*8 - 3  = 5*/
 345:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 6); /*8 - 2  = 6*/
 346:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 347:lvgl/src/draw/../misc/lv_color.h **** #endif
 348:lvgl/src/draw/../misc/lv_color.h **** }
 349:lvgl/src/draw/../misc/lv_color.h **** 
 350:lvgl/src/draw/../misc/lv_color.h **** static inline uint16_t lv_color_to16(lv_color_t color)
 351:lvgl/src/draw/../misc/lv_color.h **** {
 352:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 353:lvgl/src/draw/../misc/lv_color.h ****     if(color.full == 0)
 354:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 355:lvgl/src/draw/../misc/lv_color.h ****     else
 356:lvgl/src/draw/../misc/lv_color.h ****         return 0xFFFF;
 357:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 358:lvgl/src/draw/../misc/lv_color.h ****     lv_color16_t ret;
 359:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) * 4);  /*(2^5 - 1)/(2^3 - 1) = 31/7 = 4*/
 360:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) * 9);  /*(2^6 - 1)/(2^3 - 1) = 63/7 = 9*/
 361:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) * 10); /*(2^5 - 1)/(2^2 - 1) = 31/3 = 10*/
 362:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 363:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 364:lvgl/src/draw/../misc/lv_color.h ****     return color.full;
 365:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 9


 366:lvgl/src/draw/../misc/lv_color.h ****     lv_color16_t ret;
 367:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) >> 3); /*8 - 5  = 3*/
 368:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) >> 2); /*8 - 6  = 2*/
 369:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) >> 3); /*8 - 5  = 3*/
 370:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 371:lvgl/src/draw/../misc/lv_color.h **** #endif
 372:lvgl/src/draw/../misc/lv_color.h **** }
 373:lvgl/src/draw/../misc/lv_color.h **** 
 374:lvgl/src/draw/../misc/lv_color.h **** static inline uint32_t lv_color_to32(lv_color_t color)
 375:lvgl/src/draw/../misc/lv_color.h **** {
 376:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 377:lvgl/src/draw/../misc/lv_color.h ****     if(color.full == 0)
 378:lvgl/src/draw/../misc/lv_color.h ****         return 0xFF000000;
 379:lvgl/src/draw/../misc/lv_color.h ****     else
 380:lvgl/src/draw/../misc/lv_color.h ****         return 0xFFFFFFFF;
 381:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 382:lvgl/src/draw/../misc/lv_color.h ****     lv_color32_t ret;
 383:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R32(ret, LV_COLOR_GET_R(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 384:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G32(ret, LV_COLOR_GET_G(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 385:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B32(ret, LV_COLOR_GET_B(color) * 85); /*(2^8 - 1)/(2^2 - 1) = 255/3 = 85*/
 386:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 387:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 388:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 389:lvgl/src/draw/../misc/lv_color.h ****     /**
 390:lvgl/src/draw/../misc/lv_color.h ****      * The floating point math for conversion is:
 391:lvgl/src/draw/../misc/lv_color.h ****      *  valueto = valuefrom * ( (2^bitsto - 1) / (float)(2^bitsfrom - 1) )
 392:lvgl/src/draw/../misc/lv_color.h ****      * The faster integer math for conversion is:
 393:lvgl/src/draw/../misc/lv_color.h ****      *  valueto = ( valuefrom * multiplier + adder ) >> divisor
 394:lvgl/src/draw/../misc/lv_color.h ****      *   multiplier = FLOOR( ( (2^bitsto - 1) << divisor ) / (float)(2^bitsfrom - 1) )
 395:lvgl/src/draw/../misc/lv_color.h ****      *
 396:lvgl/src/draw/../misc/lv_color.h ****      * Find the first divisor where ( adder >> divisor ) <= 0
 397:lvgl/src/draw/../misc/lv_color.h ****      *
 398:lvgl/src/draw/../misc/lv_color.h ****      * 5-bit to 8-bit: ( 31 * multiplier + adder ) >> divisor = 255
 399:lvgl/src/draw/../misc/lv_color.h ****      * divisor  multiplier  adder  min (0)  max (31)
 400:lvgl/src/draw/../misc/lv_color.h ****      *       0           8      7        7       255
 401:lvgl/src/draw/../misc/lv_color.h ****      *       1          16     14        7       255
 402:lvgl/src/draw/../misc/lv_color.h ****      *       2          32     28        7       255
 403:lvgl/src/draw/../misc/lv_color.h ****      *       3          65     25        3       255
 404:lvgl/src/draw/../misc/lv_color.h ****      *       4         131     19        1       255
 405:lvgl/src/draw/../misc/lv_color.h ****      *       5         263      7        0       255
 406:lvgl/src/draw/../misc/lv_color.h ****      *
 407:lvgl/src/draw/../misc/lv_color.h ****      * 6-bit to 8-bit: 255 = ( 63 * multiplier + adder ) >> divisor
 408:lvgl/src/draw/../misc/lv_color.h ****      * divisor  multiplier  adder  min (0)  max (63)
 409:lvgl/src/draw/../misc/lv_color.h ****      *       0           4      3        3       255
 410:lvgl/src/draw/../misc/lv_color.h ****      *       1           8      6        3       255
 411:lvgl/src/draw/../misc/lv_color.h ****      *       2          16     12        3       255
 412:lvgl/src/draw/../misc/lv_color.h ****      *       3          32     24        3       255
 413:lvgl/src/draw/../misc/lv_color.h ****      *       4          64     48        3       255
 414:lvgl/src/draw/../misc/lv_color.h ****      *       5         129     33        1       255
 415:lvgl/src/draw/../misc/lv_color.h ****      *       6         259      3        0       255
 416:lvgl/src/draw/../misc/lv_color.h ****      */
 417:lvgl/src/draw/../misc/lv_color.h **** 
 418:lvgl/src/draw/../misc/lv_color.h ****     lv_color32_t ret;
 419:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 420:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 421:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 422:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 10


 423:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 424:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 425:lvgl/src/draw/../misc/lv_color.h ****     return color.full;
 426:lvgl/src/draw/../misc/lv_color.h **** #endif
 427:lvgl/src/draw/../misc/lv_color.h **** }
 428:lvgl/src/draw/../misc/lv_color.h **** 
 429:lvgl/src/draw/../misc/lv_color.h **** //! @cond Doxygen_Suppress
 430:lvgl/src/draw/../misc/lv_color.h **** 
 431:lvgl/src/draw/../misc/lv_color.h **** /**
 432:lvgl/src/draw/../misc/lv_color.h ****  * Mix two colors with a given ratio.
 433:lvgl/src/draw/../misc/lv_color.h ****  * @param c1 the first color to mix (usually the foreground)
 434:lvgl/src/draw/../misc/lv_color.h ****  * @param c2 the second color to mix (usually the background)
 435:lvgl/src/draw/../misc/lv_color.h ****  * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 436:lvgl/src/draw/../misc/lv_color.h ****  * @return the mixed color
 437:lvgl/src/draw/../misc/lv_color.h ****  */
 438:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t LV_ATTRIBUTE_FAST_MEM lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t m
 439:lvgl/src/draw/../misc/lv_color.h **** {
 440:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t ret;
 441:lvgl/src/draw/../misc/lv_color.h **** 
 442:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 16 && LV_COLOR_MIX_ROUND_OFS == 0
 443:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 1
 444:lvgl/src/draw/../misc/lv_color.h ****     c1.full = c1.full << 8 | c1.full >> 8;
 445:lvgl/src/draw/../misc/lv_color.h ****     c2.full = c2.full << 8 | c2.full >> 8;
 446:lvgl/src/draw/../misc/lv_color.h **** #endif
 447:lvgl/src/draw/../misc/lv_color.h ****     /*Source: https://stackoverflow.com/a/50012418/1999969*/
 448:lvgl/src/draw/../misc/lv_color.h ****     mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 449:lvgl/src/draw/../misc/lv_color.h ****     uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 450:lvgl/src/draw/../misc/lv_color.h ****                   0x7E0F81F; /*0b00000111111000001111100000011111*/
 451:lvgl/src/draw/../misc/lv_color.h ****     uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 452:lvgl/src/draw/../misc/lv_color.h ****     uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 453:lvgl/src/draw/../misc/lv_color.h ****     ret.full = (uint16_t)((result >> 16) | result);
 454:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 1
 455:lvgl/src/draw/../misc/lv_color.h ****     ret.full = ret.full << 8 | ret.full >> 8;
 456:lvgl/src/draw/../misc/lv_color.h **** #endif
 457:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH != 1
 458:lvgl/src/draw/../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 8, 16 or 32*/
 459:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 460:lvgl/src/draw/../misc/lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 461:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 462:lvgl/src/draw/../misc/lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 463:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 464:lvgl/src/draw/../misc/lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 465:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 466:lvgl/src/draw/../misc/lv_color.h **** #else
 467:lvgl/src/draw/../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 468:lvgl/src/draw/../misc/lv_color.h ****     ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 469:lvgl/src/draw/../misc/lv_color.h **** #endif
 470:lvgl/src/draw/../misc/lv_color.h **** 
 471:lvgl/src/draw/../misc/lv_color.h ****     return ret;
 472:lvgl/src/draw/../misc/lv_color.h **** }
 473:lvgl/src/draw/../misc/lv_color.h **** 
 474:lvgl/src/draw/../misc/lv_color.h **** static inline void LV_ATTRIBUTE_FAST_MEM lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out
 475:lvgl/src/draw/../misc/lv_color.h **** {
 476:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH != 1
 477:lvgl/src/draw/../misc/lv_color.h ****     out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 478:lvgl/src/draw/../misc/lv_color.h ****     out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 479:lvgl/src/draw/../misc/lv_color.h ****     out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 11


 480:lvgl/src/draw/../misc/lv_color.h **** #else
 481:lvgl/src/draw/../misc/lv_color.h ****     (void) mix;
 482:lvgl/src/draw/../misc/lv_color.h ****     /*Pre-multiplication can't be used with 1 bpp*/
 483:lvgl/src/draw/../misc/lv_color.h ****     out[0] = LV_COLOR_GET_R(c);
 484:lvgl/src/draw/../misc/lv_color.h ****     out[1] = LV_COLOR_GET_G(c);
 485:lvgl/src/draw/../misc/lv_color.h ****     out[2] = LV_COLOR_GET_B(c);
 486:lvgl/src/draw/../misc/lv_color.h **** #endif
 487:lvgl/src/draw/../misc/lv_color.h **** 
 488:lvgl/src/draw/../misc/lv_color.h **** }
 489:lvgl/src/draw/../misc/lv_color.h **** 
 490:lvgl/src/draw/../misc/lv_color.h **** /**
 491:lvgl/src/draw/../misc/lv_color.h ****  * Mix two colors with a given ratio. It runs faster then `lv_color_mix` but requires some pre comp
 492:lvgl/src/draw/../misc/lv_color.h ****  * @param premult_c1 The first color. Should be preprocessed with `lv_color_premult(c1)`
 493:lvgl/src/draw/../misc/lv_color.h ****  * @param c2 The second color. As it is no pre computation required on it
 494:lvgl/src/draw/../misc/lv_color.h ****  * @param mix The ratio of the colors. 0: full `c1`, 255: full `c2`, 127: half `c1` and half `c2`.
 495:lvgl/src/draw/../misc/lv_color.h ****  *            Should be modified like mix = `255 - mix`
 496:lvgl/src/draw/../misc/lv_color.h ****  * @return the mixed color
 497:lvgl/src/draw/../misc/lv_color.h ****  * @note 255 won't give clearly `c1`.
 498:lvgl/src/draw/../misc/lv_color.h ****  */
 499:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t LV_ATTRIBUTE_FAST_MEM lv_color_mix_premult(uint16_t * premult_c1, lv_color
 500:lvgl/src/draw/../misc/lv_color.h **** {
 501:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t ret;
 502:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH != 1
 503:lvgl/src/draw/../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 8 or 32*/
 504:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OF
 505:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OF
 506:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OF
 507:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 508:lvgl/src/draw/../misc/lv_color.h **** #else
 509:lvgl/src/draw/../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 510:lvgl/src/draw/../misc/lv_color.h ****     /*Restore color1*/
 511:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t c1;
 512:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R(c1, premult_c1[0]);
 513:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G(c1, premult_c1[1]);
 514:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B(c1, premult_c1[2]);
 515:lvgl/src/draw/../misc/lv_color.h ****     ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 516:lvgl/src/draw/../misc/lv_color.h **** #endif
 517:lvgl/src/draw/../misc/lv_color.h **** 
 518:lvgl/src/draw/../misc/lv_color.h ****     return ret;
 519:lvgl/src/draw/../misc/lv_color.h **** }
 520:lvgl/src/draw/../misc/lv_color.h **** 
 521:lvgl/src/draw/../misc/lv_color.h **** /**
 522:lvgl/src/draw/../misc/lv_color.h ****  * Mix two colors. Both color can have alpha value.
 523:lvgl/src/draw/../misc/lv_color.h ****  * @param bg_color background color
 524:lvgl/src/draw/../misc/lv_color.h ****  * @param bg_opa alpha of the background color
 525:lvgl/src/draw/../misc/lv_color.h ****  * @param fg_color foreground color
 526:lvgl/src/draw/../misc/lv_color.h ****  * @param fg_opa alpha of the foreground color
 527:lvgl/src/draw/../misc/lv_color.h ****  * @param res_color the result color
 528:lvgl/src/draw/../misc/lv_color.h ****  * @param res_opa the result opacity
 529:lvgl/src/draw/../misc/lv_color.h ****  */
 530:lvgl/src/draw/../misc/lv_color.h **** static inline void LV_ATTRIBUTE_FAST_MEM lv_color_mix_with_alpha(lv_color_t bg_color, lv_opa_t bg_o
 531:lvgl/src/draw/../misc/lv_color.h ****                                                                  lv_color_t fg_color, lv_opa_t fg_o
 532:lvgl/src/draw/../misc/lv_color.h ****                                                                  lv_color_t * res_color, lv_opa_t *
 533:lvgl/src/draw/../misc/lv_color.h **** {
 534:lvgl/src/draw/../misc/lv_color.h ****     /*Pick the foreground if it's fully opaque or the Background is fully transparent*/
 535:lvgl/src/draw/../misc/lv_color.h ****     if(fg_opa >= LV_OPA_MAX || bg_opa <= LV_OPA_MIN) {
 536:lvgl/src/draw/../misc/lv_color.h ****         res_color->full = fg_color.full;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 12


 537:lvgl/src/draw/../misc/lv_color.h ****         *res_opa = fg_opa;
 538:lvgl/src/draw/../misc/lv_color.h ****     }
 539:lvgl/src/draw/../misc/lv_color.h ****     /*Transparent foreground: use the Background*/
 540:lvgl/src/draw/../misc/lv_color.h ****     else if(fg_opa <= LV_OPA_MIN) {
 541:lvgl/src/draw/../misc/lv_color.h ****         res_color->full = bg_color.full;
 542:lvgl/src/draw/../misc/lv_color.h ****         *res_opa = bg_opa;
 543:lvgl/src/draw/../misc/lv_color.h ****     }
 544:lvgl/src/draw/../misc/lv_color.h ****     /*Opaque background: use simple mix*/
 545:lvgl/src/draw/../misc/lv_color.h ****     else if(bg_opa >= LV_OPA_MAX) {
 546:lvgl/src/draw/../misc/lv_color.h ****         *res_color = lv_color_mix(fg_color, bg_color, fg_opa);
 547:lvgl/src/draw/../misc/lv_color.h ****         *res_opa = LV_OPA_COVER;
 548:lvgl/src/draw/../misc/lv_color.h ****     }
 549:lvgl/src/draw/../misc/lv_color.h ****     /*Both colors have alpha. Expensive calculation need to be applied*/
 550:lvgl/src/draw/../misc/lv_color.h ****     else {
 551:lvgl/src/draw/../misc/lv_color.h ****         /*Save the parameters and the result. If they will be asked again don't compute again*/
 552:lvgl/src/draw/../misc/lv_color.h ****         static lv_opa_t fg_opa_save     = 0;
 553:lvgl/src/draw/../misc/lv_color.h ****         static lv_opa_t bg_opa_save     = 0;
 554:lvgl/src/draw/../misc/lv_color.h ****         static lv_color_t fg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 555:lvgl/src/draw/../misc/lv_color.h ****         static lv_color_t bg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 556:lvgl/src/draw/../misc/lv_color.h ****         static lv_color_t res_color_saved = _LV_COLOR_ZERO_INITIALIZER;
 557:lvgl/src/draw/../misc/lv_color.h ****         static lv_opa_t res_opa_saved = 0;
 558:lvgl/src/draw/../misc/lv_color.h **** 
 559:lvgl/src/draw/../misc/lv_color.h ****         if(fg_opa != fg_opa_save || bg_opa != bg_opa_save || fg_color.full != fg_color_save.full ||
 560:lvgl/src/draw/../misc/lv_color.h ****            bg_color.full != bg_color_save.full) {
 561:lvgl/src/draw/../misc/lv_color.h ****             fg_opa_save        = fg_opa;
 562:lvgl/src/draw/../misc/lv_color.h ****             bg_opa_save        = bg_opa;
 563:lvgl/src/draw/../misc/lv_color.h ****             fg_color_save.full = fg_color.full;
 564:lvgl/src/draw/../misc/lv_color.h ****             bg_color_save.full = bg_color.full;
 565:lvgl/src/draw/../misc/lv_color.h ****             /*Info:
 566:lvgl/src/draw/../misc/lv_color.h ****              * https://en.wikipedia.org/wiki/Alpha_compositing#Analytical_derivation_of_the_over_op
 567:lvgl/src/draw/../misc/lv_color.h ****             res_opa_saved = 255 - ((uint16_t)((uint16_t)(255 - fg_opa) * (255 - bg_opa)) >> 8);
 568:lvgl/src/draw/../misc/lv_color.h ****             LV_ASSERT(res_opa_saved != 0);
 569:lvgl/src/draw/../misc/lv_color.h ****             lv_opa_t ratio = (uint16_t)((uint16_t)fg_opa * 255) / res_opa_saved;
 570:lvgl/src/draw/../misc/lv_color.h ****             res_color_saved = lv_color_mix(fg_color, bg_color, ratio);
 571:lvgl/src/draw/../misc/lv_color.h **** 
 572:lvgl/src/draw/../misc/lv_color.h ****         }
 573:lvgl/src/draw/../misc/lv_color.h **** 
 574:lvgl/src/draw/../misc/lv_color.h ****         res_color->full = res_color_saved.full;
 575:lvgl/src/draw/../misc/lv_color.h ****         *res_opa = res_opa_saved;
 576:lvgl/src/draw/../misc/lv_color.h ****     }
 577:lvgl/src/draw/../misc/lv_color.h **** }
 578:lvgl/src/draw/../misc/lv_color.h **** 
 579:lvgl/src/draw/../misc/lv_color.h **** //! @endcond
 580:lvgl/src/draw/../misc/lv_color.h **** 
 581:lvgl/src/draw/../misc/lv_color.h **** /**
 582:lvgl/src/draw/../misc/lv_color.h ****  * Get the brightness of a color
 583:lvgl/src/draw/../misc/lv_color.h ****  * @param color a color
 584:lvgl/src/draw/../misc/lv_color.h ****  * @return the brightness [0..255]
 585:lvgl/src/draw/../misc/lv_color.h ****  */
 586:lvgl/src/draw/../misc/lv_color.h **** static inline uint8_t lv_color_brightness(lv_color_t color)
 587:lvgl/src/draw/../misc/lv_color.h **** {
 588:lvgl/src/draw/../misc/lv_color.h ****     lv_color32_t c32;
 589:lvgl/src/draw/../misc/lv_color.h ****     c32.full        = lv_color_to32(color);
 590:lvgl/src/draw/../misc/lv_color.h ****     uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR
 591:lvgl/src/draw/../misc/lv_color.h ****     return (uint8_t)(bright >> 3);
 592:lvgl/src/draw/../misc/lv_color.h **** }
 593:lvgl/src/draw/../misc/lv_color.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 13


 594:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
 595:lvgl/src/draw/../misc/lv_color.h **** {
 596:lvgl/src/draw/../misc/lv_color.h ****     return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 597:lvgl/src/draw/../misc/lv_color.h **** }
 598:lvgl/src/draw/../misc/lv_color.h **** 
 599:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_hex(uint32_t c)
 600:lvgl/src/draw/../misc/lv_color.h **** {
 601:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 16
 602:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t r;
 603:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 604:lvgl/src/draw/../misc/lv_color.h ****     /* Convert a 4 bytes per pixel in format ARGB32 to R5G6B5 format
 605:lvgl/src/draw/../misc/lv_color.h ****         naive way (by calling lv_color_make with components):
 606:lvgl/src/draw/../misc/lv_color.h ****                     r = ((c & 0xFF0000) >> 19)
 607:lvgl/src/draw/../misc/lv_color.h ****                     g = ((c & 0xFF00) >> 10)
 608:lvgl/src/draw/../misc/lv_color.h ****                     b = ((c & 0xFF) >> 3)
 609:lvgl/src/draw/../misc/lv_color.h ****                     rgb565 = (r << 11) | (g << 5) | b
 610:lvgl/src/draw/../misc/lv_color.h ****         That's 3 mask, 5 bitshift and 2 or operations
 611:lvgl/src/draw/../misc/lv_color.h **** 
 612:lvgl/src/draw/../misc/lv_color.h ****         A bit better:
 613:lvgl/src/draw/../misc/lv_color.h ****                     r = ((c & 0xF80000) >> 8)
 614:lvgl/src/draw/../misc/lv_color.h ****                     g = ((c & 0xFC00) >> 5)
 615:lvgl/src/draw/../misc/lv_color.h ****                     b = ((c & 0xFF) >> 3)
 616:lvgl/src/draw/../misc/lv_color.h ****                     rgb565 = r | g | b
 617:lvgl/src/draw/../misc/lv_color.h ****         That's 3 mask, 3 bitshifts and 2 or operations */
 618:lvgl/src/draw/../misc/lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 8) | ((c & 0xFC00) >> 5) | ((c & 0xFF) >> 3));
 619:lvgl/src/draw/../misc/lv_color.h **** #else
 620:lvgl/src/draw/../misc/lv_color.h ****     /* We want: rrrr rrrr GGGg gggg bbbb bbbb => gggb bbbb rrrr rGGG */
 621:lvgl/src/draw/../misc/lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 16) | ((c & 0xFC00) >> 13) | ((c & 0x1C00) << 3) | ((c &
 622:lvgl/src/draw/../misc/lv_color.h **** #endif
 623:lvgl/src/draw/../misc/lv_color.h ****     return r;
 624:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 625:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t r;
 626:lvgl/src/draw/../misc/lv_color.h ****     r.full = c | 0xFF000000;
 627:lvgl/src/draw/../misc/lv_color.h ****     return r;
 628:lvgl/src/draw/../misc/lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 629:lvgl/src/draw/../misc/lv_color.h ****     return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xF
 630:lvgl/src/draw/../misc/lv_color.h **** #endif
 631:lvgl/src/draw/../misc/lv_color.h **** }
 632:lvgl/src/draw/../misc/lv_color.h **** 
 633:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_hex3(uint32_t c)
 634:lvgl/src/draw/../misc/lv_color.h **** {
 635:lvgl/src/draw/../misc/lv_color.h ****     return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((
 636:lvgl/src/draw/../misc/lv_color.h ****                          (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 637:lvgl/src/draw/../misc/lv_color.h **** }
 638:lvgl/src/draw/../misc/lv_color.h **** 
 639:lvgl/src/draw/../misc/lv_color.h **** static inline void lv_color_filter_dsc_init(lv_color_filter_dsc_t * dsc, lv_color_filter_cb_t cb)
 640:lvgl/src/draw/../misc/lv_color.h **** {
 641:lvgl/src/draw/../misc/lv_color.h ****     dsc->filter_cb = cb;
 642:lvgl/src/draw/../misc/lv_color.h **** }
 643:lvgl/src/draw/../misc/lv_color.h **** 
 644:lvgl/src/draw/../misc/lv_color.h **** //! @cond Doxygen_Suppress
 645:lvgl/src/draw/../misc/lv_color.h **** //!
 646:lvgl/src/draw/../misc/lv_color.h **** void /* LV_ATTRIBUTE_FAST_MEM */ lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
 647:lvgl/src/draw/../misc/lv_color.h **** 
 648:lvgl/src/draw/../misc/lv_color.h **** //! @endcond
 649:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl);
 650:lvgl/src/draw/../misc/lv_color.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 14


 651:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl);
 652:lvgl/src/draw/../misc/lv_color.h **** 
 653:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_color_change_lightness(lv_color_t c, lv_opa_t lvl);
 654:lvgl/src/draw/../misc/lv_color.h **** 
 655:lvgl/src/draw/../misc/lv_color.h **** /**
 656:lvgl/src/draw/../misc/lv_color.h ****  * Convert a HSV color to RGB
 657:lvgl/src/draw/../misc/lv_color.h ****  * @param h hue [0..359]
 658:lvgl/src/draw/../misc/lv_color.h ****  * @param s saturation [0..100]
 659:lvgl/src/draw/../misc/lv_color.h ****  * @param v value [0..100]
 660:lvgl/src/draw/../misc/lv_color.h ****  * @return the given RGB color in RGB (with LV_COLOR_DEPTH depth)
 661:lvgl/src/draw/../misc/lv_color.h ****  */
 662:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v);
 663:lvgl/src/draw/../misc/lv_color.h **** 
 664:lvgl/src/draw/../misc/lv_color.h **** /**
 665:lvgl/src/draw/../misc/lv_color.h ****  * Convert a 32-bit RGB color to HSV
 666:lvgl/src/draw/../misc/lv_color.h ****  * @param r8 8-bit red
 667:lvgl/src/draw/../misc/lv_color.h ****  * @param g8 8-bit green
 668:lvgl/src/draw/../misc/lv_color.h ****  * @param b8 8-bit blue
 669:lvgl/src/draw/../misc/lv_color.h ****  * @return the given RGB color in HSV
 670:lvgl/src/draw/../misc/lv_color.h ****  */
 671:lvgl/src/draw/../misc/lv_color.h **** lv_color_hsv_t lv_color_rgb_to_hsv(uint8_t r8, uint8_t g8, uint8_t b8);
 672:lvgl/src/draw/../misc/lv_color.h **** 
 673:lvgl/src/draw/../misc/lv_color.h **** /**
 674:lvgl/src/draw/../misc/lv_color.h ****  * Convert a color to HSV
 675:lvgl/src/draw/../misc/lv_color.h ****  * @param color color
 676:lvgl/src/draw/../misc/lv_color.h ****  * @return the given color in HSV
 677:lvgl/src/draw/../misc/lv_color.h ****  */
 678:lvgl/src/draw/../misc/lv_color.h **** lv_color_hsv_t lv_color_to_hsv(lv_color_t color);
 679:lvgl/src/draw/../misc/lv_color.h **** 
 680:lvgl/src/draw/../misc/lv_color.h **** /**
 681:lvgl/src/draw/../misc/lv_color.h ****  * Just a wrapper around LV_COLOR_CHROMA_KEY because it might be more convenient to use a function 
 682:lvgl/src/draw/../misc/lv_color.h ****  * @return LV_COLOR_CHROMA_KEY
 683:lvgl/src/draw/../misc/lv_color.h ****  */
 684:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_chroma_key(void)
 685:lvgl/src/draw/../misc/lv_color.h **** {
 686:lvgl/src/draw/../misc/lv_color.h ****     return LV_COLOR_CHROMA_KEY;
 687:lvgl/src/draw/../misc/lv_color.h **** }
 688:lvgl/src/draw/../misc/lv_color.h **** 
 689:lvgl/src/draw/../misc/lv_color.h **** /**********************
 690:lvgl/src/draw/../misc/lv_color.h ****  *  PREDEFINED COLORS
 691:lvgl/src/draw/../misc/lv_color.h ****  **********************/
 692:lvgl/src/draw/../misc/lv_color.h **** /*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/
 693:lvgl/src/draw/../misc/lv_color.h **** 
 694:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_palette_main(lv_palette_t p);
 695:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_white(void)
 696:lvgl/src/draw/../misc/lv_color.h **** {
 697:lvgl/src/draw/../misc/lv_color.h ****     return lv_color_make(0xff, 0xff, 0xff);
 698:lvgl/src/draw/../misc/lv_color.h **** }
 699:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_black(void)
  50              		.loc 2 699 26 view .LVU3
  51              	.LBE29:
 700:lvgl/src/draw/../misc/lv_color.h **** {
 701:lvgl/src/draw/../misc/lv_color.h ****     return lv_color_make(0x00, 0x0, 0x00);
  52              		.loc 2 701 5 view .LVU4
  53              	.LVL1:
  54              	.LBB32:
  55              	.LBB30:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 15


  56              	.LBI30:
 594:lvgl/src/draw/../misc/lv_color.h **** {
  57              		.loc 2 594 26 view .LVU5
  58              	.LBB31:
 596:lvgl/src/draw/../misc/lv_color.h **** }
  59              		.loc 2 596 5 view .LVU6
 596:lvgl/src/draw/../misc/lv_color.h **** }
  60              		.loc 2 596 12 is_stmt 0 view .LVU7
  61 000a 0021     		movs	r1, #0
  62              	.LVL2:
 596:lvgl/src/draw/../misc/lv_color.h **** }
  63              		.loc 2 596 12 view .LVU8
  64 000c 6FF30701 		bfc	r1, #0, #8
  65 0010 6FF30F21 		bfc	r1, #8, #8
  66 0014 6FF31741 		bfc	r1, #16, #8
  67 0018 41F07F41 		orr	r1, r1, #-16777216
  68              	.LVL3:
 596:lvgl/src/draw/../misc/lv_color.h **** }
  69              		.loc 2 596 12 view .LVU9
  70              	.LBE31:
  71              	.LBE30:
  72              	.LBE32:
  73              		.loc 1 43 26 view .LVU10
  74 001c 0191     		str	r1, [sp, #4]
  44:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf_u8 = (uint8_t *)dsc->data;
  75              		.loc 1 44 5 is_stmt 1 view .LVU11
  76              		.loc 1 44 15 is_stmt 0 view .LVU12
  77 001e 8668     		ldr	r6, [r0, #8]
  78              	.LVL4:
  45:lvgl/src/draw/lv_img_buf.c **** 
  46:lvgl/src/draw/lv_img_buf.c ****     if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYE
  79              		.loc 1 46 5 is_stmt 1 view .LVU13
  80              		.loc 1 46 23 is_stmt 0 view .LVU14
  81 0020 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
  82              		.loc 1 46 47 view .LVU15
  83 0022 01F01F01 		and	r1, r1, #31
  84              		.loc 1 46 7 view .LVU16
  85 0026 0629     		cmp	r1, #6
  86 0028 18BF     		it	ne
  87 002a 0429     		cmpne	r1, #4
  88 002c 12D0     		beq	.L2
  89              		.loc 1 46 102 discriminator 1 view .LVU17
  90 002e 0529     		cmp	r1, #5
  91 0030 10D0     		beq	.L2
  47:lvgl/src/draw/lv_img_buf.c ****        dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA || dsc->header.cf == LV_IMG_CF_RGB565A8) {
  92              		.loc 1 47 53 view .LVU18
  93 0032 1429     		cmp	r1, #20
  94 0034 0ED0     		beq	.L2
  48:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
  49:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
  50:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
  51:lvgl/src/draw/lv_img_buf.c **** #if LV_COLOR_SIZE == 32
  52:lvgl/src/draw/lv_img_buf.c ****         p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
  53:lvgl/src/draw/lv_img_buf.c **** #endif
  54:lvgl/src/draw/lv_img_buf.c ****     }
  55:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
  95              		.loc 1 55 10 is_stmt 1 view .LVU19
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 16


  96              		.loc 1 55 12 is_stmt 0 view .LVU20
  97 0036 0729     		cmp	r1, #7
  98 0038 2DD0     		beq	.L12
  56:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += 4 * 2;
  57:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
  58:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
  59:lvgl/src/draw/lv_img_buf.c **** 
  60:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
  61:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
  62:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 8, 16, 24 ...*/
  63:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
  64:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  65:lvgl/src/draw/lv_img_buf.c ****     }
  66:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
  99              		.loc 1 66 10 is_stmt 1 view .LVU21
 100              		.loc 1 66 12 is_stmt 0 view .LVU22
 101 003a 0829     		cmp	r1, #8
 102 003c 40D0     		beq	.L13
  67:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += 4 * 4;
  68:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
  69:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
  70:lvgl/src/draw/lv_img_buf.c **** 
  71:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
  72:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
  73:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 4, 8, 12 ...*/
  74:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
  75:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  76:lvgl/src/draw/lv_img_buf.c ****     }
  77:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 103              		.loc 1 77 10 is_stmt 1 view .LVU23
 104              		.loc 1 77 12 is_stmt 0 view .LVU24
 105 003e 0929     		cmp	r1, #9
 106 0040 55D0     		beq	.L14
  78:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += 4 * 16;
  79:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
  80:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
  81:lvgl/src/draw/lv_img_buf.c **** 
  82:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
  83:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
  84:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 2, 4, 6 ...*/
  85:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
  86:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  87:lvgl/src/draw/lv_img_buf.c ****     }
  88:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 107              		.loc 1 88 10 is_stmt 1 view .LVU25
 108              		.loc 1 88 12 is_stmt 0 view .LVU26
 109 0042 0A29     		cmp	r1, #10
 110 0044 6BD0     		beq	.L15
  89:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += 4 * 256;
  90:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = dsc->header.w * y + x;
  91:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
  92:lvgl/src/draw/lv_img_buf.c ****     }
  93:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 111              		.loc 1 93 10 is_stmt 1 view .LVU27
  94:lvgl/src/draw/lv_img_buf.c ****             dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 112              		.loc 1 94 52 is_stmt 0 view .LVU28
 113 0046 A1F10B02 		sub	r2, r1, #11
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 17


 114              	.LVL5:
 115              		.loc 1 94 52 view .LVU29
 116 004a D2B2     		uxtb	r2, r2
  93:lvgl/src/draw/lv_img_buf.c ****             dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 117              		.loc 1 93 12 view .LVU30
 118 004c 032A     		cmp	r2, #3
 119 004e 1FD8     		bhi	.L6
  95:lvgl/src/draw/lv_img_buf.c ****         p_color = color;
 120              		.loc 1 95 9 is_stmt 1 view .LVU31
 121              		.loc 1 95 17 is_stmt 0 view .LVU32
 122 0050 0193     		str	r3, [sp, #4]
 123 0052 1DE0     		b	.L6
 124              	.LVL6:
 125              	.L2:
 126              	.LBB33:
  48:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 127              		.loc 1 48 9 is_stmt 1 view .LVU33
  48:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 128              		.loc 1 48 60 is_stmt 0 view .LVU34
 129 0054 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 130              	.LVL7:
  48:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 131              		.loc 1 48 27 view .LVU35
 132 0056 00F01F00 		and	r0, r0, #31
 133 005a FFF7FEFF 		bl	lv_img_cf_get_px_size
 134              	.LVL8:
  48:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 135              		.loc 1 48 17 view .LVU36
 136 005e C0F3C700 		ubfx	r0, r0, #3, #8
 137              	.LVL9:
  49:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 138              		.loc 1 49 9 is_stmt 1 view .LVU37
  49:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 139              		.loc 1 49 38 is_stmt 0 view .LVU38
 140 0062 2B68     		ldr	r3, [r5]
 141 0064 C3F38A23 		ubfx	r3, r3, #10, #11
  49:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 142              		.loc 1 49 41 view .LVU39
 143 0068 07FB03F3 		mul	r3, r7, r3
  49:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 144              		.loc 1 49 59 view .LVU40
 145 006c 00FB04F2 		mul	r2, r0, r4
  49:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 146              		.loc 1 49 55 view .LVU41
 147 0070 00FB0322 		mla	r2, r0, r3, r2
 148              	.LVL10:
  50:lvgl/src/draw/lv_img_buf.c **** #if LV_COLOR_SIZE == 32
 149              		.loc 1 50 9 is_stmt 1 view .LVU42
  50:lvgl/src/draw/lv_img_buf.c **** #if LV_COLOR_SIZE == 32
 150              		.loc 1 50 35 is_stmt 0 view .LVU43
 151 0074 3244     		add	r2, r2, r6
 152              	.LVL11:
 153              	.LBB34:
 154              	.LBI34:
 155              		.file 3 "lvgl/src/draw/../misc/lv_mem.h"
   1:lvgl/src/draw/../misc/lv_mem.h **** /**
   2:lvgl/src/draw/../misc/lv_mem.h ****  * @file lv_mem.h
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 18


   3:lvgl/src/draw/../misc/lv_mem.h ****  *
   4:lvgl/src/draw/../misc/lv_mem.h ****  */
   5:lvgl/src/draw/../misc/lv_mem.h **** 
   6:lvgl/src/draw/../misc/lv_mem.h **** #ifndef LV_MEM_H
   7:lvgl/src/draw/../misc/lv_mem.h **** #define LV_MEM_H
   8:lvgl/src/draw/../misc/lv_mem.h **** 
   9:lvgl/src/draw/../misc/lv_mem.h **** #ifdef __cplusplus
  10:lvgl/src/draw/../misc/lv_mem.h **** extern "C" {
  11:lvgl/src/draw/../misc/lv_mem.h **** #endif
  12:lvgl/src/draw/../misc/lv_mem.h **** 
  13:lvgl/src/draw/../misc/lv_mem.h **** /*********************
  14:lvgl/src/draw/../misc/lv_mem.h ****  *      INCLUDES
  15:lvgl/src/draw/../misc/lv_mem.h ****  *********************/
  16:lvgl/src/draw/../misc/lv_mem.h **** #include "../lv_conf_internal.h"
  17:lvgl/src/draw/../misc/lv_mem.h **** 
  18:lvgl/src/draw/../misc/lv_mem.h **** #include <stdint.h>
  19:lvgl/src/draw/../misc/lv_mem.h **** #include <stddef.h>
  20:lvgl/src/draw/../misc/lv_mem.h **** #include <string.h>
  21:lvgl/src/draw/../misc/lv_mem.h **** 
  22:lvgl/src/draw/../misc/lv_mem.h **** #include "lv_types.h"
  23:lvgl/src/draw/../misc/lv_mem.h **** 
  24:lvgl/src/draw/../misc/lv_mem.h **** /*********************
  25:lvgl/src/draw/../misc/lv_mem.h ****  *      DEFINES
  26:lvgl/src/draw/../misc/lv_mem.h ****  *********************/
  27:lvgl/src/draw/../misc/lv_mem.h **** 
  28:lvgl/src/draw/../misc/lv_mem.h **** /**********************
  29:lvgl/src/draw/../misc/lv_mem.h ****  *      TYPEDEFS
  30:lvgl/src/draw/../misc/lv_mem.h ****  **********************/
  31:lvgl/src/draw/../misc/lv_mem.h **** 
  32:lvgl/src/draw/../misc/lv_mem.h **** /**
  33:lvgl/src/draw/../misc/lv_mem.h ****  * Heap information structure.
  34:lvgl/src/draw/../misc/lv_mem.h ****  */
  35:lvgl/src/draw/../misc/lv_mem.h **** typedef struct {
  36:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t total_size; /**< Total heap size*/
  37:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t free_cnt;
  38:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t free_size; /**< Size of available memory*/
  39:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t free_biggest_size;
  40:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t used_cnt;
  41:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t max_used; /**< Max size of Heap memory used*/
  42:lvgl/src/draw/../misc/lv_mem.h ****     uint8_t used_pct; /**< Percentage used*/
  43:lvgl/src/draw/../misc/lv_mem.h ****     uint8_t frag_pct; /**< Amount of fragmentation*/
  44:lvgl/src/draw/../misc/lv_mem.h **** } lv_mem_monitor_t;
  45:lvgl/src/draw/../misc/lv_mem.h **** 
  46:lvgl/src/draw/../misc/lv_mem.h **** typedef struct {
  47:lvgl/src/draw/../misc/lv_mem.h ****     void * p;
  48:lvgl/src/draw/../misc/lv_mem.h ****     uint16_t size;
  49:lvgl/src/draw/../misc/lv_mem.h ****     uint8_t used : 1;
  50:lvgl/src/draw/../misc/lv_mem.h **** } lv_mem_buf_t;
  51:lvgl/src/draw/../misc/lv_mem.h **** 
  52:lvgl/src/draw/../misc/lv_mem.h **** typedef lv_mem_buf_t lv_mem_buf_arr_t[LV_MEM_BUF_MAX_NUM];
  53:lvgl/src/draw/../misc/lv_mem.h **** 
  54:lvgl/src/draw/../misc/lv_mem.h **** /**********************
  55:lvgl/src/draw/../misc/lv_mem.h ****  * GLOBAL PROTOTYPES
  56:lvgl/src/draw/../misc/lv_mem.h ****  **********************/
  57:lvgl/src/draw/../misc/lv_mem.h **** 
  58:lvgl/src/draw/../misc/lv_mem.h **** /**
  59:lvgl/src/draw/../misc/lv_mem.h ****  * Initialize the dyn_mem module (work memory and other variables)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 19


  60:lvgl/src/draw/../misc/lv_mem.h ****  */
  61:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_init(void);
  62:lvgl/src/draw/../misc/lv_mem.h **** 
  63:lvgl/src/draw/../misc/lv_mem.h **** /**
  64:lvgl/src/draw/../misc/lv_mem.h ****  * Clean up the memory buffer which frees all the allocated memories.
  65:lvgl/src/draw/../misc/lv_mem.h ****  * @note It work only if `LV_MEM_CUSTOM == 0`
  66:lvgl/src/draw/../misc/lv_mem.h ****  */
  67:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_deinit(void);
  68:lvgl/src/draw/../misc/lv_mem.h **** 
  69:lvgl/src/draw/../misc/lv_mem.h **** /**
  70:lvgl/src/draw/../misc/lv_mem.h ****  * Allocate a memory dynamically
  71:lvgl/src/draw/../misc/lv_mem.h ****  * @param size size of the memory to allocate in bytes
  72:lvgl/src/draw/../misc/lv_mem.h ****  * @return pointer to the allocated memory
  73:lvgl/src/draw/../misc/lv_mem.h ****  */
  74:lvgl/src/draw/../misc/lv_mem.h **** void * lv_mem_alloc(size_t size);
  75:lvgl/src/draw/../misc/lv_mem.h **** 
  76:lvgl/src/draw/../misc/lv_mem.h **** /**
  77:lvgl/src/draw/../misc/lv_mem.h ****  * Free an allocated data
  78:lvgl/src/draw/../misc/lv_mem.h ****  * @param data pointer to an allocated memory
  79:lvgl/src/draw/../misc/lv_mem.h ****  */
  80:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_free(void * data);
  81:lvgl/src/draw/../misc/lv_mem.h **** 
  82:lvgl/src/draw/../misc/lv_mem.h **** /**
  83:lvgl/src/draw/../misc/lv_mem.h ****  * Reallocate a memory with a new size. The old content will be kept.
  84:lvgl/src/draw/../misc/lv_mem.h ****  * @param data pointer to an allocated memory.
  85:lvgl/src/draw/../misc/lv_mem.h ****  * Its content will be copied to the new memory block and freed
  86:lvgl/src/draw/../misc/lv_mem.h ****  * @param new_size the desired new size in byte
  87:lvgl/src/draw/../misc/lv_mem.h ****  * @return pointer to the new memory, NULL on failure
  88:lvgl/src/draw/../misc/lv_mem.h ****  */
  89:lvgl/src/draw/../misc/lv_mem.h **** void * lv_mem_realloc(void * data_p, size_t new_size);
  90:lvgl/src/draw/../misc/lv_mem.h **** 
  91:lvgl/src/draw/../misc/lv_mem.h **** /**
  92:lvgl/src/draw/../misc/lv_mem.h ****  *
  93:lvgl/src/draw/../misc/lv_mem.h ****  * @return
  94:lvgl/src/draw/../misc/lv_mem.h ****  */
  95:lvgl/src/draw/../misc/lv_mem.h **** lv_res_t lv_mem_test(void);
  96:lvgl/src/draw/../misc/lv_mem.h **** 
  97:lvgl/src/draw/../misc/lv_mem.h **** /**
  98:lvgl/src/draw/../misc/lv_mem.h ****  * Give information about the work memory of dynamic allocation
  99:lvgl/src/draw/../misc/lv_mem.h ****  * @param mon_p pointer to a lv_mem_monitor_t variable,
 100:lvgl/src/draw/../misc/lv_mem.h ****  *              the result of the analysis will be stored here
 101:lvgl/src/draw/../misc/lv_mem.h ****  */
 102:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_monitor(lv_mem_monitor_t * mon_p);
 103:lvgl/src/draw/../misc/lv_mem.h **** 
 104:lvgl/src/draw/../misc/lv_mem.h **** /**
 105:lvgl/src/draw/../misc/lv_mem.h ****  * Get a temporal buffer with the given size.
 106:lvgl/src/draw/../misc/lv_mem.h ****  * @param size the required size
 107:lvgl/src/draw/../misc/lv_mem.h ****  */
 108:lvgl/src/draw/../misc/lv_mem.h **** void * lv_mem_buf_get(uint32_t size);
 109:lvgl/src/draw/../misc/lv_mem.h **** 
 110:lvgl/src/draw/../misc/lv_mem.h **** /**
 111:lvgl/src/draw/../misc/lv_mem.h ****  * Release a memory buffer
 112:lvgl/src/draw/../misc/lv_mem.h ****  * @param p buffer to release
 113:lvgl/src/draw/../misc/lv_mem.h ****  */
 114:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_buf_release(void * p);
 115:lvgl/src/draw/../misc/lv_mem.h **** 
 116:lvgl/src/draw/../misc/lv_mem.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 20


 117:lvgl/src/draw/../misc/lv_mem.h ****  * Free all memory buffers
 118:lvgl/src/draw/../misc/lv_mem.h ****  */
 119:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_buf_free_all(void);
 120:lvgl/src/draw/../misc/lv_mem.h **** 
 121:lvgl/src/draw/../misc/lv_mem.h **** //! @cond Doxygen_Suppress
 122:lvgl/src/draw/../misc/lv_mem.h **** 
 123:lvgl/src/draw/../misc/lv_mem.h **** #if LV_MEMCPY_MEMSET_STD
 124:lvgl/src/draw/../misc/lv_mem.h **** 
 125:lvgl/src/draw/../misc/lv_mem.h **** /**
 126:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memcpy
 127:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 128:lvgl/src/draw/../misc/lv_mem.h ****  * @param src pointer to the source buffer
 129:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to copy
 130:lvgl/src/draw/../misc/lv_mem.h ****  */
 131:lvgl/src/draw/../misc/lv_mem.h **** static inline void * lv_memcpy(void * dst, const void * src, size_t len)
 132:lvgl/src/draw/../misc/lv_mem.h **** {
 133:lvgl/src/draw/../misc/lv_mem.h ****     return memcpy(dst, src, len);
 134:lvgl/src/draw/../misc/lv_mem.h **** }
 135:lvgl/src/draw/../misc/lv_mem.h **** 
 136:lvgl/src/draw/../misc/lv_mem.h **** /**
 137:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memcpy
 138:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 139:lvgl/src/draw/../misc/lv_mem.h ****  * @param src pointer to the source buffer
 140:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to copy
 141:lvgl/src/draw/../misc/lv_mem.h ****  */
 142:lvgl/src/draw/../misc/lv_mem.h **** static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
 143:lvgl/src/draw/../misc/lv_mem.h **** {
 144:lvgl/src/draw/../misc/lv_mem.h ****     return memcpy(dst, src, len);
 145:lvgl/src/draw/../misc/lv_mem.h **** }
 146:lvgl/src/draw/../misc/lv_mem.h **** 
 147:lvgl/src/draw/../misc/lv_mem.h **** /**
 148:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memset
 149:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 150:lvgl/src/draw/../misc/lv_mem.h ****  * @param v value to set [0..255]
 151:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to set
 152:lvgl/src/draw/../misc/lv_mem.h ****  */
 153:lvgl/src/draw/../misc/lv_mem.h **** static inline void lv_memset(void * dst, uint8_t v, size_t len)
 154:lvgl/src/draw/../misc/lv_mem.h **** {
 155:lvgl/src/draw/../misc/lv_mem.h ****     memset(dst, v, len);
 156:lvgl/src/draw/../misc/lv_mem.h **** }
 157:lvgl/src/draw/../misc/lv_mem.h **** 
 158:lvgl/src/draw/../misc/lv_mem.h **** /**
 159:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memset with fixed 0x00 value
 160:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 161:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to set
 162:lvgl/src/draw/../misc/lv_mem.h ****  */
 163:lvgl/src/draw/../misc/lv_mem.h **** static inline void lv_memset_00(void * dst, size_t len)
 164:lvgl/src/draw/../misc/lv_mem.h **** {
 165:lvgl/src/draw/../misc/lv_mem.h ****     memset(dst, 0x00, len);
 166:lvgl/src/draw/../misc/lv_mem.h **** }
 167:lvgl/src/draw/../misc/lv_mem.h **** 
 168:lvgl/src/draw/../misc/lv_mem.h **** /**
 169:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memset with fixed 0xFF value
 170:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 171:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to set
 172:lvgl/src/draw/../misc/lv_mem.h ****  */
 173:lvgl/src/draw/../misc/lv_mem.h **** static inline void lv_memset_ff(void * dst, size_t len)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 21


 174:lvgl/src/draw/../misc/lv_mem.h **** {
 175:lvgl/src/draw/../misc/lv_mem.h ****     memset(dst, 0xFF, len);
 176:lvgl/src/draw/../misc/lv_mem.h **** }
 177:lvgl/src/draw/../misc/lv_mem.h **** 
 178:lvgl/src/draw/../misc/lv_mem.h **** #else
 179:lvgl/src/draw/../misc/lv_mem.h **** /**
 180:lvgl/src/draw/../misc/lv_mem.h ****  * Same as `memcpy` but optimized for 4 byte operation.
 181:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 182:lvgl/src/draw/../misc/lv_mem.h ****  * @param src pointer to the source buffer
 183:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to copy
 184:lvgl/src/draw/../misc/lv_mem.h ****  */
 185:lvgl/src/draw/../misc/lv_mem.h **** void * /* LV_ATTRIBUTE_FAST_MEM */ lv_memcpy(void * dst, const void * src, size_t len);
 186:lvgl/src/draw/../misc/lv_mem.h **** 
 187:lvgl/src/draw/../misc/lv_mem.h **** /**
 188:lvgl/src/draw/../misc/lv_mem.h ****  * Same as `memcpy` but optimized to copy only a few bytes.
 189:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 190:lvgl/src/draw/../misc/lv_mem.h ****  * @param src pointer to the source buffer
 191:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to copy
 192:lvgl/src/draw/../misc/lv_mem.h ****  */
 193:lvgl/src/draw/../misc/lv_mem.h **** static inline void * LV_ATTRIBUTE_FAST_MEM lv_memcpy_small(void * dst, const void * src, size_t len
 156              		.loc 3 193 44 is_stmt 1 view .LVU44
 157              	.LBB35:
 194:lvgl/src/draw/../misc/lv_mem.h **** {
 195:lvgl/src/draw/../misc/lv_mem.h ****     uint8_t * d8 = (uint8_t *)dst;
 158              		.loc 3 195 5 view .LVU45
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 159              		.loc 3 196 5 view .LVU46
 197:lvgl/src/draw/../misc/lv_mem.h **** 
 198:lvgl/src/draw/../misc/lv_mem.h ****     while(len) {
 160              		.loc 3 198 5 view .LVU47
 195:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 161              		.loc 3 195 15 is_stmt 0 view .LVU48
 162 0076 01A9     		add	r1, sp, #4
 163              	.LVL12:
 164              		.loc 3 198 10 view .LVU49
 165 0078 0423     		movs	r3, #4
 166              	.LVL13:
 167              		.loc 3 198 10 view .LVU50
 168 007a 04E0     		b	.L4
 169              	.LVL14:
 170              	.L5:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 171              		.loc 3 199 9 is_stmt 1 view .LVU51
 172              		.loc 3 199 15 is_stmt 0 view .LVU52
 173 007c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 174              	.LVL15:
 175              		.loc 3 199 13 view .LVU53
 176 0080 01F8010B 		strb	r0, [r1], #1
 177              	.LVL16:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 178              		.loc 3 200 9 is_stmt 1 view .LVU54
 201:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 179              		.loc 3 201 9 view .LVU55
 202:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 180              		.loc 3 202 9 view .LVU56
 181              		.loc 3 202 12 is_stmt 0 view .LVU57
 182 0084 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 22


 183              	.LVL17:
 184              	.L4:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 185              		.loc 3 198 10 is_stmt 1 view .LVU58
 186 0086 002B     		cmp	r3, #0
 187 0088 F8D1     		bne	.L5
 203:lvgl/src/draw/../misc/lv_mem.h ****     }
 204:lvgl/src/draw/../misc/lv_mem.h **** 
 205:lvgl/src/draw/../misc/lv_mem.h ****     return dst;
 188              		.loc 3 205 5 view .LVU59
 189              	.LVL18:
 190              		.loc 3 205 5 is_stmt 0 view .LVU60
 191              	.LBE35:
 192              	.LBE34:
  52:lvgl/src/draw/lv_img_buf.c **** #endif
 193              		.loc 1 52 9 is_stmt 1 view .LVU61
  52:lvgl/src/draw/lv_img_buf.c **** #endif
 194              		.loc 1 52 26 is_stmt 0 view .LVU62
 195 008a FF23     		movs	r3, #255
 196 008c 8DF80730 		strb	r3, [sp, #7]
 197              	.LVL19:
 198              	.L6:
  52:lvgl/src/draw/lv_img_buf.c **** #endif
 199              		.loc 1 52 26 view .LVU63
 200              	.LBE33:
  96:lvgl/src/draw/lv_img_buf.c ****     }
  97:lvgl/src/draw/lv_img_buf.c ****     return p_color;
 201              		.loc 1 97 5 is_stmt 1 view .LVU64
  98:lvgl/src/draw/lv_img_buf.c **** }
 202              		.loc 1 98 1 is_stmt 0 view .LVU65
 203 0090 0198     		ldr	r0, [sp, #4]
 204 0092 03B0     		add	sp, sp, #12
 205              		.cfi_remember_state
 206              		.cfi_def_cfa_offset 20
 207              		@ sp needed
 208 0094 F0BD     		pop	{r4, r5, r6, r7, pc}
 209              	.LVL20:
 210              	.L12:
 211              		.cfi_restore_state
 212              	.LBB36:
  56:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 213              		.loc 1 56 9 is_stmt 1 view .LVU66
  57:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 214              		.loc 1 57 9 view .LVU67
  57:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 215              		.loc 1 57 17 is_stmt 0 view .LVU68
 216 0096 04F00701 		and	r1, r4, #7
 217              	.LVL21:
  58:lvgl/src/draw/lv_img_buf.c **** 
 218              		.loc 1 58 9 is_stmt 1 view .LVU69
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 219              		.loc 1 63 9 view .LVU70
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 220              		.loc 1 63 37 is_stmt 0 view .LVU71
 221 009a 0268     		ldr	r2, [r0]
 222              	.LVL22:
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 23


 223              		.loc 1 63 37 view .LVU72
 224 009c C2F38A22 		ubfx	r2, r2, #10, #11
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 225              		.loc 1 63 40 view .LVU73
 226 00a0 0732     		adds	r2, r2, #7
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 227              		.loc 1 63 45 view .LVU74
 228 00a2 D210     		asrs	r2, r2, #3
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 229              		.loc 1 63 51 view .LVU75
 230 00a4 07FB02F2 		mul	r2, r7, r2
  63:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 231              		.loc 1 63 55 view .LVU76
 232 00a8 02EBE402 		add	r2, r2, r4, asr #3
 233              	.LVL23:
  64:lvgl/src/draw/lv_img_buf.c ****     }
 234              		.loc 1 64 9 is_stmt 1 view .LVU77
  64:lvgl/src/draw/lv_img_buf.c ****     }
 235              		.loc 1 64 31 is_stmt 0 view .LVU78
 236 00ac 3244     		add	r2, r2, r6
 237              	.LVL24:
  64:lvgl/src/draw/lv_img_buf.c ****     }
 238              		.loc 1 64 31 view .LVU79
 239 00ae 137A     		ldrb	r3, [r2, #8]	@ zero_extendqisi2
 240              	.LVL25:
  64:lvgl/src/draw/lv_img_buf.c ****     }
 241              		.loc 1 64 47 view .LVU80
 242 00b0 C1F10702 		rsb	r2, r1, #7
  64:lvgl/src/draw/lv_img_buf.c ****     }
 243              		.loc 1 64 41 view .LVU81
 244 00b4 0121     		movs	r1, #1
 245              	.LVL26:
  64:lvgl/src/draw/lv_img_buf.c ****     }
 246              		.loc 1 64 41 view .LVU82
 247 00b6 9140     		lsls	r1, r1, r2
  64:lvgl/src/draw/lv_img_buf.c ****     }
 248              		.loc 1 64 36 view .LVU83
 249 00b8 0B40     		ands	r3, r3, r1
  64:lvgl/src/draw/lv_img_buf.c ****     }
 250              		.loc 1 64 56 view .LVU84
 251 00ba 1341     		asrs	r3, r3, r2
  64:lvgl/src/draw/lv_img_buf.c ****     }
 252              		.loc 1 64 22 view .LVU85
 253 00bc 0193     		str	r3, [sp, #4]
 254              	.LVL27:
  64:lvgl/src/draw/lv_img_buf.c ****     }
 255              		.loc 1 64 22 view .LVU86
 256              	.LBE36:
 257 00be E7E7     		b	.L6
 258              	.LVL28:
 259              	.L13:
 260              	.LBB37:
  67:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 261              		.loc 1 67 9 is_stmt 1 view .LVU87
  68:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 262              		.loc 1 68 9 view .LVU88
  68:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 24


 263              		.loc 1 68 17 is_stmt 0 view .LVU89
 264 00c0 04F00303 		and	r3, r4, #3
 265              	.LVL29:
  68:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 266              		.loc 1 68 17 view .LVU90
 267 00c4 5B00     		lsls	r3, r3, #1
 268              	.LVL30:
  69:lvgl/src/draw/lv_img_buf.c **** 
 269              		.loc 1 69 9 is_stmt 1 view .LVU91
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 270              		.loc 1 74 9 view .LVU92
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 271              		.loc 1 74 37 is_stmt 0 view .LVU93
 272 00c6 0268     		ldr	r2, [r0]
 273              	.LVL31:
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 274              		.loc 1 74 37 view .LVU94
 275 00c8 C2F38A22 		ubfx	r2, r2, #10, #11
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 276              		.loc 1 74 40 view .LVU95
 277 00cc 0332     		adds	r2, r2, #3
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 278              		.loc 1 74 45 view .LVU96
 279 00ce 9210     		asrs	r2, r2, #2
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 280              		.loc 1 74 51 view .LVU97
 281 00d0 07FB02F2 		mul	r2, r7, r2
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 282              		.loc 1 74 55 view .LVU98
 283 00d4 02EBA402 		add	r2, r2, r4, asr #2
 284              	.LVL32:
  75:lvgl/src/draw/lv_img_buf.c ****     }
 285              		.loc 1 75 9 is_stmt 1 view .LVU99
  75:lvgl/src/draw/lv_img_buf.c ****     }
 286              		.loc 1 75 31 is_stmt 0 view .LVU100
 287 00d8 3244     		add	r2, r2, r6
 288              	.LVL33:
  75:lvgl/src/draw/lv_img_buf.c ****     }
 289              		.loc 1 75 31 view .LVU101
 290 00da 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
  75:lvgl/src/draw/lv_img_buf.c ****     }
 291              		.loc 1 75 47 view .LVU102
 292 00dc C3F10603 		rsb	r3, r3, #6
 293              	.LVL34:
  75:lvgl/src/draw/lv_img_buf.c ****     }
 294              		.loc 1 75 41 view .LVU103
 295 00e0 0321     		movs	r1, #3
 296 00e2 9940     		lsls	r1, r1, r3
  75:lvgl/src/draw/lv_img_buf.c ****     }
 297              		.loc 1 75 36 view .LVU104
 298 00e4 0A40     		ands	r2, r2, r1
  75:lvgl/src/draw/lv_img_buf.c ****     }
 299              		.loc 1 75 56 view .LVU105
 300 00e6 42FA03F3 		asr	r3, r2, r3
  75:lvgl/src/draw/lv_img_buf.c ****     }
 301              		.loc 1 75 22 view .LVU106
 302 00ea 0193     		str	r3, [sp, #4]
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 25


 303              	.LVL35:
  75:lvgl/src/draw/lv_img_buf.c ****     }
 304              		.loc 1 75 22 view .LVU107
 305              	.LBE37:
 306 00ec D0E7     		b	.L6
 307              	.LVL36:
 308              	.L14:
 309              	.LBB38:
  78:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 310              		.loc 1 78 9 is_stmt 1 view .LVU108
  79:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 311              		.loc 1 79 9 view .LVU109
  79:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 312              		.loc 1 79 17 is_stmt 0 view .LVU110
 313 00ee 04F00103 		and	r3, r4, #1
 314              	.LVL37:
  79:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 315              		.loc 1 79 17 view .LVU111
 316 00f2 9B00     		lsls	r3, r3, #2
 317              	.LVL38:
  80:lvgl/src/draw/lv_img_buf.c **** 
 318              		.loc 1 80 9 is_stmt 1 view .LVU112
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 319              		.loc 1 85 9 view .LVU113
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 320              		.loc 1 85 37 is_stmt 0 view .LVU114
 321 00f4 0268     		ldr	r2, [r0]
 322              	.LVL39:
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 323              		.loc 1 85 37 view .LVU115
 324 00f6 C2F38A22 		ubfx	r2, r2, #10, #11
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 325              		.loc 1 85 40 view .LVU116
 326 00fa 0132     		adds	r2, r2, #1
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 327              		.loc 1 85 45 view .LVU117
 328 00fc 5210     		asrs	r2, r2, #1
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 329              		.loc 1 85 51 view .LVU118
 330 00fe 07FB02F2 		mul	r2, r7, r2
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 331              		.loc 1 85 55 view .LVU119
 332 0102 02EB6402 		add	r2, r2, r4, asr #1
 333              	.LVL40:
  86:lvgl/src/draw/lv_img_buf.c ****     }
 334              		.loc 1 86 9 is_stmt 1 view .LVU120
  86:lvgl/src/draw/lv_img_buf.c ****     }
 335              		.loc 1 86 31 is_stmt 0 view .LVU121
 336 0106 3244     		add	r2, r2, r6
 337              	.LVL41:
  86:lvgl/src/draw/lv_img_buf.c ****     }
 338              		.loc 1 86 31 view .LVU122
 339 0108 92F84020 		ldrb	r2, [r2, #64]	@ zero_extendqisi2
  86:lvgl/src/draw/lv_img_buf.c ****     }
 340              		.loc 1 86 49 view .LVU123
 341 010c C3F10403 		rsb	r3, r3, #4
 342              	.LVL42:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 26


  86:lvgl/src/draw/lv_img_buf.c ****     }
 343              		.loc 1 86 43 view .LVU124
 344 0110 0F21     		movs	r1, #15
 345 0112 9940     		lsls	r1, r1, r3
  86:lvgl/src/draw/lv_img_buf.c ****     }
 346              		.loc 1 86 36 view .LVU125
 347 0114 0A40     		ands	r2, r2, r1
  86:lvgl/src/draw/lv_img_buf.c ****     }
 348              		.loc 1 86 58 view .LVU126
 349 0116 42FA03F3 		asr	r3, r2, r3
  86:lvgl/src/draw/lv_img_buf.c ****     }
 350              		.loc 1 86 22 view .LVU127
 351 011a 0193     		str	r3, [sp, #4]
 352              	.LVL43:
  86:lvgl/src/draw/lv_img_buf.c ****     }
 353              		.loc 1 86 22 view .LVU128
 354              	.LBE38:
 355 011c B8E7     		b	.L6
 356              	.LVL44:
 357              	.L15:
 358              	.LBB39:
  89:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = dsc->header.w * y + x;
 359              		.loc 1 89 9 is_stmt 1 view .LVU129
  90:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
 360              		.loc 1 90 9 view .LVU130
  90:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
 361              		.loc 1 90 35 is_stmt 0 view .LVU131
 362 011e 0368     		ldr	r3, [r0]
 363              	.LVL45:
  90:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
 364              		.loc 1 90 35 view .LVU132
 365 0120 C3F38A23 		ubfx	r3, r3, #10, #11
  90:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
 366              		.loc 1 90 42 view .LVU133
 367 0124 03FB0243 		mla	r3, r3, r2, r4
 368              	.LVL46:
  91:lvgl/src/draw/lv_img_buf.c ****     }
 369              		.loc 1 91 9 is_stmt 1 view .LVU134
  91:lvgl/src/draw/lv_img_buf.c ****     }
 370              		.loc 1 91 30 is_stmt 0 view .LVU135
 371 0128 3344     		add	r3, r3, r6
 372              	.LVL47:
  91:lvgl/src/draw/lv_img_buf.c ****     }
 373              		.loc 1 91 30 view .LVU136
 374 012a 93F80034 		ldrb	r3, [r3, #1024]	@ zero_extendqisi2
  91:lvgl/src/draw/lv_img_buf.c ****     }
 375              		.loc 1 91 22 view .LVU137
 376 012e 0193     		str	r3, [sp, #4]
 377              	.LVL48:
  91:lvgl/src/draw/lv_img_buf.c ****     }
 378              		.loc 1 91 22 view .LVU138
 379              	.LBE39:
 380 0130 AEE7     		b	.L6
 381              		.cfi_endproc
 382              	.LFE54:
 384              		.section	.text.lv_img_buf_get_px_alpha,"ax",%progbits
 385              		.align	1
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 27


 386              		.global	lv_img_buf_get_px_alpha
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 391              	lv_img_buf_get_px_alpha:
 392              	.LVL49:
 393              	.LFB55:
  99:lvgl/src/draw/lv_img_buf.c **** 
 100:lvgl/src/draw/lv_img_buf.c **** lv_opa_t lv_img_buf_get_px_alpha(const lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
 101:lvgl/src/draw/lv_img_buf.c **** {
 394              		.loc 1 101 1 is_stmt 1 view -0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 16
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		.loc 1 101 1 is_stmt 0 view .LVU140
 399 0000 70B5     		push	{r4, r5, r6, lr}
 400              		.cfi_def_cfa_offset 16
 401              		.cfi_offset 4, -16
 402              		.cfi_offset 5, -12
 403              		.cfi_offset 6, -8
 404              		.cfi_offset 14, -4
 405 0002 84B0     		sub	sp, sp, #16
 406              		.cfi_def_cfa_offset 32
 407 0004 8446     		mov	ip, r0
 408 0006 8E46     		mov	lr, r1
 409 0008 1446     		mov	r4, r2
 102:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf_u8 = (uint8_t *)dsc->data;
 410              		.loc 1 102 5 is_stmt 1 view .LVU141
 411              		.loc 1 102 15 is_stmt 0 view .LVU142
 412 000a 8568     		ldr	r5, [r0, #8]
 413              	.LVL50:
 103:lvgl/src/draw/lv_img_buf.c **** 
 104:lvgl/src/draw/lv_img_buf.c ****     if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 414              		.loc 1 104 5 is_stmt 1 view .LVU143
 415              		.loc 1 104 23 is_stmt 0 view .LVU144
 416 000c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 417 000e 03F01F03 		and	r3, r3, #31
 418              		.loc 1 104 7 view .LVU145
 419 0012 052B     		cmp	r3, #5
 420 0014 0AD0     		beq	.L26
 105:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE
 106:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 107:lvgl/src/draw/lv_img_buf.c ****     }
 108:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 421              		.loc 1 108 10 is_stmt 1 view .LVU146
 422              		.loc 1 108 12 is_stmt 0 view .LVU147
 423 0016 0B2B     		cmp	r3, #11
 424 0018 11D0     		beq	.L27
 109:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 110:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 111:lvgl/src/draw/lv_img_buf.c **** 
 112:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 113:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
 114:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 8 ,16, 24 ...*/
 115:lvgl/src/draw/lv_img_buf.c ****         uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 116:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 117:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 28


 118:lvgl/src/draw/lv_img_buf.c ****     }
 119:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 425              		.loc 1 119 10 is_stmt 1 view .LVU148
 426              		.loc 1 119 12 is_stmt 0 view .LVU149
 427 001a 0C2B     		cmp	r3, #12
 428 001c 29D0     		beq	.L28
 120:lvgl/src/draw/lv_img_buf.c ****         const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 121:lvgl/src/draw/lv_img_buf.c **** 
 122:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 123:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 124:lvgl/src/draw/lv_img_buf.c **** 
 125:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 126:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 4 means rounding up to 8 because the lines are byte aligned
 127:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 4 ,8, 12 ...*/
 128:lvgl/src/draw/lv_img_buf.c ****         uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 129:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 130:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 131:lvgl/src/draw/lv_img_buf.c ****     }
 132:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 429              		.loc 1 132 10 is_stmt 1 view .LVU150
 430              		.loc 1 132 12 is_stmt 0 view .LVU151
 431 001e 0D2B     		cmp	r3, #13
 432 0020 43D0     		beq	.L29
 133:lvgl/src/draw/lv_img_buf.c ****         const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 134:lvgl/src/draw/lv_img_buf.c ****                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
 135:lvgl/src/draw/lv_img_buf.c ****                                       };
 136:lvgl/src/draw/lv_img_buf.c **** 
 137:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 138:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 139:lvgl/src/draw/lv_img_buf.c **** 
 140:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 141:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 1 means rounding up to 8 because the lines are byte aligned
 142:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 2 ,4, 6 ...*/
 143:lvgl/src/draw/lv_img_buf.c ****         uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 144:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 145:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 146:lvgl/src/draw/lv_img_buf.c ****     }
 147:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 433              		.loc 1 147 10 is_stmt 1 view .LVU152
 434              		.loc 1 147 12 is_stmt 0 view .LVU153
 435 0022 0E2B     		cmp	r3, #14
 436 0024 5FD0     		beq	.L30
 148:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y + x;
 149:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px];
 150:lvgl/src/draw/lv_img_buf.c ****     }
 151:lvgl/src/draw/lv_img_buf.c **** 
 152:lvgl/src/draw/lv_img_buf.c ****     return LV_OPA_COVER;
 437              		.loc 1 152 12 view .LVU154
 438 0026 FF20     		movs	r0, #255
 439              	.LVL51:
 440              	.L18:
 153:lvgl/src/draw/lv_img_buf.c **** }
 441              		.loc 1 153 1 discriminator 1 view .LVU155
 442 0028 04B0     		add	sp, sp, #16
 443              		.cfi_remember_state
 444              		.cfi_def_cfa_offset 16
 445              		@ sp needed
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 29


 446 002a 70BD     		pop	{r4, r5, r6, pc}
 447              	.LVL52:
 448              	.L26:
 449              		.cfi_restore_state
 450              	.LBB40:
 105:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 451              		.loc 1 105 9 is_stmt 1 view .LVU156
 105:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 452              		.loc 1 105 34 is_stmt 0 view .LVU157
 453 002c 0268     		ldr	r2, [r0]
 454              	.LVL53:
 105:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 455              		.loc 1 105 34 view .LVU158
 456 002e C2F38A22 		ubfx	r2, r2, #10, #11
 105:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 457              		.loc 1 105 69 view .LVU159
 458 0032 02FB0412 		mla	r2, r2, r4, r1
 459              	.LVL54:
 106:lvgl/src/draw/lv_img_buf.c ****     }
 460              		.loc 1 106 9 is_stmt 1 view .LVU160
 106:lvgl/src/draw/lv_img_buf.c ****     }
 461              		.loc 1 106 22 is_stmt 0 view .LVU161
 462 0036 05EB8205 		add	r5, r5, r2, lsl #2
 463              	.LVL55:
 106:lvgl/src/draw/lv_img_buf.c ****     }
 464              		.loc 1 106 22 view .LVU162
 465 003a E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 466              	.LVL56:
 106:lvgl/src/draw/lv_img_buf.c ****     }
 467              		.loc 1 106 22 view .LVU163
 468 003c F4E7     		b	.L18
 469              	.LVL57:
 470              	.L27:
 106:lvgl/src/draw/lv_img_buf.c ****     }
 471              		.loc 1 106 22 view .LVU164
 472              	.LBE40:
 473              	.LBB41:
 109:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 474              		.loc 1 109 9 is_stmt 1 view .LVU165
 109:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 475              		.loc 1 109 17 is_stmt 0 view .LVU166
 476 003e 01F00700 		and	r0, r1, #7
 477              	.LVL58:
 110:lvgl/src/draw/lv_img_buf.c **** 
 478              		.loc 1 110 9 is_stmt 1 view .LVU167
 115:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 479              		.loc 1 115 9 view .LVU168
 115:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 480              		.loc 1 115 39 is_stmt 0 view .LVU169
 481 0042 DCF80020 		ldr	r2, [ip]
 482              	.LVL59:
 115:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 483              		.loc 1 115 39 view .LVU170
 484 0046 C2F38A22 		ubfx	r2, r2, #10, #11
 115:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 485              		.loc 1 115 42 view .LVU171
 486 004a 0732     		adds	r2, r2, #7
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 30


 115:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 487              		.loc 1 115 47 view .LVU172
 488 004c D210     		asrs	r2, r2, #3
 115:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 489              		.loc 1 115 53 view .LVU173
 490 004e 04FB02F2 		mul	r2, r4, r2
 115:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 491              		.loc 1 115 57 view .LVU174
 492 0052 02EBE101 		add	r1, r2, r1, asr #3
 493              	.LVL60:
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 494              		.loc 1 116 9 is_stmt 1 view .LVU175
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 495              		.loc 1 116 33 is_stmt 0 view .LVU176
 496 0056 6B5C     		ldrb	r3, [r5, r1]	@ zero_extendqisi2
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 497              		.loc 1 116 49 view .LVU177
 498 0058 C0F10702 		rsb	r2, r0, #7
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 499              		.loc 1 116 43 view .LVU178
 500 005c 0121     		movs	r1, #1
 501              	.LVL61:
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 502              		.loc 1 116 43 view .LVU179
 503 005e 9140     		lsls	r1, r1, r2
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 504              		.loc 1 116 38 view .LVU180
 505 0060 0B40     		ands	r3, r3, r1
 116:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 506              		.loc 1 116 58 view .LVU181
 507 0062 1341     		asrs	r3, r3, r2
 508              	.LVL62:
 117:lvgl/src/draw/lv_img_buf.c ****     }
 509              		.loc 1 117 9 is_stmt 1 view .LVU182
 117:lvgl/src/draw/lv_img_buf.c ****     }
 510              		.loc 1 117 39 is_stmt 0 view .LVU183
 511 0064 13F0FF0F 		tst	r3, #255
 512 0068 01D0     		beq	.L23
 513 006a 0020     		movs	r0, #0
 514              	.LVL63:
 117:lvgl/src/draw/lv_img_buf.c ****     }
 515              		.loc 1 117 39 view .LVU184
 516 006c DCE7     		b	.L18
 517              	.LVL64:
 518              	.L23:
 117:lvgl/src/draw/lv_img_buf.c ****     }
 519              		.loc 1 117 39 view .LVU185
 520 006e FF20     		movs	r0, #255
 521              	.LVL65:
 117:lvgl/src/draw/lv_img_buf.c ****     }
 522              		.loc 1 117 39 view .LVU186
 523 0070 DAE7     		b	.L18
 524              	.LVL66:
 525              	.L28:
 117:lvgl/src/draw/lv_img_buf.c ****     }
 526              		.loc 1 117 39 view .LVU187
 527              	.LBE41:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 31


 528              	.LBB42:
 120:lvgl/src/draw/lv_img_buf.c **** 
 529              		.loc 1 120 9 is_stmt 1 view .LVU188
 120:lvgl/src/draw/lv_img_buf.c **** 
 530              		.loc 1 120 23 is_stmt 0 view .LVU189
 531 0072 204B     		ldr	r3, .L31
 532 0074 0093     		str	r3, [sp]
 122:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 533              		.loc 1 122 9 is_stmt 1 view .LVU190
 122:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 534              		.loc 1 122 17 is_stmt 0 view .LVU191
 535 0076 01F00302 		and	r2, r1, #3
 536              	.LVL67:
 122:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 537              		.loc 1 122 17 view .LVU192
 538 007a 5000     		lsls	r0, r2, #1
 539              	.LVL68:
 123:lvgl/src/draw/lv_img_buf.c **** 
 540              		.loc 1 123 9 is_stmt 1 view .LVU193
 128:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 541              		.loc 1 128 9 view .LVU194
 128:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 542              		.loc 1 128 39 is_stmt 0 view .LVU195
 543 007c DCF80020 		ldr	r2, [ip]
 544 0080 C2F38A22 		ubfx	r2, r2, #10, #11
 128:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 545              		.loc 1 128 42 view .LVU196
 546 0084 0332     		adds	r2, r2, #3
 128:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 547              		.loc 1 128 47 view .LVU197
 548 0086 9210     		asrs	r2, r2, #2
 128:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 549              		.loc 1 128 53 view .LVU198
 550 0088 04FB02F2 		mul	r2, r4, r2
 128:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 551              		.loc 1 128 57 view .LVU199
 552 008c 02EBA101 		add	r1, r2, r1, asr #2
 553              	.LVL69:
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 554              		.loc 1 129 9 is_stmt 1 view .LVU200
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 555              		.loc 1 129 33 is_stmt 0 view .LVU201
 556 0090 6B5C     		ldrb	r3, [r5, r1]	@ zero_extendqisi2
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 557              		.loc 1 129 49 view .LVU202
 558 0092 C0F10602 		rsb	r2, r0, #6
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 559              		.loc 1 129 43 view .LVU203
 560 0096 0321     		movs	r1, #3
 561              	.LVL70:
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 562              		.loc 1 129 43 view .LVU204
 563 0098 9140     		lsls	r1, r1, r2
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 564              		.loc 1 129 38 view .LVU205
 565 009a 0B40     		ands	r3, r3, r1
 129:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 32


 566              		.loc 1 129 58 view .LVU206
 567 009c 1341     		asrs	r3, r3, r2
 568              	.LVL71:
 130:lvgl/src/draw/lv_img_buf.c ****     }
 569              		.loc 1 130 9 is_stmt 1 view .LVU207
 130:lvgl/src/draw/lv_img_buf.c ****     }
 570              		.loc 1 130 25 is_stmt 0 view .LVU208
 571 009e 04AA     		add	r2, sp, #16
 572 00a0 52FA83F3 		uxtab	r3, r2, r3
 573              	.LVL72:
 130:lvgl/src/draw/lv_img_buf.c ****     }
 574              		.loc 1 130 25 view .LVU209
 575 00a4 13F8100C 		ldrb	r0, [r3, #-16]	@ zero_extendqisi2
 576              	.LVL73:
 130:lvgl/src/draw/lv_img_buf.c ****     }
 577              		.loc 1 130 25 view .LVU210
 578 00a8 BEE7     		b	.L18
 579              	.LVL74:
 580              	.L29:
 130:lvgl/src/draw/lv_img_buf.c ****     }
 581              		.loc 1 130 25 view .LVU211
 582              	.LBE42:
 583              	.LBB43:
 133:lvgl/src/draw/lv_img_buf.c ****                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
 584              		.loc 1 133 9 is_stmt 1 view .LVU212
 133:lvgl/src/draw/lv_img_buf.c ****                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
 585              		.loc 1 133 23 is_stmt 0 view .LVU213
 586 00aa 134B     		ldr	r3, .L31+4
 587 00ac 0FCB     		ldm	r3, {r0, r1, r2, r3}
 588              	.LVL75:
 133:lvgl/src/draw/lv_img_buf.c ****                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
 589              		.loc 1 133 23 view .LVU214
 590 00ae 04AE     		add	r6, sp, #16
 591 00b0 06E90F00 		stmdb	r6, {r0, r1, r2, r3}
 137:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 592              		.loc 1 137 9 is_stmt 1 view .LVU215
 137:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 593              		.loc 1 137 17 is_stmt 0 view .LVU216
 594 00b4 0EF00102 		and	r2, lr, #1
 595 00b8 9000     		lsls	r0, r2, #2
 596              	.LVL76:
 138:lvgl/src/draw/lv_img_buf.c **** 
 597              		.loc 1 138 9 is_stmt 1 view .LVU217
 143:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 598              		.loc 1 143 9 view .LVU218
 143:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 599              		.loc 1 143 39 is_stmt 0 view .LVU219
 600 00ba DCF80020 		ldr	r2, [ip]
 601 00be C2F38A22 		ubfx	r2, r2, #10, #11
 143:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 602              		.loc 1 143 42 view .LVU220
 603 00c2 0132     		adds	r2, r2, #1
 143:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 604              		.loc 1 143 47 view .LVU221
 605 00c4 5210     		asrs	r2, r2, #1
 143:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 606              		.loc 1 143 53 view .LVU222
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 33


 607 00c6 04FB02F2 		mul	r2, r4, r2
 143:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 608              		.loc 1 143 57 view .LVU223
 609 00ca 02EB6E01 		add	r1, r2, lr, asr #1
 610              	.LVL77:
 144:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 611              		.loc 1 144 9 is_stmt 1 view .LVU224
 144:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 612              		.loc 1 144 33 is_stmt 0 view .LVU225
 613 00ce 6B5C     		ldrb	r3, [r5, r1]	@ zero_extendqisi2
 144:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 614              		.loc 1 144 51 view .LVU226
 615 00d0 C0F10402 		rsb	r2, r0, #4
 144:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 616              		.loc 1 144 45 view .LVU227
 617 00d4 0F21     		movs	r1, #15
 618              	.LVL78:
 144:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 619              		.loc 1 144 45 view .LVU228
 620 00d6 9140     		lsls	r1, r1, r2
 144:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 621              		.loc 1 144 38 view .LVU229
 622 00d8 0B40     		ands	r3, r3, r1
 144:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 623              		.loc 1 144 60 view .LVU230
 624 00da 1341     		asrs	r3, r3, r2
 625              	.LVL79:
 145:lvgl/src/draw/lv_img_buf.c ****     }
 626              		.loc 1 145 9 is_stmt 1 view .LVU231
 145:lvgl/src/draw/lv_img_buf.c ****     }
 627              		.loc 1 145 25 is_stmt 0 view .LVU232
 628 00dc 56FA83F3 		uxtab	r3, r6, r3
 629              	.LVL80:
 145:lvgl/src/draw/lv_img_buf.c ****     }
 630              		.loc 1 145 25 view .LVU233
 631 00e0 13F8100C 		ldrb	r0, [r3, #-16]	@ zero_extendqisi2
 632              	.LVL81:
 145:lvgl/src/draw/lv_img_buf.c ****     }
 633              		.loc 1 145 25 view .LVU234
 634 00e4 A0E7     		b	.L18
 635              	.LVL82:
 636              	.L30:
 145:lvgl/src/draw/lv_img_buf.c ****     }
 637              		.loc 1 145 25 view .LVU235
 638              	.LBE43:
 639              	.LBB44:
 148:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px];
 640              		.loc 1 148 9 is_stmt 1 view .LVU236
 148:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px];
 641              		.loc 1 148 34 is_stmt 0 view .LVU237
 642 00e6 0268     		ldr	r2, [r0]
 643              	.LVL83:
 148:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px];
 644              		.loc 1 148 34 view .LVU238
 645 00e8 C2F38A22 		ubfx	r2, r2, #10, #11
 148:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px];
 646              		.loc 1 148 41 view .LVU239
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 34


 647 00ec 02FB0412 		mla	r2, r2, r4, r1
 648              	.LVL84:
 149:lvgl/src/draw/lv_img_buf.c ****     }
 649              		.loc 1 149 9 is_stmt 1 view .LVU240
 149:lvgl/src/draw/lv_img_buf.c ****     }
 650              		.loc 1 149 22 is_stmt 0 view .LVU241
 651 00f0 A85C     		ldrb	r0, [r5, r2]	@ zero_extendqisi2
 652              	.LVL85:
 149:lvgl/src/draw/lv_img_buf.c ****     }
 653              		.loc 1 149 22 view .LVU242
 654 00f2 99E7     		b	.L18
 655              	.L32:
 656              		.align	2
 657              	.L31:
 658 00f4 0055AAFF 		.word	-5614336
 659 00f8 00000000 		.word	.LANCHOR0
 660              	.LBE44:
 661              		.cfi_endproc
 662              	.LFE55:
 664              		.section	.text.lv_img_buf_set_px_alpha,"ax",%progbits
 665              		.align	1
 666              		.global	lv_img_buf_set_px_alpha
 667              		.syntax unified
 668              		.thumb
 669              		.thumb_func
 671              	lv_img_buf_set_px_alpha:
 672              	.LVL86:
 673              	.LFB56:
 154:lvgl/src/draw/lv_img_buf.c **** 
 155:lvgl/src/draw/lv_img_buf.c **** void lv_img_buf_set_px_alpha(const lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_opa_t opa)
 156:lvgl/src/draw/lv_img_buf.c **** {
 674              		.loc 1 156 1 is_stmt 1 view -0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 0
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678              		.loc 1 156 1 is_stmt 0 view .LVU244
 679 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 680              		.cfi_def_cfa_offset 24
 681              		.cfi_offset 4, -24
 682              		.cfi_offset 5, -20
 683              		.cfi_offset 6, -16
 684              		.cfi_offset 7, -12
 685              		.cfi_offset 8, -8
 686              		.cfi_offset 14, -4
 687 0004 0546     		mov	r5, r0
 688 0006 0E46     		mov	r6, r1
 689 0008 1746     		mov	r7, r2
 690 000a 1C46     		mov	r4, r3
 157:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf_u8 = (uint8_t *)dsc->data;
 691              		.loc 1 157 5 is_stmt 1 view .LVU245
 692              		.loc 1 157 15 is_stmt 0 view .LVU246
 693 000c D0F80880 		ldr	r8, [r0, #8]
 694              	.LVL87:
 158:lvgl/src/draw/lv_img_buf.c **** 
 159:lvgl/src/draw/lv_img_buf.c ****     if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 695              		.loc 1 159 5 is_stmt 1 view .LVU247
 696              		.loc 1 159 23 is_stmt 0 view .LVU248
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 35


 697 0010 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 698              	.LVL88:
 699              		.loc 1 159 23 view .LVU249
 700 0012 03F01F03 		and	r3, r3, #31
 701              		.loc 1 159 7 view .LVU250
 702 0016 052B     		cmp	r3, #5
 703 0018 0FD0     		beq	.L40
 160:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size          = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 161:lvgl/src/draw/lv_img_buf.c ****         uint32_t px              = dsc->header.w * y * px_size + x * px_size;
 162:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px + px_size - 1] = opa;
 163:lvgl/src/draw/lv_img_buf.c ****     }
 164:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 704              		.loc 1 164 10 is_stmt 1 view .LVU251
 705              		.loc 1 164 12 is_stmt 0 view .LVU252
 706 001a 0B2B     		cmp	r3, #11
 707 001c 20D0     		beq	.L41
 165:lvgl/src/draw/lv_img_buf.c ****         opa         = opa >> 7; /*opa -> [0,1]*/
 166:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 167:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 168:lvgl/src/draw/lv_img_buf.c **** 
 169:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 170:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
 171:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 8 ,16, 24 ...*/
 172:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 7) >> 3) * y + x;
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 174:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 175:lvgl/src/draw/lv_img_buf.c ****     }
 176:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 708              		.loc 1 176 10 is_stmt 1 view .LVU253
 709              		.loc 1 176 12 is_stmt 0 view .LVU254
 710 001e 0C2B     		cmp	r3, #12
 711 0020 3BD0     		beq	.L42
 177:lvgl/src/draw/lv_img_buf.c ****         opa         = opa >> 6; /*opa -> [0,3]*/
 178:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 179:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 180:lvgl/src/draw/lv_img_buf.c **** 
 181:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 182:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 4 means rounding up to 8 because the lines are byte aligned
 183:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 4 ,8, 12 ...*/
 184:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 3) >> 2) * y + x;
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 186:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 187:lvgl/src/draw/lv_img_buf.c ****     }
 188:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 712              		.loc 1 188 10 is_stmt 1 view .LVU255
 713              		.loc 1 188 12 is_stmt 0 view .LVU256
 714 0022 0D2B     		cmp	r3, #13
 715 0024 56D0     		beq	.L43
 189:lvgl/src/draw/lv_img_buf.c ****         opa         = opa >> 4; /*opa -> [0,15]*/
 190:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 191:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 192:lvgl/src/draw/lv_img_buf.c **** 
 193:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 194:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 1 means rounding up to 8 because the lines are byte aligned
 195:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 2 ,4, 6 ...*/
 196:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 1) >> 1) * y + x;
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 36


 198:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 199:lvgl/src/draw/lv_img_buf.c ****     }
 200:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 716              		.loc 1 200 10 is_stmt 1 view .LVU257
 717              		.loc 1 200 12 is_stmt 0 view .LVU258
 718 0026 0E2B     		cmp	r3, #14
 719 0028 35D1     		bne	.L33
 720              	.LBB45:
 201:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y + x;
 721              		.loc 1 201 9 is_stmt 1 view .LVU259
 722              		.loc 1 201 34 is_stmt 0 view .LVU260
 723 002a 0268     		ldr	r2, [r0]
 724              	.LVL89:
 725              		.loc 1 201 34 view .LVU261
 726 002c C2F38A22 		ubfx	r2, r2, #10, #11
 727              		.loc 1 201 41 view .LVU262
 728 0030 02FB0716 		mla	r6, r2, r7, r1
 729              	.LVL90:
 202:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = opa;
 730              		.loc 1 202 9 is_stmt 1 view .LVU263
 731              		.loc 1 202 21 is_stmt 0 view .LVU264
 732 0034 08F80640 		strb	r4, [r8, r6]
 733              	.LBE45:
 203:lvgl/src/draw/lv_img_buf.c ****     }
 204:lvgl/src/draw/lv_img_buf.c **** }
 734              		.loc 1 204 1 view .LVU265
 735 0038 2DE0     		b	.L33
 736              	.LVL91:
 737              	.L40:
 738              	.LBB46:
 160:lvgl/src/draw/lv_img_buf.c ****         uint32_t px              = dsc->header.w * y * px_size + x * px_size;
 739              		.loc 1 160 9 is_stmt 1 view .LVU266
 160:lvgl/src/draw/lv_img_buf.c ****         uint32_t px              = dsc->header.w * y * px_size + x * px_size;
 740              		.loc 1 160 36 is_stmt 0 view .LVU267
 741 003a 1846     		mov	r0, r3
 742              	.LVL92:
 160:lvgl/src/draw/lv_img_buf.c ****         uint32_t px              = dsc->header.w * y * px_size + x * px_size;
 743              		.loc 1 160 36 view .LVU268
 744 003c FFF7FEFF 		bl	lv_img_cf_get_px_size
 745              	.LVL93:
 160:lvgl/src/draw/lv_img_buf.c ****         uint32_t px              = dsc->header.w * y * px_size + x * px_size;
 746              		.loc 1 160 17 view .LVU269
 747 0040 C0F3C700 		ubfx	r0, r0, #3, #8
 748              	.LVL94:
 161:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px + px_size - 1] = opa;
 749              		.loc 1 161 9 is_stmt 1 view .LVU270
 161:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px + px_size - 1] = opa;
 750              		.loc 1 161 47 is_stmt 0 view .LVU271
 751 0044 2A68     		ldr	r2, [r5]
 752 0046 C2F38A22 		ubfx	r2, r2, #10, #11
 161:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px + px_size - 1] = opa;
 753              		.loc 1 161 50 view .LVU272
 754 004a 02FB07F7 		mul	r7, r2, r7
 161:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px + px_size - 1] = opa;
 755              		.loc 1 161 68 view .LVU273
 756 004e 00FB06F6 		mul	r6, r0, r6
 161:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px + px_size - 1] = opa;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 37


 757              		.loc 1 161 64 view .LVU274
 758 0052 00FB0767 		mla	r7, r0, r7, r6
 759              	.LVL95:
 162:lvgl/src/draw/lv_img_buf.c ****     }
 760              		.loc 1 162 9 is_stmt 1 view .LVU275
 162:lvgl/src/draw/lv_img_buf.c ****     }
 761              		.loc 1 162 19 is_stmt 0 view .LVU276
 762 0056 3844     		add	r0, r0, r7
 763              	.LVL96:
 162:lvgl/src/draw/lv_img_buf.c ****     }
 764              		.loc 1 162 15 view .LVU277
 765 0058 0138     		subs	r0, r0, #1
 162:lvgl/src/draw/lv_img_buf.c ****     }
 766              		.loc 1 162 34 view .LVU278
 767 005a 08F80040 		strb	r4, [r8, r0]
 768              	.LBE46:
 769 005e 1AE0     		b	.L33
 770              	.LVL97:
 771              	.L41:
 772              	.LBB47:
 165:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 773              		.loc 1 165 9 is_stmt 1 view .LVU279
 165:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 774              		.loc 1 165 21 is_stmt 0 view .LVU280
 775 0060 E409     		lsrs	r4, r4, #7
 776              	.LVL98:
 166:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 777              		.loc 1 166 9 is_stmt 1 view .LVU281
 166:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 778              		.loc 1 166 17 is_stmt 0 view .LVU282
 779 0062 01F00701 		and	r1, r1, #7
 780              	.LVL99:
 167:lvgl/src/draw/lv_img_buf.c **** 
 781              		.loc 1 167 9 is_stmt 1 view .LVU283
 172:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 782              		.loc 1 172 9 view .LVU284
 172:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 783              		.loc 1 172 36 is_stmt 0 view .LVU285
 784 0066 0268     		ldr	r2, [r0]
 785              	.LVL100:
 172:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 786              		.loc 1 172 36 view .LVU286
 787 0068 C2F38A22 		ubfx	r2, r2, #10, #11
 172:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 788              		.loc 1 172 39 view .LVU287
 789 006c 0732     		adds	r2, r2, #7
 172:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 790              		.loc 1 172 44 view .LVU288
 791 006e D210     		asrs	r2, r2, #3
 172:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 792              		.loc 1 172 50 view .LVU289
 793 0070 02FB07F7 		mul	r7, r2, r7
 172:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 794              		.loc 1 172 54 view .LVU290
 795 0074 07EBE606 		add	r6, r7, r6, asr #3
 796              	.LVL101:
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 38


 797              		.loc 1 173 9 is_stmt 1 view .LVU291
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 798              		.loc 1 173 29 is_stmt 0 view .LVU292
 799 0078 18F90630 		ldrsb	r3, [r8, r6]
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 800              		.loc 1 173 46 view .LVU293
 801 007c C1F10702 		rsb	r2, r1, #7
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 802              		.loc 1 173 40 view .LVU294
 803 0080 0121     		movs	r1, #1
 804              	.LVL102:
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 805              		.loc 1 173 40 view .LVU295
 806 0082 9140     		lsls	r1, r1, r2
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 807              		.loc 1 173 34 view .LVU296
 808 0084 23EA0101 		bic	r1, r3, r1
 809 0088 48B2     		sxtb	r0, r1
 810              	.LVL103:
 173:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 811              		.loc 1 173 21 view .LVU297
 812 008a 08F80610 		strb	r1, [r8, r6]
 174:lvgl/src/draw/lv_img_buf.c ****     }
 813              		.loc 1 174 9 is_stmt 1 view .LVU298
 174:lvgl/src/draw/lv_img_buf.c ****     }
 814              		.loc 1 174 49 is_stmt 0 view .LVU299
 815 008e 9440     		lsls	r4, r4, r2
 816              	.LVL104:
 174:lvgl/src/draw/lv_img_buf.c ****     }
 817              		.loc 1 174 34 view .LVU300
 818 0090 0443     		orrs	r4, r4, r0
 174:lvgl/src/draw/lv_img_buf.c ****     }
 819              		.loc 1 174 21 view .LVU301
 820 0092 08F80640 		strb	r4, [r8, r6]
 821              	.LVL105:
 822              	.L33:
 174:lvgl/src/draw/lv_img_buf.c ****     }
 823              		.loc 1 174 21 view .LVU302
 824              	.LBE47:
 825              		.loc 1 204 1 view .LVU303
 826 0096 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 827              	.LVL106:
 828              	.L42:
 829              	.LBB48:
 177:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 830              		.loc 1 177 9 is_stmt 1 view .LVU304
 177:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 831              		.loc 1 177 21 is_stmt 0 view .LVU305
 832 009a A409     		lsrs	r4, r4, #6
 833              	.LVL107:
 178:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 834              		.loc 1 178 9 is_stmt 1 view .LVU306
 178:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 835              		.loc 1 178 17 is_stmt 0 view .LVU307
 836 009c 01F00302 		and	r2, r1, #3
 837              	.LVL108:
 178:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 39


 838              		.loc 1 178 17 view .LVU308
 839 00a0 5100     		lsls	r1, r2, #1
 840              	.LVL109:
 179:lvgl/src/draw/lv_img_buf.c **** 
 841              		.loc 1 179 9 is_stmt 1 view .LVU309
 184:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 842              		.loc 1 184 9 view .LVU310
 184:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 843              		.loc 1 184 36 is_stmt 0 view .LVU311
 844 00a2 0268     		ldr	r2, [r0]
 845 00a4 C2F38A22 		ubfx	r2, r2, #10, #11
 184:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 846              		.loc 1 184 39 view .LVU312
 847 00a8 0332     		adds	r2, r2, #3
 184:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 848              		.loc 1 184 44 view .LVU313
 849 00aa 9210     		asrs	r2, r2, #2
 184:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 850              		.loc 1 184 50 view .LVU314
 851 00ac 02FB07F7 		mul	r7, r2, r7
 184:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 852              		.loc 1 184 54 view .LVU315
 853 00b0 07EBA606 		add	r6, r7, r6, asr #2
 854              	.LVL110:
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 855              		.loc 1 185 9 is_stmt 1 view .LVU316
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 856              		.loc 1 185 29 is_stmt 0 view .LVU317
 857 00b4 18F90630 		ldrsb	r3, [r8, r6]
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 858              		.loc 1 185 46 view .LVU318
 859 00b8 C1F10602 		rsb	r2, r1, #6
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 860              		.loc 1 185 40 view .LVU319
 861 00bc 0321     		movs	r1, #3
 862              	.LVL111:
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 863              		.loc 1 185 40 view .LVU320
 864 00be 9140     		lsls	r1, r1, r2
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 865              		.loc 1 185 34 view .LVU321
 866 00c0 23EA0103 		bic	r3, r3, r1
 867 00c4 59B2     		sxtb	r1, r3
 185:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 868              		.loc 1 185 21 view .LVU322
 869 00c6 08F80630 		strb	r3, [r8, r6]
 186:lvgl/src/draw/lv_img_buf.c ****     }
 870              		.loc 1 186 9 is_stmt 1 view .LVU323
 186:lvgl/src/draw/lv_img_buf.c ****     }
 871              		.loc 1 186 49 is_stmt 0 view .LVU324
 872 00ca 9440     		lsls	r4, r4, r2
 873              	.LVL112:
 186:lvgl/src/draw/lv_img_buf.c ****     }
 874              		.loc 1 186 34 view .LVU325
 875 00cc 0C43     		orrs	r4, r4, r1
 186:lvgl/src/draw/lv_img_buf.c ****     }
 876              		.loc 1 186 21 view .LVU326
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 40


 877 00ce 08F80640 		strb	r4, [r8, r6]
 878              	.LBE48:
 879 00d2 E0E7     		b	.L33
 880              	.LVL113:
 881              	.L43:
 882              	.LBB49:
 189:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 883              		.loc 1 189 9 is_stmt 1 view .LVU327
 189:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 884              		.loc 1 189 21 is_stmt 0 view .LVU328
 885 00d4 2409     		lsrs	r4, r4, #4
 886              	.LVL114:
 190:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 887              		.loc 1 190 9 is_stmt 1 view .LVU329
 190:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 888              		.loc 1 190 17 is_stmt 0 view .LVU330
 889 00d6 01F00102 		and	r2, r1, #1
 890              	.LVL115:
 190:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 891              		.loc 1 190 17 view .LVU331
 892 00da 9100     		lsls	r1, r2, #2
 893              	.LVL116:
 191:lvgl/src/draw/lv_img_buf.c **** 
 894              		.loc 1 191 9 is_stmt 1 view .LVU332
 196:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 895              		.loc 1 196 9 view .LVU333
 196:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 896              		.loc 1 196 36 is_stmt 0 view .LVU334
 897 00dc 0268     		ldr	r2, [r0]
 898 00de C2F38A22 		ubfx	r2, r2, #10, #11
 196:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 899              		.loc 1 196 39 view .LVU335
 900 00e2 0132     		adds	r2, r2, #1
 196:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 901              		.loc 1 196 44 view .LVU336
 902 00e4 5210     		asrs	r2, r2, #1
 196:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 903              		.loc 1 196 50 view .LVU337
 904 00e6 02FB07F7 		mul	r7, r2, r7
 196:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 905              		.loc 1 196 54 view .LVU338
 906 00ea 07EB6606 		add	r6, r7, r6, asr #1
 907              	.LVL117:
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 908              		.loc 1 197 9 is_stmt 1 view .LVU339
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 909              		.loc 1 197 29 is_stmt 0 view .LVU340
 910 00ee 18F90630 		ldrsb	r3, [r8, r6]
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 911              		.loc 1 197 48 view .LVU341
 912 00f2 C1F10402 		rsb	r2, r1, #4
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 913              		.loc 1 197 42 view .LVU342
 914 00f6 0F21     		movs	r1, #15
 915              	.LVL118:
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 916              		.loc 1 197 42 view .LVU343
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 41


 917 00f8 9140     		lsls	r1, r1, r2
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 918              		.loc 1 197 34 view .LVU344
 919 00fa 23EA0103 		bic	r3, r3, r1
 920 00fe 59B2     		sxtb	r1, r3
 197:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 921              		.loc 1 197 21 view .LVU345
 922 0100 08F80630 		strb	r3, [r8, r6]
 198:lvgl/src/draw/lv_img_buf.c ****     }
 923              		.loc 1 198 9 is_stmt 1 view .LVU346
 198:lvgl/src/draw/lv_img_buf.c ****     }
 924              		.loc 1 198 49 is_stmt 0 view .LVU347
 925 0104 9440     		lsls	r4, r4, r2
 926              	.LVL119:
 198:lvgl/src/draw/lv_img_buf.c ****     }
 927              		.loc 1 198 34 view .LVU348
 928 0106 0C43     		orrs	r4, r4, r1
 198:lvgl/src/draw/lv_img_buf.c ****     }
 929              		.loc 1 198 21 view .LVU349
 930 0108 08F80640 		strb	r4, [r8, r6]
 931              	.LBE49:
 932 010c C3E7     		b	.L33
 933              		.cfi_endproc
 934              	.LFE56:
 936              		.section	.text.lv_img_buf_set_px_color,"ax",%progbits
 937              		.align	1
 938              		.global	lv_img_buf_set_px_color
 939              		.syntax unified
 940              		.thumb
 941              		.thumb_func
 943              	lv_img_buf_set_px_color:
 944              	.LVL120:
 945              	.LFB57:
 205:lvgl/src/draw/lv_img_buf.c **** 
 206:lvgl/src/draw/lv_img_buf.c **** void lv_img_buf_set_px_color(const lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t c)
 207:lvgl/src/draw/lv_img_buf.c **** {
 946              		.loc 1 207 1 is_stmt 1 view -0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 8
 949              		@ frame_needed = 0, uses_anonymous_args = 0
 950              		.loc 1 207 1 is_stmt 0 view .LVU351
 951 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 952              		.cfi_def_cfa_offset 20
 953              		.cfi_offset 4, -20
 954              		.cfi_offset 5, -16
 955              		.cfi_offset 6, -12
 956              		.cfi_offset 7, -8
 957              		.cfi_offset 14, -4
 958 0002 83B0     		sub	sp, sp, #12
 959              		.cfi_def_cfa_offset 32
 960 0004 0646     		mov	r6, r0
 961 0006 0C46     		mov	r4, r1
 962 0008 1746     		mov	r7, r2
 963 000a 0193     		str	r3, [sp, #4]
 208:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf_u8 = (uint8_t *)dsc->data;
 964              		.loc 1 208 5 is_stmt 1 view .LVU352
 965              		.loc 1 208 15 is_stmt 0 view .LVU353
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 42


 966 000c 8568     		ldr	r5, [r0, #8]
 967              	.LVL121:
 209:lvgl/src/draw/lv_img_buf.c **** 
 210:lvgl/src/draw/lv_img_buf.c ****     if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYE
 968              		.loc 1 210 5 is_stmt 1 view .LVU354
 969              		.loc 1 210 23 is_stmt 0 view .LVU355
 970 000e 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 971              	.LVL122:
 972              		.loc 1 210 47 view .LVU356
 973 0010 01F01F01 		and	r1, r1, #31
 974              		.loc 1 210 7 view .LVU357
 975 0014 0629     		cmp	r1, #6
 976 0016 18BF     		it	ne
 977 0018 0429     		cmpne	r1, #4
 978 001a 13D0     		beq	.L56
 211:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 212:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 213:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size);
 214:lvgl/src/draw/lv_img_buf.c ****     }
 215:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 979              		.loc 1 215 10 is_stmt 1 view .LVU358
 980              		.loc 1 215 12 is_stmt 0 view .LVU359
 981 001c 0529     		cmp	r1, #5
 982 001e 2BD0     		beq	.L57
 216:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 217:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 218:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 219:lvgl/src/draw/lv_img_buf.c ****     }
 220:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
 983              		.loc 1 220 10 is_stmt 1 view .LVU360
 984              		.loc 1 220 12 is_stmt 0 view .LVU361
 985 0020 0729     		cmp	r1, #7
 986 0022 45D0     		beq	.L58
 221:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += sizeof(lv_color32_t) * 2; /*Skip the palette*/
 222:lvgl/src/draw/lv_img_buf.c **** 
 223:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 224:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 225:lvgl/src/draw/lv_img_buf.c **** 
 226:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 227:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
 228:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 8 ,16, 24 ...*/
 229:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 7) >> 3) * y + x;
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 231:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 232:lvgl/src/draw/lv_img_buf.c ****     }
 233:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
 987              		.loc 1 233 10 is_stmt 1 view .LVU362
 988              		.loc 1 233 12 is_stmt 0 view .LVU363
 989 0024 0829     		cmp	r1, #8
 990 0026 60D0     		beq	.L59
 234:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += sizeof(lv_color32_t) * 4; /*Skip the palette*/
 235:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 236:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 237:lvgl/src/draw/lv_img_buf.c **** 
 238:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 239:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
 240:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 4, 8 ,12 ...*/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 43


 241:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 3) >> 2) * y + x;
 242:lvgl/src/draw/lv_img_buf.c **** 
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] & ~(3 << (6 - bit));
 244:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 245:lvgl/src/draw/lv_img_buf.c ****     }
 246:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 991              		.loc 1 246 10 is_stmt 1 view .LVU364
 992              		.loc 1 246 12 is_stmt 0 view .LVU365
 993 0028 0929     		cmp	r1, #9
 994 002a 7DD0     		beq	.L60
 247:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += sizeof(lv_color32_t) * 16; /*Skip the palette*/
 248:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 249:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 250:lvgl/src/draw/lv_img_buf.c **** 
 251:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 252:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
 253:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 2 ,4, 6 ...*/
 254:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 1) >> 1) * y + x;
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 256:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 257:lvgl/src/draw/lv_img_buf.c ****     }
 258:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 995              		.loc 1 258 10 is_stmt 1 view .LVU366
 996              		.loc 1 258 12 is_stmt 0 view .LVU367
 997 002c 0A29     		cmp	r1, #10
 998 002e 21D1     		bne	.L44
 999              	.LBB50:
 259:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += sizeof(lv_color32_t) * 256; /*Skip the palette*/
 1000              		.loc 1 259 9 is_stmt 1 view .LVU368
 1001              	.LVL123:
 260:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y + x;
 1002              		.loc 1 260 9 view .LVU369
 1003              		.loc 1 260 34 is_stmt 0 view .LVU370
 1004 0030 0368     		ldr	r3, [r0]
 1005 0032 C3F38A23 		ubfx	r3, r3, #10, #11
 1006              		.loc 1 260 41 view .LVU371
 1007 0036 03FB0244 		mla	r4, r3, r2, r4
 1008              	.LVL124:
 261:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = c.full;
 1009              		.loc 1 261 9 is_stmt 1 view .LVU372
 1010              		.loc 1 261 15 is_stmt 0 view .LVU373
 1011 003a 04F58064 		add	r4, r4, #1024
 1012              	.LVL125:
 1013              		.loc 1 261 21 view .LVU374
 1014 003e 019B     		ldr	r3, [sp, #4]
 1015 0040 2B55     		strb	r3, [r5, r4]
 1016              	.LBE50:
 262:lvgl/src/draw/lv_img_buf.c ****     }
 263:lvgl/src/draw/lv_img_buf.c **** }
 1017              		.loc 1 263 1 view .LVU375
 1018 0042 17E0     		b	.L44
 1019              	.LVL126:
 1020              	.L56:
 1021              	.LBB51:
 211:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1022              		.loc 1 211 9 is_stmt 1 view .LVU376
 211:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 44


 1023              		.loc 1 211 27 is_stmt 0 view .LVU377
 1024 0044 0846     		mov	r0, r1
 1025              	.LVL127:
 211:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1026              		.loc 1 211 27 view .LVU378
 1027 0046 FFF7FEFF 		bl	lv_img_cf_get_px_size
 1028              	.LVL128:
 211:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1029              		.loc 1 211 17 view .LVU379
 1030 004a C0F3C700 		ubfx	r0, r0, #3, #8
 1031              	.LVL129:
 212:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size);
 1032              		.loc 1 212 9 is_stmt 1 view .LVU380
 212:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size);
 1033              		.loc 1 212 38 is_stmt 0 view .LVU381
 1034 004e 3368     		ldr	r3, [r6]
 1035 0050 C3F38A23 		ubfx	r3, r3, #10, #11
 212:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size);
 1036              		.loc 1 212 41 view .LVU382
 1037 0054 03FB07F7 		mul	r7, r3, r7
 212:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size);
 1038              		.loc 1 212 59 view .LVU383
 1039 0058 00FB04F3 		mul	r3, r0, r4
 212:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size);
 1040              		.loc 1 212 55 view .LVU384
 1041 005c 00FB0733 		mla	r3, r0, r7, r3
 1042              	.LVL130:
 213:lvgl/src/draw/lv_img_buf.c ****     }
 1043              		.loc 1 213 9 is_stmt 1 view .LVU385
 213:lvgl/src/draw/lv_img_buf.c ****     }
 1044              		.loc 1 213 25 is_stmt 0 view .LVU386
 1045 0060 2B44     		add	r3, r3, r5
 1046              	.LVL131:
 1047              	.LBB52:
 1048              	.LBI52:
 193:lvgl/src/draw/../misc/lv_mem.h **** {
 1049              		.loc 3 193 44 is_stmt 1 view .LVU387
 1050              	.LBB53:
 195:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1051              		.loc 3 195 5 view .LVU388
 196:lvgl/src/draw/../misc/lv_mem.h **** 
 1052              		.loc 3 196 5 view .LVU389
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1053              		.loc 3 198 5 view .LVU390
 196:lvgl/src/draw/../misc/lv_mem.h **** 
 1054              		.loc 3 196 21 is_stmt 0 view .LVU391
 1055 0062 01AA     		add	r2, sp, #4
 1056              	.LVL132:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1057              		.loc 3 198 10 view .LVU392
 1058 0064 04E0     		b	.L46
 1059              	.LVL133:
 1060              	.L47:
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1061              		.loc 3 199 9 is_stmt 1 view .LVU393
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1062              		.loc 3 199 15 is_stmt 0 view .LVU394
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 45


 1063 0066 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 1064              	.LVL134:
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1065              		.loc 3 199 13 view .LVU395
 1066 006a 03F8011B 		strb	r1, [r3], #1
 1067              	.LVL135:
 200:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 1068              		.loc 3 200 9 is_stmt 1 view .LVU396
 201:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 1069              		.loc 3 201 9 view .LVU397
 202:lvgl/src/draw/../misc/lv_mem.h ****     }
 1070              		.loc 3 202 9 view .LVU398
 202:lvgl/src/draw/../misc/lv_mem.h ****     }
 1071              		.loc 3 202 12 is_stmt 0 view .LVU399
 1072 006e 0138     		subs	r0, r0, #1
 1073              	.LVL136:
 1074              	.L46:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1075              		.loc 3 198 10 is_stmt 1 view .LVU400
 1076 0070 0028     		cmp	r0, #0
 1077 0072 F8D1     		bne	.L47
 1078              	.LVL137:
 1079              	.L44:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1080              		.loc 3 198 10 is_stmt 0 view .LVU401
 1081              	.LBE53:
 1082              	.LBE52:
 1083              	.LBE51:
 1084              		.loc 1 263 1 view .LVU402
 1085 0074 03B0     		add	sp, sp, #12
 1086              		.cfi_remember_state
 1087              		.cfi_def_cfa_offset 20
 1088              		@ sp needed
 1089 0076 F0BD     		pop	{r4, r5, r6, r7, pc}
 1090              	.LVL138:
 1091              	.L57:
 1092              		.cfi_restore_state
 1093              	.LBB54:
 216:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1094              		.loc 1 216 9 is_stmt 1 view .LVU403
 216:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1095              		.loc 1 216 60 is_stmt 0 view .LVU404
 1096 0078 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1097              	.LVL139:
 216:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1098              		.loc 1 216 27 view .LVU405
 1099 007a 00F01F00 		and	r0, r0, #31
 1100 007e FFF7FEFF 		bl	lv_img_cf_get_px_size
 1101              	.LVL140:
 216:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1102              		.loc 1 216 17 view .LVU406
 1103 0082 C0F3C702 		ubfx	r2, r0, #3, #8
 1104              	.LVL141:
 217:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1105              		.loc 1 217 9 is_stmt 1 view .LVU407
 217:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1106              		.loc 1 217 38 is_stmt 0 view .LVU408
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 46


 1107 0086 3368     		ldr	r3, [r6]
 1108 0088 C3F38A23 		ubfx	r3, r3, #10, #11
 217:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1109              		.loc 1 217 41 view .LVU409
 1110 008c 03FB07F7 		mul	r7, r3, r7
 217:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1111              		.loc 1 217 59 view .LVU410
 1112 0090 02FB04F3 		mul	r3, r2, r4
 217:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1113              		.loc 1 217 55 view .LVU411
 1114 0094 02FB0733 		mla	r3, r2, r7, r3
 1115              	.LVL142:
 218:lvgl/src/draw/lv_img_buf.c ****     }
 1116              		.loc 1 218 9 is_stmt 1 view .LVU412
 218:lvgl/src/draw/lv_img_buf.c ****     }
 1117              		.loc 1 218 25 is_stmt 0 view .LVU413
 1118 0098 2B44     		add	r3, r3, r5
 1119              	.LVL143:
 218:lvgl/src/draw/lv_img_buf.c ****     }
 1120              		.loc 1 218 50 view .LVU414
 1121 009a 013A     		subs	r2, r2, #1
 1122              	.LVL144:
 1123              	.LBB55:
 1124              	.LBI55:
 193:lvgl/src/draw/../misc/lv_mem.h **** {
 1125              		.loc 3 193 44 is_stmt 1 view .LVU415
 1126              	.LBB56:
 195:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1127              		.loc 3 195 5 view .LVU416
 196:lvgl/src/draw/../misc/lv_mem.h **** 
 1128              		.loc 3 196 5 view .LVU417
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1129              		.loc 3 198 5 view .LVU418
 196:lvgl/src/draw/../misc/lv_mem.h **** 
 1130              		.loc 3 196 21 is_stmt 0 view .LVU419
 1131 009c 01A9     		add	r1, sp, #4
 1132              	.LVL145:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1133              		.loc 3 198 10 view .LVU420
 1134 009e 04E0     		b	.L50
 1135              	.LVL146:
 1136              	.L51:
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1137              		.loc 3 199 9 is_stmt 1 view .LVU421
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1138              		.loc 3 199 15 is_stmt 0 view .LVU422
 1139 00a0 11F8010B 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 1140              	.LVL147:
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1141              		.loc 3 199 13 view .LVU423
 1142 00a4 03F8010B 		strb	r0, [r3], #1
 1143              	.LVL148:
 200:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 1144              		.loc 3 200 9 is_stmt 1 view .LVU424
 201:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 1145              		.loc 3 201 9 view .LVU425
 202:lvgl/src/draw/../misc/lv_mem.h ****     }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 47


 1146              		.loc 3 202 9 view .LVU426
 202:lvgl/src/draw/../misc/lv_mem.h ****     }
 1147              		.loc 3 202 12 is_stmt 0 view .LVU427
 1148 00a8 013A     		subs	r2, r2, #1
 1149              	.LVL149:
 1150              	.L50:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1151              		.loc 3 198 10 is_stmt 1 view .LVU428
 1152 00aa 002A     		cmp	r2, #0
 1153 00ac F8D1     		bne	.L51
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1154              		.loc 3 198 10 is_stmt 0 view .LVU429
 1155 00ae E1E7     		b	.L44
 1156              	.LVL150:
 1157              	.L58:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1158              		.loc 3 198 10 view .LVU430
 1159              	.LBE56:
 1160              	.LBE55:
 1161              	.LBE54:
 1162              	.LBB57:
 221:lvgl/src/draw/lv_img_buf.c **** 
 1163              		.loc 1 221 9 is_stmt 1 view .LVU431
 221:lvgl/src/draw/lv_img_buf.c **** 
 1164              		.loc 1 221 16 is_stmt 0 view .LVU432
 1165 00b0 05F10803 		add	r3, r5, #8
 1166              	.LVL151:
 223:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 1167              		.loc 1 223 9 is_stmt 1 view .LVU433
 223:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 1168              		.loc 1 223 17 is_stmt 0 view .LVU434
 1169 00b4 04F00701 		and	r1, r4, #7
 1170              	.LVL152:
 224:lvgl/src/draw/lv_img_buf.c **** 
 1171              		.loc 1 224 9 is_stmt 1 view .LVU435
 229:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1172              		.loc 1 229 9 view .LVU436
 229:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1173              		.loc 1 229 36 is_stmt 0 view .LVU437
 1174 00b8 0268     		ldr	r2, [r0]
 1175              	.LVL153:
 229:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1176              		.loc 1 229 36 view .LVU438
 1177 00ba C2F38A22 		ubfx	r2, r2, #10, #11
 229:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1178              		.loc 1 229 39 view .LVU439
 1179 00be 0732     		adds	r2, r2, #7
 229:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1180              		.loc 1 229 44 view .LVU440
 1181 00c0 D210     		asrs	r2, r2, #3
 229:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1182              		.loc 1 229 50 view .LVU441
 1183 00c2 02FB07F7 		mul	r7, r2, r7
 229:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1184              		.loc 1 229 54 view .LVU442
 1185 00c6 07EBE404 		add	r4, r7, r4, asr #3
 1186              	.LVL154:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 48


 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1187              		.loc 1 230 9 is_stmt 1 view .LVU443
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1188              		.loc 1 230 29 is_stmt 0 view .LVU444
 1189 00ca 1A57     		ldrsb	r2, [r3, r4]
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1190              		.loc 1 230 46 view .LVU445
 1191 00cc C1F10700 		rsb	r0, r1, #7
 1192              	.LVL155:
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1193              		.loc 1 230 40 view .LVU446
 1194 00d0 0121     		movs	r1, #1
 1195              	.LVL156:
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1196              		.loc 1 230 40 view .LVU447
 1197 00d2 8140     		lsls	r1, r1, r0
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1198              		.loc 1 230 34 view .LVU448
 1199 00d4 22EA0102 		bic	r2, r2, r1
 1200 00d8 D2B2     		uxtb	r2, r2
 230:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1201              		.loc 1 230 21 view .LVU449
 1202 00da 1A55     		strb	r2, [r3, r4]
 231:lvgl/src/draw/lv_img_buf.c ****     }
 1203              		.loc 1 231 9 is_stmt 1 view .LVU450
 231:lvgl/src/draw/lv_img_buf.c ****     }
 1204              		.loc 1 231 39 is_stmt 0 view .LVU451
 1205 00dc 0199     		ldr	r1, [sp, #4]
 231:lvgl/src/draw/lv_img_buf.c ****     }
 1206              		.loc 1 231 45 view .LVU452
 1207 00de 01F00101 		and	r1, r1, #1
 231:lvgl/src/draw/lv_img_buf.c ****     }
 1208              		.loc 1 231 52 view .LVU453
 1209 00e2 8140     		lsls	r1, r1, r0
 231:lvgl/src/draw/lv_img_buf.c ****     }
 1210              		.loc 1 231 34 view .LVU454
 1211 00e4 0A43     		orrs	r2, r2, r1
 231:lvgl/src/draw/lv_img_buf.c ****     }
 1212              		.loc 1 231 21 view .LVU455
 1213 00e6 1A55     		strb	r2, [r3, r4]
 1214              	.LBE57:
 1215 00e8 C4E7     		b	.L44
 1216              	.LVL157:
 1217              	.L59:
 1218              	.LBB58:
 234:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 1219              		.loc 1 234 9 is_stmt 1 view .LVU456
 234:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 1220              		.loc 1 234 16 is_stmt 0 view .LVU457
 1221 00ea 05F11003 		add	r3, r5, #16
 1222              	.LVL158:
 235:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 1223              		.loc 1 235 9 is_stmt 1 view .LVU458
 235:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 1224              		.loc 1 235 17 is_stmt 0 view .LVU459
 1225 00ee 04F00301 		and	r1, r4, #3
 1226 00f2 4900     		lsls	r1, r1, #1
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 49


 1227              	.LVL159:
 236:lvgl/src/draw/lv_img_buf.c **** 
 1228              		.loc 1 236 9 is_stmt 1 view .LVU460
 241:lvgl/src/draw/lv_img_buf.c **** 
 1229              		.loc 1 241 9 view .LVU461
 241:lvgl/src/draw/lv_img_buf.c **** 
 1230              		.loc 1 241 36 is_stmt 0 view .LVU462
 1231 00f4 0268     		ldr	r2, [r0]
 1232              	.LVL160:
 241:lvgl/src/draw/lv_img_buf.c **** 
 1233              		.loc 1 241 36 view .LVU463
 1234 00f6 C2F38A22 		ubfx	r2, r2, #10, #11
 241:lvgl/src/draw/lv_img_buf.c **** 
 1235              		.loc 1 241 39 view .LVU464
 1236 00fa 0332     		adds	r2, r2, #3
 241:lvgl/src/draw/lv_img_buf.c **** 
 1237              		.loc 1 241 44 view .LVU465
 1238 00fc 9210     		asrs	r2, r2, #2
 241:lvgl/src/draw/lv_img_buf.c **** 
 1239              		.loc 1 241 50 view .LVU466
 1240 00fe 02FB07F7 		mul	r7, r2, r7
 241:lvgl/src/draw/lv_img_buf.c **** 
 1241              		.loc 1 241 54 view .LVU467
 1242 0102 07EBA404 		add	r4, r7, r4, asr #2
 1243              	.LVL161:
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1244              		.loc 1 243 9 is_stmt 1 view .LVU468
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1245              		.loc 1 243 28 is_stmt 0 view .LVU469
 1246 0106 1A57     		ldrsb	r2, [r3, r4]
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1247              		.loc 1 243 45 view .LVU470
 1248 0108 C1F10601 		rsb	r1, r1, #6
 1249              	.LVL162:
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1250              		.loc 1 243 39 view .LVU471
 1251 010c 0320     		movs	r0, #3
 1252              	.LVL163:
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1253              		.loc 1 243 39 view .LVU472
 1254 010e 8840     		lsls	r0, r0, r1
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1255              		.loc 1 243 33 view .LVU473
 1256 0110 22EA0002 		bic	r2, r2, r0
 1257 0114 D2B2     		uxtb	r2, r2
 243:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1258              		.loc 1 243 20 view .LVU474
 1259 0116 1A55     		strb	r2, [r3, r4]
 244:lvgl/src/draw/lv_img_buf.c ****     }
 1260              		.loc 1 244 9 is_stmt 1 view .LVU475
 244:lvgl/src/draw/lv_img_buf.c ****     }
 1261              		.loc 1 244 38 is_stmt 0 view .LVU476
 1262 0118 0198     		ldr	r0, [sp, #4]
 244:lvgl/src/draw/lv_img_buf.c ****     }
 1263              		.loc 1 244 44 view .LVU477
 1264 011a 00F00300 		and	r0, r0, #3
 244:lvgl/src/draw/lv_img_buf.c ****     }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 50


 1265              		.loc 1 244 51 view .LVU478
 1266 011e 00FA01F1 		lsl	r1, r0, r1
 244:lvgl/src/draw/lv_img_buf.c ****     }
 1267              		.loc 1 244 33 view .LVU479
 1268 0122 0A43     		orrs	r2, r2, r1
 244:lvgl/src/draw/lv_img_buf.c ****     }
 1269              		.loc 1 244 20 view .LVU480
 1270 0124 1A55     		strb	r2, [r3, r4]
 1271              	.LBE58:
 1272 0126 A5E7     		b	.L44
 1273              	.LVL164:
 1274              	.L60:
 1275              	.LBB59:
 247:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 1276              		.loc 1 247 9 is_stmt 1 view .LVU481
 247:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 1277              		.loc 1 247 16 is_stmt 0 view .LVU482
 1278 0128 05F14003 		add	r3, r5, #64
 1279              	.LVL165:
 248:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 1280              		.loc 1 248 9 is_stmt 1 view .LVU483
 248:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 1281              		.loc 1 248 17 is_stmt 0 view .LVU484
 1282 012c 04F00101 		and	r1, r4, #1
 1283 0130 8900     		lsls	r1, r1, #2
 1284              	.LVL166:
 249:lvgl/src/draw/lv_img_buf.c **** 
 1285              		.loc 1 249 9 is_stmt 1 view .LVU485
 254:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1286              		.loc 1 254 9 view .LVU486
 254:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1287              		.loc 1 254 36 is_stmt 0 view .LVU487
 1288 0132 0268     		ldr	r2, [r0]
 1289              	.LVL167:
 254:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1290              		.loc 1 254 36 view .LVU488
 1291 0134 C2F38A22 		ubfx	r2, r2, #10, #11
 254:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1292              		.loc 1 254 39 view .LVU489
 1293 0138 0132     		adds	r2, r2, #1
 254:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1294              		.loc 1 254 44 view .LVU490
 1295 013a 5210     		asrs	r2, r2, #1
 254:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1296              		.loc 1 254 50 view .LVU491
 1297 013c 02FB07F7 		mul	r7, r2, r7
 254:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1298              		.loc 1 254 54 view .LVU492
 1299 0140 07EB6404 		add	r4, r7, r4, asr #1
 1300              	.LVL168:
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1301              		.loc 1 255 9 is_stmt 1 view .LVU493
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1302              		.loc 1 255 29 is_stmt 0 view .LVU494
 1303 0144 1A57     		ldrsb	r2, [r3, r4]
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1304              		.loc 1 255 48 view .LVU495
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 51


 1305 0146 C1F10401 		rsb	r1, r1, #4
 1306              	.LVL169:
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1307              		.loc 1 255 42 view .LVU496
 1308 014a 0F20     		movs	r0, #15
 1309              	.LVL170:
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1310              		.loc 1 255 42 view .LVU497
 1311 014c 8840     		lsls	r0, r0, r1
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1312              		.loc 1 255 34 view .LVU498
 1313 014e 22EA0002 		bic	r2, r2, r0
 1314 0152 D2B2     		uxtb	r2, r2
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1315              		.loc 1 255 21 view .LVU499
 1316 0154 1A55     		strb	r2, [r3, r4]
 256:lvgl/src/draw/lv_img_buf.c ****     }
 1317              		.loc 1 256 9 is_stmt 1 view .LVU500
 256:lvgl/src/draw/lv_img_buf.c ****     }
 1318              		.loc 1 256 39 is_stmt 0 view .LVU501
 1319 0156 0198     		ldr	r0, [sp, #4]
 256:lvgl/src/draw/lv_img_buf.c ****     }
 1320              		.loc 1 256 45 view .LVU502
 1321 0158 00F00F00 		and	r0, r0, #15
 256:lvgl/src/draw/lv_img_buf.c ****     }
 1322              		.loc 1 256 52 view .LVU503
 1323 015c 00FA01F1 		lsl	r1, r0, r1
 256:lvgl/src/draw/lv_img_buf.c ****     }
 1324              		.loc 1 256 34 view .LVU504
 1325 0160 0A43     		orrs	r2, r2, r1
 256:lvgl/src/draw/lv_img_buf.c ****     }
 1326              		.loc 1 256 21 view .LVU505
 1327 0162 1A55     		strb	r2, [r3, r4]
 1328              	.LBE59:
 1329 0164 86E7     		b	.L44
 1330              		.cfi_endproc
 1331              	.LFE57:
 1333              		.section	.text.lv_img_buf_set_palette,"ax",%progbits
 1334              		.align	1
 1335              		.global	lv_img_buf_set_palette
 1336              		.syntax unified
 1337              		.thumb
 1338              		.thumb_func
 1340              	lv_img_buf_set_palette:
 1341              	.LVL171:
 1342              	.LFB58:
 264:lvgl/src/draw/lv_img_buf.c **** 
 265:lvgl/src/draw/lv_img_buf.c **** void lv_img_buf_set_palette(const lv_img_dsc_t * dsc, uint8_t id, lv_color_t c)
 266:lvgl/src/draw/lv_img_buf.c **** {
 1343              		.loc 1 266 1 is_stmt 1 view -0
 1344              		.cfi_startproc
 1345              		@ args = 0, pretend = 0, frame = 8
 1346              		@ frame_needed = 0, uses_anonymous_args = 0
 1347              		@ link register save eliminated.
 267:lvgl/src/draw/lv_img_buf.c ****     if((dsc->header.cf == LV_IMG_CF_ALPHA_1BIT && id > 1) || (dsc->header.cf == LV_IMG_CF_ALPHA_2BI
 1348              		.loc 1 267 5 view .LVU507
 1349              		.loc 1 267 24 is_stmt 0 view .LVU508
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 52


 1350 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1351 0002 03F01F03 		and	r3, r3, #31
 1352              		.loc 1 267 7 view .LVU509
 1353 0006 0B2B     		cmp	r3, #11
 1354 0008 0DD0     		beq	.L74
 1355              	.L62:
 1356              		.loc 1 267 59 discriminator 3 view .LVU510
 1357 000a 0C2B     		cmp	r3, #12
 1358 000c 0ED0     		beq	.L75
 1359              	.L64:
 1360              		.loc 1 267 113 discriminator 6 view .LVU511
 1361 000e 0D2B     		cmp	r3, #13
 1362 0010 0FD0     		beq	.L76
 1363              	.L65:
 268:lvgl/src/draw/lv_img_buf.c ****        (dsc->header.cf == LV_IMG_CF_ALPHA_4BIT && id > 15) || (dsc->header.cf == LV_IMG_CF_ALPHA_8B
 1364              		.loc 1 268 60 discriminator 1 view .LVU512
 1365 0012 0E2B     		cmp	r3, #14
 1366 0014 09D0     		beq	.L71
 266:lvgl/src/draw/lv_img_buf.c ****     if((dsc->header.cf == LV_IMG_CF_ALPHA_1BIT && id > 1) || (dsc->header.cf == LV_IMG_CF_ALPHA_2BI
 1367              		.loc 1 266 1 view .LVU513
 1368 0016 82B0     		sub	sp, sp, #8
 1369              		.cfi_def_cfa_offset 8
 269:lvgl/src/draw/lv_img_buf.c ****         LV_LOG_WARN("lv_img_buf_set_px_alpha: invalid 'id'");
 270:lvgl/src/draw/lv_img_buf.c ****         return;
 271:lvgl/src/draw/lv_img_buf.c ****     }
 272:lvgl/src/draw/lv_img_buf.c **** 
 273:lvgl/src/draw/lv_img_buf.c ****     lv_color32_t c32;
 1370              		.loc 1 273 5 is_stmt 1 view .LVU514
 274:lvgl/src/draw/lv_img_buf.c ****     c32.full      = lv_color_to32(c);
 1371              		.loc 1 274 5 view .LVU515
 1372              	.LBB60:
 1373              	.LBI60:
 374:lvgl/src/draw/../misc/lv_color.h **** {
 1374              		.loc 2 374 24 view .LVU516
 1375              	.LBB61:
 425:lvgl/src/draw/../misc/lv_color.h **** #endif
 1376              		.loc 2 425 5 view .LVU517
 1377              	.LBE61:
 1378              	.LBE60:
 1379              		.loc 1 274 19 is_stmt 0 view .LVU518
 1380 0018 0192     		str	r2, [sp, #4]
 275:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf = (uint8_t *)dsc->data;
 1381              		.loc 1 275 5 is_stmt 1 view .LVU519
 1382              		.loc 1 275 15 is_stmt 0 view .LVU520
 1383 001a 8368     		ldr	r3, [r0, #8]
 1384              	.LVL172:
 276:lvgl/src/draw/lv_img_buf.c ****     lv_memcpy_small(&buf[id * sizeof(c32)], &c32, sizeof(c32));
 1385              		.loc 1 276 5 is_stmt 1 view .LVU521
 1386              		.loc 1 276 21 is_stmt 0 view .LVU522
 1387 001c 03EB8101 		add	r1, r3, r1, lsl #2
 1388              	.LVL173:
 1389              	.LBB62:
 1390              	.LBI62:
 193:lvgl/src/draw/../misc/lv_mem.h **** {
 1391              		.loc 3 193 44 is_stmt 1 view .LVU523
 1392              	.LBB63:
 196:lvgl/src/draw/../misc/lv_mem.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 53


 1393              		.loc 3 196 21 is_stmt 0 view .LVU524
 1394 0020 01AA     		add	r2, sp, #4
 1395              	.LVL174:
 196:lvgl/src/draw/../misc/lv_mem.h **** 
 1396              		.loc 3 196 21 view .LVU525
 1397              	.LBE63:
 1398              	.LBE62:
 1399              		.loc 1 276 21 view .LVU526
 1400 0022 0423     		movs	r3, #4
 1401              	.LVL175:
 1402              		.loc 1 276 21 view .LVU527
 1403 0024 0DE0     		b	.L68
 1404              	.LVL176:
 1405              	.L74:
 1406              		.cfi_def_cfa_offset 0
 267:lvgl/src/draw/lv_img_buf.c ****        (dsc->header.cf == LV_IMG_CF_ALPHA_4BIT && id > 15) || (dsc->header.cf == LV_IMG_CF_ALPHA_8B
 1407              		.loc 1 267 48 discriminator 1 view .LVU528
 1408 0026 0129     		cmp	r1, #1
 1409 0028 EFD9     		bls	.L62
 1410              	.L71:
 1411 002a 7047     		bx	lr
 1412              	.L75:
 267:lvgl/src/draw/lv_img_buf.c ****        (dsc->header.cf == LV_IMG_CF_ALPHA_4BIT && id > 15) || (dsc->header.cf == LV_IMG_CF_ALPHA_8B
 1413              		.loc 1 267 102 discriminator 4 view .LVU529
 1414 002c 0329     		cmp	r1, #3
 1415 002e EED9     		bls	.L64
 1416 0030 FBE7     		b	.L71
 1417              	.L76:
 268:lvgl/src/draw/lv_img_buf.c ****         LV_LOG_WARN("lv_img_buf_set_px_alpha: invalid 'id'");
 1418              		.loc 1 268 48 view .LVU530
 1419 0032 0F29     		cmp	r1, #15
 1420 0034 EDD9     		bls	.L65
 1421 0036 F8E7     		b	.L71
 1422              	.LVL177:
 1423              	.L69:
 1424              		.cfi_def_cfa_offset 8
 1425              	.LBB65:
 1426              	.LBB64:
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1427              		.loc 3 199 9 is_stmt 1 view .LVU531
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1428              		.loc 3 199 15 is_stmt 0 view .LVU532
 1429 0038 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 1430              	.LVL178:
 199:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1431              		.loc 3 199 13 view .LVU533
 1432 003c 01F8010B 		strb	r0, [r1], #1
 1433              	.LVL179:
 200:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 1434              		.loc 3 200 9 is_stmt 1 view .LVU534
 201:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 1435              		.loc 3 201 9 view .LVU535
 202:lvgl/src/draw/../misc/lv_mem.h ****     }
 1436              		.loc 3 202 9 view .LVU536
 202:lvgl/src/draw/../misc/lv_mem.h ****     }
 1437              		.loc 3 202 12 is_stmt 0 view .LVU537
 1438 0040 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 54


 1439              	.LVL180:
 1440              	.L68:
 198:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1441              		.loc 3 198 10 is_stmt 1 view .LVU538
 1442 0042 002B     		cmp	r3, #0
 1443 0044 F8D1     		bne	.L69
 1444              	.LBE64:
 1445              	.LBE65:
 277:lvgl/src/draw/lv_img_buf.c **** }
 1446              		.loc 1 277 1 is_stmt 0 view .LVU539
 1447 0046 02B0     		add	sp, sp, #8
 1448              		.cfi_def_cfa_offset 0
 1449              	.LVL181:
 1450              		.loc 1 277 1 view .LVU540
 1451              		@ sp needed
 1452 0048 7047     		bx	lr
 1453              		.cfi_endproc
 1454              	.LFE58:
 1456              		.section	.text.lv_img_buf_free,"ax",%progbits
 1457              		.align	1
 1458              		.global	lv_img_buf_free
 1459              		.syntax unified
 1460              		.thumb
 1461              		.thumb_func
 1463              	lv_img_buf_free:
 1464              	.LVL182:
 1465              	.LFB60:
 278:lvgl/src/draw/lv_img_buf.c **** 
 279:lvgl/src/draw/lv_img_buf.c **** lv_img_dsc_t * lv_img_buf_alloc(lv_coord_t w, lv_coord_t h, lv_img_cf_t cf)
 280:lvgl/src/draw/lv_img_buf.c **** {
 281:lvgl/src/draw/lv_img_buf.c ****     /*Allocate image descriptor*/
 282:lvgl/src/draw/lv_img_buf.c ****     lv_img_dsc_t * dsc = lv_mem_alloc(sizeof(lv_img_dsc_t));
 283:lvgl/src/draw/lv_img_buf.c ****     if(dsc == NULL)
 284:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 285:lvgl/src/draw/lv_img_buf.c **** 
 286:lvgl/src/draw/lv_img_buf.c ****     lv_memset_00(dsc, sizeof(lv_img_dsc_t));
 287:lvgl/src/draw/lv_img_buf.c **** 
 288:lvgl/src/draw/lv_img_buf.c ****     /*Get image data size*/
 289:lvgl/src/draw/lv_img_buf.c ****     dsc->data_size = lv_img_buf_get_img_size(w, h, cf);
 290:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data_size == 0) {
 291:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 292:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 293:lvgl/src/draw/lv_img_buf.c ****     }
 294:lvgl/src/draw/lv_img_buf.c **** 
 295:lvgl/src/draw/lv_img_buf.c ****     /*Allocate raw buffer*/
 296:lvgl/src/draw/lv_img_buf.c ****     dsc->data = lv_mem_alloc(dsc->data_size);
 297:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data == NULL) {
 298:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 299:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 300:lvgl/src/draw/lv_img_buf.c ****     }
 301:lvgl/src/draw/lv_img_buf.c ****     lv_memset_00((uint8_t *)dsc->data, dsc->data_size);
 302:lvgl/src/draw/lv_img_buf.c **** 
 303:lvgl/src/draw/lv_img_buf.c ****     /*Fill in header*/
 304:lvgl/src/draw/lv_img_buf.c ****     dsc->header.always_zero = 0;
 305:lvgl/src/draw/lv_img_buf.c ****     dsc->header.w = w;
 306:lvgl/src/draw/lv_img_buf.c ****     dsc->header.h = h;
 307:lvgl/src/draw/lv_img_buf.c ****     dsc->header.cf = cf;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 55


 308:lvgl/src/draw/lv_img_buf.c ****     return dsc;
 309:lvgl/src/draw/lv_img_buf.c **** }
 310:lvgl/src/draw/lv_img_buf.c **** 
 311:lvgl/src/draw/lv_img_buf.c **** void lv_img_buf_free(lv_img_dsc_t * dsc)
 312:lvgl/src/draw/lv_img_buf.c **** {
 1466              		.loc 1 312 1 is_stmt 1 view -0
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 0
 1469              		@ frame_needed = 0, uses_anonymous_args = 0
 313:lvgl/src/draw/lv_img_buf.c ****     if(dsc != NULL) {
 1470              		.loc 1 313 5 view .LVU542
 1471              		.loc 1 313 7 is_stmt 0 view .LVU543
 1472 0000 48B1     		cbz	r0, .L81
 312:lvgl/src/draw/lv_img_buf.c ****     if(dsc != NULL) {
 1473              		.loc 1 312 1 view .LVU544
 1474 0002 10B5     		push	{r4, lr}
 1475              		.cfi_def_cfa_offset 8
 1476              		.cfi_offset 4, -8
 1477              		.cfi_offset 14, -4
 1478 0004 0446     		mov	r4, r0
 314:lvgl/src/draw/lv_img_buf.c ****         if(dsc->data != NULL)
 1479              		.loc 1 314 9 is_stmt 1 view .LVU545
 1480              		.loc 1 314 15 is_stmt 0 view .LVU546
 1481 0006 8068     		ldr	r0, [r0, #8]
 1482              	.LVL183:
 1483              		.loc 1 314 11 view .LVU547
 1484 0008 08B1     		cbz	r0, .L79
 315:lvgl/src/draw/lv_img_buf.c ****             lv_mem_free((void *)dsc->data);
 1485              		.loc 1 315 13 is_stmt 1 view .LVU548
 1486 000a FFF7FEFF 		bl	lv_mem_free
 1487              	.LVL184:
 1488              	.L79:
 316:lvgl/src/draw/lv_img_buf.c **** 
 317:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1489              		.loc 1 317 9 view .LVU549
 1490 000e 2046     		mov	r0, r4
 1491 0010 FFF7FEFF 		bl	lv_mem_free
 1492              	.LVL185:
 318:lvgl/src/draw/lv_img_buf.c ****     }
 319:lvgl/src/draw/lv_img_buf.c **** }
 1493              		.loc 1 319 1 is_stmt 0 view .LVU550
 1494 0014 10BD     		pop	{r4, pc}
 1495              	.LVL186:
 1496              	.L81:
 1497              		.cfi_def_cfa_offset 0
 1498              		.cfi_restore 4
 1499              		.cfi_restore 14
 1500              		.loc 1 319 1 view .LVU551
 1501 0016 7047     		bx	lr
 1502              		.cfi_endproc
 1503              	.LFE60:
 1505              		.section	.text.lv_img_buf_get_img_size,"ax",%progbits
 1506              		.align	1
 1507              		.global	lv_img_buf_get_img_size
 1508              		.syntax unified
 1509              		.thumb
 1510              		.thumb_func
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 56


 1512              	lv_img_buf_get_img_size:
 1513              	.LVL187:
 1514              	.LFB61:
 320:lvgl/src/draw/lv_img_buf.c **** 
 321:lvgl/src/draw/lv_img_buf.c **** uint32_t lv_img_buf_get_img_size(lv_coord_t w, lv_coord_t h, lv_img_cf_t cf)
 322:lvgl/src/draw/lv_img_buf.c **** {
 1515              		.loc 1 322 1 is_stmt 1 view -0
 1516              		.cfi_startproc
 1517              		@ args = 0, pretend = 0, frame = 0
 1518              		@ frame_needed = 0, uses_anonymous_args = 0
 1519              		@ link register save eliminated.
 1520              		.loc 1 322 1 is_stmt 0 view .LVU553
 1521 0000 0346     		mov	r3, r0
 323:lvgl/src/draw/lv_img_buf.c ****     switch(cf) {
 1522              		.loc 1 323 5 is_stmt 1 view .LVU554
 1523 0002 043A     		subs	r2, r2, #4
 1524              	.LVL188:
 1525              		.loc 1 323 5 is_stmt 0 view .LVU555
 1526 0004 102A     		cmp	r2, #16
 1527 0006 57D8     		bhi	.L104
 1528 0008 DFE802F0 		tbb	[pc, r2]
 1529              	.LVL189:
 1530              	.L87:
 1531 000c 09       		.byte	(.L97-.L87)/2
 1532 000d 0D       		.byte	(.L86-.L87)/2
 1533 000e 11       		.byte	(.L96-.L87)/2
 1534 000f 33       		.byte	(.L95-.L87)/2
 1535 0010 3D       		.byte	(.L94-.L87)/2
 1536 0011 47       		.byte	(.L93-.L87)/2
 1537 0012 51       		.byte	(.L92-.L87)/2
 1538 0013 15       		.byte	(.L91-.L87)/2
 1539 0014 1E       		.byte	(.L90-.L87)/2
 1540 0015 27       		.byte	(.L89-.L87)/2
 1541 0016 30       		.byte	(.L88-.L87)/2
 1542 0017 56       		.byte	(.L104-.L87)/2
 1543 0018 56       		.byte	(.L104-.L87)/2
 1544 0019 56       		.byte	(.L104-.L87)/2
 1545 001a 56       		.byte	(.L104-.L87)/2
 1546 001b 56       		.byte	(.L104-.L87)/2
 1547 001c 0D       		.byte	(.L86-.L87)/2
 1548 001d 00       		.p2align 1
 1549              	.L97:
 324:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_TRUE_COLOR:
 325:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_TRUE_COLOR(w, h);
 1550              		.loc 1 325 13 is_stmt 1 view .LVU556
 1551              		.loc 1 325 20 is_stmt 0 view .LVU557
 1552 001e 01FB03F0 		mul	r0, r1, r3
 1553 0022 8000     		lsls	r0, r0, #2
 1554 0024 7047     		bx	lr
 1555              	.L86:
 326:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_TRUE_COLOR_ALPHA:
 327:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_RGB565A8:
 328:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_TRUE_COLOR_ALPHA(w, h);
 1556              		.loc 1 328 13 is_stmt 1 view .LVU558
 1557              		.loc 1 328 20 is_stmt 0 view .LVU559
 1558 0026 01FB03F0 		mul	r0, r1, r3
 1559 002a 8000     		lsls	r0, r0, #2
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 57


 1560 002c 7047     		bx	lr
 1561              	.L96:
 329:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
 330:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_TRUE_COLOR_CHROMA_KEYED(w, h);
 1562              		.loc 1 330 13 is_stmt 1 view .LVU560
 1563              		.loc 1 330 20 is_stmt 0 view .LVU561
 1564 002e 01FB03F0 		mul	r0, r1, r3
 1565 0032 8000     		lsls	r0, r0, #2
 1566 0034 7047     		bx	lr
 1567              	.L91:
 331:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_ALPHA_1BIT:
 332:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_ALPHA_1BIT(w, h);
 1568              		.loc 1 332 13 is_stmt 1 view .LVU562
 1569              		.loc 1 332 20 is_stmt 0 view .LVU563
 1570 0036 1846     		mov	r0, r3
 1571 0038 002B     		cmp	r3, #0
 1572 003a 03DB     		blt	.L105
 1573              	.L98:
 1574 003c C010     		asrs	r0, r0, #3
 1575 003e 00FB0110 		mla	r0, r0, r1, r1
 1576 0042 7047     		bx	lr
 1577              	.L105:
 1578 0044 D81D     		adds	r0, r3, #7
 1579 0046 F9E7     		b	.L98
 1580              	.L90:
 333:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_ALPHA_2BIT:
 334:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_ALPHA_2BIT(w, h);
 1581              		.loc 1 334 13 is_stmt 1 view .LVU564
 1582              		.loc 1 334 20 is_stmt 0 view .LVU565
 1583 0048 1846     		mov	r0, r3
 1584 004a 002B     		cmp	r3, #0
 1585 004c 03DB     		blt	.L106
 1586              	.L99:
 1587 004e 8010     		asrs	r0, r0, #2
 1588 0050 00FB0110 		mla	r0, r0, r1, r1
 1589 0054 7047     		bx	lr
 1590              	.L106:
 1591 0056 D81C     		adds	r0, r3, #3
 1592 0058 F9E7     		b	.L99
 1593              	.L89:
 335:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_ALPHA_4BIT:
 336:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_ALPHA_4BIT(w, h);
 1594              		.loc 1 336 13 is_stmt 1 view .LVU566
 1595              		.loc 1 336 20 is_stmt 0 view .LVU567
 1596 005a 1846     		mov	r0, r3
 1597 005c 002B     		cmp	r3, #0
 1598 005e 03DB     		blt	.L107
 1599              	.L100:
 1600 0060 4010     		asrs	r0, r0, #1
 1601 0062 00FB0110 		mla	r0, r0, r1, r1
 1602 0066 7047     		bx	lr
 1603              	.L107:
 1604 0068 581C     		adds	r0, r3, #1
 1605 006a F9E7     		b	.L100
 1606              	.L88:
 337:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_ALPHA_8BIT:
 338:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_ALPHA_8BIT(w, h);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 58


 1607              		.loc 1 338 13 is_stmt 1 view .LVU568
 1608              		.loc 1 338 20 is_stmt 0 view .LVU569
 1609 006c 01FB03F0 		mul	r0, r1, r3
 1610 0070 7047     		bx	lr
 1611              	.L95:
 339:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_INDEXED_1BIT:
 340:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_INDEXED_1BIT(w, h);
 1612              		.loc 1 340 13 is_stmt 1 view .LVU570
 1613              		.loc 1 340 20 is_stmt 0 view .LVU571
 1614 0072 1846     		mov	r0, r3
 1615 0074 002B     		cmp	r3, #0
 1616 0076 04DB     		blt	.L108
 1617              	.L101:
 1618 0078 C010     		asrs	r0, r0, #3
 1619 007a 00FB0110 		mla	r0, r0, r1, r1
 1620 007e 0830     		adds	r0, r0, #8
 1621 0080 7047     		bx	lr
 1622              	.L108:
 1623 0082 D81D     		adds	r0, r3, #7
 1624 0084 F8E7     		b	.L101
 1625              	.L94:
 341:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_INDEXED_2BIT:
 342:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_INDEXED_2BIT(w, h);
 1626              		.loc 1 342 13 is_stmt 1 view .LVU572
 1627              		.loc 1 342 20 is_stmt 0 view .LVU573
 1628 0086 1846     		mov	r0, r3
 1629 0088 002B     		cmp	r3, #0
 1630 008a 04DB     		blt	.L109
 1631              	.L102:
 1632 008c 8010     		asrs	r0, r0, #2
 1633 008e 00FB0110 		mla	r0, r0, r1, r1
 1634 0092 1030     		adds	r0, r0, #16
 1635 0094 7047     		bx	lr
 1636              	.L109:
 1637 0096 D81C     		adds	r0, r3, #3
 1638 0098 F8E7     		b	.L102
 1639              	.L93:
 343:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_INDEXED_4BIT:
 344:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_INDEXED_4BIT(w, h);
 1640              		.loc 1 344 13 is_stmt 1 view .LVU574
 1641              		.loc 1 344 20 is_stmt 0 view .LVU575
 1642 009a 1846     		mov	r0, r3
 1643 009c 002B     		cmp	r3, #0
 1644 009e 04DB     		blt	.L110
 1645              	.L103:
 1646 00a0 4010     		asrs	r0, r0, #1
 1647 00a2 00FB0110 		mla	r0, r0, r1, r1
 1648 00a6 4030     		adds	r0, r0, #64
 1649 00a8 7047     		bx	lr
 1650              	.L110:
 1651 00aa 581C     		adds	r0, r3, #1
 1652 00ac F8E7     		b	.L103
 1653              	.L92:
 345:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_INDEXED_8BIT:
 346:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_INDEXED_8BIT(w, h);
 1654              		.loc 1 346 13 is_stmt 1 view .LVU576
 1655              		.loc 1 346 20 is_stmt 0 view .LVU577
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 59


 1656 00ae 01FB03F0 		mul	r0, r1, r3
 1657 00b2 00F58060 		add	r0, r0, #1024
 1658 00b6 7047     		bx	lr
 1659              	.L104:
 323:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_TRUE_COLOR:
 1660              		.loc 1 323 5 view .LVU578
 1661 00b8 0020     		movs	r0, #0
 347:lvgl/src/draw/lv_img_buf.c ****         default:
 348:lvgl/src/draw/lv_img_buf.c ****             return 0;
 349:lvgl/src/draw/lv_img_buf.c ****     }
 350:lvgl/src/draw/lv_img_buf.c **** }
 1662              		.loc 1 350 1 view .LVU579
 1663 00ba 7047     		bx	lr
 1664              		.cfi_endproc
 1665              	.LFE61:
 1667              		.section	.text.lv_img_buf_alloc,"ax",%progbits
 1668              		.align	1
 1669              		.global	lv_img_buf_alloc
 1670              		.syntax unified
 1671              		.thumb
 1672              		.thumb_func
 1674              	lv_img_buf_alloc:
 1675              	.LVL190:
 1676              	.LFB59:
 280:lvgl/src/draw/lv_img_buf.c ****     /*Allocate image descriptor*/
 1677              		.loc 1 280 1 is_stmt 1 view -0
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 0
 1680              		@ frame_needed = 0, uses_anonymous_args = 0
 280:lvgl/src/draw/lv_img_buf.c ****     /*Allocate image descriptor*/
 1681              		.loc 1 280 1 is_stmt 0 view .LVU581
 1682 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1683              		.cfi_def_cfa_offset 24
 1684              		.cfi_offset 4, -24
 1685              		.cfi_offset 5, -20
 1686              		.cfi_offset 6, -16
 1687              		.cfi_offset 7, -12
 1688              		.cfi_offset 8, -8
 1689              		.cfi_offset 14, -4
 1690 0004 0746     		mov	r7, r0
 1691 0006 0E46     		mov	r6, r1
 1692 0008 1546     		mov	r5, r2
 282:lvgl/src/draw/lv_img_buf.c ****     if(dsc == NULL)
 1693              		.loc 1 282 5 is_stmt 1 view .LVU582
 282:lvgl/src/draw/lv_img_buf.c ****     if(dsc == NULL)
 1694              		.loc 1 282 26 is_stmt 0 view .LVU583
 1695 000a 0C20     		movs	r0, #12
 1696              	.LVL191:
 282:lvgl/src/draw/lv_img_buf.c ****     if(dsc == NULL)
 1697              		.loc 1 282 26 view .LVU584
 1698 000c FFF7FEFF 		bl	lv_mem_alloc
 1699              	.LVL192:
 283:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 1700              		.loc 1 283 5 is_stmt 1 view .LVU585
 283:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 1701              		.loc 1 283 7 is_stmt 0 view .LVU586
 1702 0010 0446     		mov	r4, r0
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 60


 1703 0012 08B3     		cbz	r0, .L111
 286:lvgl/src/draw/lv_img_buf.c **** 
 1704              		.loc 1 286 5 is_stmt 1 view .LVU587
 1705 0014 0C21     		movs	r1, #12
 1706 0016 FFF7FEFF 		bl	lv_memset_00
 1707              	.LVL193:
 289:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data_size == 0) {
 1708              		.loc 1 289 5 view .LVU588
 289:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data_size == 0) {
 1709              		.loc 1 289 22 is_stmt 0 view .LVU589
 1710 001a 2A46     		mov	r2, r5
 1711 001c 3146     		mov	r1, r6
 1712 001e 3846     		mov	r0, r7
 1713 0020 FFF7FEFF 		bl	lv_img_buf_get_img_size
 1714              	.LVL194:
 289:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data_size == 0) {
 1715              		.loc 1 289 20 view .LVU590
 1716 0024 6060     		str	r0, [r4, #4]
 290:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1717              		.loc 1 290 5 is_stmt 1 view .LVU591
 290:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1718              		.loc 1 290 7 is_stmt 0 view .LVU592
 1719 0026 D0B1     		cbz	r0, .L116
 296:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data == NULL) {
 1720              		.loc 1 296 5 is_stmt 1 view .LVU593
 296:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data == NULL) {
 1721              		.loc 1 296 17 is_stmt 0 view .LVU594
 1722 0028 FFF7FEFF 		bl	lv_mem_alloc
 1723              	.LVL195:
 1724 002c 8046     		mov	r8, r0
 296:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data == NULL) {
 1725              		.loc 1 296 15 view .LVU595
 1726 002e A060     		str	r0, [r4, #8]
 297:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1727              		.loc 1 297 5 is_stmt 1 view .LVU596
 297:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1728              		.loc 1 297 7 is_stmt 0 view .LVU597
 1729 0030 D0B1     		cbz	r0, .L117
 301:lvgl/src/draw/lv_img_buf.c **** 
 1730              		.loc 1 301 5 is_stmt 1 view .LVU598
 1731 0032 6168     		ldr	r1, [r4, #4]
 1732 0034 FFF7FEFF 		bl	lv_memset_00
 1733              	.LVL196:
 304:lvgl/src/draw/lv_img_buf.c ****     dsc->header.w = w;
 1734              		.loc 1 304 5 view .LVU599
 304:lvgl/src/draw/lv_img_buf.c ****     dsc->header.w = w;
 1735              		.loc 1 304 29 is_stmt 0 view .LVU600
 1736 0038 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1737 003a 6FF34713 		bfc	r3, #5, #3
 1738 003e 2370     		strb	r3, [r4]
 305:lvgl/src/draw/lv_img_buf.c ****     dsc->header.h = h;
 1739              		.loc 1 305 5 is_stmt 1 view .LVU601
 305:lvgl/src/draw/lv_img_buf.c ****     dsc->header.h = h;
 1740              		.loc 1 305 19 is_stmt 0 view .LVU602
 1741 0040 2368     		ldr	r3, [r4]
 1742 0042 67F39423 		bfi	r3, r7, #10, #11
 1743 0046 2360     		str	r3, [r4]
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 61


 306:lvgl/src/draw/lv_img_buf.c ****     dsc->header.cf = cf;
 1744              		.loc 1 306 5 is_stmt 1 view .LVU603
 306:lvgl/src/draw/lv_img_buf.c ****     dsc->header.cf = cf;
 1745              		.loc 1 306 19 is_stmt 0 view .LVU604
 1746 0048 6388     		ldrh	r3, [r4, #2]
 1747 004a 66F34F13 		bfi	r3, r6, #5, #11
 1748 004e 6380     		strh	r3, [r4, #2]	@ movhi
 307:lvgl/src/draw/lv_img_buf.c ****     return dsc;
 1749              		.loc 1 307 5 is_stmt 1 view .LVU605
 307:lvgl/src/draw/lv_img_buf.c ****     return dsc;
 1750              		.loc 1 307 20 is_stmt 0 view .LVU606
 1751 0050 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1752 0052 65F30403 		bfi	r3, r5, #0, #5
 1753 0056 2370     		strb	r3, [r4]
 308:lvgl/src/draw/lv_img_buf.c **** }
 1754              		.loc 1 308 5 is_stmt 1 view .LVU607
 1755              	.LVL197:
 1756              	.L111:
 309:lvgl/src/draw/lv_img_buf.c **** 
 1757              		.loc 1 309 1 is_stmt 0 view .LVU608
 1758 0058 2046     		mov	r0, r4
 1759 005a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1760              	.LVL198:
 1761              	.L116:
 291:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 1762              		.loc 1 291 9 is_stmt 1 view .LVU609
 1763 005e 2046     		mov	r0, r4
 1764 0060 FFF7FEFF 		bl	lv_mem_free
 1765              	.LVL199:
 292:lvgl/src/draw/lv_img_buf.c ****     }
 1766              		.loc 1 292 9 view .LVU610
 292:lvgl/src/draw/lv_img_buf.c ****     }
 1767              		.loc 1 292 16 is_stmt 0 view .LVU611
 1768 0064 0024     		movs	r4, #0
 1769              	.LVL200:
 292:lvgl/src/draw/lv_img_buf.c ****     }
 1770              		.loc 1 292 16 view .LVU612
 1771 0066 F7E7     		b	.L111
 1772              	.LVL201:
 1773              	.L117:
 298:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 1774              		.loc 1 298 9 is_stmt 1 view .LVU613
 1775 0068 2046     		mov	r0, r4
 1776 006a FFF7FEFF 		bl	lv_mem_free
 1777              	.LVL202:
 299:lvgl/src/draw/lv_img_buf.c ****     }
 1778              		.loc 1 299 9 view .LVU614
 299:lvgl/src/draw/lv_img_buf.c ****     }
 1779              		.loc 1 299 16 is_stmt 0 view .LVU615
 1780 006e 4446     		mov	r4, r8
 1781              	.LVL203:
 299:lvgl/src/draw/lv_img_buf.c ****     }
 1782              		.loc 1 299 16 view .LVU616
 1783 0070 F2E7     		b	.L111
 1784              		.cfi_endproc
 1785              	.LFE59:
 1787              		.section	.text._lv_img_buf_get_transformed_area,"ax",%progbits
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 62


 1788              		.align	1
 1789              		.global	_lv_img_buf_get_transformed_area
 1790              		.syntax unified
 1791              		.thumb
 1792              		.thumb_func
 1794              	_lv_img_buf_get_transformed_area:
 1795              	.LVL204:
 1796              	.LFB62:
 351:lvgl/src/draw/lv_img_buf.c **** 
 352:lvgl/src/draw/lv_img_buf.c **** void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, u
 353:lvgl/src/draw/lv_img_buf.c ****                                       const lv_point_t * pivot)
 354:lvgl/src/draw/lv_img_buf.c **** {
 1797              		.loc 1 354 1 is_stmt 1 view -0
 1798              		.cfi_startproc
 1799              		@ args = 8, pretend = 0, frame = 16
 1800              		@ frame_needed = 0, uses_anonymous_args = 0
 1801              		.loc 1 354 1 is_stmt 0 view .LVU618
 1802 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1803              		.cfi_def_cfa_offset 20
 1804              		.cfi_offset 4, -20
 1805              		.cfi_offset 5, -16
 1806              		.cfi_offset 6, -12
 1807              		.cfi_offset 7, -8
 1808              		.cfi_offset 14, -4
 1809 0002 85B0     		sub	sp, sp, #20
 1810              		.cfi_def_cfa_offset 40
 1811 0004 0446     		mov	r4, r0
 1812 0006 BDF82850 		ldrh	r5, [sp, #40]
 1813 000a 0B9F     		ldr	r7, [sp, #44]
 355:lvgl/src/draw/lv_img_buf.c **** #if LV_DRAW_COMPLEX
 356:lvgl/src/draw/lv_img_buf.c ****     if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 1814              		.loc 1 356 5 is_stmt 1 view .LVU619
 1815              		.loc 1 356 7 is_stmt 0 view .LVU620
 1816 000c 002B     		cmp	r3, #0
 1817 000e 08BF     		it	eq
 1818 0010 B5F5807F 		cmpeq	r5, #256
 1819 0014 08D1     		bne	.L119
 357:lvgl/src/draw/lv_img_buf.c ****         res->x1 = 0;
 1820              		.loc 1 357 9 is_stmt 1 view .LVU621
 1821              		.loc 1 357 17 is_stmt 0 view .LVU622
 1822 0016 0023     		movs	r3, #0
 1823              	.LVL205:
 1824              		.loc 1 357 17 view .LVU623
 1825 0018 0380     		strh	r3, [r0]	@ movhi
 358:lvgl/src/draw/lv_img_buf.c ****         res->y1 = 0;
 1826              		.loc 1 358 9 is_stmt 1 view .LVU624
 1827              		.loc 1 358 17 is_stmt 0 view .LVU625
 1828 001a 4380     		strh	r3, [r0, #2]	@ movhi
 359:lvgl/src/draw/lv_img_buf.c ****         res->x2 = w - 1;
 1829              		.loc 1 359 9 is_stmt 1 view .LVU626
 1830              		.loc 1 359 21 is_stmt 0 view .LVU627
 1831 001c 0139     		subs	r1, r1, #1
 1832              	.LVL206:
 1833              		.loc 1 359 17 view .LVU628
 1834 001e 8180     		strh	r1, [r0, #4]	@ movhi
 360:lvgl/src/draw/lv_img_buf.c ****         res->y2 = h - 1;
 1835              		.loc 1 360 9 is_stmt 1 view .LVU629
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 63


 1836              		.loc 1 360 21 is_stmt 0 view .LVU630
 1837 0020 013A     		subs	r2, r2, #1
 1838              	.LVL207:
 1839              		.loc 1 360 17 view .LVU631
 1840 0022 C280     		strh	r2, [r0, #6]	@ movhi
 361:lvgl/src/draw/lv_img_buf.c ****         return;
 1841              		.loc 1 361 9 is_stmt 1 view .LVU632
 1842              	.LVL208:
 1843              	.L118:
 362:lvgl/src/draw/lv_img_buf.c ****     }
 363:lvgl/src/draw/lv_img_buf.c **** 
 364:lvgl/src/draw/lv_img_buf.c ****     lv_point_t p[4] = {
 365:lvgl/src/draw/lv_img_buf.c ****         {0, 0},
 366:lvgl/src/draw/lv_img_buf.c ****         {w, 0},
 367:lvgl/src/draw/lv_img_buf.c ****         {0, h},
 368:lvgl/src/draw/lv_img_buf.c ****         {w, h},
 369:lvgl/src/draw/lv_img_buf.c ****     };
 370:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[0], angle, zoom, pivot);
 371:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[1], angle, zoom, pivot);
 372:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[2], angle, zoom, pivot);
 373:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[3], angle, zoom, pivot);
 374:lvgl/src/draw/lv_img_buf.c ****     res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 375:lvgl/src/draw/lv_img_buf.c ****     res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 376:lvgl/src/draw/lv_img_buf.c ****     res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 377:lvgl/src/draw/lv_img_buf.c ****     res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 378:lvgl/src/draw/lv_img_buf.c **** 
 379:lvgl/src/draw/lv_img_buf.c **** #else
 380:lvgl/src/draw/lv_img_buf.c ****     LV_UNUSED(angle);
 381:lvgl/src/draw/lv_img_buf.c ****     LV_UNUSED(zoom);
 382:lvgl/src/draw/lv_img_buf.c ****     LV_UNUSED(pivot);
 383:lvgl/src/draw/lv_img_buf.c ****     res->x1 = 0;
 384:lvgl/src/draw/lv_img_buf.c ****     res->y1 = 0;
 385:lvgl/src/draw/lv_img_buf.c ****     res->x2 = w - 1;
 386:lvgl/src/draw/lv_img_buf.c ****     res->y2 = h - 1;
 387:lvgl/src/draw/lv_img_buf.c **** #endif
 388:lvgl/src/draw/lv_img_buf.c **** }
 1844              		.loc 1 388 1 is_stmt 0 view .LVU633
 1845 0024 05B0     		add	sp, sp, #20
 1846              		.cfi_remember_state
 1847              		.cfi_def_cfa_offset 20
 1848              		@ sp needed
 1849 0026 F0BD     		pop	{r4, r5, r6, r7, pc}
 1850              	.LVL209:
 1851              	.L119:
 1852              		.cfi_restore_state
 1853              		.loc 1 388 1 view .LVU634
 1854 0028 1E46     		mov	r6, r3
 364:lvgl/src/draw/lv_img_buf.c ****         {0, 0},
 1855              		.loc 1 364 5 is_stmt 1 view .LVU635
 364:lvgl/src/draw/lv_img_buf.c ****         {0, 0},
 1856              		.loc 1 364 16 is_stmt 0 view .LVU636
 1857 002a 0023     		movs	r3, #0
 1858              	.LVL210:
 364:lvgl/src/draw/lv_img_buf.c ****         {0, 0},
 1859              		.loc 1 364 16 view .LVU637
 1860 002c ADF80030 		strh	r3, [sp]	@ movhi
 1861 0030 ADF80230 		strh	r3, [sp, #2]	@ movhi
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 64


 1862 0034 ADF80410 		strh	r1, [sp, #4]	@ movhi
 1863 0038 ADF80630 		strh	r3, [sp, #6]	@ movhi
 1864 003c ADF80830 		strh	r3, [sp, #8]	@ movhi
 1865 0040 ADF80A20 		strh	r2, [sp, #10]	@ movhi
 1866 0044 ADF80C10 		strh	r1, [sp, #12]	@ movhi
 1867 0048 ADF80E20 		strh	r2, [sp, #14]	@ movhi
 370:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[1], angle, zoom, pivot);
 1868              		.loc 1 370 5 is_stmt 1 view .LVU638
 1869 004c 3B46     		mov	r3, r7
 1870 004e 2A46     		mov	r2, r5
 1871              	.LVL211:
 370:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[1], angle, zoom, pivot);
 1872              		.loc 1 370 5 is_stmt 0 view .LVU639
 1873 0050 3146     		mov	r1, r6
 1874              	.LVL212:
 370:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[1], angle, zoom, pivot);
 1875              		.loc 1 370 5 view .LVU640
 1876 0052 6846     		mov	r0, sp
 1877              	.LVL213:
 370:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[1], angle, zoom, pivot);
 1878              		.loc 1 370 5 view .LVU641
 1879 0054 FFF7FEFF 		bl	lv_point_transform
 1880              	.LVL214:
 371:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[2], angle, zoom, pivot);
 1881              		.loc 1 371 5 is_stmt 1 view .LVU642
 1882 0058 3B46     		mov	r3, r7
 1883 005a 2A46     		mov	r2, r5
 1884 005c 3146     		mov	r1, r6
 1885 005e 01A8     		add	r0, sp, #4
 1886 0060 FFF7FEFF 		bl	lv_point_transform
 1887              	.LVL215:
 372:lvgl/src/draw/lv_img_buf.c ****     lv_point_transform(&p[3], angle, zoom, pivot);
 1888              		.loc 1 372 5 view .LVU643
 1889 0064 3B46     		mov	r3, r7
 1890 0066 2A46     		mov	r2, r5
 1891 0068 3146     		mov	r1, r6
 1892 006a 02A8     		add	r0, sp, #8
 1893 006c FFF7FEFF 		bl	lv_point_transform
 1894              	.LVL216:
 373:lvgl/src/draw/lv_img_buf.c ****     res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 1895              		.loc 1 373 5 view .LVU644
 1896 0070 3B46     		mov	r3, r7
 1897 0072 2A46     		mov	r2, r5
 1898 0074 3146     		mov	r1, r6
 1899 0076 03A8     		add	r0, sp, #12
 1900 0078 FFF7FEFF 		bl	lv_point_transform
 1901              	.LVL217:
 374:lvgl/src/draw/lv_img_buf.c ****     res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 1902              		.loc 1 374 5 view .LVU645
 374:lvgl/src/draw/lv_img_buf.c ****     res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 1903              		.loc 1 374 15 is_stmt 0 view .LVU646
 1904 007c BDF90C30 		ldrsh	r3, [sp, #12]
 1905 0080 BDF90850 		ldrsh	r5, [sp, #8]
 1906 0084 1A46     		mov	r2, r3
 1907 0086 AB42     		cmp	r3, r5
 1908 0088 A8BF     		it	ge
 1909 008a 2A46     		movge	r2, r5
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 65


 1910 008c BDF90410 		ldrsh	r1, [sp, #4]
 1911 0090 BDF90000 		ldrsh	r0, [sp]
 1912 0094 0E46     		mov	r6, r1
 1913 0096 8142     		cmp	r1, r0
 1914 0098 A8BF     		it	ge
 1915 009a 0646     		movge	r6, r0
 1916 009c B242     		cmp	r2, r6
 1917 009e A8BF     		it	ge
 1918 00a0 3246     		movge	r2, r6
 1919 00a2 92B2     		uxth	r2, r2
 374:lvgl/src/draw/lv_img_buf.c ****     res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 1920              		.loc 1 374 55 view .LVU647
 1921 00a4 023A     		subs	r2, r2, #2
 374:lvgl/src/draw/lv_img_buf.c ****     res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 1922              		.loc 1 374 13 view .LVU648
 1923 00a6 2280     		strh	r2, [r4]	@ movhi
 375:lvgl/src/draw/lv_img_buf.c ****     res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 1924              		.loc 1 375 5 is_stmt 1 view .LVU649
 375:lvgl/src/draw/lv_img_buf.c ****     res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 1925              		.loc 1 375 15 is_stmt 0 view .LVU650
 1926 00a8 AB42     		cmp	r3, r5
 1927 00aa B8BF     		it	lt
 1928 00ac 2B46     		movlt	r3, r5
 1929 00ae 8142     		cmp	r1, r0
 1930 00b0 B8BF     		it	lt
 1931 00b2 0146     		movlt	r1, r0
 1932 00b4 8B42     		cmp	r3, r1
 1933 00b6 B8BF     		it	lt
 1934 00b8 0B46     		movlt	r3, r1
 1935 00ba 9BB2     		uxth	r3, r3
 375:lvgl/src/draw/lv_img_buf.c ****     res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 1936              		.loc 1 375 55 view .LVU651
 1937 00bc 0233     		adds	r3, r3, #2
 375:lvgl/src/draw/lv_img_buf.c ****     res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 1938              		.loc 1 375 13 view .LVU652
 1939 00be A380     		strh	r3, [r4, #4]	@ movhi
 376:lvgl/src/draw/lv_img_buf.c ****     res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 1940              		.loc 1 376 5 is_stmt 1 view .LVU653
 376:lvgl/src/draw/lv_img_buf.c ****     res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 1941              		.loc 1 376 15 is_stmt 0 view .LVU654
 1942 00c0 BDF90E30 		ldrsh	r3, [sp, #14]
 1943 00c4 BDF90A50 		ldrsh	r5, [sp, #10]
 1944 00c8 1A46     		mov	r2, r3
 1945 00ca AB42     		cmp	r3, r5
 1946 00cc A8BF     		it	ge
 1947 00ce 2A46     		movge	r2, r5
 1948 00d0 BDF90610 		ldrsh	r1, [sp, #6]
 1949 00d4 BDF90200 		ldrsh	r0, [sp, #2]
 1950 00d8 0E46     		mov	r6, r1
 1951 00da 8142     		cmp	r1, r0
 1952 00dc A8BF     		it	ge
 1953 00de 0646     		movge	r6, r0
 1954 00e0 B242     		cmp	r2, r6
 1955 00e2 A8BF     		it	ge
 1956 00e4 3246     		movge	r2, r6
 1957 00e6 92B2     		uxth	r2, r2
 376:lvgl/src/draw/lv_img_buf.c ****     res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 66


 1958              		.loc 1 376 55 view .LVU655
 1959 00e8 023A     		subs	r2, r2, #2
 376:lvgl/src/draw/lv_img_buf.c ****     res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 1960              		.loc 1 376 13 view .LVU656
 1961 00ea 6280     		strh	r2, [r4, #2]	@ movhi
 377:lvgl/src/draw/lv_img_buf.c **** 
 1962              		.loc 1 377 5 is_stmt 1 view .LVU657
 377:lvgl/src/draw/lv_img_buf.c **** 
 1963              		.loc 1 377 15 is_stmt 0 view .LVU658
 1964 00ec AB42     		cmp	r3, r5
 1965 00ee B8BF     		it	lt
 1966 00f0 2B46     		movlt	r3, r5
 1967 00f2 8142     		cmp	r1, r0
 1968 00f4 B8BF     		it	lt
 1969 00f6 0146     		movlt	r1, r0
 1970 00f8 8B42     		cmp	r3, r1
 1971 00fa B8BF     		it	lt
 1972 00fc 0B46     		movlt	r3, r1
 1973 00fe 9BB2     		uxth	r3, r3
 377:lvgl/src/draw/lv_img_buf.c **** 
 1974              		.loc 1 377 55 view .LVU659
 1975 0100 0233     		adds	r3, r3, #2
 377:lvgl/src/draw/lv_img_buf.c **** 
 1976              		.loc 1 377 13 view .LVU660
 1977 0102 E380     		strh	r3, [r4, #6]	@ movhi
 1978 0104 8EE7     		b	.L118
 1979              		.cfi_endproc
 1980              	.LFE62:
 1982              		.section	.rodata
 1983              		.align	2
 1984              		.set	.LANCHOR0,. + 0
 1985              	.LC0:
 1986 0000 00112233 		.ascii	"\000\021\"3DUfw\210\231\252\273\314\335\356\377"
 1986      44556677 
 1986      8899AABB 
 1986      CCDDEEFF 
 1987              		.text
 1988              	.Letext0:
 1989              		.file 4 "c:\\tools\\gcc-arm-none-eabi\\lib\\gcc\\arm-none-eabi\\10.3.1\\include\\stddef.h"
 1990              		.file 5 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 1991              		.file 6 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 1992              		.file 7 "lvgl/src/draw/../misc/lv_area.h"
 1993              		.file 8 "lvgl/src/draw/lv_img_buf.h"
 1994              		.file 9 "lvgl/src/draw/lv_draw_img.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s 			page 67


DEFINED SYMBOLS
                            *ABS*:00000000 lv_img_buf.c
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:19     .text.lv_img_buf_get_px_color:00000000 $t
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:25     .text.lv_img_buf_get_px_color:00000000 lv_img_buf_get_px_color
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:385    .text.lv_img_buf_get_px_alpha:00000000 $t
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:391    .text.lv_img_buf_get_px_alpha:00000000 lv_img_buf_get_px_alpha
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:658    .text.lv_img_buf_get_px_alpha:000000f4 $d
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:665    .text.lv_img_buf_set_px_alpha:00000000 $t
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:671    .text.lv_img_buf_set_px_alpha:00000000 lv_img_buf_set_px_alpha
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:937    .text.lv_img_buf_set_px_color:00000000 $t
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:943    .text.lv_img_buf_set_px_color:00000000 lv_img_buf_set_px_color
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1334   .text.lv_img_buf_set_palette:00000000 $t
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1340   .text.lv_img_buf_set_palette:00000000 lv_img_buf_set_palette
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1457   .text.lv_img_buf_free:00000000 $t
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1463   .text.lv_img_buf_free:00000000 lv_img_buf_free
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1506   .text.lv_img_buf_get_img_size:00000000 $t
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1512   .text.lv_img_buf_get_img_size:00000000 lv_img_buf_get_img_size
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1531   .text.lv_img_buf_get_img_size:0000000c $d
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1668   .text.lv_img_buf_alloc:00000000 $t
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1674   .text.lv_img_buf_alloc:00000000 lv_img_buf_alloc
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1788   .text._lv_img_buf_get_transformed_area:00000000 $t
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1794   .text._lv_img_buf_get_transformed_area:00000000 _lv_img_buf_get_transformed_area
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1983   .rodata:00000000 $d
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1548   .text.lv_img_buf_get_img_size:0000001d $d
C:\Users\OSD\AppData\Local\Temp\cc2Dcl7p.s:1548   .text.lv_img_buf_get_img_size:0000001e $t

UNDEFINED SYMBOLS
lv_img_cf_get_px_size
lv_mem_free
lv_mem_alloc
lv_memset_00
lv_point_transform
