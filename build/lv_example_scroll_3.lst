ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_example_scroll_3.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata.float_btn_event_cb.str1.4,"aMS",%progbits,1
  19              		.align	2
  20              	.LC0:
  21 0000 54726163 		.ascii	"Track %d\000"
  21      6B202564 
  21      00
  22 0009 000000   		.align	2
  23              	.LC1:
  24 000c EF808100 		.ascii	"\357\200\201\000"
  25              		.section	.text.float_btn_event_cb,"ax",%progbits
  26              		.align	1
  27              		.syntax unified
  28              		.thumb
  29              		.thumb_func
  31              	float_btn_event_cb:
  32              	.LVL0:
  33              	.LFB204:
  34              		.file 1 "lvgl/examples/scroll/lv_example_scroll_3.c"
   1:lvgl/examples/scroll/lv_example_scroll_3.c **** #include "../lv_examples.h"
   2:lvgl/examples/scroll/lv_example_scroll_3.c **** #if LV_BUILD_EXAMPLES && LV_USE_LIST
   3:lvgl/examples/scroll/lv_example_scroll_3.c **** 
   4:lvgl/examples/scroll/lv_example_scroll_3.c **** static uint32_t btn_cnt = 1;
   5:lvgl/examples/scroll/lv_example_scroll_3.c **** 
   6:lvgl/examples/scroll/lv_example_scroll_3.c **** static void float_btn_event_cb(lv_event_t * e)
   7:lvgl/examples/scroll/lv_example_scroll_3.c **** {
  35              		.loc 1 7 1 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 32
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		.loc 1 7 1 is_stmt 0 view .LVU1
  40 0000 70B5     		push	{r4, r5, r6, lr}
  41              		.cfi_def_cfa_offset 16
  42              		.cfi_offset 4, -16
  43              		.cfi_offset 5, -12
  44              		.cfi_offset 6, -8
  45              		.cfi_offset 14, -4
  46 0002 88B0     		sub	sp, sp, #32
  47              		.cfi_def_cfa_offset 48
  48 0004 0446     		mov	r4, r0
   8:lvgl/examples/scroll/lv_example_scroll_3.c ****     lv_event_code_t code = lv_event_get_code(e);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 2


  49              		.loc 1 8 5 is_stmt 1 view .LVU2
  50              		.loc 1 8 28 is_stmt 0 view .LVU3
  51 0006 FFF7FEFF 		bl	lv_event_get_code
  52              	.LVL1:
  53              		.loc 1 8 28 view .LVU4
  54 000a 0546     		mov	r5, r0
  55              	.LVL2:
   9:lvgl/examples/scroll/lv_example_scroll_3.c ****     lv_obj_t * float_btn = lv_event_get_target(e);
  56              		.loc 1 9 5 is_stmt 1 view .LVU5
  57              		.loc 1 9 28 is_stmt 0 view .LVU6
  58 000c 2046     		mov	r0, r4
  59 000e FFF7FEFF 		bl	lv_event_get_target
  60              	.LVL3:
  10:lvgl/examples/scroll/lv_example_scroll_3.c **** 
  11:lvgl/examples/scroll/lv_example_scroll_3.c ****     if(code == LV_EVENT_CLICKED) {
  61              		.loc 1 11 5 is_stmt 1 view .LVU7
  62              		.loc 1 11 7 is_stmt 0 view .LVU8
  63 0012 072D     		cmp	r5, #7
  64 0014 01D0     		beq	.L4
  65              	.LVL4:
  66              	.L1:
  12:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_obj_t * list = lv_event_get_user_data(e);
  13:lvgl/examples/scroll/lv_example_scroll_3.c ****         char buf[32];
  14:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_snprintf(buf, sizeof(buf), "Track %d", (int)btn_cnt);
  15:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_obj_t * list_btn = lv_list_add_btn(list, LV_SYMBOL_AUDIO, buf);
  16:lvgl/examples/scroll/lv_example_scroll_3.c ****         btn_cnt++;
  17:lvgl/examples/scroll/lv_example_scroll_3.c **** 
  18:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_obj_move_foreground(float_btn);
  19:lvgl/examples/scroll/lv_example_scroll_3.c **** 
  20:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_obj_scroll_to_view(list_btn, LV_ANIM_ON);
  21:lvgl/examples/scroll/lv_example_scroll_3.c ****     }
  22:lvgl/examples/scroll/lv_example_scroll_3.c **** }
  67              		.loc 1 22 1 view .LVU9
  68 0016 08B0     		add	sp, sp, #32
  69              		.cfi_remember_state
  70              		.cfi_def_cfa_offset 16
  71              		@ sp needed
  72 0018 70BD     		pop	{r4, r5, r6, pc}
  73              	.LVL5:
  74              	.L4:
  75              		.cfi_restore_state
  76              		.loc 1 22 1 view .LVU10
  77 001a 0646     		mov	r6, r0
  78              	.LBB10:
  12:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_obj_t * list = lv_event_get_user_data(e);
  79              		.loc 1 12 9 is_stmt 1 view .LVU11
  12:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_obj_t * list = lv_event_get_user_data(e);
  80              		.loc 1 12 27 is_stmt 0 view .LVU12
  81 001c 2046     		mov	r0, r4
  82              	.LVL6:
  12:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_obj_t * list = lv_event_get_user_data(e);
  83              		.loc 1 12 27 view .LVU13
  84 001e FFF7FEFF 		bl	lv_event_get_user_data
  85              	.LVL7:
  86 0022 0446     		mov	r4, r0
  87              	.LVL8:
  13:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_snprintf(buf, sizeof(buf), "Track %d", (int)btn_cnt);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 3


  88              		.loc 1 13 9 is_stmt 1 view .LVU14
  14:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_obj_t * list_btn = lv_list_add_btn(list, LV_SYMBOL_AUDIO, buf);
  89              		.loc 1 14 9 view .LVU15
  90 0024 0E4D     		ldr	r5, .L5
  91              	.LVL9:
  14:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_obj_t * list_btn = lv_list_add_btn(list, LV_SYMBOL_AUDIO, buf);
  92              		.loc 1 14 9 is_stmt 0 view .LVU16
  93 0026 2B68     		ldr	r3, [r5]
  94 0028 0E4A     		ldr	r2, .L5+4
  95 002a 2021     		movs	r1, #32
  96 002c 6846     		mov	r0, sp
  97              	.LVL10:
  14:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_obj_t * list_btn = lv_list_add_btn(list, LV_SYMBOL_AUDIO, buf);
  98              		.loc 1 14 9 view .LVU17
  99 002e FFF7FEFF 		bl	lv_snprintf
 100              	.LVL11:
  15:lvgl/examples/scroll/lv_example_scroll_3.c ****         btn_cnt++;
 101              		.loc 1 15 9 is_stmt 1 view .LVU18
  15:lvgl/examples/scroll/lv_example_scroll_3.c ****         btn_cnt++;
 102              		.loc 1 15 31 is_stmt 0 view .LVU19
 103 0032 6A46     		mov	r2, sp
 104 0034 0C49     		ldr	r1, .L5+8
 105 0036 2046     		mov	r0, r4
 106 0038 FFF7FEFF 		bl	lv_list_add_btn
 107              	.LVL12:
 108 003c 0446     		mov	r4, r0
 109              	.LVL13:
  16:lvgl/examples/scroll/lv_example_scroll_3.c **** 
 110              		.loc 1 16 9 is_stmt 1 view .LVU20
  16:lvgl/examples/scroll/lv_example_scroll_3.c **** 
 111              		.loc 1 16 16 is_stmt 0 view .LVU21
 112 003e 2B68     		ldr	r3, [r5]
 113 0040 0133     		adds	r3, r3, #1
 114 0042 2B60     		str	r3, [r5]
  18:lvgl/examples/scroll/lv_example_scroll_3.c **** 
 115              		.loc 1 18 9 is_stmt 1 view .LVU22
 116              	.LVL14:
 117              	.LBB11:
 118              	.LBI11:
 119              		.file 2 "lvgl/examples/scroll/../../src/lv_api_map.h"
   1:lvgl/examples/scroll/../../src/lv_api_map.h **** /**
   2:lvgl/examples/scroll/../../src/lv_api_map.h ****  * @file lv_api_map.h
   3:lvgl/examples/scroll/../../src/lv_api_map.h ****  *
   4:lvgl/examples/scroll/../../src/lv_api_map.h ****  */
   5:lvgl/examples/scroll/../../src/lv_api_map.h **** 
   6:lvgl/examples/scroll/../../src/lv_api_map.h **** #ifndef LV_API_MAP_H
   7:lvgl/examples/scroll/../../src/lv_api_map.h **** #define LV_API_MAP_H
   8:lvgl/examples/scroll/../../src/lv_api_map.h **** 
   9:lvgl/examples/scroll/../../src/lv_api_map.h **** #ifdef __cplusplus
  10:lvgl/examples/scroll/../../src/lv_api_map.h **** extern "C" {
  11:lvgl/examples/scroll/../../src/lv_api_map.h **** #endif
  12:lvgl/examples/scroll/../../src/lv_api_map.h **** 
  13:lvgl/examples/scroll/../../src/lv_api_map.h **** /*********************
  14:lvgl/examples/scroll/../../src/lv_api_map.h ****  *      INCLUDES
  15:lvgl/examples/scroll/../../src/lv_api_map.h ****  *********************/
  16:lvgl/examples/scroll/../../src/lv_api_map.h **** #include "../lvgl.h"
  17:lvgl/examples/scroll/../../src/lv_api_map.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 4


  18:lvgl/examples/scroll/../../src/lv_api_map.h **** /*********************
  19:lvgl/examples/scroll/../../src/lv_api_map.h ****  *      DEFINES
  20:lvgl/examples/scroll/../../src/lv_api_map.h ****  *********************/
  21:lvgl/examples/scroll/../../src/lv_api_map.h **** 
  22:lvgl/examples/scroll/../../src/lv_api_map.h **** #define LV_NO_TASK_READY        LV_NO_TIMER_READY
  23:lvgl/examples/scroll/../../src/lv_api_map.h **** #define LV_INDEV_STATE_REL      LV_INDEV_STATE_RELEASED
  24:lvgl/examples/scroll/../../src/lv_api_map.h **** #define LV_INDEV_STATE_PR       LV_INDEV_STATE_PRESSED
  25:lvgl/examples/scroll/../../src/lv_api_map.h **** #define LV_OBJ_FLAG_SNAPABLE    LV_OBJ_FLAG_SNAPPABLE   /*Fixed typo*/
  26:lvgl/examples/scroll/../../src/lv_api_map.h **** 
  27:lvgl/examples/scroll/../../src/lv_api_map.h **** /**********************
  28:lvgl/examples/scroll/../../src/lv_api_map.h ****  *      TYPEDEFS
  29:lvgl/examples/scroll/../../src/lv_api_map.h ****  **********************/
  30:lvgl/examples/scroll/../../src/lv_api_map.h **** 
  31:lvgl/examples/scroll/../../src/lv_api_map.h **** /**********************
  32:lvgl/examples/scroll/../../src/lv_api_map.h ****  * GLOBAL PROTOTYPES
  33:lvgl/examples/scroll/../../src/lv_api_map.h ****  **********************/
  34:lvgl/examples/scroll/../../src/lv_api_map.h **** 
  35:lvgl/examples/scroll/../../src/lv_api_map.h **** static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_task_handler(void)
  36:lvgl/examples/scroll/../../src/lv_api_map.h **** {
  37:lvgl/examples/scroll/../../src/lv_api_map.h ****     return lv_timer_handler();
  38:lvgl/examples/scroll/../../src/lv_api_map.h **** }
  39:lvgl/examples/scroll/../../src/lv_api_map.h **** 
  40:lvgl/examples/scroll/../../src/lv_api_map.h **** /**********************
  41:lvgl/examples/scroll/../../src/lv_api_map.h ****  *      MACROS
  42:lvgl/examples/scroll/../../src/lv_api_map.h ****  **********************/
  43:lvgl/examples/scroll/../../src/lv_api_map.h **** 
  44:lvgl/examples/scroll/../../src/lv_api_map.h **** /**********************
  45:lvgl/examples/scroll/../../src/lv_api_map.h ****  * INLINE FUNCTIONS
  46:lvgl/examples/scroll/../../src/lv_api_map.h ****  **********************/
  47:lvgl/examples/scroll/../../src/lv_api_map.h **** 
  48:lvgl/examples/scroll/../../src/lv_api_map.h **** /**
  49:lvgl/examples/scroll/../../src/lv_api_map.h ****  * Move the object to the foreground.
  50:lvgl/examples/scroll/../../src/lv_api_map.h ****  * It will look like if it was created as the last child of its parent.
  51:lvgl/examples/scroll/../../src/lv_api_map.h ****  * It also means it can cover any of the siblings.
  52:lvgl/examples/scroll/../../src/lv_api_map.h ****  * @param obj       pointer to an object
  53:lvgl/examples/scroll/../../src/lv_api_map.h ****  */
  54:lvgl/examples/scroll/../../src/lv_api_map.h **** static inline void lv_obj_move_foreground(lv_obj_t * obj)
 120              		.loc 2 54 20 view .LVU23
 121              	.LBB12:
  55:lvgl/examples/scroll/../../src/lv_api_map.h **** {
  56:lvgl/examples/scroll/../../src/lv_api_map.h ****     lv_obj_t * parent = lv_obj_get_parent(obj);
 122              		.loc 2 56 5 view .LVU24
 123              		.loc 2 56 25 is_stmt 0 view .LVU25
 124 0044 3046     		mov	r0, r6
 125              	.LVL15:
 126              		.loc 2 56 25 view .LVU26
 127 0046 FFF7FEFF 		bl	lv_obj_get_parent
 128              	.LVL16:
  57:lvgl/examples/scroll/../../src/lv_api_map.h ****     lv_obj_move_to_index(obj, lv_obj_get_child_cnt(parent) - 1);
 129              		.loc 2 57 5 is_stmt 1 view .LVU27
 130              		.loc 2 57 31 is_stmt 0 view .LVU28
 131 004a FFF7FEFF 		bl	lv_obj_get_child_cnt
 132              	.LVL17:
 133              		.loc 2 57 5 view .LVU29
 134 004e 411E     		subs	r1, r0, #1
 135 0050 3046     		mov	r0, r6
 136 0052 FFF7FEFF 		bl	lv_obj_move_to_index
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 5


 137              	.LVL18:
 138              		.loc 2 57 5 view .LVU30
 139              	.LBE12:
 140              	.LBE11:
  20:lvgl/examples/scroll/lv_example_scroll_3.c ****     }
 141              		.loc 1 20 9 is_stmt 1 view .LVU31
 142 0056 0121     		movs	r1, #1
 143 0058 2046     		mov	r0, r4
 144 005a FFF7FEFF 		bl	lv_obj_scroll_to_view
 145              	.LVL19:
 146              	.LBE10:
 147              		.loc 1 22 1 is_stmt 0 view .LVU32
 148 005e DAE7     		b	.L1
 149              	.L6:
 150              		.align	2
 151              	.L5:
 152 0060 00000000 		.word	.LANCHOR0
 153 0064 00000000 		.word	.LC0
 154 0068 0C000000 		.word	.LC1
 155              		.cfi_endproc
 156              	.LFE204:
 158              		.section	.rodata.lv_example_scroll_3.str1.4,"aMS",%progbits,1
 159              		.align	2
 160              	.LC2:
 161 0000 EF81A700 		.ascii	"\357\201\247\000"
 162              		.section	.text.lv_example_scroll_3,"ax",%progbits
 163              		.align	1
 164              		.global	lv_example_scroll_3
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 169              	lv_example_scroll_3:
 170              	.LFB205:
  23:lvgl/examples/scroll/lv_example_scroll_3.c **** 
  24:lvgl/examples/scroll/lv_example_scroll_3.c **** /**
  25:lvgl/examples/scroll/lv_example_scroll_3.c ****  * Create a list with a floating button
  26:lvgl/examples/scroll/lv_example_scroll_3.c ****  */
  27:lvgl/examples/scroll/lv_example_scroll_3.c **** void lv_example_scroll_3(void)
  28:lvgl/examples/scroll/lv_example_scroll_3.c **** {
 171              		.loc 1 28 1 is_stmt 1 view -0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 32
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175 0000 30B5     		push	{r4, r5, lr}
 176              		.cfi_def_cfa_offset 12
 177              		.cfi_offset 4, -12
 178              		.cfi_offset 5, -8
 179              		.cfi_offset 14, -4
 180 0002 89B0     		sub	sp, sp, #36
 181              		.cfi_def_cfa_offset 48
  29:lvgl/examples/scroll/lv_example_scroll_3.c ****     lv_obj_t * list = lv_list_create(lv_scr_act());
 182              		.loc 1 29 5 view .LVU34
 183              	.LBB20:
 184              	.LBI20:
 185              		.file 3 "lvgl/examples/scroll/../../src/core/lv_disp.h"
   1:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
   2:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @file lv_disp.h
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 6


   3:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *
   4:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
   5:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
   6:lvgl/examples/scroll/../../src/core/lv_disp.h **** #ifndef LV_DISP_H
   7:lvgl/examples/scroll/../../src/core/lv_disp.h **** #define LV_DISP_H
   8:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
   9:lvgl/examples/scroll/../../src/core/lv_disp.h **** #ifdef __cplusplus
  10:lvgl/examples/scroll/../../src/core/lv_disp.h **** extern "C" {
  11:lvgl/examples/scroll/../../src/core/lv_disp.h **** #endif
  12:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  13:lvgl/examples/scroll/../../src/core/lv_disp.h **** /*********************
  14:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *      INCLUDES
  15:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *********************/
  16:lvgl/examples/scroll/../../src/core/lv_disp.h **** #include "../hal/lv_hal.h"
  17:lvgl/examples/scroll/../../src/core/lv_disp.h **** #include "lv_obj.h"
  18:lvgl/examples/scroll/../../src/core/lv_disp.h **** #include "lv_theme.h"
  19:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  20:lvgl/examples/scroll/../../src/core/lv_disp.h **** /*********************
  21:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *      DEFINES
  22:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *********************/
  23:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  24:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**********************
  25:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *      TYPEDEFS
  26:lvgl/examples/scroll/../../src/core/lv_disp.h ****  **********************/
  27:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  28:lvgl/examples/scroll/../../src/core/lv_disp.h **** typedef enum {
  29:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_NONE,
  30:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_LEFT,
  31:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_RIGHT,
  32:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_TOP,
  33:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_BOTTOM,
  34:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_LEFT,
  35:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_RIGHT,
  36:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_TOP,
  37:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_BOTTOM,
  38:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_IN,
  39:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_ON = LV_SCR_LOAD_ANIM_FADE_IN, /*For backward compatibility*/
  40:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_OUT,
  41:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_LEFT,
  42:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_RIGHT,
  43:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_TOP,
  44:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_BOTTOM,
  45:lvgl/examples/scroll/../../src/core/lv_disp.h **** } lv_scr_load_anim_t;
  46:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  47:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**********************
  48:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * GLOBAL PROTOTYPES
  49:lvgl/examples/scroll/../../src/core/lv_disp.h ****  **********************/
  50:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  51:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
  52:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Return with a pointer to the active screen
  53:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to display which active screen should be get. (NULL to use the default
  54:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * screen)
  55:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return pointer to the active screen object (loaded by 'lv_scr_load()')
  56:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  57:lvgl/examples/scroll/../../src/core/lv_disp.h **** lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp);
  58:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  59:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 7


  60:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Return with a pointer to the previous screen. Only used during screen transitions.
  61:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to display which previous screen should be get. (NULL to use the default
  62:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * screen)
  63:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return pointer to the previous screen object or NULL if not used now
  64:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  65:lvgl/examples/scroll/../../src/core/lv_disp.h **** lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp);
  66:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  67:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
  68:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Make a screen active
  69:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param scr pointer to a screen
  70:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  71:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_load_scr(lv_obj_t * scr);
  72:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  73:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
  74:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Return with the top layer. (Same on every screen and it is above the normal screen layer)
  75:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
  76:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return pointer to the top layer object (transparent screen sized lv_obj)
  77:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  78:lvgl/examples/scroll/../../src/core/lv_disp.h **** lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp);
  79:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  80:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
  81:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Return with the sys. layer. (Same on every screen and it is above the normal screen and the top
  82:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * layer)
  83:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default sc
  84:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return pointer to the sys layer object (transparent screen sized lv_obj)
  85:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  86:lvgl/examples/scroll/../../src/core/lv_disp.h **** lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp);
  87:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  88:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
  89:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Set the theme of a display
  90:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display
  91:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  92:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_set_theme(lv_disp_t * disp, lv_theme_t * th);
  93:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  94:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
  95:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Get the theme of a display
  96:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display
  97:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return the display's theme (can be NULL)
  98:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  99:lvgl/examples/scroll/../../src/core/lv_disp.h **** lv_theme_t * lv_disp_get_theme(lv_disp_t * disp);
 100:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 101:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 102:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Set the background color of a display
 103:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display
 104:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param color color of the background
 105:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 106:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_set_bg_color(lv_disp_t * disp, lv_color_t color);
 107:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 108:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 109:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Set the background image of a display
 110:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display
 111:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param img_src path to file or pointer to an `lv_img_dsc_t` variable
 112:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 113:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_set_bg_image(lv_disp_t * disp, const void  * img_src);
 114:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 115:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 116:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Set opacity of the background
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 8


 117:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display
 118:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param opa opacity (0..255)
 119:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 120:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_set_bg_opa(lv_disp_t * disp, lv_opa_t opa);
 121:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 122:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 123:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Switch screen with animation
 124:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param scr pointer to the new screen to load
 125:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param anim_type type of the animation from `lv_scr_load_anim_t`, e.g. `LV_SCR_LOAD_ANIM_MOVE_LE
 126:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param time time of the animation
 127:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param delay delay before the transition
 128:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param auto_del true: automatically delete the old screen
 129:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 130:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_scr_load_anim(lv_obj_t * scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, 
 131:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 132:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 133:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Get elapsed time since last user activity on a display (e.g. click)
 134:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to get the overall smallest inactivity)
 135:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return elapsed ticks (milliseconds) since the last activity
 136:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 137:lvgl/examples/scroll/../../src/core/lv_disp.h **** uint32_t lv_disp_get_inactive_time(const lv_disp_t * disp);
 138:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 139:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 140:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Manually trigger an activity on a display
 141:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 142:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 143:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_trig_activity(lv_disp_t * disp);
 144:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 145:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 146:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Clean any CPU cache that is related to the display.
 147:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 148:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 149:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_clean_dcache(lv_disp_t * disp);
 150:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 151:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 152:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Temporarily enable and disable the invalidation of the display.
 153:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 154:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param en true: enable invalidation; false: invalidation
 155:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 156:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_enable_invalidation(lv_disp_t * disp, bool en);
 157:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 158:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 159:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Get display invalidation is enabled.
 160:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 161:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return return true if invalidation is enabled
 162:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 163:lvgl/examples/scroll/../../src/core/lv_disp.h **** bool lv_disp_is_invalidation_enabled(lv_disp_t * disp);
 164:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 165:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 166:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Get a pointer to the screen refresher timer to
 167:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * modify its parameters with `lv_timer_...` functions.
 168:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display
 169:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return pointer to the display refresher timer. (NULL on error)
 170:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 171:lvgl/examples/scroll/../../src/core/lv_disp.h **** lv_timer_t * _lv_disp_get_refr_timer(lv_disp_t * disp);
 172:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 173:lvgl/examples/scroll/../../src/core/lv_disp.h **** /*------------------------------------------------
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 9


 174:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * To improve backward compatibility
 175:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Recommended only if you have one display
 176:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *------------------------------------------------*/
 177:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 178:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 179:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Get the active screen of the default display
 180:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return pointer to the active screen
 181:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 182:lvgl/examples/scroll/../../src/core/lv_disp.h **** static inline lv_obj_t * lv_scr_act(void)
 186              		.loc 3 182 26 view .LVU35
 187              	.LBB21:
 183:lvgl/examples/scroll/../../src/core/lv_disp.h **** {
 184:lvgl/examples/scroll/../../src/core/lv_disp.h ****     return lv_disp_get_scr_act(lv_disp_get_default());
 188              		.loc 3 184 5 view .LVU36
 189              		.loc 3 184 12 is_stmt 0 view .LVU37
 190 0004 FFF7FEFF 		bl	lv_disp_get_default
 191              	.LVL20:
 192 0008 FFF7FEFF 		bl	lv_disp_get_scr_act
 193              	.LVL21:
 194              	.LBE21:
 195              	.LBE20:
 196              		.loc 1 29 23 view .LVU38
 197 000c FFF7FEFF 		bl	lv_list_create
 198              	.LVL22:
 199 0010 0446     		mov	r4, r0
 200              	.LVL23:
  30:lvgl/examples/scroll/lv_example_scroll_3.c ****     lv_obj_set_size(list, 280, 220);
 201              		.loc 1 30 5 is_stmt 1 view .LVU39
 202 0012 DC22     		movs	r2, #220
 203 0014 4FF48C71 		mov	r1, #280
 204 0018 FFF7FEFF 		bl	lv_obj_set_size
 205              	.LVL24:
  31:lvgl/examples/scroll/lv_example_scroll_3.c ****     lv_obj_center(list);
 206              		.loc 1 31 5 view .LVU40
 207              	.LBB22:
 208              	.LBI22:
 209              		.file 4 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\core\\lv_obj_pos.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @file lv_obj_pos.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #ifndef LV_OBJ_POS_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #define LV_OBJ_POS_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #include "../misc/lv_area.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /*********************
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *      DEFINES
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *********************/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 10


  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**********************
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *      TYPEDEFS
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  **********************/
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** struct _lv_obj_t;
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** typedef void (*lv_layout_update_cb_t)(struct _lv_obj_t *, void * user_data);
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** typedef struct {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****     lv_layout_update_cb_t cb;
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****     void * user_data;
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** } lv_layout_dsc_t;
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**********************
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * GLOBAL PROTOTYPES
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  **********************/
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the position of an object relative to the set alignment.
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param x         new x coordinate
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param y         new y coordinate
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_pos(struct _lv_obj_t * obj, lv_coord_t x, lv_coord_t y);
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the x coordinate of an object
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param x         new x coordinate
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_x(struct _lv_obj_t * obj, lv_coord_t x);
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the y coordinate of an object
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param y         new y coordinate
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_y(struct _lv_obj_t * obj, lv_coord_t y);
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the size of an object.
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param w         the new width
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param h         the new height
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            possible values are:
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 11


  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  LV_SIZE_PCT(x)     to set size in percentage of the parent's content area size 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_size(struct _lv_obj_t * obj, lv_coord_t w, lv_coord_t h);
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Recalculate the size of the object
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @return          true: the size has been changed
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** bool lv_obj_refr_size(struct _lv_obj_t * obj);
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the width of an object
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param w         the new width
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            possible values are:
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  lv_pct(x)           to set size in percentage of the parent's content area size
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_width(struct _lv_obj_t * obj, lv_coord_t w);
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the height of an object
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param h         the new height
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            possible values are:
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  lv_pct(x)           to set size in percentage of the parent's content area size
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_height(struct _lv_obj_t * obj, lv_coord_t h);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the width reduced by the left and right padding and the border width.
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param w         the width without paddings in pixels
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_content_width(struct _lv_obj_t * obj, lv_coord_t w);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the height reduced by the top and bottom padding and the border width.
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param h         the height without paddings in pixels
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_content_height(struct _lv_obj_t * obj, lv_coord_t h);
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set a layout for an object
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param layout    pointer to a layout descriptor to set
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_layout(struct _lv_obj_t * obj, uint32_t layout);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 12


 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Test whether the and object is positioned by a layout or not
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to test
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @return true:    positioned by a layout; false: not positioned by a layout
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** bool lv_obj_is_layout_positioned(const struct _lv_obj_t * obj);
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Mark the object for layout update.
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj      pointer to an object whose children needs to be updated
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_mark_layout_as_dirty(struct _lv_obj_t * obj);
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Update the layout of an object.
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj      pointer to an object whose children needs to be updated
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_update_layout(const struct _lv_obj_t * obj);
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Register a new layout
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param cb        the layout update callback
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param user_data custom data that will be passed to `cb`
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @return          the ID of the new layout
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data);
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Change the alignment of an object.
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum) `LV_ALIGN_OUT_...` can't be used.
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_align(struct _lv_obj_t * obj, lv_align_t align);
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Change the alignment of an object and set new coordinates.
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Equivalent to:
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * lv_obj_set_align(obj, align);
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * lv_obj_set_pos(obj, x_ofs, y_ofs);
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum) `LV_ALIGN_OUT_...` can't be used.
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param x_ofs     x coordinate offset after alignment
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param y_ofs     y coordinate offset after alignment
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_align(struct _lv_obj_t * obj, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs);
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Align an object to an other object.
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param base      pointer to an other object (if NULL `obj`s parent is used). 'obj' will be align
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum)
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param x_ofs     x coordinate offset after alignment
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param y_ofs     y coordinate offset after alignment
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            if the position or size of `base` changes `obj` needs to be aligned manually ag
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_align_to(struct _lv_obj_t * obj, const struct _lv_obj_t * base, lv_align_t align, lv_co
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 13


 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****                      lv_coord_t y_ofs);
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Align an object to the center on its parent.
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            if the parent size changes `obj` needs to be aligned manually again
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** static inline void lv_obj_center(struct _lv_obj_t * obj)
 210              		.loc 4 199 20 view .LVU41
 211              	.LBB23:
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** {
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****     lv_obj_align(obj, LV_ALIGN_CENTER, 0, 0);
 212              		.loc 4 201 5 view .LVU42
 213 001c 0023     		movs	r3, #0
 214 001e 1A46     		mov	r2, r3
 215 0020 0921     		movs	r1, #9
 216 0022 2046     		mov	r0, r4
 217 0024 FFF7FEFF 		bl	lv_obj_align
 218              	.LVL25:
 219              		.loc 4 201 5 is_stmt 0 view .LVU43
 220              	.LBE23:
 221              	.LBE22:
  32:lvgl/examples/scroll/lv_example_scroll_3.c **** 
  33:lvgl/examples/scroll/lv_example_scroll_3.c ****     for(btn_cnt = 1; btn_cnt <= 2; btn_cnt++) {
 222              		.loc 1 33 5 is_stmt 1 view .LVU44
 223              		.loc 1 33 17 is_stmt 0 view .LVU45
 224 0028 254B     		ldr	r3, .L11
 225 002a 0122     		movs	r2, #1
 226 002c 1A60     		str	r2, [r3]
 227              		.loc 1 33 5 view .LVU46
 228 002e 0DE0     		b	.L8
 229              	.L9:
 230              	.LBB24:
  34:lvgl/examples/scroll/lv_example_scroll_3.c ****         char buf[32];
 231              		.loc 1 34 9 is_stmt 1 discriminator 3 view .LVU47
  35:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_snprintf(buf, sizeof(buf), "Track %d", (int)btn_cnt);
 232              		.loc 1 35 9 discriminator 3 view .LVU48
 233 0030 244A     		ldr	r2, .L11+4
 234 0032 2021     		movs	r1, #32
 235 0034 6846     		mov	r0, sp
 236 0036 FFF7FEFF 		bl	lv_snprintf
 237              	.LVL26:
  36:lvgl/examples/scroll/lv_example_scroll_3.c ****         lv_list_add_btn(list, LV_SYMBOL_AUDIO, buf);
 238              		.loc 1 36 9 discriminator 3 view .LVU49
 239 003a 6A46     		mov	r2, sp
 240 003c 2249     		ldr	r1, .L11+8
 241 003e 2046     		mov	r0, r4
 242 0040 FFF7FEFF 		bl	lv_list_add_btn
 243              	.LVL27:
 244              	.LBE24:
  33:lvgl/examples/scroll/lv_example_scroll_3.c ****         char buf[32];
 245              		.loc 1 33 36 discriminator 3 view .LVU50
  33:lvgl/examples/scroll/lv_example_scroll_3.c ****         char buf[32];
 246              		.loc 1 33 43 is_stmt 0 discriminator 3 view .LVU51
 247 0044 1E49     		ldr	r1, .L11
 248 0046 0A68     		ldr	r2, [r1]
 249 0048 0132     		adds	r2, r2, #1
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 14


 250 004a 0A60     		str	r2, [r1]
 251              	.L8:
  33:lvgl/examples/scroll/lv_example_scroll_3.c ****         char buf[32];
 252              		.loc 1 33 22 is_stmt 1 discriminator 1 view .LVU52
  33:lvgl/examples/scroll/lv_example_scroll_3.c ****         char buf[32];
 253              		.loc 1 33 30 is_stmt 0 discriminator 1 view .LVU53
 254 004c 1C4A     		ldr	r2, .L11
 255 004e 1368     		ldr	r3, [r2]
  33:lvgl/examples/scroll/lv_example_scroll_3.c ****         char buf[32];
 256              		.loc 1 33 5 discriminator 1 view .LVU54
 257 0050 022B     		cmp	r3, #2
 258 0052 EDD9     		bls	.L9
  37:lvgl/examples/scroll/lv_example_scroll_3.c ****     }
  38:lvgl/examples/scroll/lv_example_scroll_3.c **** 
  39:lvgl/examples/scroll/lv_example_scroll_3.c ****     lv_obj_t * float_btn = lv_btn_create(list);
 259              		.loc 1 39 5 is_stmt 1 view .LVU55
 260              		.loc 1 39 28 is_stmt 0 view .LVU56
 261 0054 2046     		mov	r0, r4
 262 0056 FFF7FEFF 		bl	lv_btn_create
 263              	.LVL28:
 264 005a 0546     		mov	r5, r0
 265              	.LVL29:
  40:lvgl/examples/scroll/lv_example_scroll_3.c ****     lv_obj_set_size(float_btn, 50, 50);
 266              		.loc 1 40 5 is_stmt 1 view .LVU57
 267 005c 3222     		movs	r2, #50
 268 005e 1146     		mov	r1, r2
 269 0060 FFF7FEFF 		bl	lv_obj_set_size
 270              	.LVL30:
  41:lvgl/examples/scroll/lv_example_scroll_3.c ****     lv_obj_add_flag(float_btn, LV_OBJ_FLAG_FLOATING);
 271              		.loc 1 41 5 view .LVU58
 272 0064 4FF48021 		mov	r1, #262144
 273 0068 2846     		mov	r0, r5
 274 006a FFF7FEFF 		bl	lv_obj_add_flag
 275              	.LVL31:
  42:lvgl/examples/scroll/lv_example_scroll_3.c ****     lv_obj_align(float_btn, LV_ALIGN_BOTTOM_RIGHT, 0, -lv_obj_get_style_pad_right(list, LV_PART_MAI
 276              		.loc 1 42 5 view .LVU59
 277              	.LBB25:
 278              	.LBI25:
 279              		.file 5 "lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h"
   1:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
   2:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
   3:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
   4:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
   5:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
   6:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
   7:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_min_width(const struct _lv_obj_t * obj, uint32_t part)
   8:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
   9:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
  10:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  11:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  12:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  13:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_max_width(const struct _lv_obj_t * obj, uint32_t part)
  14:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  15:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
  16:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  17:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  18:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 15


  19:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
  20:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  21:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
  22:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  23:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  24:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  25:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_min_height(const struct _lv_obj_t * obj, uint32_t part)
  26:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  27:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
  28:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  29:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  30:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  31:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_max_height(const struct _lv_obj_t * obj, uint32_t part)
  32:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  33:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
  34:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  35:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  36:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  37:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_x(const struct _lv_obj_t * obj, uint32_t part)
  38:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  39:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
  40:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  41:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  42:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  43:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_y(const struct _lv_obj_t * obj, uint32_t part)
  44:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  45:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
  46:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  47:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  48:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  49:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_align_t lv_obj_get_style_align(const struct _lv_obj_t * obj, uint32_t part)
  50:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  51:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
  52:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_align_t)v.num;
  53:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  54:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  55:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_transform_width(const struct _lv_obj_t * obj, uint32_t pa
  56:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  57:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
  58:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  59:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  60:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  61:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_transform_height(const struct _lv_obj_t * obj, uint32_t p
  62:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  63:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
  64:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  65:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  66:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  67:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_translate_x(const struct _lv_obj_t * obj, uint32_t part)
  68:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  69:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
  70:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  71:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  72:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  73:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_translate_y(const struct _lv_obj_t * obj, uint32_t part)
  74:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  75:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 16


  76:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  77:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  78:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  79:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_transform_zoom(const struct _lv_obj_t * obj, uint32_t par
  80:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  81:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
  82:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  83:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  84:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  85:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_transform_angle(const struct _lv_obj_t * obj, uint32_t pa
  86:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  87:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
  88:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  89:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  90:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  91:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_transform_pivot_x(const struct _lv_obj_t * obj, uint32_t 
  92:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  93:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
  94:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
  95:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
  96:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
  97:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_transform_pivot_y(const struct _lv_obj_t * obj, uint32_t 
  98:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
  99:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 100:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 101:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
 102:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
 103:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
 104:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
 105:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 106:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 107:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
 108:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
 109:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_pad_bottom(const struct _lv_obj_t * obj, uint32_t part)
 110:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
 111:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 112:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 113:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
 114:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
 115:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
 116:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
 117:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 118:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 119:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** }
 120:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** 
 121:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
 280              		.loc 5 121 26 view .LVU60
 281              	.LBB26:
 122:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h **** {
 123:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 282              		.loc 5 123 5 view .LVU61
 283              		.loc 5 123 26 is_stmt 0 view .LVU62
 284 006e 1322     		movs	r2, #19
 285 0070 0021     		movs	r1, #0
 286 0072 2046     		mov	r0, r4
 287 0074 FFF7FEFF 		bl	lv_obj_get_style_prop
 288              	.LVL32:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 17


 124:lvgl/examples/scroll/../../src/core/lv_obj_style_gen.h ****     return (lv_coord_t)v.num;
 289              		.loc 5 124 5 is_stmt 1 view .LVU63
 290              		.loc 5 124 5 is_stmt 0 view .LVU64
 291              	.LBE26:
 292              	.LBE25:
 293              		.loc 1 42 56 view .LVU65
 294 0078 83B2     		uxth	r3, r0
 295              		.loc 1 42 5 view .LVU66
 296 007a 5B42     		rsbs	r3, r3, #0
 297 007c 1BB2     		sxth	r3, r3
 298 007e 0022     		movs	r2, #0
 299 0080 0621     		movs	r1, #6
 300 0082 2846     		mov	r0, r5
 301 0084 FFF7FEFF 		bl	lv_obj_align
 302              	.LVL33:
  43:lvgl/examples/scroll/lv_example_scroll_3.c ****     lv_obj_add_event_cb(float_btn, float_btn_event_cb, LV_EVENT_ALL, list);
 303              		.loc 1 43 5 is_stmt 1 view .LVU67
 304 0088 2346     		mov	r3, r4
 305 008a 0022     		movs	r2, #0
 306 008c 0F49     		ldr	r1, .L11+12
 307 008e 2846     		mov	r0, r5
 308 0090 FFF7FEFF 		bl	lv_obj_add_event_cb
 309              	.LVL34:
  44:lvgl/examples/scroll/lv_example_scroll_3.c ****     lv_obj_set_style_radius(float_btn, LV_RADIUS_CIRCLE, 0);
 310              		.loc 1 44 5 view .LVU68
 311 0094 0022     		movs	r2, #0
 312 0096 47F6FF71 		movw	r1, #32767
 313 009a 2846     		mov	r0, r5
 314 009c FFF7FEFF 		bl	lv_obj_set_style_radius
 315              	.LVL35:
  45:lvgl/examples/scroll/lv_example_scroll_3.c ****     lv_obj_set_style_bg_img_src(float_btn, LV_SYMBOL_PLUS, 0);
 316              		.loc 1 45 5 view .LVU69
 317 00a0 0022     		movs	r2, #0
 318 00a2 0B49     		ldr	r1, .L11+16
 319 00a4 2846     		mov	r0, r5
 320 00a6 FFF7FEFF 		bl	lv_obj_set_style_bg_img_src
 321              	.LVL36:
  46:lvgl/examples/scroll/lv_example_scroll_3.c ****     lv_obj_set_style_text_font(float_btn, lv_theme_get_font_large(float_btn), 0);
 322              		.loc 1 46 5 view .LVU70
 323 00aa 2846     		mov	r0, r5
 324 00ac FFF7FEFF 		bl	lv_theme_get_font_large
 325              	.LVL37:
 326 00b0 0146     		mov	r1, r0
 327 00b2 0022     		movs	r2, #0
 328 00b4 2846     		mov	r0, r5
 329 00b6 FFF7FEFF 		bl	lv_obj_set_style_text_font
 330              	.LVL38:
  47:lvgl/examples/scroll/lv_example_scroll_3.c **** }
 331              		.loc 1 47 1 is_stmt 0 view .LVU71
 332 00ba 09B0     		add	sp, sp, #36
 333              		.cfi_def_cfa_offset 12
 334              		@ sp needed
 335 00bc 30BD     		pop	{r4, r5, pc}
 336              	.LVL39:
 337              	.L12:
 338              		.loc 1 47 1 view .LVU72
 339 00be 00BF     		.align	2
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 18


 340              	.L11:
 341 00c0 00000000 		.word	.LANCHOR0
 342 00c4 00000000 		.word	.LC0
 343 00c8 0C000000 		.word	.LC1
 344 00cc 00000000 		.word	float_btn_event_cb
 345 00d0 00000000 		.word	.LC2
 346              		.cfi_endproc
 347              	.LFE205:
 349              		.section	.data.btn_cnt,"aw"
 350              		.align	2
 351              		.set	.LANCHOR0,. + 0
 354              	btn_cnt:
 355 0000 01000000 		.word	1
 356              		.text
 357              	.Letext0:
 358              		.file 6 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 359              		.file 7 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 360              		.file 8 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_area.h"
 361              		.file 9 "lvgl/examples/scroll/../../src/misc/lv_anim.h"
 362              		.file 10 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_color.h"
 363              		.file 11 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style.h"
 364              		.file 12 "lvgl/examples/scroll/../../src/core/lv_obj.h"
 365              		.file 13 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_ll.h"
 366              		.file 14 "lvgl/examples/scroll/../../src/core/lv_group.h"
 367              		.file 15 "lvgl/examples/scroll/../../src/core/lv_obj_scroll.h"
 368              		.file 16 "lvgl/examples/scroll/../../src/core/lv_obj_style.h"
 369              		.file 17 "lvgl/examples/scroll/../../src/core/lv_obj_class.h"
 370              		.file 18 "lvgl/examples/scroll/../../src/core/lv_event.h"
 371              		.file 19 "lvgl/examples/scroll/../../src/widgets/lv_bar.h"
 372              		.file 20 "lvgl/examples/scroll/../../src/extra/widgets/imgbtn/lv_imgbtn.h"
 373              		.file 21 "lvgl/examples/scroll/../../src/misc/lv_printf.h"
 374              		.file 22 "lvgl/examples/scroll/../../src/extra/widgets/list/lv_list.h"
 375              		.file 23 "lvgl/examples/scroll/../../src/hal/lv_hal_disp.h"
 376              		.file 24 "lvgl/examples/scroll/../../src/widgets/lv_btn.h"
 377              		.file 25 "lvgl/examples/scroll/../../src/core/lv_theme.h"
 378              		.file 26 "lvgl/examples/scroll/../../src/core/lv_obj_tree.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s 			page 19


DEFINED SYMBOLS
                            *ABS*:00000000 lv_example_scroll_3.c
C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s:19     .rodata.float_btn_event_cb.str1.4:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s:26     .text.float_btn_event_cb:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s:31     .text.float_btn_event_cb:00000000 float_btn_event_cb
C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s:152    .text.float_btn_event_cb:00000060 $d
C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s:159    .rodata.lv_example_scroll_3.str1.4:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s:163    .text.lv_example_scroll_3:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s:169    .text.lv_example_scroll_3:00000000 lv_example_scroll_3
C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s:341    .text.lv_example_scroll_3:000000c0 $d
C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s:350    .data.btn_cnt:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccoqObrA.s:354    .data.btn_cnt:00000000 btn_cnt

UNDEFINED SYMBOLS
lv_event_get_code
lv_event_get_target
lv_event_get_user_data
lv_snprintf
lv_list_add_btn
lv_obj_get_parent
lv_obj_get_child_cnt
lv_obj_move_to_index
lv_obj_scroll_to_view
lv_disp_get_default
lv_disp_get_scr_act
lv_list_create
lv_obj_set_size
lv_obj_align
lv_btn_create
lv_obj_add_flag
lv_obj_get_style_prop
lv_obj_add_event_cb
lv_obj_set_style_radius
lv_obj_set_style_bg_img_src
lv_theme_get_font_large
lv_obj_set_style_text_font
