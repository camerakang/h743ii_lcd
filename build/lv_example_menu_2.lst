ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_example_menu_2.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata.back_event_handler.str1.4,"aMS",%progbits,1
  19              		.align	2
  20              	.LC0:
  21 0000 526F6F74 		.ascii	"Root back btn click.\000"
  21      20626163 
  21      6B206274 
  21      6E20636C 
  21      69636B2E 
  22 0015 000000   		.align	2
  23              	.LC1:
  24 0018 48656C6C 		.ascii	"Hello\000"
  24      6F00
  25              		.section	.text.back_event_handler,"ax",%progbits
  26              		.align	1
  27              		.syntax unified
  28              		.thumb
  29              		.thumb_func
  31              	back_event_handler:
  32              	.LVL0:
  33              	.LFB204:
  34              		.file 1 "lvgl/examples/widgets/menu/lv_example_menu_2.c"
   1:lvgl/examples/widgets/menu/lv_example_menu_2.c **** #include "../../lv_examples.h"
   2:lvgl/examples/widgets/menu/lv_example_menu_2.c **** #if LV_USE_MENU && LV_USE_MSGBOX && LV_BUILD_EXAMPLES
   3:lvgl/examples/widgets/menu/lv_example_menu_2.c **** 
   4:lvgl/examples/widgets/menu/lv_example_menu_2.c **** static void back_event_handler(lv_event_t * e)
   5:lvgl/examples/widgets/menu/lv_example_menu_2.c **** {
  35              		.loc 1 5 1 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		.loc 1 5 1 is_stmt 0 view .LVU1
  40 0000 30B5     		push	{r4, r5, lr}
  41              		.cfi_def_cfa_offset 12
  42              		.cfi_offset 4, -12
  43              		.cfi_offset 5, -8
  44              		.cfi_offset 14, -4
  45 0002 83B0     		sub	sp, sp, #12
  46              		.cfi_def_cfa_offset 24
  47 0004 0546     		mov	r5, r0
   6:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_obj_t * obj = lv_event_get_target(e);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 2


  48              		.loc 1 6 5 is_stmt 1 view .LVU2
  49              		.loc 1 6 22 is_stmt 0 view .LVU3
  50 0006 FFF7FEFF 		bl	lv_event_get_target
  51              	.LVL1:
  52              		.loc 1 6 22 view .LVU4
  53 000a 0446     		mov	r4, r0
  54              	.LVL2:
   7:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_obj_t * menu = lv_event_get_user_data(e);
  55              		.loc 1 7 5 is_stmt 1 view .LVU5
  56              		.loc 1 7 23 is_stmt 0 view .LVU6
  57 000c 2846     		mov	r0, r5
  58              	.LVL3:
  59              		.loc 1 7 23 view .LVU7
  60 000e FFF7FEFF 		bl	lv_event_get_user_data
  61              	.LVL4:
   8:lvgl/examples/widgets/menu/lv_example_menu_2.c **** 
   9:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     if(lv_menu_back_btn_is_root(menu, obj)) {
  62              		.loc 1 9 5 is_stmt 1 view .LVU8
  63              		.loc 1 9 8 is_stmt 0 view .LVU9
  64 0012 2146     		mov	r1, r4
  65 0014 FFF7FEFF 		bl	lv_menu_back_btn_is_root
  66              	.LVL5:
  67              		.loc 1 9 7 view .LVU10
  68 0018 08B9     		cbnz	r0, .L4
  69              	.L1:
  10:lvgl/examples/widgets/menu/lv_example_menu_2.c ****         lv_obj_t * mbox1 = lv_msgbox_create(NULL, "Hello", "Root back btn click.", NULL, true);
  11:lvgl/examples/widgets/menu/lv_example_menu_2.c ****         lv_obj_center(mbox1);
  12:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     }
  13:lvgl/examples/widgets/menu/lv_example_menu_2.c **** }
  70              		.loc 1 13 1 view .LVU11
  71 001a 03B0     		add	sp, sp, #12
  72              		.cfi_remember_state
  73              		.cfi_def_cfa_offset 12
  74              		@ sp needed
  75 001c 30BD     		pop	{r4, r5, pc}
  76              	.LVL6:
  77              	.L4:
  78              		.cfi_restore_state
  79              	.LBB7:
  10:lvgl/examples/widgets/menu/lv_example_menu_2.c ****         lv_obj_t * mbox1 = lv_msgbox_create(NULL, "Hello", "Root back btn click.", NULL, true);
  80              		.loc 1 10 9 is_stmt 1 view .LVU12
  10:lvgl/examples/widgets/menu/lv_example_menu_2.c ****         lv_obj_t * mbox1 = lv_msgbox_create(NULL, "Hello", "Root back btn click.", NULL, true);
  81              		.loc 1 10 28 is_stmt 0 view .LVU13
  82 001e 0123     		movs	r3, #1
  83 0020 0093     		str	r3, [sp]
  84 0022 0023     		movs	r3, #0
  85 0024 054A     		ldr	r2, .L5
  86 0026 0649     		ldr	r1, .L5+4
  87 0028 1846     		mov	r0, r3
  88 002a FFF7FEFF 		bl	lv_msgbox_create
  89              	.LVL7:
  11:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     }
  90              		.loc 1 11 9 is_stmt 1 view .LVU14
  91              	.LBB8:
  92              	.LBI8:
  93              		.file 2 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\core\\lv_obj_pos.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 3


   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @file lv_obj_pos.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #ifndef LV_OBJ_POS_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #define LV_OBJ_POS_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #include "../misc/lv_area.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /*********************
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *      DEFINES
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *********************/
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**********************
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *      TYPEDEFS
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  **********************/
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** struct _lv_obj_t;
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** typedef void (*lv_layout_update_cb_t)(struct _lv_obj_t *, void * user_data);
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** typedef struct {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****     lv_layout_update_cb_t cb;
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****     void * user_data;
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** } lv_layout_dsc_t;
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**********************
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * GLOBAL PROTOTYPES
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  **********************/
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the position of an object relative to the set alignment.
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param x         new x coordinate
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param y         new y coordinate
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_pos(struct _lv_obj_t * obj, lv_coord_t x, lv_coord_t y);
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the x coordinate of an object
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param x         new x coordinate
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_x(struct _lv_obj_t * obj, lv_coord_t x);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 4


  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the y coordinate of an object
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param y         new y coordinate
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_y(struct _lv_obj_t * obj, lv_coord_t y);
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the size of an object.
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param w         the new width
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param h         the new height
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            possible values are:
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  LV_SIZE_PCT(x)     to set size in percentage of the parent's content area size 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_size(struct _lv_obj_t * obj, lv_coord_t w, lv_coord_t h);
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Recalculate the size of the object
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @return          true: the size has been changed
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** bool lv_obj_refr_size(struct _lv_obj_t * obj);
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the width of an object
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param w         the new width
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            possible values are:
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  lv_pct(x)           to set size in percentage of the parent's content area size
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_width(struct _lv_obj_t * obj, lv_coord_t w);
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the height of an object
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param h         the new height
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            possible values are:
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  lv_pct(x)           to set size in percentage of the parent's content area size
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_height(struct _lv_obj_t * obj, lv_coord_t h);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 5


 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the width reduced by the left and right padding and the border width.
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param w         the width without paddings in pixels
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_content_width(struct _lv_obj_t * obj, lv_coord_t w);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the height reduced by the top and bottom padding and the border width.
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param h         the height without paddings in pixels
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_content_height(struct _lv_obj_t * obj, lv_coord_t h);
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set a layout for an object
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param layout    pointer to a layout descriptor to set
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_layout(struct _lv_obj_t * obj, uint32_t layout);
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Test whether the and object is positioned by a layout or not
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to test
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @return true:    positioned by a layout; false: not positioned by a layout
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** bool lv_obj_is_layout_positioned(const struct _lv_obj_t * obj);
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Mark the object for layout update.
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj      pointer to an object whose children needs to be updated
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_mark_layout_as_dirty(struct _lv_obj_t * obj);
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Update the layout of an object.
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj      pointer to an object whose children needs to be updated
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_update_layout(const struct _lv_obj_t * obj);
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Register a new layout
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param cb        the layout update callback
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param user_data custom data that will be passed to `cb`
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @return          the ID of the new layout
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data);
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Change the alignment of an object.
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum) `LV_ALIGN_OUT_...` can't be used.
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_align(struct _lv_obj_t * obj, lv_align_t align);
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Change the alignment of an object and set new coordinates.
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Equivalent to:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 6


 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * lv_obj_set_align(obj, align);
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * lv_obj_set_pos(obj, x_ofs, y_ofs);
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum) `LV_ALIGN_OUT_...` can't be used.
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param x_ofs     x coordinate offset after alignment
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param y_ofs     y coordinate offset after alignment
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_align(struct _lv_obj_t * obj, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs);
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Align an object to an other object.
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param base      pointer to an other object (if NULL `obj`s parent is used). 'obj' will be align
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum)
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param x_ofs     x coordinate offset after alignment
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param y_ofs     y coordinate offset after alignment
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            if the position or size of `base` changes `obj` needs to be aligned manually ag
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_align_to(struct _lv_obj_t * obj, const struct _lv_obj_t * base, lv_align_t align, lv_co
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****                      lv_coord_t y_ofs);
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Align an object to the center on its parent.
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            if the parent size changes `obj` needs to be aligned manually again
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** static inline void lv_obj_center(struct _lv_obj_t * obj)
  94              		.loc 2 199 20 view .LVU15
  95              	.LBB9:
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** {
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****     lv_obj_align(obj, LV_ALIGN_CENTER, 0, 0);
  96              		.loc 2 201 5 view .LVU16
  97 002e 0023     		movs	r3, #0
  98 0030 1A46     		mov	r2, r3
  99 0032 0921     		movs	r1, #9
 100 0034 FFF7FEFF 		bl	lv_obj_align
 101              	.LVL8:
 102              		.loc 2 201 5 is_stmt 0 view .LVU17
 103              	.LBE9:
 104              	.LBE8:
 105              	.LBE7:
 106              		.loc 1 13 1 view .LVU18
 107 0038 EFE7     		b	.L1
 108              	.L6:
 109 003a 00BF     		.align	2
 110              	.L5:
 111 003c 00000000 		.word	.LC0
 112 0040 18000000 		.word	.LC1
 113              		.cfi_endproc
 114              	.LFE204:
 116              		.section	.rodata.lv_example_menu_2.str1.4,"aMS",%progbits,1
 117              		.align	2
 118              	.LC2:
 119 0000 48656C6C 		.ascii	"Hello, I am hiding here\000"
 119      6F2C2049 
 119      20616D20 
 119      68696469 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 7


 119      6E672068 
 120              		.align	2
 121              	.LC3:
 122 0018 4974656D 		.ascii	"Item 1\000"
 122      203100
 123 001f 00       		.align	2
 124              	.LC4:
 125 0020 4974656D 		.ascii	"Item 2\000"
 125      203200
 126 0027 00       		.align	2
 127              	.LC5:
 128 0028 4974656D 		.ascii	"Item 3 (Click me!)\000"
 128      20332028 
 128      436C6963 
 128      6B206D65 
 128      212900
 129              		.section	.text.lv_example_menu_2,"ax",%progbits
 130              		.align	1
 131              		.global	lv_example_menu_2
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 136              	lv_example_menu_2:
 137              	.LFB205:
  14:lvgl/examples/widgets/menu/lv_example_menu_2.c **** 
  15:lvgl/examples/widgets/menu/lv_example_menu_2.c **** void lv_example_menu_2(void)
  16:lvgl/examples/widgets/menu/lv_example_menu_2.c **** {
 138              		.loc 1 16 1 is_stmt 1 view -0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 143              		.cfi_def_cfa_offset 24
 144              		.cfi_offset 3, -24
 145              		.cfi_offset 4, -20
 146              		.cfi_offset 5, -16
 147              		.cfi_offset 6, -12
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
  17:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_obj_t * menu = lv_menu_create(lv_scr_act());
 150              		.loc 1 17 5 view .LVU20
 151              	.LBB14:
 152              	.LBI14:
 153              		.file 3 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_disp.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @file lv_disp.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** #ifndef LV_DISP_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** #define LV_DISP_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /*********************
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 8


  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** #include "../hal/lv_hal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** #include "lv_obj.h"
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** #include "lv_theme.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /*********************
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  *      DEFINES
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  *********************/
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**********************
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  *      TYPEDEFS
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  **********************/
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** typedef enum {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_NONE,
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_LEFT,
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_RIGHT,
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_TOP,
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_BOTTOM,
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_LEFT,
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_RIGHT,
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_TOP,
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_BOTTOM,
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_IN,
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_ON = LV_SCR_LOAD_ANIM_FADE_IN, /*For backward compatibility*/
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_OUT,
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_LEFT,
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_RIGHT,
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_TOP,
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_BOTTOM,
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** } lv_scr_load_anim_t;
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**********************
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * GLOBAL PROTOTYPES
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  **********************/
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Return with a pointer to the active screen
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to display which active screen should be get. (NULL to use the default
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * screen)
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @return pointer to the active screen object (loaded by 'lv_scr_load()')
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp);
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Return with a pointer to the previous screen. Only used during screen transitions.
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to display which previous screen should be get. (NULL to use the default
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * screen)
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @return pointer to the previous screen object or NULL if not used now
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp);
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Make a screen active
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param scr pointer to a screen
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 9


  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** void lv_disp_load_scr(lv_obj_t * scr);
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Return with the top layer. (Same on every screen and it is above the normal screen layer)
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @return pointer to the top layer object (transparent screen sized lv_obj)
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp);
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Return with the sys. layer. (Same on every screen and it is above the normal screen and the top
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * layer)
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default sc
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @return pointer to the sys layer object (transparent screen sized lv_obj)
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp);
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Set the theme of a display
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to a display
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** void lv_disp_set_theme(lv_disp_t * disp, lv_theme_t * th);
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Get the theme of a display
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to a display
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @return the display's theme (can be NULL)
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** lv_theme_t * lv_disp_get_theme(lv_disp_t * disp);
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Set the background color of a display
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to a display
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param color color of the background
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** void lv_disp_set_bg_color(lv_disp_t * disp, lv_color_t color);
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Set the background image of a display
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to a display
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param img_src path to file or pointer to an `lv_img_dsc_t` variable
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** void lv_disp_set_bg_image(lv_disp_t * disp, const void  * img_src);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Set opacity of the background
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to a display
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param opa opacity (0..255)
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** void lv_disp_set_bg_opa(lv_disp_t * disp, lv_opa_t opa);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Switch screen with animation
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param scr pointer to the new screen to load
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param anim_type type of the animation from `lv_scr_load_anim_t`, e.g. `LV_SCR_LOAD_ANIM_MOVE_LE
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param time time of the animation
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param delay delay before the transition
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 10


 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param auto_del true: automatically delete the old screen
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** void lv_scr_load_anim(lv_obj_t * scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, 
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Get elapsed time since last user activity on a display (e.g. click)
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to a display (NULL to get the overall smallest inactivity)
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @return elapsed ticks (milliseconds) since the last activity
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** uint32_t lv_disp_get_inactive_time(const lv_disp_t * disp);
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Manually trigger an activity on a display
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** void lv_disp_trig_activity(lv_disp_t * disp);
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Clean any CPU cache that is related to the display.
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** void lv_disp_clean_dcache(lv_disp_t * disp);
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Temporarily enable and disable the invalidation of the display.
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param en true: enable invalidation; false: invalidation
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** void lv_disp_enable_invalidation(lv_disp_t * disp, bool en);
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Get display invalidation is enabled.
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @return return true if invalidation is enabled
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** bool lv_disp_is_invalidation_enabled(lv_disp_t * disp);
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Get a pointer to the screen refresher timer to
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * modify its parameters with `lv_timer_...` functions.
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @param disp pointer to a display
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @return pointer to the display refresher timer. (NULL on error)
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** lv_timer_t * _lv_disp_get_refr_timer(lv_disp_t * disp);
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /*------------------------------------------------
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * To improve backward compatibility
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Recommended only if you have one display
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  *------------------------------------------------*/
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** 
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** /**
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * Get the active screen of the default display
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  * @return pointer to the active screen
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****  */
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** static inline lv_obj_t * lv_scr_act(void)
 154              		.loc 3 182 26 view .LVU21
 155              	.LBB15:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 11


 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h **** {
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_disp.h ****     return lv_disp_get_scr_act(lv_disp_get_default());
 156              		.loc 3 184 5 view .LVU22
 157              		.loc 3 184 12 is_stmt 0 view .LVU23
 158 0002 FFF7FEFF 		bl	lv_disp_get_default
 159              	.LVL9:
 160 0006 FFF7FEFF 		bl	lv_disp_get_scr_act
 161              	.LVL10:
 162              	.LBE15:
 163              	.LBE14:
 164              		.loc 1 17 23 view .LVU24
 165 000a FFF7FEFF 		bl	lv_menu_create
 166              	.LVL11:
 167 000e 0446     		mov	r4, r0
 168              	.LVL12:
  18:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_menu_set_mode_root_back_btn(menu, LV_MENU_ROOT_BACK_BTN_ENABLED);
 169              		.loc 1 18 5 is_stmt 1 view .LVU25
 170 0010 0121     		movs	r1, #1
 171 0012 FFF7FEFF 		bl	lv_menu_set_mode_root_back_btn
 172              	.LVL13:
  19:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_obj_add_event_cb(menu, back_event_handler, LV_EVENT_CLICKED, menu);
 173              		.loc 1 19 5 view .LVU26
 174 0016 2346     		mov	r3, r4
 175 0018 0722     		movs	r2, #7
 176 001a 2449     		ldr	r1, .L9
 177 001c 2046     		mov	r0, r4
 178 001e FFF7FEFF 		bl	lv_obj_add_event_cb
 179              	.LVL14:
  20:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_obj_set_size(menu, lv_disp_get_hor_res(NULL), lv_disp_get_ver_res(NULL));
 180              		.loc 1 20 5 view .LVU27
 181 0022 0020     		movs	r0, #0
 182 0024 FFF7FEFF 		bl	lv_disp_get_hor_res
 183              	.LVL15:
 184 0028 0546     		mov	r5, r0
 185 002a 0020     		movs	r0, #0
 186 002c FFF7FEFF 		bl	lv_disp_get_ver_res
 187              	.LVL16:
 188 0030 0246     		mov	r2, r0
 189 0032 2946     		mov	r1, r5
 190 0034 2046     		mov	r0, r4
 191 0036 FFF7FEFF 		bl	lv_obj_set_size
 192              	.LVL17:
  21:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_obj_center(menu);
 193              		.loc 1 21 5 view .LVU28
 194              	.LBB16:
 195              	.LBI16:
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** {
 196              		.loc 2 199 20 view .LVU29
 197              	.LBB17:
 198              		.loc 2 201 5 view .LVU30
 199 003a 0023     		movs	r3, #0
 200 003c 1A46     		mov	r2, r3
 201 003e 0921     		movs	r1, #9
 202 0040 2046     		mov	r0, r4
 203 0042 FFF7FEFF 		bl	lv_obj_align
 204              	.LVL18:
 205              		.loc 2 201 5 is_stmt 0 view .LVU31
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 12


 206              	.LBE17:
 207              	.LBE16:
  22:lvgl/examples/widgets/menu/lv_example_menu_2.c **** 
  23:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_obj_t * cont;
 208              		.loc 1 23 5 is_stmt 1 view .LVU32
  24:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_obj_t * label;
 209              		.loc 1 24 5 view .LVU33
  25:lvgl/examples/widgets/menu/lv_example_menu_2.c **** 
  26:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     /*Create a sub page*/
  27:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_obj_t * sub_page = lv_menu_page_create(menu, NULL);
 210              		.loc 1 27 5 view .LVU34
 211              		.loc 1 27 27 is_stmt 0 view .LVU35
 212 0046 0021     		movs	r1, #0
 213 0048 2046     		mov	r0, r4
 214 004a FFF7FEFF 		bl	lv_menu_page_create
 215              	.LVL19:
 216 004e 0746     		mov	r7, r0
 217              	.LVL20:
  28:lvgl/examples/widgets/menu/lv_example_menu_2.c **** 
  29:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     cont = lv_menu_cont_create(sub_page);
 218              		.loc 1 29 5 is_stmt 1 view .LVU36
 219              		.loc 1 29 12 is_stmt 0 view .LVU37
 220 0050 FFF7FEFF 		bl	lv_menu_cont_create
 221              	.LVL21:
  30:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     label = lv_label_create(cont);
 222              		.loc 1 30 5 is_stmt 1 view .LVU38
 223              		.loc 1 30 13 is_stmt 0 view .LVU39
 224 0054 FFF7FEFF 		bl	lv_label_create
 225              	.LVL22:
  31:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_label_set_text(label, "Hello, I am hiding here");
 226              		.loc 1 31 5 is_stmt 1 view .LVU40
 227 0058 1549     		ldr	r1, .L9+4
 228 005a FFF7FEFF 		bl	lv_label_set_text
 229              	.LVL23:
  32:lvgl/examples/widgets/menu/lv_example_menu_2.c **** 
  33:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     /*Create a main page*/
  34:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_obj_t * main_page = lv_menu_page_create(menu, NULL);
 230              		.loc 1 34 5 view .LVU41
 231              		.loc 1 34 28 is_stmt 0 view .LVU42
 232 005e 0021     		movs	r1, #0
 233 0060 2046     		mov	r0, r4
 234 0062 FFF7FEFF 		bl	lv_menu_page_create
 235              	.LVL24:
 236 0066 0546     		mov	r5, r0
 237              	.LVL25:
  35:lvgl/examples/widgets/menu/lv_example_menu_2.c **** 
  36:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     cont = lv_menu_cont_create(main_page);
 238              		.loc 1 36 5 is_stmt 1 view .LVU43
 239              		.loc 1 36 12 is_stmt 0 view .LVU44
 240 0068 FFF7FEFF 		bl	lv_menu_cont_create
 241              	.LVL26:
  37:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     label = lv_label_create(cont);
 242              		.loc 1 37 5 is_stmt 1 view .LVU45
 243              		.loc 1 37 13 is_stmt 0 view .LVU46
 244 006c FFF7FEFF 		bl	lv_label_create
 245              	.LVL27:
  38:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_label_set_text(label, "Item 1");
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 13


 246              		.loc 1 38 5 is_stmt 1 view .LVU47
 247 0070 1049     		ldr	r1, .L9+8
 248 0072 FFF7FEFF 		bl	lv_label_set_text
 249              	.LVL28:
  39:lvgl/examples/widgets/menu/lv_example_menu_2.c **** 
  40:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     cont = lv_menu_cont_create(main_page);
 250              		.loc 1 40 5 view .LVU48
 251              		.loc 1 40 12 is_stmt 0 view .LVU49
 252 0076 2846     		mov	r0, r5
 253 0078 FFF7FEFF 		bl	lv_menu_cont_create
 254              	.LVL29:
  41:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     label = lv_label_create(cont);
 255              		.loc 1 41 5 is_stmt 1 view .LVU50
 256              		.loc 1 41 13 is_stmt 0 view .LVU51
 257 007c FFF7FEFF 		bl	lv_label_create
 258              	.LVL30:
  42:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_label_set_text(label, "Item 2");
 259              		.loc 1 42 5 is_stmt 1 view .LVU52
 260 0080 0D49     		ldr	r1, .L9+12
 261 0082 FFF7FEFF 		bl	lv_label_set_text
 262              	.LVL31:
  43:lvgl/examples/widgets/menu/lv_example_menu_2.c **** 
  44:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     cont = lv_menu_cont_create(main_page);
 263              		.loc 1 44 5 view .LVU53
 264              		.loc 1 44 12 is_stmt 0 view .LVU54
 265 0086 2846     		mov	r0, r5
 266 0088 FFF7FEFF 		bl	lv_menu_cont_create
 267              	.LVL32:
 268 008c 0646     		mov	r6, r0
 269              	.LVL33:
  45:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     label = lv_label_create(cont);
 270              		.loc 1 45 5 is_stmt 1 view .LVU55
 271              		.loc 1 45 13 is_stmt 0 view .LVU56
 272 008e FFF7FEFF 		bl	lv_label_create
 273              	.LVL34:
  46:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_label_set_text(label, "Item 3 (Click me!)");
 274              		.loc 1 46 5 is_stmt 1 view .LVU57
 275 0092 0A49     		ldr	r1, .L9+16
 276 0094 FFF7FEFF 		bl	lv_label_set_text
 277              	.LVL35:
  47:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_menu_set_load_page_event(menu, cont, sub_page);
 278              		.loc 1 47 5 view .LVU58
 279 0098 3A46     		mov	r2, r7
 280 009a 3146     		mov	r1, r6
 281 009c 2046     		mov	r0, r4
 282 009e FFF7FEFF 		bl	lv_menu_set_load_page_event
 283              	.LVL36:
  48:lvgl/examples/widgets/menu/lv_example_menu_2.c **** 
  49:lvgl/examples/widgets/menu/lv_example_menu_2.c ****     lv_menu_set_page(menu, main_page);
 284              		.loc 1 49 5 view .LVU59
 285 00a2 2946     		mov	r1, r5
 286 00a4 2046     		mov	r0, r4
 287 00a6 FFF7FEFF 		bl	lv_menu_set_page
 288              	.LVL37:
  50:lvgl/examples/widgets/menu/lv_example_menu_2.c **** }
 289              		.loc 1 50 1 is_stmt 0 view .LVU60
 290 00aa F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 14


 291              	.LVL38:
 292              	.L10:
 293              		.loc 1 50 1 view .LVU61
 294              		.align	2
 295              	.L9:
 296 00ac 00000000 		.word	back_event_handler
 297 00b0 00000000 		.word	.LC2
 298 00b4 18000000 		.word	.LC3
 299 00b8 20000000 		.word	.LC4
 300 00bc 28000000 		.word	.LC5
 301              		.cfi_endproc
 302              	.LFE205:
 304              		.text
 305              	.Letext0:
 306              		.file 4 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 307              		.file 5 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 308              		.file 6 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_area.h"
 309              		.file 7 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_color.h"
 310              		.file 8 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style.h"
 311              		.file 9 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj.h"
 312              		.file 10 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_ll.h"
 313              		.file 11 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_group.h"
 314              		.file 12 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_scroll.h"
 315              		.file 13 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_style.h"
 316              		.file 14 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_class.h"
 317              		.file 15 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_event.h"
 318              		.file 16 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/extra/widgets/menu/lv_menu.h"
 319              		.file 17 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/hal/lv_hal_disp.h"
 320              		.file 18 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/widgets/lv_label.h"
 321              		.file 19 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/extra/widgets/msgbox/lv_msgbox.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s 			page 15


DEFINED SYMBOLS
                            *ABS*:00000000 lv_example_menu_2.c
C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s:19     .rodata.back_event_handler.str1.4:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s:26     .text.back_event_handler:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s:31     .text.back_event_handler:00000000 back_event_handler
C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s:111    .text.back_event_handler:0000003c $d
C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s:117    .rodata.lv_example_menu_2.str1.4:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s:130    .text.lv_example_menu_2:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s:136    .text.lv_example_menu_2:00000000 lv_example_menu_2
C:\Users\OSD\AppData\Local\Temp\ccgESgYm.s:296    .text.lv_example_menu_2:000000ac $d

UNDEFINED SYMBOLS
lv_event_get_target
lv_event_get_user_data
lv_menu_back_btn_is_root
lv_msgbox_create
lv_obj_align
lv_disp_get_default
lv_disp_get_scr_act
lv_menu_create
lv_menu_set_mode_root_back_btn
lv_obj_add_event_cb
lv_disp_get_hor_res
lv_disp_get_ver_res
lv_obj_set_size
lv_menu_page_create
lv_menu_cont_create
lv_label_create
lv_label_set_text
lv_menu_set_load_page_event
lv_menu_set_page
