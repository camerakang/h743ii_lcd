ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_example_textarea_2.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.ta_event_cb,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	ta_event_cb:
  25              	.LVL0:
  26              	.LFB205:
  27              		.file 1 "lvgl/examples/widgets/textarea/lv_example_textarea_2.c"
   1:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** #include "../../lv_examples.h"
   2:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** #if LV_USE_TEXTAREA && LV_USE_KEYBOARD && LV_BUILD_EXAMPLES
   3:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
   4:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** static void ta_event_cb(lv_event_t * e);
   5:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
   6:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** static lv_obj_t * kb;
   7:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
   8:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** void lv_example_textarea_2(void)
   9:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** {
  10:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     /*Create the password box*/
  11:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_t * pwd_ta = lv_textarea_create(lv_scr_act());
  12:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_textarea_set_text(pwd_ta, "");
  13:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_textarea_set_password_mode(pwd_ta, true);
  14:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_textarea_set_one_line(pwd_ta, true);
  15:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_set_width(pwd_ta, lv_pct(40));
  16:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_set_pos(pwd_ta, 5, 20);
  17:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_add_event_cb(pwd_ta, ta_event_cb, LV_EVENT_ALL, NULL);
  18:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
  19:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     /*Create a label and position it above the text box*/
  20:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_t * pwd_label = lv_label_create(lv_scr_act());
  21:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_label_set_text(pwd_label, "Password:");
  22:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_align_to(pwd_label, pwd_ta, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
  23:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
  24:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     /*Create the one-line mode text area*/
  25:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_t * text_ta = lv_textarea_create(lv_scr_act());
  26:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_textarea_set_one_line(text_ta, true);
  27:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_textarea_set_password_mode(text_ta, false);
  28:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_set_width(text_ta, lv_pct(40));
  29:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_add_event_cb(text_ta, ta_event_cb, LV_EVENT_ALL, NULL);
  30:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_align(text_ta, LV_ALIGN_TOP_RIGHT, -5, 20);
  31:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 2


  32:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     /*Create a label and position it above the text box*/
  33:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_t * oneline_label = lv_label_create(lv_scr_act());
  34:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_label_set_text(oneline_label, "Text:");
  35:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_align_to(oneline_label, text_ta, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
  36:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
  37:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     /*Create a keyboard*/
  38:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     kb = lv_keyboard_create(lv_scr_act());
  39:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_set_size(kb,  LV_HOR_RES, LV_VER_RES / 2);
  40:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
  41:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_keyboard_set_textarea(kb, pwd_ta); /*Focus it on one of the text areas to start*/
  42:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** }
  43:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
  44:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** static void ta_event_cb(lv_event_t * e)
  45:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** {
  28              		.loc 1 45 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 45 1 is_stmt 0 view .LVU1
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 3, -16
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39 0002 0546     		mov	r5, r0
  46:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_event_code_t code = lv_event_get_code(e);
  40              		.loc 1 46 5 is_stmt 1 view .LVU2
  41              		.loc 1 46 28 is_stmt 0 view .LVU3
  42 0004 FFF7FEFF 		bl	lv_event_get_code
  43              	.LVL1:
  44              		.loc 1 46 28 view .LVU4
  45 0008 0446     		mov	r4, r0
  46              	.LVL2:
  47:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_t * ta = lv_event_get_target(e);
  47              		.loc 1 47 5 is_stmt 1 view .LVU5
  48              		.loc 1 47 21 is_stmt 0 view .LVU6
  49 000a 2846     		mov	r0, r5
  50 000c FFF7FEFF 		bl	lv_event_get_target
  51              	.LVL3:
  48:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     if(code == LV_EVENT_CLICKED || code == LV_EVENT_FOCUSED) {
  52              		.loc 1 48 5 is_stmt 1 view .LVU7
  53              		.loc 1 48 7 is_stmt 0 view .LVU8
  54 0010 0E2C     		cmp	r4, #14
  55 0012 18BF     		it	ne
  56 0014 072C     		cmpne	r4, #7
  57 0016 05D1     		bne	.L1
  58 0018 0146     		mov	r1, r0
  49:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****         /*Focus on the clicked text area*/
  50:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****         if(kb != NULL) lv_keyboard_set_textarea(kb, ta);
  59              		.loc 1 50 9 is_stmt 1 view .LVU9
  60              		.loc 1 50 15 is_stmt 0 view .LVU10
  61 001a 034B     		ldr	r3, .L4
  62 001c 1868     		ldr	r0, [r3]
  63              	.LVL4:
  64              		.loc 1 50 11 view .LVU11
  65 001e 08B1     		cbz	r0, .L1
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 3


  66              		.loc 1 50 24 is_stmt 1 discriminator 1 view .LVU12
  67 0020 FFF7FEFF 		bl	lv_keyboard_set_textarea
  68              	.LVL5:
  51:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     }
  52:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
  53:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     else if(code == LV_EVENT_READY) {
  54:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****         LV_LOG_USER("Ready, current text: %s", lv_textarea_get_text(ta));
  69              		.loc 1 54 9 discriminator 1 view .LVU13
  70              		.loc 1 54 9 discriminator 1 view .LVU14
  71              		.loc 1 54 9 discriminator 1 view .LVU15
  72              	.L1:
  55:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     }
  56:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** }
  73              		.loc 1 56 1 is_stmt 0 view .LVU16
  74 0024 38BD     		pop	{r3, r4, r5, pc}
  75              	.LVL6:
  76              	.L5:
  77              		.loc 1 56 1 view .LVU17
  78 0026 00BF     		.align	2
  79              	.L4:
  80 0028 00000000 		.word	.LANCHOR0
  81              		.cfi_endproc
  82              	.LFE205:
  84              		.section	.rodata.lv_example_textarea_2.str1.4,"aMS",%progbits,1
  85              		.align	2
  86              	.LC0:
  87 0000 00       		.ascii	"\000"
  88 0001 000000   		.align	2
  89              	.LC1:
  90 0004 50617373 		.ascii	"Password:\000"
  90      776F7264 
  90      3A00
  91 000e 0000     		.align	2
  92              	.LC2:
  93 0010 54657874 		.ascii	"Text:\000"
  93      3A00
  94              		.section	.text.lv_example_textarea_2,"ax",%progbits
  95              		.align	1
  96              		.global	lv_example_textarea_2
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 101              	lv_example_textarea_2:
 102              	.LFB204:
   9:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     /*Create the password box*/
 103              		.loc 1 9 1 is_stmt 1 view -0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 108              		.cfi_def_cfa_offset 20
 109              		.cfi_offset 4, -20
 110              		.cfi_offset 5, -16
 111              		.cfi_offset 6, -12
 112              		.cfi_offset 7, -8
 113              		.cfi_offset 14, -4
 114 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 4


 115              		.cfi_def_cfa_offset 32
  11:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_textarea_set_text(pwd_ta, "");
 116              		.loc 1 11 5 view .LVU19
 117              	.LBB16:
 118              	.LBI16:
 119              		.file 2 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_disp.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @file lv_disp.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifndef LV_DISP_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #define LV_DISP_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "../hal/lv_hal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_obj.h"
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** #include "lv_theme.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*********************
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      DEFINES
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *********************/
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *      TYPEDEFS
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** typedef enum {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_NONE,
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_LEFT,
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_RIGHT,
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_TOP,
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_BOTTOM,
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_LEFT,
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_RIGHT,
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_TOP,
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_BOTTOM,
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_IN,
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_ON = LV_SCR_LOAD_ANIM_FADE_IN, /*For backward compatibility*/
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_OUT,
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_LEFT,
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_RIGHT,
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_TOP,
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_BOTTOM,
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** } lv_scr_load_anim_t;
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**********************
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * GLOBAL PROTOTYPES
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  **********************/
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 5


  52:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the active screen
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which active screen should be get. (NULL to use the default
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen object (loaded by 'lv_scr_load()')
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp);
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with a pointer to the previous screen. Only used during screen transitions.
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which previous screen should be get. (NULL to use the default
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * screen)
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the previous screen object or NULL if not used now
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp);
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Make a screen active
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to a screen
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_load_scr(lv_obj_t * scr);
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the top layer. (Same on every screen and it is above the normal screen layer)
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the top layer object (transparent screen sized lv_obj)
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp);
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Return with the sys. layer. (Same on every screen and it is above the normal screen and the top
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * layer)
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default sc
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the sys layer object (transparent screen sized lv_obj)
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp);
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the theme of a display
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_theme(lv_disp_t * disp, lv_theme_t * th);
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the theme of a display
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return the display's theme (can be NULL)
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_theme_t * lv_disp_get_theme(lv_disp_t * disp);
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background color of a display
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param color color of the background
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_color(lv_disp_t * disp, lv_color_t color);
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 6


 109:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set the background image of a display
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param img_src path to file or pointer to an `lv_img_dsc_t` variable
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_image(lv_disp_t * disp, const void  * img_src);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Set opacity of the background
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param opa opacity (0..255)
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_set_bg_opa(lv_disp_t * disp, lv_opa_t opa);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Switch screen with animation
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param scr pointer to the new screen to load
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param anim_type type of the animation from `lv_scr_load_anim_t`, e.g. `LV_SCR_LOAD_ANIM_MOVE_LE
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param time time of the animation
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param delay delay before the transition
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param auto_del true: automatically delete the old screen
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_scr_load_anim(lv_obj_t * scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, 
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get elapsed time since last user activity on a display (e.g. click)
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to get the overall smallest inactivity)
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return elapsed ticks (milliseconds) since the last activity
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** uint32_t lv_disp_get_inactive_time(const lv_disp_t * disp);
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Manually trigger an activity on a display
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_trig_activity(lv_disp_t * disp);
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Clean any CPU cache that is related to the display.
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_clean_dcache(lv_disp_t * disp);
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Temporarily enable and disable the invalidation of the display.
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param en true: enable invalidation; false: invalidation
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** void lv_disp_enable_invalidation(lv_disp_t * disp, bool en);
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get display invalidation is enabled.
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return return true if invalidation is enabled
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** bool lv_disp_is_invalidation_enabled(lv_disp_t * disp);
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 7


 166:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get a pointer to the screen refresher timer to
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * modify its parameters with `lv_timer_...` functions.
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @param disp pointer to a display
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the display refresher timer. (NULL on error)
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** lv_timer_t * _lv_disp_get_refr_timer(lv_disp_t * disp);
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /*------------------------------------------------
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * To improve backward compatibility
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Recommended only if you have one display
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  *------------------------------------------------*/
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** 
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** /**
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * Get the active screen of the default display
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  * @return pointer to the active screen
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****  */
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** static inline lv_obj_t * lv_scr_act(void)
 120              		.loc 2 182 26 view .LVU20
 121              	.LBB17:
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h ****     return lv_disp_get_scr_act(lv_disp_get_default());
 122              		.loc 2 184 5 view .LVU21
 123              		.loc 2 184 12 is_stmt 0 view .LVU22
 124 0004 FFF7FEFF 		bl	lv_disp_get_default
 125              	.LVL7:
 126 0008 FFF7FEFF 		bl	lv_disp_get_scr_act
 127              	.LVL8:
 128              	.LBE17:
 129              	.LBE16:
  11:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_textarea_set_text(pwd_ta, "");
 130              		.loc 1 11 25 view .LVU23
 131 000c FFF7FEFF 		bl	lv_textarea_create
 132              	.LVL9:
 133 0010 0446     		mov	r4, r0
 134              	.LVL10:
  12:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_textarea_set_password_mode(pwd_ta, true);
 135              		.loc 1 12 5 is_stmt 1 view .LVU24
 136 0012 4149     		ldr	r1, .L10
 137 0014 FFF7FEFF 		bl	lv_textarea_set_text
 138              	.LVL11:
  13:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_textarea_set_one_line(pwd_ta, true);
 139              		.loc 1 13 5 view .LVU25
 140 0018 0121     		movs	r1, #1
 141 001a 2046     		mov	r0, r4
 142 001c FFF7FEFF 		bl	lv_textarea_set_password_mode
 143              	.LVL12:
  14:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_set_width(pwd_ta, lv_pct(40));
 144              		.loc 1 14 5 view .LVU26
 145 0020 0121     		movs	r1, #1
 146 0022 2046     		mov	r0, r4
 147 0024 FFF7FEFF 		bl	lv_textarea_set_one_line
 148              	.LVL13:
  15:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_set_pos(pwd_ta, 5, 20);
 149              		.loc 1 15 5 view .LVU27
 150              		.file 3 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_area.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @file lv_area.h
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 8


   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #ifndef LV_AREA_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_AREA_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #include "../lv_conf_internal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #include <stdbool.h>
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #include <stdint.h>
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*********************
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      DEFINES
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *********************/
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #if LV_USE_LARGE_COORD
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef int32_t lv_coord_t;
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #else
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef int16_t lv_coord_t;
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #endif
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**********************
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      TYPEDEFS
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  **********************/
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Represents a point on the screen.
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef struct {
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t x;
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t y;
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** } lv_point_t;
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /** Represents an area of the screen.*/
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef struct {
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t x1;
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t y1;
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t x2;
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t y2;
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** } lv_area_t;
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /** Alignments*/
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** enum {
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_DEFAULT = 0,
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_TOP_LEFT,
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_TOP_MID,
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_TOP_RIGHT,
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_BOTTOM_LEFT,
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_BOTTOM_MID,
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_BOTTOM_RIGHT,
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_LEFT_MID,
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 9


  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_RIGHT_MID,
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_CENTER,
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_TOP_LEFT,
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_TOP_MID,
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_TOP_RIGHT,
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_BOTTOM_LEFT,
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_BOTTOM_MID,
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_BOTTOM_RIGHT,
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_LEFT_TOP,
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_LEFT_MID,
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_LEFT_BOTTOM,
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_RIGHT_TOP,
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_RIGHT_MID,
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_RIGHT_BOTTOM,
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** };
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef uint8_t lv_align_t;
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** enum {
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_NONE     = 0x00,
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_LEFT     = (1 << 0),
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_RIGHT    = (1 << 1),
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_TOP      = (1 << 2),
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_BOTTOM   = (1 << 3),
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_HOR      = LV_DIR_LEFT | LV_DIR_RIGHT,
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_VER      = LV_DIR_TOP | LV_DIR_BOTTOM,
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_ALL      = LV_DIR_HOR | LV_DIR_VER,
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** };
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef uint8_t lv_dir_t;
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**********************
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * GLOBAL PROTOTYPES
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  **********************/
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Initialize an area
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x1 left coordinate of the area
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param y1 top coordinate of the area
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x2 right coordinate of the area
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param y2 bottom coordinate of the area
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2);
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Copy an area
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param dest pointer to the destination area
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param src pointer to the source area
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->x1 = src->x1;
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->y1 = src->y1;
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->x2 = src->x2;
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->y2 = src->y2;
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 10


 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get the width of an area
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return the width of the area (if x1 == x2 -> width = 1)
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** }
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get the height of an area
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return the height of the area (if y1 == y2 -> height = 1)
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** }
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Set the width of an area
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param w the new width of the area (w == 1 makes x1 == x2)
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_set_width(lv_area_t * area_p, lv_coord_t w);
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Set the height of an area
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param h the new height of the area (h == 1 makes y1 == y2)
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_set_height(lv_area_t * area_p, lv_coord_t h);
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Set the position of an area (width and height will be kept)
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x the new x coordinate of the area
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param y the new y coordinate of the area
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void _lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y);
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Return with area of an area (x * y)
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return size of area
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** uint32_t lv_area_get_size(const lv_area_t * area_p);
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_increase(lv_area_t * area, lv_coord_t w_extra, lv_coord_t h_extra);
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_move(lv_area_t * area, lv_coord_t x_ofs, lv_coord_t y_ofs);
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get the common parts of two areas
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param res_p pointer to an area, the result will be stored her
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 11


 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to the first area
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to the second area
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return false: the two area has NO common parts, res_p is invalid
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get resulting sub areas after removing the common parts of two areas from the first area
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param res_p pointer to an array of areas with a count of 4, the resulting areas will be stored 
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to the first area
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to the second area
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return number of results (max 4) or -1 if no intersect
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** int8_t _lv_area_diff(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Join two areas into a third which involves the other two
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param res_p pointer to an area, the result will be stored here
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to the first area
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to the second area
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if a point is on an area
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a_p pointer to an area
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param p_p pointer to a point
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param radius radius of area (e.g. for rounded rectangle)
 202:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return false:the point is out of the area
 203:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 204:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius);
 205:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 206:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 207:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if two area has common parts
 208:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to an area.
 209:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to an other area
 210:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return false: a1_p and a2_p has no common parts
 211:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 212:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p);
 213:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 214:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 215:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if an area is fully on an other
 216:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param ain_p pointer to an area which could be in 'aholder_p'
 217:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param aholder_p pointer to an area which could involve 'ain_p'
 218:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 219:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return true: `ain_p` is fully inside `aholder_p`
 220:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 221:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius);
 222:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 223:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 224:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if an area is fully out of an other
 225:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param aout_p pointer to an area which could be in 'aholder_p'
 226:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param aholder_p pointer to an area which could involve 'ain_p'
 227:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 228:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return true: `aout_p` is fully outside `aholder_p`
 229:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 230:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_out(const lv_area_t * aout_p, const lv_area_t * aholder_p, lv_coord_t radius);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 12


 231:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 232:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 233:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if 2 area is the same
 234:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a pointer to an area
 235:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param b pointer to another area
 236:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 237:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_equal(const lv_area_t * a, const lv_area_t * b);
 238:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 239:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 240:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Align an area to an other
 241:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param base an are where the other will be aligned
 242:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param to_align the area to align
 243:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param align `LV_ALIGN_...`
 244:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 245:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_align(const lv_area_t * base, lv_area_t * to_align, lv_align_t align, lv_coord_t ofs_x
 246:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 247:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_point_transform(lv_point_t * p, int32_t angle, int32_t zoom, const lv_point_t * pivot);
 248:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**********************
 250:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      MACROS
 251:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  **********************/
 252:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 253:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #if LV_USE_LARGE_COORD
 254:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_SHIFT    (29U)
 255:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #else
 256:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_SHIFT    (13U)
 257:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #endif
 258:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_MASK     (3 << _LV_COORD_TYPE_SHIFT)
 260:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE(x)       ((x) & _LV_COORD_TYPE_MASK)  /*Extract type specifiers*/
 261:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_PLAIN(x)      ((x) & ~_LV_COORD_TYPE_MASK) /*Remove type specifiers*/
 262:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 263:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_PX       (0 << _LV_COORD_TYPE_SHIFT)
 264:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_SPEC     (1 << _LV_COORD_TYPE_SHIFT)
 265:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_PX_NEG   (3 << _LV_COORD_TYPE_SHIFT)
 266:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 267:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_IS_PX(x)       (_LV_COORD_TYPE(x) == _LV_COORD_TYPE_PX || \
 268:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****                                  _LV_COORD_TYPE(x) == _LV_COORD_TYPE_PX_NEG ? true : false)
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_IS_SPEC(x)     (_LV_COORD_TYPE(x) == _LV_COORD_TYPE_SPEC ? true : false)
 270:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 271:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_SET_SPEC(x)    ((x) | _LV_COORD_TYPE_SPEC)
 272:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 273:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*Special coordinates*/
 274:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_PCT(x)               (x < 0 ? LV_COORD_SET_SPEC(1000 - (x)) : LV_COORD_SET_SPEC(x))
 275:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_IS_PCT(x)      ((LV_COORD_IS_SPEC(x) && _LV_COORD_PLAIN(x) <= 2000) ? true : false
 276:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_GET_PCT(x)     (_LV_COORD_PLAIN(x) > 1000 ? 1000 - _LV_COORD_PLAIN(x) : _LV_COORD_
 277:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_SIZE_CONTENT         LV_COORD_SET_SPEC(2001)
 278:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 279:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** LV_EXPORT_CONST_INT(LV_SIZE_CONTENT);
 280:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 281:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*Max coordinate value*/
 282:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_MAX            ((1 << _LV_COORD_TYPE_SHIFT) - 1)
 283:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_MIN            (-LV_COORD_MAX)
 284:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 285:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** LV_EXPORT_CONST_INT(LV_COORD_MAX);
 286:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** LV_EXPORT_CONST_INT(LV_COORD_MIN);
 287:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 13


 288:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 289:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Convert a percentage value to `lv_coord_t`.
 290:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Percentage values are stored in special range
 291:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x the percentage (0..1000)
 292:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return a coordinate that stores the percentage
 293:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 294:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** static inline lv_coord_t lv_pct(lv_coord_t x)
 295:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 296:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     return LV_PCT(x);
 151              		.loc 3 296 5 view .LVU28
  15:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_set_pos(pwd_ta, 5, 20);
 152              		.loc 1 15 5 is_stmt 0 view .LVU29
 153 0028 42F22801 		movw	r1, #8232
 154 002c 2046     		mov	r0, r4
 155 002e FFF7FEFF 		bl	lv_obj_set_width
 156              	.LVL14:
  16:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_add_event_cb(pwd_ta, ta_event_cb, LV_EVENT_ALL, NULL);
 157              		.loc 1 16 5 is_stmt 1 view .LVU30
 158 0032 1422     		movs	r2, #20
 159 0034 0521     		movs	r1, #5
 160 0036 2046     		mov	r0, r4
 161 0038 FFF7FEFF 		bl	lv_obj_set_pos
 162              	.LVL15:
  17:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
 163              		.loc 1 17 5 view .LVU31
 164 003c 374F     		ldr	r7, .L10+4
 165 003e 0023     		movs	r3, #0
 166 0040 1A46     		mov	r2, r3
 167 0042 3946     		mov	r1, r7
 168 0044 2046     		mov	r0, r4
 169 0046 FFF7FEFF 		bl	lv_obj_add_event_cb
 170              	.LVL16:
  20:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_label_set_text(pwd_label, "Password:");
 171              		.loc 1 20 5 view .LVU32
 172              	.LBB18:
 173              	.LBI18:
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 174              		.loc 2 182 26 view .LVU33
 175              	.LBB19:
 176              		.loc 2 184 5 view .LVU34
 177              		.loc 2 184 12 is_stmt 0 view .LVU35
 178 004a FFF7FEFF 		bl	lv_disp_get_default
 179              	.LVL17:
 180 004e FFF7FEFF 		bl	lv_disp_get_scr_act
 181              	.LVL18:
 182              	.LBE19:
 183              	.LBE18:
  20:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_label_set_text(pwd_label, "Password:");
 184              		.loc 1 20 28 view .LVU36
 185 0052 FFF7FEFF 		bl	lv_label_create
 186              	.LVL19:
 187 0056 0546     		mov	r5, r0
 188              	.LVL20:
  21:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_align_to(pwd_label, pwd_ta, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 189              		.loc 1 21 5 is_stmt 1 view .LVU37
 190 0058 3149     		ldr	r1, .L10+8
 191 005a FFF7FEFF 		bl	lv_label_set_text
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 14


 192              	.LVL21:
  22:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
 193              		.loc 1 22 5 view .LVU38
 194 005e 0026     		movs	r6, #0
 195 0060 0096     		str	r6, [sp]
 196 0062 3346     		mov	r3, r6
 197 0064 0A22     		movs	r2, #10
 198 0066 2146     		mov	r1, r4
 199 0068 2846     		mov	r0, r5
 200 006a FFF7FEFF 		bl	lv_obj_align_to
 201              	.LVL22:
  25:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_textarea_set_one_line(text_ta, true);
 202              		.loc 1 25 5 view .LVU39
 203              	.LBB20:
 204              	.LBI20:
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 205              		.loc 2 182 26 view .LVU40
 206              	.LBB21:
 207              		.loc 2 184 5 view .LVU41
 208              		.loc 2 184 12 is_stmt 0 view .LVU42
 209 006e FFF7FEFF 		bl	lv_disp_get_default
 210              	.LVL23:
 211 0072 FFF7FEFF 		bl	lv_disp_get_scr_act
 212              	.LVL24:
 213              	.LBE21:
 214              	.LBE20:
  25:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_textarea_set_one_line(text_ta, true);
 215              		.loc 1 25 26 view .LVU43
 216 0076 FFF7FEFF 		bl	lv_textarea_create
 217              	.LVL25:
 218 007a 0546     		mov	r5, r0
 219              	.LVL26:
  26:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_textarea_set_password_mode(text_ta, false);
 220              		.loc 1 26 5 is_stmt 1 view .LVU44
 221 007c 0121     		movs	r1, #1
 222 007e FFF7FEFF 		bl	lv_textarea_set_one_line
 223              	.LVL27:
  27:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_set_width(text_ta, lv_pct(40));
 224              		.loc 1 27 5 view .LVU45
 225 0082 3146     		mov	r1, r6
 226 0084 2846     		mov	r0, r5
 227 0086 FFF7FEFF 		bl	lv_textarea_set_password_mode
 228              	.LVL28:
  28:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_add_event_cb(text_ta, ta_event_cb, LV_EVENT_ALL, NULL);
 229              		.loc 1 28 5 view .LVU46
 230              		.loc 3 296 5 view .LVU47
  28:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_add_event_cb(text_ta, ta_event_cb, LV_EVENT_ALL, NULL);
 231              		.loc 1 28 5 is_stmt 0 view .LVU48
 232 008a 42F22801 		movw	r1, #8232
 233 008e 2846     		mov	r0, r5
 234 0090 FFF7FEFF 		bl	lv_obj_set_width
 235              	.LVL29:
  29:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_align(text_ta, LV_ALIGN_TOP_RIGHT, -5, 20);
 236              		.loc 1 29 5 is_stmt 1 view .LVU49
 237 0094 3346     		mov	r3, r6
 238 0096 3246     		mov	r2, r6
 239 0098 3946     		mov	r1, r7
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 15


 240 009a 2846     		mov	r0, r5
 241 009c FFF7FEFF 		bl	lv_obj_add_event_cb
 242              	.LVL30:
  30:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
 243              		.loc 1 30 5 view .LVU50
 244 00a0 1423     		movs	r3, #20
 245 00a2 6FF00402 		mvn	r2, #4
 246 00a6 0321     		movs	r1, #3
 247 00a8 2846     		mov	r0, r5
 248 00aa FFF7FEFF 		bl	lv_obj_align
 249              	.LVL31:
  33:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_label_set_text(oneline_label, "Text:");
 250              		.loc 1 33 5 view .LVU51
 251              	.LBB22:
 252              	.LBI22:
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 253              		.loc 2 182 26 view .LVU52
 254              	.LBB23:
 255              		.loc 2 184 5 view .LVU53
 256              		.loc 2 184 12 is_stmt 0 view .LVU54
 257 00ae FFF7FEFF 		bl	lv_disp_get_default
 258              	.LVL32:
 259 00b2 FFF7FEFF 		bl	lv_disp_get_scr_act
 260              	.LVL33:
 261              	.LBE23:
 262              	.LBE22:
  33:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_label_set_text(oneline_label, "Text:");
 263              		.loc 1 33 32 view .LVU55
 264 00b6 FFF7FEFF 		bl	lv_label_create
 265              	.LVL34:
 266 00ba 0746     		mov	r7, r0
 267              	.LVL35:
  34:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_align_to(oneline_label, text_ta, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 268              		.loc 1 34 5 is_stmt 1 view .LVU56
 269 00bc 1949     		ldr	r1, .L10+12
 270 00be FFF7FEFF 		bl	lv_label_set_text
 271              	.LVL36:
  35:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
 272              		.loc 1 35 5 view .LVU57
 273 00c2 0096     		str	r6, [sp]
 274 00c4 3346     		mov	r3, r6
 275 00c6 0A22     		movs	r2, #10
 276 00c8 2946     		mov	r1, r5
 277 00ca 3846     		mov	r0, r7
 278 00cc FFF7FEFF 		bl	lv_obj_align_to
 279              	.LVL37:
  38:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_set_size(kb,  LV_HOR_RES, LV_VER_RES / 2);
 280              		.loc 1 38 5 view .LVU58
 281              	.LBB24:
 282              	.LBI24:
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src/core\lv_disp.h **** {
 283              		.loc 2 182 26 view .LVU59
 284              	.LBB25:
 285              		.loc 2 184 5 view .LVU60
 286              		.loc 2 184 12 is_stmt 0 view .LVU61
 287 00d0 FFF7FEFF 		bl	lv_disp_get_default
 288              	.LVL38:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 16


 289 00d4 FFF7FEFF 		bl	lv_disp_get_scr_act
 290              	.LVL39:
 291              	.LBE25:
 292              	.LBE24:
  38:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_set_size(kb,  LV_HOR_RES, LV_VER_RES / 2);
 293              		.loc 1 38 10 view .LVU62
 294 00d8 FFF7FEFF 		bl	lv_keyboard_create
 295              	.LVL40:
 296 00dc 0546     		mov	r5, r0
 297              	.LVL41:
  38:lvgl/examples/widgets/textarea/lv_example_textarea_2.c ****     lv_obj_set_size(kb,  LV_HOR_RES, LV_VER_RES / 2);
 298              		.loc 1 38 8 view .LVU63
 299 00de 124B     		ldr	r3, .L10+16
 300 00e0 1860     		str	r0, [r3]
  39:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
 301              		.loc 1 39 5 is_stmt 1 view .LVU64
 302 00e2 FFF7FEFF 		bl	lv_disp_get_default
 303              	.LVL42:
 304 00e6 FFF7FEFF 		bl	lv_disp_get_hor_res
 305              	.LVL43:
 306 00ea 0646     		mov	r6, r0
  39:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
 307              		.loc 1 39 38 is_stmt 0 view .LVU65
 308 00ec FFF7FEFF 		bl	lv_disp_get_default
 309              	.LVL44:
 310 00f0 FFF7FEFF 		bl	lv_disp_get_ver_res
 311              	.LVL45:
  39:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
 312              		.loc 1 39 5 view .LVU66
 313 00f4 0246     		mov	r2, r0
 314 00f6 0028     		cmp	r0, #0
 315 00f8 0CDB     		blt	.L9
 316              	.L7:
 317 00fa 42F34F02 		sbfx	r2, r2, #1, #16
 318 00fe 3146     		mov	r1, r6
 319 0100 2846     		mov	r0, r5
 320 0102 FFF7FEFF 		bl	lv_obj_set_size
 321              	.LVL46:
  41:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** }
 322              		.loc 1 41 5 is_stmt 1 view .LVU67
 323 0106 2146     		mov	r1, r4
 324 0108 074B     		ldr	r3, .L10+16
 325 010a 1868     		ldr	r0, [r3]
 326 010c FFF7FEFF 		bl	lv_keyboard_set_textarea
 327              	.LVL47:
  42:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
 328              		.loc 1 42 1 is_stmt 0 view .LVU68
 329 0110 03B0     		add	sp, sp, #12
 330              		.cfi_remember_state
 331              		.cfi_def_cfa_offset 20
 332              		@ sp needed
 333 0112 F0BD     		pop	{r4, r5, r6, r7, pc}
 334              	.LVL48:
 335              	.L9:
 336              		.cfi_restore_state
  39:lvgl/examples/widgets/textarea/lv_example_textarea_2.c **** 
 337              		.loc 1 39 5 view .LVU69
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 17


 338 0114 421C     		adds	r2, r0, #1
 339 0116 F0E7     		b	.L7
 340              	.L11:
 341              		.align	2
 342              	.L10:
 343 0118 00000000 		.word	.LC0
 344 011c 00000000 		.word	ta_event_cb
 345 0120 04000000 		.word	.LC1
 346 0124 10000000 		.word	.LC2
 347 0128 00000000 		.word	.LANCHOR0
 348              		.cfi_endproc
 349              	.LFE204:
 351              		.section	.bss.kb,"aw",%nobits
 352              		.align	2
 353              		.set	.LANCHOR0,. + 0
 356              	kb:
 357 0000 00000000 		.space	4
 358              		.text
 359              	.Letext0:
 360              		.file 4 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 361              		.file 5 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 362              		.file 6 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_color.h"
 363              		.file 7 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style.h"
 364              		.file 8 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj.h"
 365              		.file 9 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_ll.h"
 366              		.file 10 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_group.h"
 367              		.file 11 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_scroll.h"
 368              		.file 12 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_style.h"
 369              		.file 13 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_obj_class.h"
 370              		.file 14 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/core/lv_event.h"
 371              		.file 15 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/widgets/lv_bar.h"
 372              		.file 16 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/extra/widgets/imgbtn/lv_imgbtn.h"
 373              		.file 17 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/extra/widgets/keyboard/lv_keyboard.h"
 374              		.file 18 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/hal/lv_hal_disp.h"
 375              		.file 19 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/widgets/lv_textarea.h"
 376              		.file 20 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\core\\lv_obj_pos.h"
 377              		.file 21 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src/widgets/lv_label.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s 			page 18


DEFINED SYMBOLS
                            *ABS*:00000000 lv_example_textarea_2.c
C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s:19     .text.ta_event_cb:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s:24     .text.ta_event_cb:00000000 ta_event_cb
C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s:80     .text.ta_event_cb:00000028 $d
C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s:85     .rodata.lv_example_textarea_2.str1.4:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s:95     .text.lv_example_textarea_2:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s:101    .text.lv_example_textarea_2:00000000 lv_example_textarea_2
C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s:343    .text.lv_example_textarea_2:00000118 $d
C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s:352    .bss.kb:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccAUTgoj.s:356    .bss.kb:00000000 kb

UNDEFINED SYMBOLS
lv_event_get_code
lv_event_get_target
lv_keyboard_set_textarea
lv_disp_get_default
lv_disp_get_scr_act
lv_textarea_create
lv_textarea_set_text
lv_textarea_set_password_mode
lv_textarea_set_one_line
lv_obj_set_width
lv_obj_set_pos
lv_obj_add_event_cb
lv_label_create
lv_label_set_text
lv_obj_align_to
lv_obj_align
lv_keyboard_create
lv_disp_get_hor_res
lv_disp_get_ver_res
lv_obj_set_size
