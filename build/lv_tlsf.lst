ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_tlsf.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.block_size,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	block_size:
  25              	.LVL0:
  26              	.LFB3:
  27              		.file 1 "lvgl/src/misc/lv_tlsf.c"
   1:lvgl/src/misc/lv_tlsf.c **** #include "../lv_conf_internal.h"
   2:lvgl/src/misc/lv_tlsf.c **** #if LV_MEM_CUSTOM == 0
   3:lvgl/src/misc/lv_tlsf.c **** 
   4:lvgl/src/misc/lv_tlsf.c **** #include <limits.h>
   5:lvgl/src/misc/lv_tlsf.c **** #include "lv_tlsf.h"
   6:lvgl/src/misc/lv_tlsf.c **** #include "lv_mem.h"
   7:lvgl/src/misc/lv_tlsf.c **** #include "lv_log.h"
   8:lvgl/src/misc/lv_tlsf.c **** #include "lv_assert.h"
   9:lvgl/src/misc/lv_tlsf.c **** 
  10:lvgl/src/misc/lv_tlsf.c **** #undef  printf
  11:lvgl/src/misc/lv_tlsf.c **** #define printf LV_LOG_ERROR
  12:lvgl/src/misc/lv_tlsf.c **** 
  13:lvgl/src/misc/lv_tlsf.c **** #define TLSF_MAX_POOL_SIZE LV_MEM_SIZE
  14:lvgl/src/misc/lv_tlsf.c **** 
  15:lvgl/src/misc/lv_tlsf.c **** #if !defined(_DEBUG)
  16:lvgl/src/misc/lv_tlsf.c ****     #define _DEBUG 0
  17:lvgl/src/misc/lv_tlsf.c **** #endif
  18:lvgl/src/misc/lv_tlsf.c **** 
  19:lvgl/src/misc/lv_tlsf.c **** #if defined(__cplusplus)
  20:lvgl/src/misc/lv_tlsf.c ****     #define tlsf_decl inline
  21:lvgl/src/misc/lv_tlsf.c **** #else
  22:lvgl/src/misc/lv_tlsf.c ****     #define tlsf_decl static
  23:lvgl/src/misc/lv_tlsf.c **** #endif
  24:lvgl/src/misc/lv_tlsf.c **** 
  25:lvgl/src/misc/lv_tlsf.c **** /*
  26:lvgl/src/misc/lv_tlsf.c **** ** Architecture-specific bit manipulation routines.
  27:lvgl/src/misc/lv_tlsf.c **** **
  28:lvgl/src/misc/lv_tlsf.c **** ** TLSF achieves O(1) cost for malloc and free operations by limiting
  29:lvgl/src/misc/lv_tlsf.c **** ** the search for a free block to a free list of guaranteed size
  30:lvgl/src/misc/lv_tlsf.c **** ** adequate to fulfill the request, combined with efficient free list
  31:lvgl/src/misc/lv_tlsf.c **** ** queries using bitmasks and architecture-specific bit-manipulation
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 2


  32:lvgl/src/misc/lv_tlsf.c **** ** routines.
  33:lvgl/src/misc/lv_tlsf.c **** **
  34:lvgl/src/misc/lv_tlsf.c **** ** Most modern processors provide instructions to count leading zeroes
  35:lvgl/src/misc/lv_tlsf.c **** ** in a word, find the lowest and highest set bit, etc. These
  36:lvgl/src/misc/lv_tlsf.c **** ** specific implementations will be used when available, falling back
  37:lvgl/src/misc/lv_tlsf.c **** ** to a reasonably efficient generic implementation.
  38:lvgl/src/misc/lv_tlsf.c **** **
  39:lvgl/src/misc/lv_tlsf.c **** ** NOTE: TLSF spec relies on ffs/fls returning value 0..31.
  40:lvgl/src/misc/lv_tlsf.c **** ** ffs/fls return 1-32 by default, returning 0 for error.
  41:lvgl/src/misc/lv_tlsf.c **** */
  42:lvgl/src/misc/lv_tlsf.c **** 
  43:lvgl/src/misc/lv_tlsf.c **** /*
  44:lvgl/src/misc/lv_tlsf.c **** ** Detect whether or not we are building for a 32- or 64-bit (LP/LLP)
  45:lvgl/src/misc/lv_tlsf.c **** ** architecture. There is no reliable portable method at compile-time.
  46:lvgl/src/misc/lv_tlsf.c **** */
  47:lvgl/src/misc/lv_tlsf.c **** #if defined (__alpha__) || defined (__ia64__) || defined (__x86_64__) \
  48:lvgl/src/misc/lv_tlsf.c ****     || defined (_WIN64) || defined (__LP64__) || defined (__LLP64__)
  49:lvgl/src/misc/lv_tlsf.c ****     #define TLSF_64BIT
  50:lvgl/src/misc/lv_tlsf.c **** #endif
  51:lvgl/src/misc/lv_tlsf.c **** 
  52:lvgl/src/misc/lv_tlsf.c **** /*
  53:lvgl/src/misc/lv_tlsf.c **** ** Returns one plus the index of the most significant 1-bit of n,
  54:lvgl/src/misc/lv_tlsf.c **** ** or if n is zero, returns zero.
  55:lvgl/src/misc/lv_tlsf.c **** */
  56:lvgl/src/misc/lv_tlsf.c **** #ifdef TLSF_64BIT
  57:lvgl/src/misc/lv_tlsf.c ****     #define TLSF_FLS(n) ((n) & 0xffffffff00000000ull ? 32 + TLSF_FLS32((size_t)(n) >> 32) : TLSF_FL
  58:lvgl/src/misc/lv_tlsf.c **** #else
  59:lvgl/src/misc/lv_tlsf.c ****     #define TLSF_FLS(n) TLSF_FLS32(n)
  60:lvgl/src/misc/lv_tlsf.c **** #endif
  61:lvgl/src/misc/lv_tlsf.c **** 
  62:lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS32(n) ((n) & 0xffff0000 ? 16 + TLSF_FLS16((n) >> 16) : TLSF_FLS16(n))
  63:lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS16(n) ((n) & 0xff00     ?  8 + TLSF_FLS8 ((n) >>  8) : TLSF_FLS8 (n))
  64:lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS8(n)  ((n) & 0xf0       ?  4 + TLSF_FLS4 ((n) >>  4) : TLSF_FLS4 (n))
  65:lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS4(n)  ((n) & 0xc        ?  2 + TLSF_FLS2 ((n) >>  2) : TLSF_FLS2 (n))
  66:lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS2(n)  ((n) & 0x2        ?  1 + TLSF_FLS1 ((n) >>  1) : TLSF_FLS1 (n))
  67:lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS1(n)  ((n) & 0x1        ?  1 : 0)
  68:lvgl/src/misc/lv_tlsf.c **** 
  69:lvgl/src/misc/lv_tlsf.c **** /*
  70:lvgl/src/misc/lv_tlsf.c **** ** Returns round up value of log2(n).
  71:lvgl/src/misc/lv_tlsf.c **** ** Note: it is used at compile time.
  72:lvgl/src/misc/lv_tlsf.c **** */
  73:lvgl/src/misc/lv_tlsf.c **** #define TLSF_LOG2_CEIL(n) ((n) & (n - 1) ? TLSF_FLS(n) : TLSF_FLS(n) - 1)
  74:lvgl/src/misc/lv_tlsf.c **** 
  75:lvgl/src/misc/lv_tlsf.c **** /*
  76:lvgl/src/misc/lv_tlsf.c **** ** gcc 3.4 and above have builtin support, specialized for architecture.
  77:lvgl/src/misc/lv_tlsf.c **** ** Some compilers masquerade as gcc; patchlevel test filters them out.
  78:lvgl/src/misc/lv_tlsf.c **** */
  79:lvgl/src/misc/lv_tlsf.c **** #if defined (__GNUC__) && (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)) \
  80:lvgl/src/misc/lv_tlsf.c ****     && defined (__GNUC_PATCHLEVEL__)
  81:lvgl/src/misc/lv_tlsf.c **** 
  82:lvgl/src/misc/lv_tlsf.c **** #if defined (__SNC__)
  83:lvgl/src/misc/lv_tlsf.c **** /* SNC for Playstation 3. */
  84:lvgl/src/misc/lv_tlsf.c **** 
  85:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
  86:lvgl/src/misc/lv_tlsf.c **** {
  87:lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
  88:lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - __builtin_clz(reverse);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 3


  89:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
  90:lvgl/src/misc/lv_tlsf.c **** }
  91:lvgl/src/misc/lv_tlsf.c **** 
  92:lvgl/src/misc/lv_tlsf.c **** #else
  93:lvgl/src/misc/lv_tlsf.c **** 
  94:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
  95:lvgl/src/misc/lv_tlsf.c **** {
  96:lvgl/src/misc/lv_tlsf.c ****     return __builtin_ffs(word) - 1;
  97:lvgl/src/misc/lv_tlsf.c **** }
  98:lvgl/src/misc/lv_tlsf.c **** 
  99:lvgl/src/misc/lv_tlsf.c **** #endif
 100:lvgl/src/misc/lv_tlsf.c **** 
 101:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 102:lvgl/src/misc/lv_tlsf.c **** {
 103:lvgl/src/misc/lv_tlsf.c ****     const int bit = word ? 32 - __builtin_clz(word) : 0;
 104:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 105:lvgl/src/misc/lv_tlsf.c **** }
 106:lvgl/src/misc/lv_tlsf.c **** 
 107:lvgl/src/misc/lv_tlsf.c **** #elif defined (_MSC_VER) && (_MSC_VER >= 1400) && (defined (_M_IX86) || defined (_M_X64))
 108:lvgl/src/misc/lv_tlsf.c **** /* Microsoft Visual C++ support on x86/X64 architectures. */
 109:lvgl/src/misc/lv_tlsf.c **** 
 110:lvgl/src/misc/lv_tlsf.c **** #include <intrin.h>
 111:lvgl/src/misc/lv_tlsf.c **** 
 112:lvgl/src/misc/lv_tlsf.c **** #pragma intrinsic(_BitScanReverse)
 113:lvgl/src/misc/lv_tlsf.c **** #pragma intrinsic(_BitScanForward)
 114:lvgl/src/misc/lv_tlsf.c **** 
 115:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 116:lvgl/src/misc/lv_tlsf.c **** {
 117:lvgl/src/misc/lv_tlsf.c ****     unsigned long index;
 118:lvgl/src/misc/lv_tlsf.c ****     return _BitScanReverse(&index, word) ? index : -1;
 119:lvgl/src/misc/lv_tlsf.c **** }
 120:lvgl/src/misc/lv_tlsf.c **** 
 121:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 122:lvgl/src/misc/lv_tlsf.c **** {
 123:lvgl/src/misc/lv_tlsf.c ****     unsigned long index;
 124:lvgl/src/misc/lv_tlsf.c ****     return _BitScanForward(&index, word) ? index : -1;
 125:lvgl/src/misc/lv_tlsf.c **** }
 126:lvgl/src/misc/lv_tlsf.c **** 
 127:lvgl/src/misc/lv_tlsf.c **** #elif defined (_MSC_VER) && defined (_M_PPC)
 128:lvgl/src/misc/lv_tlsf.c **** /* Microsoft Visual C++ support on PowerPC architectures. */
 129:lvgl/src/misc/lv_tlsf.c **** 
 130:lvgl/src/misc/lv_tlsf.c **** #include <ppcintrinsics.h>
 131:lvgl/src/misc/lv_tlsf.c **** 
 132:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 133:lvgl/src/misc/lv_tlsf.c **** {
 134:lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - _CountLeadingZeros(word);
 135:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 136:lvgl/src/misc/lv_tlsf.c **** }
 137:lvgl/src/misc/lv_tlsf.c **** 
 138:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 139:lvgl/src/misc/lv_tlsf.c **** {
 140:lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
 141:lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - _CountLeadingZeros(reverse);
 142:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 143:lvgl/src/misc/lv_tlsf.c **** }
 144:lvgl/src/misc/lv_tlsf.c **** 
 145:lvgl/src/misc/lv_tlsf.c **** #elif defined (__ARMCC_VERSION)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 4


 146:lvgl/src/misc/lv_tlsf.c **** /* RealView Compilation Tools for ARM */
 147:lvgl/src/misc/lv_tlsf.c **** 
 148:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 149:lvgl/src/misc/lv_tlsf.c **** {
 150:lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
 151:lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - __clz(reverse);
 152:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 153:lvgl/src/misc/lv_tlsf.c **** }
 154:lvgl/src/misc/lv_tlsf.c **** 
 155:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 156:lvgl/src/misc/lv_tlsf.c **** {
 157:lvgl/src/misc/lv_tlsf.c ****     const int bit = word ? 32 - __clz(word) : 0;
 158:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 159:lvgl/src/misc/lv_tlsf.c **** }
 160:lvgl/src/misc/lv_tlsf.c **** 
 161:lvgl/src/misc/lv_tlsf.c **** #elif defined (__ghs__)
 162:lvgl/src/misc/lv_tlsf.c **** /* Green Hills support for PowerPC */
 163:lvgl/src/misc/lv_tlsf.c **** 
 164:lvgl/src/misc/lv_tlsf.c **** #include <ppc_ghs.h>
 165:lvgl/src/misc/lv_tlsf.c **** 
 166:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 167:lvgl/src/misc/lv_tlsf.c **** {
 168:lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
 169:lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - __CLZ32(reverse);
 170:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 171:lvgl/src/misc/lv_tlsf.c **** }
 172:lvgl/src/misc/lv_tlsf.c **** 
 173:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 174:lvgl/src/misc/lv_tlsf.c **** {
 175:lvgl/src/misc/lv_tlsf.c ****     const int bit = word ? 32 - __CLZ32(word) : 0;
 176:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 177:lvgl/src/misc/lv_tlsf.c **** }
 178:lvgl/src/misc/lv_tlsf.c **** 
 179:lvgl/src/misc/lv_tlsf.c **** #else
 180:lvgl/src/misc/lv_tlsf.c **** /* Fall back to generic implementation. */
 181:lvgl/src/misc/lv_tlsf.c **** 
 182:lvgl/src/misc/lv_tlsf.c **** /* Implement ffs in terms of fls. */
 183:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 184:lvgl/src/misc/lv_tlsf.c **** {
 185:lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
 186:lvgl/src/misc/lv_tlsf.c ****     return TLSF_FLS32(reverse) - 1;
 187:lvgl/src/misc/lv_tlsf.c **** }
 188:lvgl/src/misc/lv_tlsf.c **** 
 189:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 190:lvgl/src/misc/lv_tlsf.c **** {
 191:lvgl/src/misc/lv_tlsf.c ****     return TLSF_FLS32(word) - 1;
 192:lvgl/src/misc/lv_tlsf.c **** }
 193:lvgl/src/misc/lv_tlsf.c **** 
 194:lvgl/src/misc/lv_tlsf.c **** #endif
 195:lvgl/src/misc/lv_tlsf.c **** 
 196:lvgl/src/misc/lv_tlsf.c **** /* Possibly 64-bit version of tlsf_fls. */
 197:lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_64BIT)
 198:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls_sizet(size_t size)
 199:lvgl/src/misc/lv_tlsf.c **** {
 200:lvgl/src/misc/lv_tlsf.c ****     int high = (int)(size >> 32);
 201:lvgl/src/misc/lv_tlsf.c ****     int bits = 0;
 202:lvgl/src/misc/lv_tlsf.c ****     if(high) {
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 5


 203:lvgl/src/misc/lv_tlsf.c ****         bits = 32 + tlsf_fls(high);
 204:lvgl/src/misc/lv_tlsf.c ****     }
 205:lvgl/src/misc/lv_tlsf.c ****     else {
 206:lvgl/src/misc/lv_tlsf.c ****         bits = tlsf_fls((int)size & 0xffffffff);
 207:lvgl/src/misc/lv_tlsf.c **** 
 208:lvgl/src/misc/lv_tlsf.c ****     }
 209:lvgl/src/misc/lv_tlsf.c ****     return bits;
 210:lvgl/src/misc/lv_tlsf.c **** }
 211:lvgl/src/misc/lv_tlsf.c **** #else
 212:lvgl/src/misc/lv_tlsf.c **** #define tlsf_fls_sizet tlsf_fls
 213:lvgl/src/misc/lv_tlsf.c **** #endif
 214:lvgl/src/misc/lv_tlsf.c **** 
 215:lvgl/src/misc/lv_tlsf.c **** #undef tlsf_decl
 216:lvgl/src/misc/lv_tlsf.c **** 
 217:lvgl/src/misc/lv_tlsf.c **** /*
 218:lvgl/src/misc/lv_tlsf.c **** ** Constants.
 219:lvgl/src/misc/lv_tlsf.c **** */
 220:lvgl/src/misc/lv_tlsf.c **** 
 221:lvgl/src/misc/lv_tlsf.c **** /* Public constants: may be modified. */
 222:lvgl/src/misc/lv_tlsf.c **** enum tlsf_public {
 223:lvgl/src/misc/lv_tlsf.c ****     /* log2 of number of linear subdivisions of block sizes. Larger
 224:lvgl/src/misc/lv_tlsf.c ****     ** values require more memory in the control structure. Values of
 225:lvgl/src/misc/lv_tlsf.c ****     ** 4 or 5 are typical.
 226:lvgl/src/misc/lv_tlsf.c ****     */
 227:lvgl/src/misc/lv_tlsf.c ****     SL_INDEX_COUNT_LOG2 = 5,
 228:lvgl/src/misc/lv_tlsf.c **** };
 229:lvgl/src/misc/lv_tlsf.c **** 
 230:lvgl/src/misc/lv_tlsf.c **** /* Private constants: do not modify. */
 231:lvgl/src/misc/lv_tlsf.c **** enum tlsf_private {
 232:lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_64BIT)
 233:lvgl/src/misc/lv_tlsf.c ****     /* All allocation sizes and addresses are aligned to 8 bytes. */
 234:lvgl/src/misc/lv_tlsf.c ****     ALIGN_SIZE_LOG2 = 3,
 235:lvgl/src/misc/lv_tlsf.c **** #else
 236:lvgl/src/misc/lv_tlsf.c ****     /* All allocation sizes and addresses are aligned to 4 bytes. */
 237:lvgl/src/misc/lv_tlsf.c ****     ALIGN_SIZE_LOG2 = 2,
 238:lvgl/src/misc/lv_tlsf.c **** #endif
 239:lvgl/src/misc/lv_tlsf.c ****     ALIGN_SIZE = (1 << ALIGN_SIZE_LOG2),
 240:lvgl/src/misc/lv_tlsf.c **** 
 241:lvgl/src/misc/lv_tlsf.c ****     /*
 242:lvgl/src/misc/lv_tlsf.c ****     ** We support allocations of sizes up to (1 << FL_INDEX_MAX) bits.
 243:lvgl/src/misc/lv_tlsf.c ****     ** However, because we linearly subdivide the second-level lists, and
 244:lvgl/src/misc/lv_tlsf.c ****     ** our minimum size granularity is 4 bytes, it doesn't make sense to
 245:lvgl/src/misc/lv_tlsf.c ****     ** create first-level lists for sizes smaller than SL_INDEX_COUNT * 4,
 246:lvgl/src/misc/lv_tlsf.c ****     ** or (1 << (SL_INDEX_COUNT_LOG2 + 2)) bytes, as there we will be
 247:lvgl/src/misc/lv_tlsf.c ****     ** trying to split size ranges into more slots than we have available.
 248:lvgl/src/misc/lv_tlsf.c ****     ** Instead, we calculate the minimum threshold size, and place all
 249:lvgl/src/misc/lv_tlsf.c ****     ** blocks below that size into the 0th first-level list.
 250:lvgl/src/misc/lv_tlsf.c ****     */
 251:lvgl/src/misc/lv_tlsf.c **** 
 252:lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_MAX_POOL_SIZE)
 253:lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_MAX = TLSF_LOG2_CEIL(TLSF_MAX_POOL_SIZE),
 254:lvgl/src/misc/lv_tlsf.c **** #elif defined (TLSF_64BIT)
 255:lvgl/src/misc/lv_tlsf.c ****     /*
 256:lvgl/src/misc/lv_tlsf.c ****     ** TODO: We can increase this to support larger sizes, at the expense
 257:lvgl/src/misc/lv_tlsf.c ****     ** of more overhead in the TLSF structure.
 258:lvgl/src/misc/lv_tlsf.c ****     */
 259:lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_MAX = 32,
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 6


 260:lvgl/src/misc/lv_tlsf.c **** #else
 261:lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_MAX = 30,
 262:lvgl/src/misc/lv_tlsf.c **** #endif
 263:lvgl/src/misc/lv_tlsf.c ****     SL_INDEX_COUNT = (1 << SL_INDEX_COUNT_LOG2),
 264:lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_SHIFT = (SL_INDEX_COUNT_LOG2 + ALIGN_SIZE_LOG2),
 265:lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_COUNT = (FL_INDEX_MAX - FL_INDEX_SHIFT + 1),
 266:lvgl/src/misc/lv_tlsf.c **** 
 267:lvgl/src/misc/lv_tlsf.c ****     SMALL_BLOCK_SIZE = (1 << FL_INDEX_SHIFT),
 268:lvgl/src/misc/lv_tlsf.c **** };
 269:lvgl/src/misc/lv_tlsf.c **** 
 270:lvgl/src/misc/lv_tlsf.c **** /*
 271:lvgl/src/misc/lv_tlsf.c **** ** Cast and min/max macros.
 272:lvgl/src/misc/lv_tlsf.c **** */
 273:lvgl/src/misc/lv_tlsf.c **** 
 274:lvgl/src/misc/lv_tlsf.c **** #define tlsf_cast(t, exp)   ((t) (exp))
 275:lvgl/src/misc/lv_tlsf.c **** #define tlsf_min(a, b)      ((a) < (b) ? (a) : (b))
 276:lvgl/src/misc/lv_tlsf.c **** #define tlsf_max(a, b)      ((a) > (b) ? (a) : (b))
 277:lvgl/src/misc/lv_tlsf.c **** 
 278:lvgl/src/misc/lv_tlsf.c **** /*
 279:lvgl/src/misc/lv_tlsf.c **** ** Set assert macro, if it has not been provided by the user.
 280:lvgl/src/misc/lv_tlsf.c **** */
 281:lvgl/src/misc/lv_tlsf.c **** #define tlsf_assert LV_ASSERT
 282:lvgl/src/misc/lv_tlsf.c **** 
 283:lvgl/src/misc/lv_tlsf.c **** #if !defined (tlsf_assert)
 284:lvgl/src/misc/lv_tlsf.c ****     #define tlsf_assert assert
 285:lvgl/src/misc/lv_tlsf.c **** #endif
 286:lvgl/src/misc/lv_tlsf.c **** 
 287:lvgl/src/misc/lv_tlsf.c **** /*
 288:lvgl/src/misc/lv_tlsf.c **** ** Static assertion mechanism.
 289:lvgl/src/misc/lv_tlsf.c **** */
 290:lvgl/src/misc/lv_tlsf.c **** 
 291:lvgl/src/misc/lv_tlsf.c **** #define _tlsf_glue2(x, y) x ## y
 292:lvgl/src/misc/lv_tlsf.c **** #define _tlsf_glue(x, y) _tlsf_glue2(x, y)
 293:lvgl/src/misc/lv_tlsf.c **** #define tlsf_static_assert(exp) \
 294:lvgl/src/misc/lv_tlsf.c ****     typedef char _tlsf_glue(static_assert, __LINE__) [(exp) ? 1 : -1]
 295:lvgl/src/misc/lv_tlsf.c **** 
 296:lvgl/src/misc/lv_tlsf.c **** /* This code has been tested on 32- and 64-bit (LP/LLP) architectures. */
 297:lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(sizeof(int) * CHAR_BIT == 32);
 298:lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(sizeof(size_t) * CHAR_BIT >= 32);
 299:lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(sizeof(size_t) * CHAR_BIT <= 64);
 300:lvgl/src/misc/lv_tlsf.c **** 
 301:lvgl/src/misc/lv_tlsf.c **** /* SL_INDEX_COUNT must be <= number of bits in sl_bitmap's storage type. */
 302:lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(sizeof(unsigned int) * CHAR_BIT >= SL_INDEX_COUNT);
 303:lvgl/src/misc/lv_tlsf.c **** 
 304:lvgl/src/misc/lv_tlsf.c **** /* Ensure we've properly tuned our sizes. */
 305:lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(ALIGN_SIZE == SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 306:lvgl/src/misc/lv_tlsf.c **** 
 307:lvgl/src/misc/lv_tlsf.c **** /*
 308:lvgl/src/misc/lv_tlsf.c **** ** Data structures and associated constants.
 309:lvgl/src/misc/lv_tlsf.c **** */
 310:lvgl/src/misc/lv_tlsf.c **** 
 311:lvgl/src/misc/lv_tlsf.c **** /*
 312:lvgl/src/misc/lv_tlsf.c **** ** Block header structure.
 313:lvgl/src/misc/lv_tlsf.c **** **
 314:lvgl/src/misc/lv_tlsf.c **** ** There are several implementation subtleties involved:
 315:lvgl/src/misc/lv_tlsf.c **** ** - The prev_phys_block field is only valid if the previous block is free.
 316:lvgl/src/misc/lv_tlsf.c **** ** - The prev_phys_block field is actually stored at the end of the
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 7


 317:lvgl/src/misc/lv_tlsf.c **** **   previous block. It appears at the beginning of this structure only to
 318:lvgl/src/misc/lv_tlsf.c **** **   simplify the implementation.
 319:lvgl/src/misc/lv_tlsf.c **** ** - The next_free / prev_free fields are only valid if the block is free.
 320:lvgl/src/misc/lv_tlsf.c **** */
 321:lvgl/src/misc/lv_tlsf.c **** typedef struct block_header_t {
 322:lvgl/src/misc/lv_tlsf.c ****     /* Points to the previous physical block. */
 323:lvgl/src/misc/lv_tlsf.c ****     struct block_header_t * prev_phys_block;
 324:lvgl/src/misc/lv_tlsf.c **** 
 325:lvgl/src/misc/lv_tlsf.c ****     /* The size of this block, excluding the block header. */
 326:lvgl/src/misc/lv_tlsf.c ****     size_t size;
 327:lvgl/src/misc/lv_tlsf.c **** 
 328:lvgl/src/misc/lv_tlsf.c ****     /* Next and previous free blocks. */
 329:lvgl/src/misc/lv_tlsf.c ****     struct block_header_t * next_free;
 330:lvgl/src/misc/lv_tlsf.c ****     struct block_header_t * prev_free;
 331:lvgl/src/misc/lv_tlsf.c **** } block_header_t;
 332:lvgl/src/misc/lv_tlsf.c **** 
 333:lvgl/src/misc/lv_tlsf.c **** /*
 334:lvgl/src/misc/lv_tlsf.c **** ** Since block sizes are always at least a multiple of 4, the two least
 335:lvgl/src/misc/lv_tlsf.c **** ** significant bits of the size field are used to store the block status:
 336:lvgl/src/misc/lv_tlsf.c **** ** - bit 0: whether block is busy or free
 337:lvgl/src/misc/lv_tlsf.c **** ** - bit 1: whether previous block is busy or free
 338:lvgl/src/misc/lv_tlsf.c **** */
 339:lvgl/src/misc/lv_tlsf.c **** static const size_t block_header_free_bit = 1 << 0;
 340:lvgl/src/misc/lv_tlsf.c **** static const size_t block_header_prev_free_bit = 1 << 1;
 341:lvgl/src/misc/lv_tlsf.c **** 
 342:lvgl/src/misc/lv_tlsf.c **** /*
 343:lvgl/src/misc/lv_tlsf.c **** ** The size of the block header exposed to used blocks is the size field.
 344:lvgl/src/misc/lv_tlsf.c **** ** The prev_phys_block field is stored *inside* the previous free block.
 345:lvgl/src/misc/lv_tlsf.c **** */
 346:lvgl/src/misc/lv_tlsf.c **** static const size_t block_header_overhead = sizeof(size_t);
 347:lvgl/src/misc/lv_tlsf.c **** 
 348:lvgl/src/misc/lv_tlsf.c **** /* User data starts directly after the size field in a used block. */
 349:lvgl/src/misc/lv_tlsf.c **** static const size_t block_start_offset =
 350:lvgl/src/misc/lv_tlsf.c ****     offsetof(block_header_t, size) + sizeof(size_t);
 351:lvgl/src/misc/lv_tlsf.c **** 
 352:lvgl/src/misc/lv_tlsf.c **** /*
 353:lvgl/src/misc/lv_tlsf.c **** ** A free block must be large enough to store its header minus the size of
 354:lvgl/src/misc/lv_tlsf.c **** ** the prev_phys_block field, and no larger than the number of addressable
 355:lvgl/src/misc/lv_tlsf.c **** ** bits for FL_INDEX.
 356:lvgl/src/misc/lv_tlsf.c **** */
 357:lvgl/src/misc/lv_tlsf.c **** static const size_t block_size_min =
 358:lvgl/src/misc/lv_tlsf.c ****     sizeof(block_header_t) - sizeof(block_header_t *);
 359:lvgl/src/misc/lv_tlsf.c **** static const size_t block_size_max = tlsf_cast(size_t, 1) << FL_INDEX_MAX;
 360:lvgl/src/misc/lv_tlsf.c **** 
 361:lvgl/src/misc/lv_tlsf.c **** /* The TLSF control structure. */
 362:lvgl/src/misc/lv_tlsf.c **** typedef struct control_t {
 363:lvgl/src/misc/lv_tlsf.c ****     /* Empty lists point at this block to indicate they are free. */
 364:lvgl/src/misc/lv_tlsf.c ****     block_header_t block_null;
 365:lvgl/src/misc/lv_tlsf.c **** 
 366:lvgl/src/misc/lv_tlsf.c ****     /* Bitmaps for free lists. */
 367:lvgl/src/misc/lv_tlsf.c ****     unsigned int fl_bitmap;
 368:lvgl/src/misc/lv_tlsf.c ****     unsigned int sl_bitmap[FL_INDEX_COUNT];
 369:lvgl/src/misc/lv_tlsf.c **** 
 370:lvgl/src/misc/lv_tlsf.c ****     /* Head of free lists. */
 371:lvgl/src/misc/lv_tlsf.c ****     block_header_t * blocks[FL_INDEX_COUNT][SL_INDEX_COUNT];
 372:lvgl/src/misc/lv_tlsf.c **** } control_t;
 373:lvgl/src/misc/lv_tlsf.c **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 8


 374:lvgl/src/misc/lv_tlsf.c **** /* A type used for casting when doing pointer arithmetic. */
 375:lvgl/src/misc/lv_tlsf.c **** typedef ptrdiff_t tlsfptr_t;
 376:lvgl/src/misc/lv_tlsf.c **** 
 377:lvgl/src/misc/lv_tlsf.c **** /*
 378:lvgl/src/misc/lv_tlsf.c **** ** block_header_t member functions.
 379:lvgl/src/misc/lv_tlsf.c **** */
 380:lvgl/src/misc/lv_tlsf.c **** 
 381:lvgl/src/misc/lv_tlsf.c **** static size_t block_size(const block_header_t * block)
 382:lvgl/src/misc/lv_tlsf.c **** {
  28              		.loc 1 382 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 383:lvgl/src/misc/lv_tlsf.c ****     return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  33              		.loc 1 383 5 view .LVU1
  34              		.loc 1 383 17 is_stmt 0 view .LVU2
  35 0000 4068     		ldr	r0, [r0, #4]
  36              	.LVL1:
 384:lvgl/src/misc/lv_tlsf.c **** }
  37              		.loc 1 384 1 view .LVU3
  38 0002 20F00300 		bic	r0, r0, #3
  39 0006 7047     		bx	lr
  40              		.cfi_endproc
  41              	.LFE3:
  43              		.section	.text.block_set_size,"ax",%progbits
  44              		.align	1
  45              		.syntax unified
  46              		.thumb
  47              		.thumb_func
  49              	block_set_size:
  50              	.LVL2:
  51              	.LFB4:
 385:lvgl/src/misc/lv_tlsf.c **** 
 386:lvgl/src/misc/lv_tlsf.c **** static void block_set_size(block_header_t * block, size_t size)
 387:lvgl/src/misc/lv_tlsf.c **** {
  52              		.loc 1 387 1 is_stmt 1 view -0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
 388:lvgl/src/misc/lv_tlsf.c ****     const size_t oldsize = block->size;
  57              		.loc 1 388 5 view .LVU5
  58              		.loc 1 388 18 is_stmt 0 view .LVU6
  59 0000 4368     		ldr	r3, [r0, #4]
  60              	.LVL3:
 389:lvgl/src/misc/lv_tlsf.c ****     block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
  61              		.loc 1 389 5 is_stmt 1 view .LVU7
  62              		.loc 1 389 35 is_stmt 0 view .LVU8
  63 0002 03F00303 		and	r3, r3, #3
  64              	.LVL4:
  65              		.loc 1 389 24 view .LVU9
  66 0006 0B43     		orrs	r3, r3, r1
  67              		.loc 1 389 17 view .LVU10
  68 0008 4360     		str	r3, [r0, #4]
  69              	.LVL5:
 390:lvgl/src/misc/lv_tlsf.c **** }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 9


  70              		.loc 1 390 1 view .LVU11
  71 000a 7047     		bx	lr
  72              		.cfi_endproc
  73              	.LFE4:
  75              		.section	.text.block_is_last,"ax",%progbits
  76              		.align	1
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  81              	block_is_last:
  82              	.LVL6:
  83              	.LFB5:
 391:lvgl/src/misc/lv_tlsf.c **** 
 392:lvgl/src/misc/lv_tlsf.c **** static int block_is_last(const block_header_t * block)
 393:lvgl/src/misc/lv_tlsf.c **** {
  84              		.loc 1 393 1 is_stmt 1 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		.loc 1 393 1 is_stmt 0 view .LVU13
  89 0000 08B5     		push	{r3, lr}
  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 3, -8
  92              		.cfi_offset 14, -4
 394:lvgl/src/misc/lv_tlsf.c ****     return block_size(block) == 0;
  93              		.loc 1 394 5 is_stmt 1 view .LVU14
  94              		.loc 1 394 12 is_stmt 0 view .LVU15
  95 0002 FFF7FEFF 		bl	block_size
  96              	.LVL7:
 395:lvgl/src/misc/lv_tlsf.c **** }
  97              		.loc 1 395 1 view .LVU16
  98 0006 B0FA80F0 		clz	r0, r0
  99 000a 4009     		lsrs	r0, r0, #5
 100 000c 08BD     		pop	{r3, pc}
 101              		.cfi_endproc
 102              	.LFE5:
 104              		.section	.text.block_is_free,"ax",%progbits
 105              		.align	1
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 110              	block_is_free:
 111              	.LVL8:
 112              	.LFB6:
 396:lvgl/src/misc/lv_tlsf.c **** 
 397:lvgl/src/misc/lv_tlsf.c **** static int block_is_free(const block_header_t * block)
 398:lvgl/src/misc/lv_tlsf.c **** {
 113              		.loc 1 398 1 is_stmt 1 view -0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 399:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(int, block->size & block_header_free_bit);
 118              		.loc 1 399 5 view .LVU18
 119              		.loc 1 399 12 is_stmt 0 view .LVU19
 120 0000 4068     		ldr	r0, [r0, #4]
 121              	.LVL9:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 10


 400:lvgl/src/misc/lv_tlsf.c **** }
 122              		.loc 1 400 1 view .LVU20
 123 0002 00F00100 		and	r0, r0, #1
 124 0006 7047     		bx	lr
 125              		.cfi_endproc
 126              	.LFE6:
 128              		.section	.text.block_set_free,"ax",%progbits
 129              		.align	1
 130              		.syntax unified
 131              		.thumb
 132              		.thumb_func
 134              	block_set_free:
 135              	.LVL10:
 136              	.LFB7:
 401:lvgl/src/misc/lv_tlsf.c **** 
 402:lvgl/src/misc/lv_tlsf.c **** static void block_set_free(block_header_t * block)
 403:lvgl/src/misc/lv_tlsf.c **** {
 137              		.loc 1 403 1 is_stmt 1 view -0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 404:lvgl/src/misc/lv_tlsf.c ****     block->size |= block_header_free_bit;
 142              		.loc 1 404 5 view .LVU22
 143              		.loc 1 404 17 is_stmt 0 view .LVU23
 144 0000 4368     		ldr	r3, [r0, #4]
 145 0002 43F00103 		orr	r3, r3, #1
 146 0006 4360     		str	r3, [r0, #4]
 405:lvgl/src/misc/lv_tlsf.c **** }
 147              		.loc 1 405 1 view .LVU24
 148 0008 7047     		bx	lr
 149              		.cfi_endproc
 150              	.LFE7:
 152              		.section	.text.block_set_used,"ax",%progbits
 153              		.align	1
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 158              	block_set_used:
 159              	.LVL11:
 160              	.LFB8:
 406:lvgl/src/misc/lv_tlsf.c **** 
 407:lvgl/src/misc/lv_tlsf.c **** static void block_set_used(block_header_t * block)
 408:lvgl/src/misc/lv_tlsf.c **** {
 161              		.loc 1 408 1 is_stmt 1 view -0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              		@ link register save eliminated.
 409:lvgl/src/misc/lv_tlsf.c ****     block->size &= ~block_header_free_bit;
 166              		.loc 1 409 5 view .LVU26
 167              		.loc 1 409 17 is_stmt 0 view .LVU27
 168 0000 4368     		ldr	r3, [r0, #4]
 169 0002 23F00103 		bic	r3, r3, #1
 170 0006 4360     		str	r3, [r0, #4]
 410:lvgl/src/misc/lv_tlsf.c **** }
 171              		.loc 1 410 1 view .LVU28
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 11


 172 0008 7047     		bx	lr
 173              		.cfi_endproc
 174              	.LFE8:
 176              		.section	.text.block_is_prev_free,"ax",%progbits
 177              		.align	1
 178              		.syntax unified
 179              		.thumb
 180              		.thumb_func
 182              	block_is_prev_free:
 183              	.LVL12:
 184              	.LFB9:
 411:lvgl/src/misc/lv_tlsf.c **** 
 412:lvgl/src/misc/lv_tlsf.c **** static int block_is_prev_free(const block_header_t * block)
 413:lvgl/src/misc/lv_tlsf.c **** {
 185              		.loc 1 413 1 is_stmt 1 view -0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              		@ link register save eliminated.
 414:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(int, block->size & block_header_prev_free_bit);
 190              		.loc 1 414 5 view .LVU30
 191              		.loc 1 414 12 is_stmt 0 view .LVU31
 192 0000 4068     		ldr	r0, [r0, #4]
 193              	.LVL13:
 415:lvgl/src/misc/lv_tlsf.c **** }
 194              		.loc 1 415 1 view .LVU32
 195 0002 00F00200 		and	r0, r0, #2
 196 0006 7047     		bx	lr
 197              		.cfi_endproc
 198              	.LFE9:
 200              		.section	.text.block_set_prev_free,"ax",%progbits
 201              		.align	1
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 206              	block_set_prev_free:
 207              	.LVL14:
 208              	.LFB10:
 416:lvgl/src/misc/lv_tlsf.c **** 
 417:lvgl/src/misc/lv_tlsf.c **** static void block_set_prev_free(block_header_t * block)
 418:lvgl/src/misc/lv_tlsf.c **** {
 209              		.loc 1 418 1 is_stmt 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		@ link register save eliminated.
 419:lvgl/src/misc/lv_tlsf.c ****     block->size |= block_header_prev_free_bit;
 214              		.loc 1 419 5 view .LVU34
 215              		.loc 1 419 17 is_stmt 0 view .LVU35
 216 0000 4368     		ldr	r3, [r0, #4]
 217 0002 43F00203 		orr	r3, r3, #2
 218 0006 4360     		str	r3, [r0, #4]
 420:lvgl/src/misc/lv_tlsf.c **** }
 219              		.loc 1 420 1 view .LVU36
 220 0008 7047     		bx	lr
 221              		.cfi_endproc
 222              	.LFE10:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 12


 224              		.section	.text.block_set_prev_used,"ax",%progbits
 225              		.align	1
 226              		.syntax unified
 227              		.thumb
 228              		.thumb_func
 230              	block_set_prev_used:
 231              	.LVL15:
 232              	.LFB11:
 421:lvgl/src/misc/lv_tlsf.c **** 
 422:lvgl/src/misc/lv_tlsf.c **** static void block_set_prev_used(block_header_t * block)
 423:lvgl/src/misc/lv_tlsf.c **** {
 233              		.loc 1 423 1 is_stmt 1 view -0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 424:lvgl/src/misc/lv_tlsf.c ****     block->size &= ~block_header_prev_free_bit;
 238              		.loc 1 424 5 view .LVU38
 239              		.loc 1 424 17 is_stmt 0 view .LVU39
 240 0000 4368     		ldr	r3, [r0, #4]
 241 0002 23F00203 		bic	r3, r3, #2
 242 0006 4360     		str	r3, [r0, #4]
 425:lvgl/src/misc/lv_tlsf.c **** }
 243              		.loc 1 425 1 view .LVU40
 244 0008 7047     		bx	lr
 245              		.cfi_endproc
 246              	.LFE11:
 248              		.section	.text.block_from_ptr,"ax",%progbits
 249              		.align	1
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 254              	block_from_ptr:
 255              	.LVL16:
 256              	.LFB12:
 426:lvgl/src/misc/lv_tlsf.c **** 
 427:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_from_ptr(const void * ptr)
 428:lvgl/src/misc/lv_tlsf.c **** {
 257              		.loc 1 428 1 is_stmt 1 view -0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 429:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(block_header_t *,
 262              		.loc 1 429 5 view .LVU42
 430:lvgl/src/misc/lv_tlsf.c ****                      tlsf_cast(unsigned char *, ptr) - block_start_offset);
 431:lvgl/src/misc/lv_tlsf.c **** }
 263              		.loc 1 431 1 is_stmt 0 view .LVU43
 264 0000 0838     		subs	r0, r0, #8
 265              	.LVL17:
 266              		.loc 1 431 1 view .LVU44
 267 0002 7047     		bx	lr
 268              		.cfi_endproc
 269              	.LFE12:
 271              		.section	.text.block_to_ptr,"ax",%progbits
 272              		.align	1
 273              		.syntax unified
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 13


 274              		.thumb
 275              		.thumb_func
 277              	block_to_ptr:
 278              	.LVL18:
 279              	.LFB13:
 432:lvgl/src/misc/lv_tlsf.c **** 
 433:lvgl/src/misc/lv_tlsf.c **** static void * block_to_ptr(const block_header_t * block)
 434:lvgl/src/misc/lv_tlsf.c **** {
 280              		.loc 1 434 1 is_stmt 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              		@ link register save eliminated.
 435:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(void *,
 285              		.loc 1 435 5 view .LVU46
 436:lvgl/src/misc/lv_tlsf.c ****                      tlsf_cast(unsigned char *, block) + block_start_offset);
 437:lvgl/src/misc/lv_tlsf.c **** }
 286              		.loc 1 437 1 is_stmt 0 view .LVU47
 287 0000 0830     		adds	r0, r0, #8
 288              	.LVL19:
 289              		.loc 1 437 1 view .LVU48
 290 0002 7047     		bx	lr
 291              		.cfi_endproc
 292              	.LFE13:
 294              		.section	.text.offset_to_block,"ax",%progbits
 295              		.align	1
 296              		.syntax unified
 297              		.thumb
 298              		.thumb_func
 300              	offset_to_block:
 301              	.LVL20:
 302              	.LFB14:
 438:lvgl/src/misc/lv_tlsf.c **** 
 439:lvgl/src/misc/lv_tlsf.c **** /* Return location of next block after block of given size. */
 440:lvgl/src/misc/lv_tlsf.c **** static block_header_t * offset_to_block(const void * ptr, size_t size)
 441:lvgl/src/misc/lv_tlsf.c **** {
 303              		.loc 1 441 1 is_stmt 1 view -0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 442:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 308              		.loc 1 442 5 view .LVU50
 443:lvgl/src/misc/lv_tlsf.c **** }
 309              		.loc 1 443 1 is_stmt 0 view .LVU51
 310 0000 0844     		add	r0, r0, r1
 311              	.LVL21:
 312              		.loc 1 443 1 view .LVU52
 313 0002 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE14:
 317              		.section	.text.block_prev,"ax",%progbits
 318              		.align	1
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 323              	block_prev:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 14


 324              	.LVL22:
 325              	.LFB15:
 444:lvgl/src/misc/lv_tlsf.c **** 
 445:lvgl/src/misc/lv_tlsf.c **** /* Return location of previous block. */
 446:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_prev(const block_header_t * block)
 447:lvgl/src/misc/lv_tlsf.c **** {
 326              		.loc 1 447 1 is_stmt 1 view -0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 0, uses_anonymous_args = 0
 330              		.loc 1 447 1 is_stmt 0 view .LVU54
 331 0000 10B5     		push	{r4, lr}
 332              		.cfi_def_cfa_offset 8
 333              		.cfi_offset 4, -8
 334              		.cfi_offset 14, -4
 335 0002 0446     		mov	r4, r0
 448:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_prev_free(block) && "previous block must be free");
 336              		.loc 1 448 5 is_stmt 1 view .LVU55
 337              		.loc 1 448 5 view .LVU56
 338 0004 FFF7FEFF 		bl	block_is_prev_free
 339              	.LVL23:
 340              		.loc 1 448 5 is_stmt 0 view .LVU57
 341 0008 00B9     		cbnz	r0, .L15
 342              	.L16:
 343              		.loc 1 448 5 is_stmt 1 discriminator 1 view .LVU58
 344              		.loc 1 448 5 discriminator 1 view .LVU59
 345              		.loc 1 448 5 discriminator 1 view .LVU60
 346              		.loc 1 448 5 discriminator 1 view .LVU61
 347              		.loc 1 448 5 discriminator 1 view .LVU62
 348              		.loc 1 448 5 discriminator 1 view .LVU63
 349 000a FEE7     		b	.L16
 350              	.L15:
 351              		.loc 1 448 5 discriminator 4 view .LVU64
 449:lvgl/src/misc/lv_tlsf.c ****     return block->prev_phys_block;
 352              		.loc 1 449 5 discriminator 4 view .LVU65
 450:lvgl/src/misc/lv_tlsf.c **** }
 353              		.loc 1 450 1 is_stmt 0 discriminator 4 view .LVU66
 354 000c 2068     		ldr	r0, [r4]
 355 000e 10BD     		pop	{r4, pc}
 356              		.loc 1 450 1 discriminator 4 view .LVU67
 357              		.cfi_endproc
 358              	.LFE15:
 360              		.section	.text.block_next,"ax",%progbits
 361              		.align	1
 362              		.syntax unified
 363              		.thumb
 364              		.thumb_func
 366              	block_next:
 367              	.LVL24:
 368              	.LFB16:
 451:lvgl/src/misc/lv_tlsf.c **** 
 452:lvgl/src/misc/lv_tlsf.c **** /* Return location of next existing block. */
 453:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_next(const block_header_t * block)
 454:lvgl/src/misc/lv_tlsf.c **** {
 369              		.loc 1 454 1 is_stmt 1 view -0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 15


 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373              		.loc 1 454 1 is_stmt 0 view .LVU69
 374 0000 38B5     		push	{r3, r4, r5, lr}
 375              		.cfi_def_cfa_offset 16
 376              		.cfi_offset 3, -16
 377              		.cfi_offset 4, -12
 378              		.cfi_offset 5, -8
 379              		.cfi_offset 14, -4
 380 0002 0446     		mov	r4, r0
 455:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = offset_to_block(block_to_ptr(block),
 381              		.loc 1 455 5 is_stmt 1 view .LVU70
 382              		.loc 1 455 45 is_stmt 0 view .LVU71
 383 0004 FFF7FEFF 		bl	block_to_ptr
 384              	.LVL25:
 385              		.loc 1 455 45 view .LVU72
 386 0008 0546     		mov	r5, r0
 456:lvgl/src/misc/lv_tlsf.c ****                                             block_size(block) - block_header_overhead);
 387              		.loc 1 456 45 view .LVU73
 388 000a 2046     		mov	r0, r4
 389 000c FFF7FEFF 		bl	block_size
 390              	.LVL26:
 455:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = offset_to_block(block_to_ptr(block),
 391              		.loc 1 455 29 view .LVU74
 392 0010 011F     		subs	r1, r0, #4
 393 0012 2846     		mov	r0, r5
 394 0014 FFF7FEFF 		bl	offset_to_block
 395              	.LVL27:
 396 0018 0546     		mov	r5, r0
 397              	.LVL28:
 457:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_last(block));
 398              		.loc 1 457 5 is_stmt 1 view .LVU75
 399              		.loc 1 457 5 view .LVU76
 400 001a 2046     		mov	r0, r4
 401              	.LVL29:
 402              		.loc 1 457 5 is_stmt 0 view .LVU77
 403 001c FFF7FEFF 		bl	block_is_last
 404              	.LVL30:
 405 0020 00B1     		cbz	r0, .L18
 406              	.L20:
 407              		.loc 1 457 5 is_stmt 1 discriminator 1 view .LVU78
 408              		.loc 1 457 5 discriminator 1 view .LVU79
 409              		.loc 1 457 5 discriminator 1 view .LVU80
 410              		.loc 1 457 5 discriminator 1 view .LVU81
 411              		.loc 1 457 5 discriminator 1 view .LVU82
 412              		.loc 1 457 5 discriminator 1 view .LVU83
 413 0022 FEE7     		b	.L20
 414              	.L18:
 458:lvgl/src/misc/lv_tlsf.c ****     return next;
 459:lvgl/src/misc/lv_tlsf.c **** }
 415              		.loc 1 459 1 is_stmt 0 view .LVU84
 416 0024 2846     		mov	r0, r5
 417 0026 38BD     		pop	{r3, r4, r5, pc}
 418              		.loc 1 459 1 view .LVU85
 419              		.cfi_endproc
 420              	.LFE16:
 422              		.section	.text.block_link_next,"ax",%progbits
 423              		.align	1
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 16


 424              		.syntax unified
 425              		.thumb
 426              		.thumb_func
 428              	block_link_next:
 429              	.LVL31:
 430              	.LFB17:
 460:lvgl/src/misc/lv_tlsf.c **** 
 461:lvgl/src/misc/lv_tlsf.c **** /* Link a new block with its physical neighbor, return the neighbor. */
 462:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_link_next(block_header_t * block)
 463:lvgl/src/misc/lv_tlsf.c **** {
 431              		.loc 1 463 1 is_stmt 1 view -0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              		.loc 1 463 1 is_stmt 0 view .LVU87
 436 0000 10B5     		push	{r4, lr}
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 4, -8
 439              		.cfi_offset 14, -4
 440 0002 0446     		mov	r4, r0
 464:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
 441              		.loc 1 464 5 is_stmt 1 view .LVU88
 442              		.loc 1 464 29 is_stmt 0 view .LVU89
 443 0004 FFF7FEFF 		bl	block_next
 444              	.LVL32:
 465:lvgl/src/misc/lv_tlsf.c ****     next->prev_phys_block = block;
 445              		.loc 1 465 5 is_stmt 1 view .LVU90
 446              		.loc 1 465 27 is_stmt 0 view .LVU91
 447 0008 0460     		str	r4, [r0]
 466:lvgl/src/misc/lv_tlsf.c ****     return next;
 448              		.loc 1 466 5 is_stmt 1 view .LVU92
 467:lvgl/src/misc/lv_tlsf.c **** }
 449              		.loc 1 467 1 is_stmt 0 view .LVU93
 450 000a 10BD     		pop	{r4, pc}
 451              		.loc 1 467 1 view .LVU94
 452              		.cfi_endproc
 453              	.LFE17:
 455              		.section	.text.block_mark_as_free,"ax",%progbits
 456              		.align	1
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 461              	block_mark_as_free:
 462              	.LVL33:
 463              	.LFB18:
 468:lvgl/src/misc/lv_tlsf.c **** 
 469:lvgl/src/misc/lv_tlsf.c **** static void block_mark_as_free(block_header_t * block)
 470:lvgl/src/misc/lv_tlsf.c **** {
 464              		.loc 1 470 1 is_stmt 1 view -0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 468              		.loc 1 470 1 is_stmt 0 view .LVU96
 469 0000 10B5     		push	{r4, lr}
 470              		.cfi_def_cfa_offset 8
 471              		.cfi_offset 4, -8
 472              		.cfi_offset 14, -4
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 17


 473 0002 0446     		mov	r4, r0
 471:lvgl/src/misc/lv_tlsf.c ****     /* Link the block to the next block, first. */
 472:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_link_next(block);
 474              		.loc 1 472 5 is_stmt 1 view .LVU97
 475              		.loc 1 472 29 is_stmt 0 view .LVU98
 476 0004 FFF7FEFF 		bl	block_link_next
 477              	.LVL34:
 473:lvgl/src/misc/lv_tlsf.c ****     block_set_prev_free(next);
 478              		.loc 1 473 5 is_stmt 1 view .LVU99
 479 0008 FFF7FEFF 		bl	block_set_prev_free
 480              	.LVL35:
 474:lvgl/src/misc/lv_tlsf.c ****     block_set_free(block);
 481              		.loc 1 474 5 view .LVU100
 482 000c 2046     		mov	r0, r4
 483 000e FFF7FEFF 		bl	block_set_free
 484              	.LVL36:
 475:lvgl/src/misc/lv_tlsf.c **** }
 485              		.loc 1 475 1 is_stmt 0 view .LVU101
 486 0012 10BD     		pop	{r4, pc}
 487              		.loc 1 475 1 view .LVU102
 488              		.cfi_endproc
 489              	.LFE18:
 491              		.section	.text.block_mark_as_used,"ax",%progbits
 492              		.align	1
 493              		.syntax unified
 494              		.thumb
 495              		.thumb_func
 497              	block_mark_as_used:
 498              	.LVL37:
 499              	.LFB19:
 476:lvgl/src/misc/lv_tlsf.c **** 
 477:lvgl/src/misc/lv_tlsf.c **** static void block_mark_as_used(block_header_t * block)
 478:lvgl/src/misc/lv_tlsf.c **** {
 500              		.loc 1 478 1 is_stmt 1 view -0
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 0
 503              		@ frame_needed = 0, uses_anonymous_args = 0
 504              		.loc 1 478 1 is_stmt 0 view .LVU104
 505 0000 10B5     		push	{r4, lr}
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 4, -8
 508              		.cfi_offset 14, -4
 509 0002 0446     		mov	r4, r0
 479:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
 510              		.loc 1 479 5 is_stmt 1 view .LVU105
 511              		.loc 1 479 29 is_stmt 0 view .LVU106
 512 0004 FFF7FEFF 		bl	block_next
 513              	.LVL38:
 480:lvgl/src/misc/lv_tlsf.c ****     block_set_prev_used(next);
 514              		.loc 1 480 5 is_stmt 1 view .LVU107
 515 0008 FFF7FEFF 		bl	block_set_prev_used
 516              	.LVL39:
 481:lvgl/src/misc/lv_tlsf.c ****     block_set_used(block);
 517              		.loc 1 481 5 view .LVU108
 518 000c 2046     		mov	r0, r4
 519 000e FFF7FEFF 		bl	block_set_used
 520              	.LVL40:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 18


 482:lvgl/src/misc/lv_tlsf.c **** }
 521              		.loc 1 482 1 is_stmt 0 view .LVU109
 522 0012 10BD     		pop	{r4, pc}
 523              		.loc 1 482 1 view .LVU110
 524              		.cfi_endproc
 525              	.LFE19:
 527              		.section	.text.align_up,"ax",%progbits
 528              		.align	1
 529              		.syntax unified
 530              		.thumb
 531              		.thumb_func
 533              	align_up:
 534              	.LVL41:
 535              	.LFB20:
 483:lvgl/src/misc/lv_tlsf.c **** 
 484:lvgl/src/misc/lv_tlsf.c **** static size_t align_up(size_t x, size_t align)
 485:lvgl/src/misc/lv_tlsf.c **** {
 536              		.loc 1 485 1 is_stmt 1 view -0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540              		@ link register save eliminated.
 486:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 541              		.loc 1 486 5 view .LVU112
 542              		.loc 1 486 5 view .LVU113
 543 0000 4B1E     		subs	r3, r1, #1
 544 0002 0B42     		tst	r3, r1
 545 0004 00D0     		beq	.L29
 546              	.L30:
 547              		.loc 1 486 5 discriminator 1 view .LVU114
 548              		.loc 1 486 5 discriminator 1 view .LVU115
 549              		.loc 1 486 5 discriminator 1 view .LVU116
 550              		.loc 1 486 5 discriminator 1 view .LVU117
 551              		.loc 1 486 5 discriminator 1 view .LVU118
 552              		.loc 1 486 5 discriminator 1 view .LVU119
 553 0006 FEE7     		b	.L30
 554              	.L29:
 555              		.loc 1 486 5 discriminator 2 view .LVU120
 487:lvgl/src/misc/lv_tlsf.c ****     return (x + (align - 1)) & ~(align - 1);
 556              		.loc 1 487 5 discriminator 2 view .LVU121
 557              		.loc 1 487 15 is_stmt 0 discriminator 2 view .LVU122
 558 0008 0844     		add	r0, r0, r1
 559              	.LVL42:
 560              		.loc 1 487 15 discriminator 2 view .LVU123
 561 000a 0138     		subs	r0, r0, #1
 562              		.loc 1 487 32 discriminator 2 view .LVU124
 563 000c 4942     		rsbs	r1, r1, #0
 564              	.LVL43:
 488:lvgl/src/misc/lv_tlsf.c **** }
 565              		.loc 1 488 1 discriminator 2 view .LVU125
 566 000e 0840     		ands	r0, r0, r1
 567 0010 7047     		bx	lr
 568              		.cfi_endproc
 569              	.LFE20:
 571              		.section	.text.align_down,"ax",%progbits
 572              		.align	1
 573              		.syntax unified
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 19


 574              		.thumb
 575              		.thumb_func
 577              	align_down:
 578              	.LVL44:
 579              	.LFB21:
 489:lvgl/src/misc/lv_tlsf.c **** 
 490:lvgl/src/misc/lv_tlsf.c **** static size_t align_down(size_t x, size_t align)
 491:lvgl/src/misc/lv_tlsf.c **** {
 580              		.loc 1 491 1 is_stmt 1 view -0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              		@ link register save eliminated.
 492:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 585              		.loc 1 492 5 view .LVU127
 586              		.loc 1 492 5 view .LVU128
 587 0000 4B1E     		subs	r3, r1, #1
 588 0002 0B42     		tst	r3, r1
 589 0004 00D0     		beq	.L32
 590              	.L33:
 591              		.loc 1 492 5 discriminator 1 view .LVU129
 592              		.loc 1 492 5 discriminator 1 view .LVU130
 593              		.loc 1 492 5 discriminator 1 view .LVU131
 594              		.loc 1 492 5 discriminator 1 view .LVU132
 595              		.loc 1 492 5 discriminator 1 view .LVU133
 596              		.loc 1 492 5 discriminator 1 view .LVU134
 597 0006 FEE7     		b	.L33
 598              	.L32:
 599              		.loc 1 492 5 discriminator 2 view .LVU135
 493:lvgl/src/misc/lv_tlsf.c ****     return x - (x & (align - 1));
 600              		.loc 1 493 5 discriminator 2 view .LVU136
 601              		.loc 1 493 14 is_stmt 0 discriminator 2 view .LVU137
 602 0008 4942     		rsbs	r1, r1, #0
 603              	.LVL45:
 494:lvgl/src/misc/lv_tlsf.c **** }
 604              		.loc 1 494 1 discriminator 2 view .LVU138
 605 000a 0840     		ands	r0, r0, r1
 606              	.LVL46:
 607              		.loc 1 494 1 discriminator 2 view .LVU139
 608 000c 7047     		bx	lr
 609              		.cfi_endproc
 610              	.LFE21:
 612              		.section	.text.align_ptr,"ax",%progbits
 613              		.align	1
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 618              	align_ptr:
 619              	.LVL47:
 620              	.LFB22:
 495:lvgl/src/misc/lv_tlsf.c **** 
 496:lvgl/src/misc/lv_tlsf.c **** static void * align_ptr(const void * ptr, size_t align)
 497:lvgl/src/misc/lv_tlsf.c **** {
 621              		.loc 1 497 1 is_stmt 1 view -0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 0
 624              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 20


 625              		@ link register save eliminated.
 498:lvgl/src/misc/lv_tlsf.c ****     const tlsfptr_t aligned =
 626              		.loc 1 498 5 view .LVU141
 499:lvgl/src/misc/lv_tlsf.c ****         (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 627              		.loc 1 499 36 is_stmt 0 view .LVU142
 628 0000 0844     		add	r0, r0, r1
 629              	.LVL48:
 630              		.loc 1 499 36 view .LVU143
 631 0002 0138     		subs	r0, r0, #1
 632              		.loc 1 499 53 view .LVU144
 633 0004 4B42     		rsbs	r3, r1, #0
 634              		.loc 1 499 51 view .LVU145
 635 0006 1840     		ands	r0, r0, r3
 636              	.LVL49:
 500:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 637              		.loc 1 500 5 is_stmt 1 view .LVU146
 638              		.loc 1 500 5 view .LVU147
 639 0008 4B1E     		subs	r3, r1, #1
 640 000a 0B42     		tst	r3, r1
 641 000c 00D0     		beq	.L35
 642              	.L36:
 643              		.loc 1 500 5 discriminator 1 view .LVU148
 644              		.loc 1 500 5 discriminator 1 view .LVU149
 645              		.loc 1 500 5 discriminator 1 view .LVU150
 646              		.loc 1 500 5 discriminator 1 view .LVU151
 647              		.loc 1 500 5 discriminator 1 view .LVU152
 648              		.loc 1 500 5 discriminator 1 view .LVU153
 649 000e FEE7     		b	.L36
 650              	.L35:
 651              		.loc 1 500 5 discriminator 2 view .LVU154
 501:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(void *, aligned);
 652              		.loc 1 501 5 discriminator 2 view .LVU155
 502:lvgl/src/misc/lv_tlsf.c **** }
 653              		.loc 1 502 1 is_stmt 0 discriminator 2 view .LVU156
 654 0010 7047     		bx	lr
 655              		.cfi_endproc
 656              	.LFE22:
 658              		.section	.text.adjust_request_size,"ax",%progbits
 659              		.align	1
 660              		.syntax unified
 661              		.thumb
 662              		.thumb_func
 664              	adjust_request_size:
 665              	.LVL50:
 666              	.LFB23:
 503:lvgl/src/misc/lv_tlsf.c **** 
 504:lvgl/src/misc/lv_tlsf.c **** /*
 505:lvgl/src/misc/lv_tlsf.c **** ** Adjust an allocation size to be aligned to word size, and no smaller
 506:lvgl/src/misc/lv_tlsf.c **** ** than internal minimum.
 507:lvgl/src/misc/lv_tlsf.c **** */
 508:lvgl/src/misc/lv_tlsf.c **** static size_t adjust_request_size(size_t size, size_t align)
 509:lvgl/src/misc/lv_tlsf.c **** {
 667              		.loc 1 509 1 is_stmt 1 view -0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 671              		.loc 1 509 1 is_stmt 0 view .LVU158
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 21


 672 0000 08B5     		push	{r3, lr}
 673              		.cfi_def_cfa_offset 8
 674              		.cfi_offset 3, -8
 675              		.cfi_offset 14, -4
 510:lvgl/src/misc/lv_tlsf.c ****     size_t adjust = 0;
 676              		.loc 1 510 5 is_stmt 1 view .LVU159
 677              	.LVL51:
 511:lvgl/src/misc/lv_tlsf.c ****     if(size) {
 678              		.loc 1 511 5 view .LVU160
 679              		.loc 1 511 7 is_stmt 0 view .LVU161
 680 0002 00B9     		cbnz	r0, .L41
 681              	.LVL52:
 682              	.L38:
 512:lvgl/src/misc/lv_tlsf.c ****         const size_t aligned = align_up(size, align);
 513:lvgl/src/misc/lv_tlsf.c **** 
 514:lvgl/src/misc/lv_tlsf.c ****         /* aligned sized must not exceed block_size_max or we'll go out of bounds on sl_bitmap */
 515:lvgl/src/misc/lv_tlsf.c ****         if(aligned < block_size_max) {
 516:lvgl/src/misc/lv_tlsf.c ****             adjust = tlsf_max(aligned, block_size_min);
 517:lvgl/src/misc/lv_tlsf.c ****         }
 518:lvgl/src/misc/lv_tlsf.c ****     }
 519:lvgl/src/misc/lv_tlsf.c ****     return adjust;
 683              		.loc 1 519 5 is_stmt 1 view .LVU162
 520:lvgl/src/misc/lv_tlsf.c **** }
 684              		.loc 1 520 1 is_stmt 0 view .LVU163
 685 0004 08BD     		pop	{r3, pc}
 686              	.LVL53:
 687              	.L41:
 688              	.LBB2:
 512:lvgl/src/misc/lv_tlsf.c ****         const size_t aligned = align_up(size, align);
 689              		.loc 1 512 9 is_stmt 1 view .LVU164
 512:lvgl/src/misc/lv_tlsf.c ****         const size_t aligned = align_up(size, align);
 690              		.loc 1 512 32 is_stmt 0 view .LVU165
 691 0006 FFF7FEFF 		bl	align_up
 692              	.LVL54:
 515:lvgl/src/misc/lv_tlsf.c ****             adjust = tlsf_max(aligned, block_size_min);
 693              		.loc 1 515 9 is_stmt 1 view .LVU166
 515:lvgl/src/misc/lv_tlsf.c ****             adjust = tlsf_max(aligned, block_size_min);
 694              		.loc 1 515 11 is_stmt 0 view .LVU167
 695 000a B0F5801F 		cmp	r0, #1048576
 696 000e 03D2     		bcs	.L39
 516:lvgl/src/misc/lv_tlsf.c ****         }
 697              		.loc 1 516 13 is_stmt 1 view .LVU168
 516:lvgl/src/misc/lv_tlsf.c ****         }
 698              		.loc 1 516 20 is_stmt 0 view .LVU169
 699 0010 0C28     		cmp	r0, #12
 700 0012 38BF     		it	cc
 701 0014 0C20     		movcc	r0, #12
 702              	.LVL55:
 516:lvgl/src/misc/lv_tlsf.c ****         }
 703              		.loc 1 516 20 view .LVU170
 704 0016 F5E7     		b	.L38
 705              	.LVL56:
 706              	.L39:
 516:lvgl/src/misc/lv_tlsf.c ****         }
 707              		.loc 1 516 20 view .LVU171
 708              	.LBE2:
 510:lvgl/src/misc/lv_tlsf.c ****     if(size) {
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 22


 709              		.loc 1 510 12 view .LVU172
 710 0018 0020     		movs	r0, #0
 711              	.LVL57:
 510:lvgl/src/misc/lv_tlsf.c ****     if(size) {
 712              		.loc 1 510 12 view .LVU173
 713 001a F3E7     		b	.L38
 714              		.cfi_endproc
 715              	.LFE23:
 717              		.section	.text.remove_free_block,"ax",%progbits
 718              		.align	1
 719              		.syntax unified
 720              		.thumb
 721              		.thumb_func
 723              	remove_free_block:
 724              	.LVL58:
 725              	.LFB27:
 521:lvgl/src/misc/lv_tlsf.c **** 
 522:lvgl/src/misc/lv_tlsf.c **** /*
 523:lvgl/src/misc/lv_tlsf.c **** ** TLSF utility functions. In most cases, these are direct translations of
 524:lvgl/src/misc/lv_tlsf.c **** ** the documentation found in the white paper.
 525:lvgl/src/misc/lv_tlsf.c **** */
 526:lvgl/src/misc/lv_tlsf.c **** 
 527:lvgl/src/misc/lv_tlsf.c **** static void mapping_insert(size_t size, int * fli, int * sli)
 528:lvgl/src/misc/lv_tlsf.c **** {
 529:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 530:lvgl/src/misc/lv_tlsf.c ****     if(size < SMALL_BLOCK_SIZE) {
 531:lvgl/src/misc/lv_tlsf.c ****         /* Store small blocks in first list. */
 532:lvgl/src/misc/lv_tlsf.c ****         fl = 0;
 533:lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 534:lvgl/src/misc/lv_tlsf.c ****     }
 535:lvgl/src/misc/lv_tlsf.c ****     else {
 536:lvgl/src/misc/lv_tlsf.c ****         fl = tlsf_fls_sizet(size);
 537:lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 538:lvgl/src/misc/lv_tlsf.c ****         fl -= (FL_INDEX_SHIFT - 1);
 539:lvgl/src/misc/lv_tlsf.c ****     }
 540:lvgl/src/misc/lv_tlsf.c ****     *fli = fl;
 541:lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 542:lvgl/src/misc/lv_tlsf.c **** }
 543:lvgl/src/misc/lv_tlsf.c **** 
 544:lvgl/src/misc/lv_tlsf.c **** /* This version rounds up to the next block size (for allocations) */
 545:lvgl/src/misc/lv_tlsf.c **** static void mapping_search(size_t size, int * fli, int * sli)
 546:lvgl/src/misc/lv_tlsf.c **** {
 547:lvgl/src/misc/lv_tlsf.c ****     if(size >= SMALL_BLOCK_SIZE) {
 548:lvgl/src/misc/lv_tlsf.c ****         const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 549:lvgl/src/misc/lv_tlsf.c ****         size += round;
 550:lvgl/src/misc/lv_tlsf.c ****     }
 551:lvgl/src/misc/lv_tlsf.c ****     mapping_insert(size, fli, sli);
 552:lvgl/src/misc/lv_tlsf.c **** }
 553:lvgl/src/misc/lv_tlsf.c **** 
 554:lvgl/src/misc/lv_tlsf.c **** static block_header_t * search_suitable_block(control_t * control, int * fli, int * sli)
 555:lvgl/src/misc/lv_tlsf.c **** {
 556:lvgl/src/misc/lv_tlsf.c ****     int fl = *fli;
 557:lvgl/src/misc/lv_tlsf.c ****     int sl = *sli;
 558:lvgl/src/misc/lv_tlsf.c **** 
 559:lvgl/src/misc/lv_tlsf.c ****     /*
 560:lvgl/src/misc/lv_tlsf.c ****     ** First, search for a block in the list associated with the given
 561:lvgl/src/misc/lv_tlsf.c ****     ** fl/sl index.
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 23


 562:lvgl/src/misc/lv_tlsf.c ****     */
 563:lvgl/src/misc/lv_tlsf.c ****     unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 564:lvgl/src/misc/lv_tlsf.c ****     if(!sl_map) {
 565:lvgl/src/misc/lv_tlsf.c ****         /* No block exists. Search in the next largest first-level list. */
 566:lvgl/src/misc/lv_tlsf.c ****         const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 567:lvgl/src/misc/lv_tlsf.c ****         if(!fl_map) {
 568:lvgl/src/misc/lv_tlsf.c ****             /* No free blocks available, memory has been exhausted. */
 569:lvgl/src/misc/lv_tlsf.c ****             return 0;
 570:lvgl/src/misc/lv_tlsf.c ****         }
 571:lvgl/src/misc/lv_tlsf.c **** 
 572:lvgl/src/misc/lv_tlsf.c ****         fl = tlsf_ffs(fl_map);
 573:lvgl/src/misc/lv_tlsf.c ****         *fli = fl;
 574:lvgl/src/misc/lv_tlsf.c ****         sl_map = control->sl_bitmap[fl];
 575:lvgl/src/misc/lv_tlsf.c ****     }
 576:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(sl_map && "internal error - second level bitmap is null");
 577:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 578:lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 579:lvgl/src/misc/lv_tlsf.c **** 
 580:lvgl/src/misc/lv_tlsf.c ****     /* Return the first block in the free list. */
 581:lvgl/src/misc/lv_tlsf.c ****     return control->blocks[fl][sl];
 582:lvgl/src/misc/lv_tlsf.c **** }
 583:lvgl/src/misc/lv_tlsf.c **** 
 584:lvgl/src/misc/lv_tlsf.c **** /* Remove a free block from the free list.*/
 585:lvgl/src/misc/lv_tlsf.c **** static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
 586:lvgl/src/misc/lv_tlsf.c **** {
 726              		.loc 1 586 1 is_stmt 1 view -0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 0
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730              		.loc 1 586 1 is_stmt 0 view .LVU175
 731 0000 10B5     		push	{r4, lr}
 732              		.cfi_def_cfa_offset 8
 733              		.cfi_offset 4, -8
 734              		.cfi_offset 14, -4
 735 0002 9646     		mov	lr, r2
 587:lvgl/src/misc/lv_tlsf.c ****     block_header_t * prev = block->prev_free;
 736              		.loc 1 587 5 is_stmt 1 view .LVU176
 737              		.loc 1 587 22 is_stmt 0 view .LVU177
 738 0004 CA68     		ldr	r2, [r1, #12]
 739              	.LVL59:
 588:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block->next_free;
 740              		.loc 1 588 5 is_stmt 1 view .LVU178
 741              		.loc 1 588 22 is_stmt 0 view .LVU179
 742 0006 8C68     		ldr	r4, [r1, #8]
 743              	.LVL60:
 589:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(prev && "prev_free field can not be null");
 744              		.loc 1 589 5 is_stmt 1 view .LVU180
 745              		.loc 1 589 5 view .LVU181
 746 0008 6AB1     		cbz	r2, .L44
 747              		.loc 1 589 5 discriminator 2 view .LVU182
 590:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 748              		.loc 1 590 5 discriminator 2 view .LVU183
 749              		.loc 1 590 5 discriminator 2 view .LVU184
 750 000a 6CB1     		cbz	r4, .L46
 751              		.loc 1 590 5 discriminator 2 view .LVU185
 591:lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
 752              		.loc 1 591 5 discriminator 2 view .LVU186
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 24


 753              		.loc 1 591 21 is_stmt 0 discriminator 2 view .LVU187
 754 000c E260     		str	r2, [r4, #12]
 592:lvgl/src/misc/lv_tlsf.c ****     prev->next_free = next;
 755              		.loc 1 592 5 is_stmt 1 discriminator 2 view .LVU188
 756              		.loc 1 592 21 is_stmt 0 discriminator 2 view .LVU189
 757 000e 9460     		str	r4, [r2, #8]
 593:lvgl/src/misc/lv_tlsf.c **** 
 594:lvgl/src/misc/lv_tlsf.c ****     /* If this block is the head of the free list, set new head. */
 595:lvgl/src/misc/lv_tlsf.c ****     if(control->blocks[fl][sl] == block) {
 758              		.loc 1 595 5 is_stmt 1 discriminator 2 view .LVU190
 759              		.loc 1 595 27 is_stmt 0 discriminator 2 view .LVU191
 760 0010 03EB4E1C 		add	ip, r3, lr, lsl #5
 761 0014 0CF1120C 		add	ip, ip, #18
 762 0018 00EB8C0C 		add	ip, r0, ip, lsl #2
 763 001c DCF80420 		ldr	r2, [ip, #4]
 764              	.LVL61:
 765              		.loc 1 595 7 discriminator 2 view .LVU192
 766 0020 8A42     		cmp	r2, r1
 767 0022 02D0     		beq	.L49
 768              	.LVL62:
 769              	.L42:
 596:lvgl/src/misc/lv_tlsf.c ****         control->blocks[fl][sl] = next;
 597:lvgl/src/misc/lv_tlsf.c **** 
 598:lvgl/src/misc/lv_tlsf.c ****         /* If the new head is null, clear the bitmap. */
 599:lvgl/src/misc/lv_tlsf.c ****         if(next == &control->block_null) {
 600:lvgl/src/misc/lv_tlsf.c ****             control->sl_bitmap[fl] &= ~(1U << sl);
 601:lvgl/src/misc/lv_tlsf.c **** 
 602:lvgl/src/misc/lv_tlsf.c ****             /* If the second bitmap is now empty, clear the fl bitmap. */
 603:lvgl/src/misc/lv_tlsf.c ****             if(!control->sl_bitmap[fl]) {
 604:lvgl/src/misc/lv_tlsf.c ****                 control->fl_bitmap &= ~(1U << fl);
 605:lvgl/src/misc/lv_tlsf.c ****             }
 606:lvgl/src/misc/lv_tlsf.c ****         }
 607:lvgl/src/misc/lv_tlsf.c ****     }
 608:lvgl/src/misc/lv_tlsf.c **** }
 770              		.loc 1 608 1 view .LVU193
 771 0024 10BD     		pop	{r4, pc}
 772              	.LVL63:
 773              	.L44:
 589:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 774              		.loc 1 589 5 is_stmt 1 discriminator 1 view .LVU194
 589:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 775              		.loc 1 589 5 discriminator 1 view .LVU195
 589:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 776              		.loc 1 589 5 discriminator 1 view .LVU196
 589:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 777              		.loc 1 589 5 discriminator 1 view .LVU197
 589:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 778              		.loc 1 589 5 discriminator 1 view .LVU198
 589:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 779              		.loc 1 589 5 discriminator 1 view .LVU199
 780 0026 FEE7     		b	.L44
 781              	.L46:
 590:lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
 782              		.loc 1 590 5 discriminator 2 view .LVU200
 590:lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
 783              		.loc 1 590 5 discriminator 2 view .LVU201
 590:lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 25


 784              		.loc 1 590 5 discriminator 2 view .LVU202
 590:lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
 785              		.loc 1 590 5 discriminator 2 view .LVU203
 590:lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
 786              		.loc 1 590 5 discriminator 2 view .LVU204
 590:lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
 787              		.loc 1 590 5 discriminator 2 view .LVU205
 788 0028 FEE7     		b	.L46
 789              	.LVL64:
 790              	.L49:
 596:lvgl/src/misc/lv_tlsf.c ****         control->blocks[fl][sl] = next;
 791              		.loc 1 596 9 view .LVU206
 596:lvgl/src/misc/lv_tlsf.c ****         control->blocks[fl][sl] = next;
 792              		.loc 1 596 33 is_stmt 0 view .LVU207
 793 002a CCF80440 		str	r4, [ip, #4]
 599:lvgl/src/misc/lv_tlsf.c ****             control->sl_bitmap[fl] &= ~(1U << sl);
 794              		.loc 1 599 9 is_stmt 1 view .LVU208
 599:lvgl/src/misc/lv_tlsf.c ****             control->sl_bitmap[fl] &= ~(1U << sl);
 795              		.loc 1 599 11 is_stmt 0 view .LVU209
 796 002e A042     		cmp	r0, r4
 797 0030 F8D1     		bne	.L42
 600:lvgl/src/misc/lv_tlsf.c **** 
 798              		.loc 1 600 13 is_stmt 1 view .LVU210
 600:lvgl/src/misc/lv_tlsf.c **** 
 799              		.loc 1 600 44 is_stmt 0 view .LVU211
 800 0032 0121     		movs	r1, #1
 801              	.LVL65:
 600:lvgl/src/misc/lv_tlsf.c **** 
 802              		.loc 1 600 44 view .LVU212
 803 0034 9940     		lsls	r1, r1, r3
 600:lvgl/src/misc/lv_tlsf.c **** 
 804              		.loc 1 600 36 view .LVU213
 805 0036 0EF10402 		add	r2, lr, #4
 806 003a 00EB8202 		add	r2, r0, r2, lsl #2
 807 003e 5368     		ldr	r3, [r2, #4]
 808              	.LVL66:
 600:lvgl/src/misc/lv_tlsf.c **** 
 809              		.loc 1 600 36 view .LVU214
 810 0040 23EA0103 		bic	r3, r3, r1
 811 0044 5360     		str	r3, [r2, #4]
 603:lvgl/src/misc/lv_tlsf.c ****                 control->fl_bitmap &= ~(1U << fl);
 812              		.loc 1 603 13 is_stmt 1 view .LVU215
 603:lvgl/src/misc/lv_tlsf.c ****                 control->fl_bitmap &= ~(1U << fl);
 813              		.loc 1 603 15 is_stmt 0 view .LVU216
 814 0046 002B     		cmp	r3, #0
 815 0048 ECD1     		bne	.L42
 604:lvgl/src/misc/lv_tlsf.c ****             }
 816              		.loc 1 604 17 is_stmt 1 view .LVU217
 604:lvgl/src/misc/lv_tlsf.c ****             }
 817              		.loc 1 604 44 is_stmt 0 view .LVU218
 818 004a 0123     		movs	r3, #1
 819 004c 03FA0EF2 		lsl	r2, r3, lr
 604:lvgl/src/misc/lv_tlsf.c ****             }
 820              		.loc 1 604 36 view .LVU219
 821 0050 0369     		ldr	r3, [r0, #16]
 822 0052 23EA0203 		bic	r3, r3, r2
 823 0056 0361     		str	r3, [r0, #16]
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 26


 824              		.loc 1 608 1 view .LVU220
 825 0058 E4E7     		b	.L42
 826              		.cfi_endproc
 827              	.LFE27:
 829              		.section	.text.insert_free_block,"ax",%progbits
 830              		.align	1
 831              		.syntax unified
 832              		.thumb
 833              		.thumb_func
 835              	insert_free_block:
 836              	.LVL67:
 837              	.LFB28:
 609:lvgl/src/misc/lv_tlsf.c **** 
 610:lvgl/src/misc/lv_tlsf.c **** /* Insert a free block into the free block list. */
 611:lvgl/src/misc/lv_tlsf.c **** static void insert_free_block(control_t * control, block_header_t * block, int fl, int sl)
 612:lvgl/src/misc/lv_tlsf.c **** {
 838              		.loc 1 612 1 is_stmt 1 view -0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 0
 841              		@ frame_needed = 0, uses_anonymous_args = 0
 842              		.loc 1 612 1 is_stmt 0 view .LVU222
 843 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 844              		.cfi_def_cfa_offset 24
 845              		.cfi_offset 4, -24
 846              		.cfi_offset 5, -20
 847              		.cfi_offset 6, -16
 848              		.cfi_offset 7, -12
 849              		.cfi_offset 8, -8
 850              		.cfi_offset 14, -4
 851 0004 1F46     		mov	r7, r3
 613:lvgl/src/misc/lv_tlsf.c ****     block_header_t * current = control->blocks[fl][sl];
 852              		.loc 1 613 5 is_stmt 1 view .LVU223
 853              		.loc 1 613 22 is_stmt 0 view .LVU224
 854 0006 03EB421C 		add	ip, r3, r2, lsl #5
 855 000a 0CF1120C 		add	ip, ip, #18
 856 000e 00EB8C0C 		add	ip, r0, ip, lsl #2
 857 0012 DCF80430 		ldr	r3, [ip, #4]
 858              	.LVL68:
 614:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(current && "free list cannot have a null entry");
 859              		.loc 1 614 5 is_stmt 1 view .LVU225
 860              		.loc 1 614 5 view .LVU226
 861 0016 83B1     		cbz	r3, .L52
 862 0018 0546     		mov	r5, r0
 863 001a 0C46     		mov	r4, r1
 864 001c 1646     		mov	r6, r2
 865              		.loc 1 614 5 discriminator 2 view .LVU227
 615:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
 866              		.loc 1 615 5 discriminator 2 view .LVU228
 867              		.loc 1 615 5 discriminator 2 view .LVU229
 868 001e 69B1     		cbz	r1, .L54
 869              		.loc 1 615 5 discriminator 2 view .LVU230
 616:lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
 870              		.loc 1 616 5 discriminator 2 view .LVU231
 871              		.loc 1 616 22 is_stmt 0 discriminator 2 view .LVU232
 872 0020 8B60     		str	r3, [r1, #8]
 617:lvgl/src/misc/lv_tlsf.c ****     block->prev_free = &control->block_null;
 873              		.loc 1 617 5 is_stmt 1 discriminator 2 view .LVU233
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 27


 874              		.loc 1 617 22 is_stmt 0 discriminator 2 view .LVU234
 875 0022 C860     		str	r0, [r1, #12]
 618:lvgl/src/misc/lv_tlsf.c ****     current->prev_free = block;
 876              		.loc 1 618 5 is_stmt 1 discriminator 2 view .LVU235
 877              		.loc 1 618 24 is_stmt 0 discriminator 2 view .LVU236
 878 0024 D960     		str	r1, [r3, #12]
 619:lvgl/src/misc/lv_tlsf.c **** 
 620:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 879              		.loc 1 620 5 is_stmt 1 discriminator 2 view .LVU237
 880              		.loc 1 620 5 discriminator 2 view .LVU238
 881 0026 0846     		mov	r0, r1
 882              	.LVL69:
 883              		.loc 1 620 5 is_stmt 0 discriminator 2 view .LVU239
 884 0028 FFF7FEFF 		bl	block_to_ptr
 885              	.LVL70:
 886              		.loc 1 620 5 discriminator 2 view .LVU240
 887 002c 8046     		mov	r8, r0
 888 002e 0421     		movs	r1, #4
 889 0030 FFF7FEFF 		bl	align_ptr
 890              	.LVL71:
 891 0034 8045     		cmp	r8, r0
 892 0036 02D0     		beq	.L55
 893              	.L56:
 894              		.loc 1 620 5 is_stmt 1 discriminator 3 view .LVU241
 895              		.loc 1 620 5 discriminator 3 view .LVU242
 896              		.loc 1 620 5 discriminator 3 view .LVU243
 897              		.loc 1 620 5 discriminator 3 view .LVU244
 898              		.loc 1 620 5 discriminator 3 view .LVU245
 899              		.loc 1 620 5 discriminator 3 view .LVU246
 900 0038 FEE7     		b	.L56
 901              	.LVL72:
 902              	.L52:
 614:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
 903              		.loc 1 614 5 discriminator 1 view .LVU247
 614:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
 904              		.loc 1 614 5 discriminator 1 view .LVU248
 614:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
 905              		.loc 1 614 5 discriminator 1 view .LVU249
 614:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
 906              		.loc 1 614 5 discriminator 1 view .LVU250
 614:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
 907              		.loc 1 614 5 discriminator 1 view .LVU251
 614:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
 908              		.loc 1 614 5 discriminator 1 view .LVU252
 909 003a FEE7     		b	.L52
 910              	.L54:
 615:lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
 911              		.loc 1 615 5 discriminator 2 view .LVU253
 615:lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
 912              		.loc 1 615 5 discriminator 2 view .LVU254
 615:lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
 913              		.loc 1 615 5 discriminator 2 view .LVU255
 615:lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
 914              		.loc 1 615 5 discriminator 2 view .LVU256
 615:lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
 915              		.loc 1 615 5 discriminator 2 view .LVU257
 615:lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 28


 916              		.loc 1 615 5 discriminator 2 view .LVU258
 917 003c FEE7     		b	.L54
 918              	.LVL73:
 919              	.L55:
 920              		.loc 1 620 5 discriminator 2 view .LVU259
 621:lvgl/src/misc/lv_tlsf.c ****                 && "block not aligned properly");
 622:lvgl/src/misc/lv_tlsf.c ****     /*
 623:lvgl/src/misc/lv_tlsf.c ****     ** Insert the new block at the head of the list, and mark the first-
 624:lvgl/src/misc/lv_tlsf.c ****     ** and second-level bitmaps appropriately.
 625:lvgl/src/misc/lv_tlsf.c ****     */
 626:lvgl/src/misc/lv_tlsf.c ****     control->blocks[fl][sl] = block;
 921              		.loc 1 626 5 discriminator 2 view .LVU260
 922              		.loc 1 626 29 is_stmt 0 discriminator 2 view .LVU261
 923 003e 07EB4613 		add	r3, r7, r6, lsl #5
 924 0042 1233     		adds	r3, r3, #18
 925 0044 05EB8303 		add	r3, r5, r3, lsl #2
 926 0048 5C60     		str	r4, [r3, #4]
 627:lvgl/src/misc/lv_tlsf.c ****     control->fl_bitmap |= (1U << fl);
 927              		.loc 1 627 5 is_stmt 1 discriminator 2 view .LVU262
 928              		.loc 1 627 31 is_stmt 0 discriminator 2 view .LVU263
 929 004a 0123     		movs	r3, #1
 930 004c 03FA06F1 		lsl	r1, r3, r6
 931              		.loc 1 627 24 discriminator 2 view .LVU264
 932 0050 2A69     		ldr	r2, [r5, #16]
 933 0052 0A43     		orrs	r2, r2, r1
 934 0054 2A61     		str	r2, [r5, #16]
 628:lvgl/src/misc/lv_tlsf.c ****     control->sl_bitmap[fl] |= (1U << sl);
 935              		.loc 1 628 5 is_stmt 1 discriminator 2 view .LVU265
 936              		.loc 1 628 35 is_stmt 0 discriminator 2 view .LVU266
 937 0056 BB40     		lsls	r3, r3, r7
 938              		.loc 1 628 28 discriminator 2 view .LVU267
 939 0058 0436     		adds	r6, r6, #4
 940              	.LVL74:
 941              		.loc 1 628 28 discriminator 2 view .LVU268
 942 005a 05EB8605 		add	r5, r5, r6, lsl #2
 943              	.LVL75:
 944              		.loc 1 628 28 discriminator 2 view .LVU269
 945 005e 6A68     		ldr	r2, [r5, #4]
 946 0060 1343     		orrs	r3, r3, r2
 947 0062 6B60     		str	r3, [r5, #4]
 629:lvgl/src/misc/lv_tlsf.c **** }
 948              		.loc 1 629 1 discriminator 2 view .LVU270
 949 0064 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 950              		.loc 1 629 1 discriminator 2 view .LVU271
 951              		.cfi_endproc
 952              	.LFE28:
 954              		.section	.text.block_can_split,"ax",%progbits
 955              		.align	1
 956              		.syntax unified
 957              		.thumb
 958              		.thumb_func
 960              	block_can_split:
 961              	.LVL76:
 962              	.LFB31:
 630:lvgl/src/misc/lv_tlsf.c **** 
 631:lvgl/src/misc/lv_tlsf.c **** /* Remove a given block from the free list. */
 632:lvgl/src/misc/lv_tlsf.c **** static void block_remove(control_t * control, block_header_t * block)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 29


 633:lvgl/src/misc/lv_tlsf.c **** {
 634:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 635:lvgl/src/misc/lv_tlsf.c ****     mapping_insert(block_size(block), &fl, &sl);
 636:lvgl/src/misc/lv_tlsf.c ****     remove_free_block(control, block, fl, sl);
 637:lvgl/src/misc/lv_tlsf.c **** }
 638:lvgl/src/misc/lv_tlsf.c **** 
 639:lvgl/src/misc/lv_tlsf.c **** /* Insert a given block into the free list. */
 640:lvgl/src/misc/lv_tlsf.c **** static void block_insert(control_t * control, block_header_t * block)
 641:lvgl/src/misc/lv_tlsf.c **** {
 642:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 643:lvgl/src/misc/lv_tlsf.c ****     mapping_insert(block_size(block), &fl, &sl);
 644:lvgl/src/misc/lv_tlsf.c ****     insert_free_block(control, block, fl, sl);
 645:lvgl/src/misc/lv_tlsf.c **** }
 646:lvgl/src/misc/lv_tlsf.c **** 
 647:lvgl/src/misc/lv_tlsf.c **** static int block_can_split(block_header_t * block, size_t size)
 648:lvgl/src/misc/lv_tlsf.c **** {
 963              		.loc 1 648 1 is_stmt 1 view -0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 0
 966              		@ frame_needed = 0, uses_anonymous_args = 0
 967              		.loc 1 648 1 is_stmt 0 view .LVU273
 968 0000 10B5     		push	{r4, lr}
 969              		.cfi_def_cfa_offset 8
 970              		.cfi_offset 4, -8
 971              		.cfi_offset 14, -4
 972 0002 0C46     		mov	r4, r1
 649:lvgl/src/misc/lv_tlsf.c ****     return block_size(block) >= sizeof(block_header_t) + size;
 973              		.loc 1 649 5 is_stmt 1 view .LVU274
 974              		.loc 1 649 12 is_stmt 0 view .LVU275
 975 0004 FFF7FEFF 		bl	block_size
 976              	.LVL77:
 977              		.loc 1 649 56 view .LVU276
 978 0008 1034     		adds	r4, r4, #16
 979              	.LVL78:
 650:lvgl/src/misc/lv_tlsf.c **** }
 980              		.loc 1 650 1 view .LVU277
 981 000a A042     		cmp	r0, r4
 982 000c 34BF     		ite	cc
 983 000e 0020     		movcc	r0, #0
 984 0010 0120     		movcs	r0, #1
 985 0012 10BD     		pop	{r4, pc}
 986              		.loc 1 650 1 view .LVU278
 987              		.cfi_endproc
 988              	.LFE31:
 990              		.section	.text.block_split,"ax",%progbits
 991              		.align	1
 992              		.syntax unified
 993              		.thumb
 994              		.thumb_func
 996              	block_split:
 997              	.LVL79:
 998              	.LFB32:
 651:lvgl/src/misc/lv_tlsf.c **** 
 652:lvgl/src/misc/lv_tlsf.c **** /* Split a block into two, the second of which is free. */
 653:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_split(block_header_t * block, size_t size)
 654:lvgl/src/misc/lv_tlsf.c **** {
 999              		.loc 1 654 1 is_stmt 1 view -0
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 30


 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 0
 1002              		@ frame_needed = 0, uses_anonymous_args = 0
 1003              		.loc 1 654 1 is_stmt 0 view .LVU280
 1004 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1005              		.cfi_def_cfa_offset 32
 1006              		.cfi_offset 3, -32
 1007              		.cfi_offset 4, -28
 1008              		.cfi_offset 5, -24
 1009              		.cfi_offset 6, -20
 1010              		.cfi_offset 7, -16
 1011              		.cfi_offset 8, -12
 1012              		.cfi_offset 9, -8
 1013              		.cfi_offset 14, -4
 1014 0004 0746     		mov	r7, r0
 1015 0006 0C46     		mov	r4, r1
 655:lvgl/src/misc/lv_tlsf.c ****     /* Calculate the amount of space left in the remaining block. */
 656:lvgl/src/misc/lv_tlsf.c ****     block_header_t * remaining =
 1016              		.loc 1 656 5 is_stmt 1 view .LVU281
 657:lvgl/src/misc/lv_tlsf.c ****         offset_to_block(block_to_ptr(block), size - block_header_overhead);
 1017              		.loc 1 657 25 is_stmt 0 view .LVU282
 1018 0008 FFF7FEFF 		bl	block_to_ptr
 1019              	.LVL80:
 1020              		.loc 1 657 9 view .LVU283
 1021 000c 211F     		subs	r1, r4, #4
 1022 000e FFF7FEFF 		bl	offset_to_block
 1023              	.LVL81:
 1024 0012 0546     		mov	r5, r0
 1025              	.LVL82:
 658:lvgl/src/misc/lv_tlsf.c **** 
 659:lvgl/src/misc/lv_tlsf.c ****     const size_t remain_size = block_size(block) - (size + block_header_overhead);
 1026              		.loc 1 659 5 is_stmt 1 view .LVU284
 1027              		.loc 1 659 32 is_stmt 0 view .LVU285
 1028 0014 3846     		mov	r0, r7
 1029              	.LVL83:
 1030              		.loc 1 659 32 view .LVU286
 1031 0016 FFF7FEFF 		bl	block_size
 1032              	.LVL84:
 1033 001a 0646     		mov	r6, r0
 1034              		.loc 1 659 50 view .LVU287
 1035 001c 031B     		subs	r3, r0, r4
 1036              		.loc 1 659 18 view .LVU288
 1037 001e A3F10409 		sub	r9, r3, #4
 1038              	.LVL85:
 660:lvgl/src/misc/lv_tlsf.c **** 
 661:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 1039              		.loc 1 661 5 is_stmt 1 view .LVU289
 1040              		.loc 1 661 5 view .LVU290
 1041 0022 2846     		mov	r0, r5
 1042 0024 FFF7FEFF 		bl	block_to_ptr
 1043              	.LVL86:
 1044 0028 8046     		mov	r8, r0
 1045 002a 0421     		movs	r1, #4
 1046 002c FFF7FEFF 		bl	align_ptr
 1047              	.LVL87:
 1048 0030 8045     		cmp	r8, r0
 1049 0032 00D0     		beq	.L61
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 31


 1050              	.L62:
 1051              		.loc 1 661 5 discriminator 1 view .LVU291
 1052              		.loc 1 661 5 discriminator 1 view .LVU292
 1053              		.loc 1 661 5 discriminator 1 view .LVU293
 1054              		.loc 1 661 5 discriminator 1 view .LVU294
 1055              		.loc 1 661 5 discriminator 1 view .LVU295
 1056              		.loc 1 661 5 discriminator 1 view .LVU296
 1057 0034 FEE7     		b	.L62
 1058              	.L61:
 1059              		.loc 1 661 5 discriminator 2 view .LVU297
 662:lvgl/src/misc/lv_tlsf.c ****                 && "remaining block not aligned properly");
 663:lvgl/src/misc/lv_tlsf.c **** 
 664:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 1060              		.loc 1 664 5 discriminator 2 view .LVU298
 1061              		.loc 1 664 5 discriminator 2 view .LVU299
 1062 0036 04EB0903 		add	r3, r4, r9
 1063 003a 0433     		adds	r3, r3, #4
 1064 003c 9E42     		cmp	r6, r3
 1065 003e 00D0     		beq	.L63
 1066              	.L64:
 1067              		.loc 1 664 5 discriminator 2 view .LVU300
 1068              		.loc 1 664 5 discriminator 2 view .LVU301
 1069              		.loc 1 664 5 discriminator 2 view .LVU302
 1070              		.loc 1 664 5 discriminator 2 view .LVU303
 1071              		.loc 1 664 5 discriminator 2 view .LVU304
 1072              		.loc 1 664 5 discriminator 2 view .LVU305
 1073 0040 FEE7     		b	.L64
 1074              	.L63:
 1075              		.loc 1 664 5 discriminator 2 view .LVU306
 665:lvgl/src/misc/lv_tlsf.c ****     block_set_size(remaining, remain_size);
 1076              		.loc 1 665 5 discriminator 2 view .LVU307
 1077 0042 4946     		mov	r1, r9
 1078 0044 2846     		mov	r0, r5
 1079 0046 FFF7FEFF 		bl	block_set_size
 1080              	.LVL88:
 666:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 1081              		.loc 1 666 5 discriminator 2 view .LVU308
 1082              		.loc 1 666 5 discriminator 2 view .LVU309
 1083 004a 2846     		mov	r0, r5
 1084 004c FFF7FEFF 		bl	block_size
 1085              	.LVL89:
 1086 0050 0B28     		cmp	r0, #11
 1087 0052 00D8     		bhi	.L65
 1088              	.L66:
 1089              		.loc 1 666 5 discriminator 3 view .LVU310
 1090              		.loc 1 666 5 discriminator 3 view .LVU311
 1091              		.loc 1 666 5 discriminator 3 view .LVU312
 1092              		.loc 1 666 5 discriminator 3 view .LVU313
 1093              		.loc 1 666 5 discriminator 3 view .LVU314
 1094              		.loc 1 666 5 discriminator 3 view .LVU315
 1095 0054 FEE7     		b	.L66
 1096              	.L65:
 1097              		.loc 1 666 5 discriminator 4 view .LVU316
 667:lvgl/src/misc/lv_tlsf.c **** 
 668:lvgl/src/misc/lv_tlsf.c ****     block_set_size(block, size);
 1098              		.loc 1 668 5 discriminator 4 view .LVU317
 1099 0056 2146     		mov	r1, r4
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 32


 1100 0058 3846     		mov	r0, r7
 1101 005a FFF7FEFF 		bl	block_set_size
 1102              	.LVL90:
 669:lvgl/src/misc/lv_tlsf.c ****     block_mark_as_free(remaining);
 1103              		.loc 1 669 5 discriminator 4 view .LVU318
 1104 005e 2846     		mov	r0, r5
 1105 0060 FFF7FEFF 		bl	block_mark_as_free
 1106              	.LVL91:
 670:lvgl/src/misc/lv_tlsf.c **** 
 671:lvgl/src/misc/lv_tlsf.c ****     return remaining;
 1107              		.loc 1 671 5 discriminator 4 view .LVU319
 672:lvgl/src/misc/lv_tlsf.c **** }
 1108              		.loc 1 672 1 is_stmt 0 discriminator 4 view .LVU320
 1109 0064 2846     		mov	r0, r5
 1110 0066 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1111              		.loc 1 672 1 discriminator 4 view .LVU321
 1112              		.cfi_endproc
 1113              	.LFE32:
 1115              		.section	.text.block_absorb,"ax",%progbits
 1116              		.align	1
 1117              		.syntax unified
 1118              		.thumb
 1119              		.thumb_func
 1121              	block_absorb:
 1122              	.LVL92:
 1123              	.LFB33:
 673:lvgl/src/misc/lv_tlsf.c **** 
 674:lvgl/src/misc/lv_tlsf.c **** /* Absorb a free block's storage into an adjacent previous free block. */
 675:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_absorb(block_header_t * prev, block_header_t * block)
 676:lvgl/src/misc/lv_tlsf.c **** {
 1124              		.loc 1 676 1 is_stmt 1 view -0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 0
 1127              		@ frame_needed = 0, uses_anonymous_args = 0
 1128              		.loc 1 676 1 is_stmt 0 view .LVU323
 1129 0000 38B5     		push	{r3, r4, r5, lr}
 1130              		.cfi_def_cfa_offset 16
 1131              		.cfi_offset 3, -16
 1132              		.cfi_offset 4, -12
 1133              		.cfi_offset 5, -8
 1134              		.cfi_offset 14, -4
 1135 0002 0446     		mov	r4, r0
 1136 0004 0D46     		mov	r5, r1
 677:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 1137              		.loc 1 677 5 is_stmt 1 view .LVU324
 1138              		.loc 1 677 5 view .LVU325
 1139 0006 FFF7FEFF 		bl	block_is_last
 1140              	.LVL93:
 1141              		.loc 1 677 5 is_stmt 0 view .LVU326
 1142 000a 00B1     		cbz	r0, .L69
 1143              	.L70:
 1144              		.loc 1 677 5 is_stmt 1 discriminator 1 view .LVU327
 1145              		.loc 1 677 5 discriminator 1 view .LVU328
 1146              		.loc 1 677 5 discriminator 1 view .LVU329
 1147              		.loc 1 677 5 discriminator 1 view .LVU330
 1148              		.loc 1 677 5 discriminator 1 view .LVU331
 1149              		.loc 1 677 5 discriminator 1 view .LVU332
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 33


 1150 000c FEE7     		b	.L70
 1151              	.L69:
 1152              		.loc 1 677 5 discriminator 2 view .LVU333
 678:lvgl/src/misc/lv_tlsf.c ****     /* Note: Leaves flags untouched. */
 679:lvgl/src/misc/lv_tlsf.c ****     prev->size += block_size(block) + block_header_overhead;
 1153              		.loc 1 679 5 discriminator 2 view .LVU334
 1154              		.loc 1 679 19 is_stmt 0 discriminator 2 view .LVU335
 1155 000e 2846     		mov	r0, r5
 1156 0010 FFF7FEFF 		bl	block_size
 1157              	.LVL94:
 1158              		.loc 1 679 37 discriminator 2 view .LVU336
 1159 0014 021D     		adds	r2, r0, #4
 1160              		.loc 1 679 16 discriminator 2 view .LVU337
 1161 0016 6368     		ldr	r3, [r4, #4]
 1162 0018 1344     		add	r3, r3, r2
 1163 001a 6360     		str	r3, [r4, #4]
 680:lvgl/src/misc/lv_tlsf.c ****     block_link_next(prev);
 1164              		.loc 1 680 5 is_stmt 1 discriminator 2 view .LVU338
 1165 001c 2046     		mov	r0, r4
 1166 001e FFF7FEFF 		bl	block_link_next
 1167              	.LVL95:
 681:lvgl/src/misc/lv_tlsf.c ****     return prev;
 1168              		.loc 1 681 5 discriminator 2 view .LVU339
 682:lvgl/src/misc/lv_tlsf.c **** }
 1169              		.loc 1 682 1 is_stmt 0 discriminator 2 view .LVU340
 1170 0022 2046     		mov	r0, r4
 1171 0024 38BD     		pop	{r3, r4, r5, pc}
 1172              		.loc 1 682 1 discriminator 2 view .LVU341
 1173              		.cfi_endproc
 1174              	.LFE33:
 1176              		.section	.text.control_constructor,"ax",%progbits
 1177              		.align	1
 1178              		.syntax unified
 1179              		.thumb
 1180              		.thumb_func
 1182              	control_constructor:
 1183              	.LVL96:
 1184              	.LFB41:
 683:lvgl/src/misc/lv_tlsf.c **** 
 684:lvgl/src/misc/lv_tlsf.c **** /* Merge a just-freed block with an adjacent previous free block. */
 685:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_merge_prev(control_t * control, block_header_t * block)
 686:lvgl/src/misc/lv_tlsf.c **** {
 687:lvgl/src/misc/lv_tlsf.c ****     if(block_is_prev_free(block)) {
 688:lvgl/src/misc/lv_tlsf.c ****         block_header_t * prev = block_prev(block);
 689:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(prev && "prev physical block can't be null");
 690:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 691:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 692:lvgl/src/misc/lv_tlsf.c ****         block = block_absorb(prev, block);
 693:lvgl/src/misc/lv_tlsf.c ****     }
 694:lvgl/src/misc/lv_tlsf.c **** 
 695:lvgl/src/misc/lv_tlsf.c ****     return block;
 696:lvgl/src/misc/lv_tlsf.c **** }
 697:lvgl/src/misc/lv_tlsf.c **** 
 698:lvgl/src/misc/lv_tlsf.c **** /* Merge a just-freed block with an adjacent free block. */
 699:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_merge_next(control_t * control, block_header_t * block)
 700:lvgl/src/misc/lv_tlsf.c **** {
 701:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 34


 702:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next physical block can't be null");
 703:lvgl/src/misc/lv_tlsf.c **** 
 704:lvgl/src/misc/lv_tlsf.c ****     if(block_is_free(next)) {
 705:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_last(block) && "previous block can't be last");
 706:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 707:lvgl/src/misc/lv_tlsf.c ****         block = block_absorb(block, next);
 708:lvgl/src/misc/lv_tlsf.c ****     }
 709:lvgl/src/misc/lv_tlsf.c **** 
 710:lvgl/src/misc/lv_tlsf.c ****     return block;
 711:lvgl/src/misc/lv_tlsf.c **** }
 712:lvgl/src/misc/lv_tlsf.c **** 
 713:lvgl/src/misc/lv_tlsf.c **** /* Trim any trailing block space off the end of a block, return to pool. */
 714:lvgl/src/misc/lv_tlsf.c **** static void block_trim_free(control_t * control, block_header_t * block, size_t size)
 715:lvgl/src/misc/lv_tlsf.c **** {
 716:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_free(block) && "block must be free");
 717:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 718:lvgl/src/misc/lv_tlsf.c ****         block_header_t * remaining_block = block_split(block, size);
 719:lvgl/src/misc/lv_tlsf.c ****         block_link_next(block);
 720:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 721:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 722:lvgl/src/misc/lv_tlsf.c ****     }
 723:lvgl/src/misc/lv_tlsf.c **** }
 724:lvgl/src/misc/lv_tlsf.c **** 
 725:lvgl/src/misc/lv_tlsf.c **** /* Trim any trailing block space off the end of a used block, return to pool. */
 726:lvgl/src/misc/lv_tlsf.c **** static void block_trim_used(control_t * control, block_header_t * block, size_t size)
 727:lvgl/src/misc/lv_tlsf.c **** {
 728:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_free(block) && "block must be used");
 729:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 730:lvgl/src/misc/lv_tlsf.c ****         /* If the next block is free, we must coalesce. */
 731:lvgl/src/misc/lv_tlsf.c ****         block_header_t * remaining_block = block_split(block, size);
 732:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_used(remaining_block);
 733:lvgl/src/misc/lv_tlsf.c **** 
 734:lvgl/src/misc/lv_tlsf.c ****         remaining_block = block_merge_next(control, remaining_block);
 735:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 736:lvgl/src/misc/lv_tlsf.c ****     }
 737:lvgl/src/misc/lv_tlsf.c **** }
 738:lvgl/src/misc/lv_tlsf.c **** 
 739:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_trim_free_leading(control_t * control, block_header_t * block, size_t
 740:lvgl/src/misc/lv_tlsf.c **** {
 741:lvgl/src/misc/lv_tlsf.c ****     block_header_t * remaining_block = block;
 742:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 743:lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 744:lvgl/src/misc/lv_tlsf.c ****         remaining_block = block_split(block, size - block_header_overhead);
 745:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 746:lvgl/src/misc/lv_tlsf.c **** 
 747:lvgl/src/misc/lv_tlsf.c ****         block_link_next(block);
 748:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, block);
 749:lvgl/src/misc/lv_tlsf.c ****     }
 750:lvgl/src/misc/lv_tlsf.c **** 
 751:lvgl/src/misc/lv_tlsf.c ****     return remaining_block;
 752:lvgl/src/misc/lv_tlsf.c **** }
 753:lvgl/src/misc/lv_tlsf.c **** 
 754:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_locate_free(control_t * control, size_t size)
 755:lvgl/src/misc/lv_tlsf.c **** {
 756:lvgl/src/misc/lv_tlsf.c ****     int fl = 0, sl = 0;
 757:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = 0;
 758:lvgl/src/misc/lv_tlsf.c **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 35


 759:lvgl/src/misc/lv_tlsf.c ****     if(size) {
 760:lvgl/src/misc/lv_tlsf.c ****         mapping_search(size, &fl, &sl);
 761:lvgl/src/misc/lv_tlsf.c **** 
 762:lvgl/src/misc/lv_tlsf.c ****         /*
 763:lvgl/src/misc/lv_tlsf.c ****         ** mapping_search can futz with the size, so for excessively large sizes it can sometimes w
 764:lvgl/src/misc/lv_tlsf.c ****         ** with indices that are off the end of the block array.
 765:lvgl/src/misc/lv_tlsf.c ****         ** So, we protect against that here, since this is the only callsite of mapping_search.
 766:lvgl/src/misc/lv_tlsf.c ****         ** Note that we don't need to check sl, since it comes from a modulo operation that guarant
 767:lvgl/src/misc/lv_tlsf.c ****         */
 768:lvgl/src/misc/lv_tlsf.c ****         if(fl < FL_INDEX_COUNT) {
 769:lvgl/src/misc/lv_tlsf.c ****             block = search_suitable_block(control, &fl, &sl);
 770:lvgl/src/misc/lv_tlsf.c ****         }
 771:lvgl/src/misc/lv_tlsf.c ****     }
 772:lvgl/src/misc/lv_tlsf.c **** 
 773:lvgl/src/misc/lv_tlsf.c ****     if(block) {
 774:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_size(block) >= size);
 775:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 776:lvgl/src/misc/lv_tlsf.c ****     }
 777:lvgl/src/misc/lv_tlsf.c **** 
 778:lvgl/src/misc/lv_tlsf.c ****     return block;
 779:lvgl/src/misc/lv_tlsf.c **** }
 780:lvgl/src/misc/lv_tlsf.c **** 
 781:lvgl/src/misc/lv_tlsf.c **** static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
 782:lvgl/src/misc/lv_tlsf.c **** {
 783:lvgl/src/misc/lv_tlsf.c ****     void * p = 0;
 784:lvgl/src/misc/lv_tlsf.c ****     if(block) {
 785:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(size && "size must be non-zero");
 786:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 787:lvgl/src/misc/lv_tlsf.c ****         block_mark_as_used(block);
 788:lvgl/src/misc/lv_tlsf.c ****         p = block_to_ptr(block);
 789:lvgl/src/misc/lv_tlsf.c ****     }
 790:lvgl/src/misc/lv_tlsf.c ****     return p;
 791:lvgl/src/misc/lv_tlsf.c **** }
 792:lvgl/src/misc/lv_tlsf.c **** 
 793:lvgl/src/misc/lv_tlsf.c **** /* Clear structure and point all empty lists at the null block. */
 794:lvgl/src/misc/lv_tlsf.c **** static void control_constructor(control_t * control)
 795:lvgl/src/misc/lv_tlsf.c **** {
 1185              		.loc 1 795 1 is_stmt 1 view -0
 1186              		.cfi_startproc
 1187              		@ args = 0, pretend = 0, frame = 0
 1188              		@ frame_needed = 0, uses_anonymous_args = 0
 1189              		@ link register save eliminated.
 796:lvgl/src/misc/lv_tlsf.c ****     int i, j;
 1190              		.loc 1 796 5 view .LVU343
 797:lvgl/src/misc/lv_tlsf.c **** 
 798:lvgl/src/misc/lv_tlsf.c ****     control->block_null.next_free = &control->block_null;
 1191              		.loc 1 798 5 view .LVU344
 1192              		.loc 1 798 35 is_stmt 0 view .LVU345
 1193 0000 8060     		str	r0, [r0, #8]
 799:lvgl/src/misc/lv_tlsf.c ****     control->block_null.prev_free = &control->block_null;
 1194              		.loc 1 799 5 is_stmt 1 view .LVU346
 1195              		.loc 1 799 35 is_stmt 0 view .LVU347
 1196 0002 C060     		str	r0, [r0, #12]
 800:lvgl/src/misc/lv_tlsf.c **** 
 801:lvgl/src/misc/lv_tlsf.c ****     control->fl_bitmap = 0;
 1197              		.loc 1 801 5 is_stmt 1 view .LVU348
 1198              		.loc 1 801 24 is_stmt 0 view .LVU349
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 36


 1199 0004 0021     		movs	r1, #0
 1200 0006 0161     		str	r1, [r0, #16]
 802:lvgl/src/misc/lv_tlsf.c ****     for(i = 0; i < FL_INDEX_COUNT; ++i) {
 1201              		.loc 1 802 5 is_stmt 1 view .LVU350
 1202              	.LVL97:
 1203              		.loc 1 802 5 is_stmt 0 view .LVU351
 1204 0008 09E0     		b	.L73
 1205              	.LVL98:
 1206              	.L75:
 803:lvgl/src/misc/lv_tlsf.c ****         control->sl_bitmap[i] = 0;
 804:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 805:lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1207              		.loc 1 805 13 is_stmt 1 discriminator 3 view .LVU352
 1208              		.loc 1 805 35 is_stmt 0 discriminator 3 view .LVU353
 1209 000a 02EB4113 		add	r3, r2, r1, lsl #5
 1210 000e 1233     		adds	r3, r3, #18
 1211 0010 00EB8303 		add	r3, r0, r3, lsl #2
 1212 0014 5860     		str	r0, [r3, #4]
 804:lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1213              		.loc 1 804 40 is_stmt 1 discriminator 3 view .LVU354
 1214 0016 0132     		adds	r2, r2, #1
 1215              	.LVL99:
 1216              	.L74:
 804:lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1217              		.loc 1 804 20 discriminator 1 view .LVU355
 804:lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1218              		.loc 1 804 9 is_stmt 0 discriminator 1 view .LVU356
 1219 0018 1F2A     		cmp	r2, #31
 1220 001a F6DD     		ble	.L75
 802:lvgl/src/misc/lv_tlsf.c ****     for(i = 0; i < FL_INDEX_COUNT; ++i) {
 1221              		.loc 1 802 36 is_stmt 1 discriminator 2 view .LVU357
 1222 001c 0131     		adds	r1, r1, #1
 1223              	.LVL100:
 1224              	.L73:
 802:lvgl/src/misc/lv_tlsf.c ****     for(i = 0; i < FL_INDEX_COUNT; ++i) {
 1225              		.loc 1 802 16 discriminator 1 view .LVU358
 802:lvgl/src/misc/lv_tlsf.c ****     for(i = 0; i < FL_INDEX_COUNT; ++i) {
 1226              		.loc 1 802 5 is_stmt 0 discriminator 1 view .LVU359
 1227 001e 0D29     		cmp	r1, #13
 1228 0020 05DC     		bgt	.L77
 803:lvgl/src/misc/lv_tlsf.c ****         control->sl_bitmap[i] = 0;
 1229              		.loc 1 803 9 is_stmt 1 view .LVU360
 803:lvgl/src/misc/lv_tlsf.c ****         control->sl_bitmap[i] = 0;
 1230              		.loc 1 803 31 is_stmt 0 view .LVU361
 1231 0022 0B1D     		adds	r3, r1, #4
 1232 0024 00EB8303 		add	r3, r0, r3, lsl #2
 1233 0028 0022     		movs	r2, #0
 1234 002a 5A60     		str	r2, [r3, #4]
 804:lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1235              		.loc 1 804 9 is_stmt 1 view .LVU362
 1236              	.LVL101:
 804:lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1237              		.loc 1 804 9 is_stmt 0 view .LVU363
 1238 002c F4E7     		b	.L74
 1239              	.LVL102:
 1240              	.L77:
 806:lvgl/src/misc/lv_tlsf.c ****         }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 37


 807:lvgl/src/misc/lv_tlsf.c ****     }
 808:lvgl/src/misc/lv_tlsf.c **** }
 1241              		.loc 1 808 1 view .LVU364
 1242 002e 7047     		bx	lr
 1243              		.cfi_endproc
 1244              	.LFE41:
 1246              		.section	.text.integrity_walker,"ax",%progbits
 1247              		.align	1
 1248              		.syntax unified
 1249              		.thumb
 1250              		.thumb_func
 1252              	integrity_walker:
 1253              	.LVL103:
 1254              	.LFB42:
 809:lvgl/src/misc/lv_tlsf.c **** 
 810:lvgl/src/misc/lv_tlsf.c **** /*
 811:lvgl/src/misc/lv_tlsf.c **** ** Debugging utilities.
 812:lvgl/src/misc/lv_tlsf.c **** */
 813:lvgl/src/misc/lv_tlsf.c **** 
 814:lvgl/src/misc/lv_tlsf.c **** typedef struct integrity_t {
 815:lvgl/src/misc/lv_tlsf.c ****     int prev_status;
 816:lvgl/src/misc/lv_tlsf.c ****     int status;
 817:lvgl/src/misc/lv_tlsf.c **** } integrity_t;
 818:lvgl/src/misc/lv_tlsf.c **** 
 819:lvgl/src/misc/lv_tlsf.c **** #define tlsf_insist(x) { tlsf_assert(x); if (!(x)) { status--; } }
 820:lvgl/src/misc/lv_tlsf.c **** 
 821:lvgl/src/misc/lv_tlsf.c **** static void integrity_walker(void * ptr, size_t size, int used, void * user)
 822:lvgl/src/misc/lv_tlsf.c **** {
 1255              		.loc 1 822 1 is_stmt 1 view -0
 1256              		.cfi_startproc
 1257              		@ args = 0, pretend = 0, frame = 0
 1258              		@ frame_needed = 0, uses_anonymous_args = 0
 1259              		.loc 1 822 1 is_stmt 0 view .LVU366
 1260 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1261              		.cfi_def_cfa_offset 24
 1262              		.cfi_offset 4, -24
 1263              		.cfi_offset 5, -20
 1264              		.cfi_offset 6, -16
 1265              		.cfi_offset 7, -12
 1266              		.cfi_offset 8, -8
 1267              		.cfi_offset 14, -4
 1268 0004 0F46     		mov	r7, r1
 1269 0006 1D46     		mov	r5, r3
 823:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = block_from_ptr(ptr);
 1270              		.loc 1 823 5 is_stmt 1 view .LVU367
 1271              		.loc 1 823 30 is_stmt 0 view .LVU368
 1272 0008 FFF7FEFF 		bl	block_from_ptr
 1273              	.LVL104:
 1274              		.loc 1 823 30 view .LVU369
 1275 000c 0446     		mov	r4, r0
 1276              	.LVL105:
 824:lvgl/src/misc/lv_tlsf.c ****     integrity_t * integ = tlsf_cast(integrity_t *, user);
 1277              		.loc 1 824 5 is_stmt 1 view .LVU370
 825:lvgl/src/misc/lv_tlsf.c ****     const int this_prev_status = block_is_prev_free(block) ? 1 : 0;
 1278              		.loc 1 825 5 view .LVU371
 1279              		.loc 1 825 34 is_stmt 0 view .LVU372
 1280 000e FFF7FEFF 		bl	block_is_prev_free
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 38


 1281              	.LVL106:
 1282              		.loc 1 825 64 view .LVU373
 1283 0012 061E     		subs	r6, r0, #0
 1284 0014 18BF     		it	ne
 1285 0016 0126     		movne	r6, #1
 1286              	.LVL107:
 826:lvgl/src/misc/lv_tlsf.c ****     const int this_status = block_is_free(block) ? 1 : 0;
 1287              		.loc 1 826 5 is_stmt 1 view .LVU374
 1288              		.loc 1 826 29 is_stmt 0 view .LVU375
 1289 0018 2046     		mov	r0, r4
 1290 001a FFF7FEFF 		bl	block_is_free
 1291              	.LVL108:
 1292              		.loc 1 826 54 view .LVU376
 1293 001e B0F10008 		subs	r8, r0, #0
 1294 0022 18BF     		it	ne
 1295 0024 4FF00108 		movne	r8, #1
 1296              	.LVL109:
 827:lvgl/src/misc/lv_tlsf.c ****     const size_t this_block_size = block_size(block);
 1297              		.loc 1 827 5 is_stmt 1 view .LVU377
 1298              		.loc 1 827 36 is_stmt 0 view .LVU378
 1299 0028 2046     		mov	r0, r4
 1300 002a FFF7FEFF 		bl	block_size
 1301              	.LVL110:
 828:lvgl/src/misc/lv_tlsf.c **** 
 829:lvgl/src/misc/lv_tlsf.c ****     int status = 0;
 1302              		.loc 1 829 5 is_stmt 1 view .LVU379
 830:lvgl/src/misc/lv_tlsf.c ****     LV_UNUSED(used);
 1303              		.loc 1 830 5 view .LVU380
 831:lvgl/src/misc/lv_tlsf.c ****     tlsf_insist(integ->prev_status == this_prev_status && "prev status incorrect");
 1304              		.loc 1 831 5 view .LVU381
 1305              		.loc 1 831 5 view .LVU382
 1306 002e 2B68     		ldr	r3, [r5]
 1307 0030 B342     		cmp	r3, r6
 1308 0032 00D0     		beq	.L79
 1309              	.L80:
 1310              		.loc 1 831 5 discriminator 1 view .LVU383
 1311              		.loc 1 831 5 discriminator 1 view .LVU384
 1312              		.loc 1 831 5 discriminator 1 view .LVU385
 1313              		.loc 1 831 5 discriminator 1 view .LVU386
 1314              		.loc 1 831 5 discriminator 1 view .LVU387
 1315              		.loc 1 831 5 discriminator 1 view .LVU388
 1316 0034 FEE7     		b	.L80
 1317              	.L79:
 1318              		.loc 1 831 5 discriminator 5 view .LVU389
 1319              		.loc 1 831 5 discriminator 5 view .LVU390
 1320              		.loc 1 831 83 discriminator 5 view .LVU391
 832:lvgl/src/misc/lv_tlsf.c ****     tlsf_insist(size == this_block_size && "block size incorrect");
 1321              		.loc 1 832 5 discriminator 5 view .LVU392
 1322              		.loc 1 832 5 discriminator 5 view .LVU393
 1323 0036 B842     		cmp	r0, r7
 1324 0038 00D0     		beq	.L81
 1325              	.L82:
 1326              		.loc 1 832 5 discriminator 2 view .LVU394
 1327              		.loc 1 832 5 discriminator 2 view .LVU395
 1328              		.loc 1 832 5 discriminator 2 view .LVU396
 1329              		.loc 1 832 5 discriminator 2 view .LVU397
 1330              		.loc 1 832 5 discriminator 2 view .LVU398
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 39


 1331              		.loc 1 832 5 discriminator 2 view .LVU399
 1332 003a FEE7     		b	.L82
 1333              	.L81:
 1334              		.loc 1 832 5 discriminator 5 view .LVU400
 1335              		.loc 1 832 5 discriminator 5 view .LVU401
 1336              		.loc 1 832 67 discriminator 5 view .LVU402
 833:lvgl/src/misc/lv_tlsf.c **** 
 834:lvgl/src/misc/lv_tlsf.c ****     integ->prev_status = this_status;
 1337              		.loc 1 834 5 discriminator 5 view .LVU403
 1338              		.loc 1 834 24 is_stmt 0 discriminator 5 view .LVU404
 1339 003c C5F80080 		str	r8, [r5]
 835:lvgl/src/misc/lv_tlsf.c ****     integ->status += status;
 1340              		.loc 1 835 5 is_stmt 1 discriminator 5 view .LVU405
 836:lvgl/src/misc/lv_tlsf.c **** }
 1341              		.loc 1 836 1 is_stmt 0 discriminator 5 view .LVU406
 1342 0040 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1343              		.loc 1 836 1 discriminator 5 view .LVU407
 1344              		.cfi_endproc
 1345              	.LFE42:
 1347              		.section	.text.default_walker,"ax",%progbits
 1348              		.align	1
 1349              		.syntax unified
 1350              		.thumb
 1351              		.thumb_func
 1353              	default_walker:
 1354              	.LVL111:
 1355              	.LFB44:
 837:lvgl/src/misc/lv_tlsf.c **** 
 838:lvgl/src/misc/lv_tlsf.c **** int lv_tlsf_check(lv_tlsf_t tlsf)
 839:lvgl/src/misc/lv_tlsf.c **** {
 840:lvgl/src/misc/lv_tlsf.c ****     int i, j;
 841:lvgl/src/misc/lv_tlsf.c **** 
 842:lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
 843:lvgl/src/misc/lv_tlsf.c ****     int status = 0;
 844:lvgl/src/misc/lv_tlsf.c **** 
 845:lvgl/src/misc/lv_tlsf.c ****     /* Check that the free lists and bitmaps are accurate. */
 846:lvgl/src/misc/lv_tlsf.c ****     for(i = 0; i < FL_INDEX_COUNT; ++i) {
 847:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 848:lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 849:lvgl/src/misc/lv_tlsf.c ****             const int sl_list = control->sl_bitmap[i];
 850:lvgl/src/misc/lv_tlsf.c ****             const int sl_map = sl_list & (1U << j);
 851:lvgl/src/misc/lv_tlsf.c ****             const block_header_t * block = control->blocks[i][j];
 852:lvgl/src/misc/lv_tlsf.c **** 
 853:lvgl/src/misc/lv_tlsf.c ****             /* Check that first- and second-level lists agree. */
 854:lvgl/src/misc/lv_tlsf.c ****             if(!fl_map) {
 855:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!sl_map && "second-level map must be null");
 856:lvgl/src/misc/lv_tlsf.c ****             }
 857:lvgl/src/misc/lv_tlsf.c **** 
 858:lvgl/src/misc/lv_tlsf.c ****             if(!sl_map) {
 859:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block == &control->block_null && "block list must be null");
 860:lvgl/src/misc/lv_tlsf.c ****                 continue;
 861:lvgl/src/misc/lv_tlsf.c ****             }
 862:lvgl/src/misc/lv_tlsf.c **** 
 863:lvgl/src/misc/lv_tlsf.c ****             /* Check that there is at least one free block. */
 864:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(sl_list && "no free blocks in second-level map");
 865:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 866:lvgl/src/misc/lv_tlsf.c **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 40


 867:lvgl/src/misc/lv_tlsf.c ****             while(block != &control->block_null) {
 868:lvgl/src/misc/lv_tlsf.c ****                 int fli, sli;
 869:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_free(block) && "block should be free");
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 874:lvgl/src/misc/lv_tlsf.c **** 
 875:lvgl/src/misc/lv_tlsf.c ****                 mapping_insert(block_size(block), &fli, &sli);
 876:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(fli == i && sli == j && "block size indexed in wrong list");
 877:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 878:lvgl/src/misc/lv_tlsf.c ****             }
 879:lvgl/src/misc/lv_tlsf.c ****         }
 880:lvgl/src/misc/lv_tlsf.c ****     }
 881:lvgl/src/misc/lv_tlsf.c **** 
 882:lvgl/src/misc/lv_tlsf.c ****     return status;
 883:lvgl/src/misc/lv_tlsf.c **** }
 884:lvgl/src/misc/lv_tlsf.c **** 
 885:lvgl/src/misc/lv_tlsf.c **** #undef tlsf_insist
 886:lvgl/src/misc/lv_tlsf.c **** 
 887:lvgl/src/misc/lv_tlsf.c **** static void default_walker(void * ptr, size_t size, int used, void * user)
 888:lvgl/src/misc/lv_tlsf.c **** {
 1356              		.loc 1 888 1 is_stmt 1 view -0
 1357              		.cfi_startproc
 1358              		@ args = 0, pretend = 0, frame = 0
 1359              		@ frame_needed = 0, uses_anonymous_args = 0
 1360              		@ link register save eliminated.
 889:lvgl/src/misc/lv_tlsf.c ****     LV_UNUSED(user);
 1361              		.loc 1 889 5 view .LVU409
 890:lvgl/src/misc/lv_tlsf.c ****     printf("\t%p %s size: %x (%p)\n", ptr, used ? "used" : "free", (unsigned int)size, (void *)bloc
 1362              		.loc 1 890 5 view .LVU410
 1363              		.loc 1 890 5 view .LVU411
 1364              		.loc 1 890 5 view .LVU412
 891:lvgl/src/misc/lv_tlsf.c **** }
 1365              		.loc 1 891 1 is_stmt 0 view .LVU413
 1366 0000 7047     		bx	lr
 1367              		.cfi_endproc
 1368              	.LFE44:
 1370              		.section	.text.tlsf_fls,"ax",%progbits
 1371              		.align	1
 1372              		.syntax unified
 1373              		.thumb
 1374              		.thumb_func
 1376              	tlsf_fls:
 1377              	.LVL112:
 1378              	.LFB2:
 102:lvgl/src/misc/lv_tlsf.c ****     const int bit = word ? 32 - __builtin_clz(word) : 0;
 1379              		.loc 1 102 1 is_stmt 1 view -0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 0
 1382              		@ frame_needed = 0, uses_anonymous_args = 0
 1383              		@ link register save eliminated.
 103:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1384              		.loc 1 103 5 view .LVU415
 103:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1385              		.loc 1 103 53 is_stmt 0 view .LVU416
 1386 0000 28B1     		cbz	r0, .L87
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 41


 103:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1387              		.loc 1 103 33 discriminator 1 view .LVU417
 1388 0002 B0FA80F0 		clz	r0, r0
 1389              	.LVL113:
 103:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1390              		.loc 1 103 53 discriminator 1 view .LVU418
 1391 0006 C0F12000 		rsb	r0, r0, #32
 1392              	.L86:
 1393              	.LVL114:
 104:lvgl/src/misc/lv_tlsf.c **** }
 1394              		.loc 1 104 5 is_stmt 1 discriminator 4 view .LVU419
 105:lvgl/src/misc/lv_tlsf.c **** 
 1395              		.loc 1 105 1 is_stmt 0 discriminator 4 view .LVU420
 1396 000a 0138     		subs	r0, r0, #1
 1397              	.LVL115:
 105:lvgl/src/misc/lv_tlsf.c **** 
 1398              		.loc 1 105 1 discriminator 4 view .LVU421
 1399 000c 7047     		bx	lr
 1400              	.LVL116:
 1401              	.L87:
 103:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1402              		.loc 1 103 53 view .LVU422
 1403 000e 0020     		movs	r0, #0
 1404              	.LVL117:
 103:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1405              		.loc 1 103 53 view .LVU423
 1406 0010 FBE7     		b	.L86
 1407              		.cfi_endproc
 1408              	.LFE2:
 1410              		.section	.text.mapping_insert,"ax",%progbits
 1411              		.align	1
 1412              		.syntax unified
 1413              		.thumb
 1414              		.thumb_func
 1416              	mapping_insert:
 1417              	.LVL118:
 1418              	.LFB24:
 528:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1419              		.loc 1 528 1 is_stmt 1 view -0
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 0
 1422              		@ frame_needed = 0, uses_anonymous_args = 0
 528:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1423              		.loc 1 528 1 is_stmt 0 view .LVU425
 1424 0000 70B5     		push	{r4, r5, r6, lr}
 1425              		.cfi_def_cfa_offset 16
 1426              		.cfi_offset 4, -16
 1427              		.cfi_offset 5, -12
 1428              		.cfi_offset 6, -8
 1429              		.cfi_offset 14, -4
 1430 0002 0446     		mov	r4, r0
 1431 0004 0D46     		mov	r5, r1
 1432 0006 1646     		mov	r6, r2
 529:lvgl/src/misc/lv_tlsf.c ****     if(size < SMALL_BLOCK_SIZE) {
 1433              		.loc 1 529 5 is_stmt 1 view .LVU426
 530:lvgl/src/misc/lv_tlsf.c ****         /* Store small blocks in first list. */
 1434              		.loc 1 530 5 view .LVU427
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 42


 530:lvgl/src/misc/lv_tlsf.c ****         /* Store small blocks in first list. */
 1435              		.loc 1 530 7 is_stmt 0 view .LVU428
 1436 0008 7F28     		cmp	r0, #127
 1437 000a 08D8     		bhi	.L89
 532:lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 1438              		.loc 1 532 9 is_stmt 1 view .LVU429
 1439              	.LVL119:
 533:lvgl/src/misc/lv_tlsf.c ****     }
 1440              		.loc 1 533 9 view .LVU430
 533:lvgl/src/misc/lv_tlsf.c ****     }
 1441              		.loc 1 533 12 is_stmt 0 view .LVU431
 1442 000c 0028     		cmp	r0, #0
 1443 000e 04DB     		blt	.L93
 1444              	.LVL120:
 1445              	.L90:
 533:lvgl/src/misc/lv_tlsf.c ****     }
 1446              		.loc 1 533 12 view .LVU432
 1447 0010 8410     		asrs	r4, r0, #2
 1448              	.LVL121:
 532:lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 1449              		.loc 1 532 12 view .LVU433
 1450 0012 0020     		movs	r0, #0
 1451              	.LVL122:
 1452              	.L91:
 540:lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 1453              		.loc 1 540 5 is_stmt 1 view .LVU434
 540:lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 1454              		.loc 1 540 10 is_stmt 0 view .LVU435
 1455 0014 2860     		str	r0, [r5]
 541:lvgl/src/misc/lv_tlsf.c **** }
 1456              		.loc 1 541 5 is_stmt 1 view .LVU436
 541:lvgl/src/misc/lv_tlsf.c **** }
 1457              		.loc 1 541 10 is_stmt 0 view .LVU437
 1458 0016 3460     		str	r4, [r6]
 542:lvgl/src/misc/lv_tlsf.c **** 
 1459              		.loc 1 542 1 view .LVU438
 1460 0018 70BD     		pop	{r4, r5, r6, pc}
 1461              	.LVL123:
 1462              	.L93:
 533:lvgl/src/misc/lv_tlsf.c ****     }
 1463              		.loc 1 533 12 view .LVU439
 1464 001a 0330     		adds	r0, r0, #3
 1465              	.LVL124:
 533:lvgl/src/misc/lv_tlsf.c ****     }
 1466              		.loc 1 533 12 view .LVU440
 1467 001c F8E7     		b	.L90
 1468              	.LVL125:
 1469              	.L89:
 536:lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 1470              		.loc 1 536 9 is_stmt 1 view .LVU441
 536:lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 1471              		.loc 1 536 14 is_stmt 0 view .LVU442
 1472 001e FFF7FEFF 		bl	tlsf_fls
 1473              	.LVL126:
 537:lvgl/src/misc/lv_tlsf.c ****         fl -= (FL_INDEX_SHIFT - 1);
 1474              		.loc 1 537 9 is_stmt 1 view .LVU443
 537:lvgl/src/misc/lv_tlsf.c ****         fl -= (FL_INDEX_SHIFT - 1);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 43


 1475              		.loc 1 537 14 is_stmt 0 view .LVU444
 1476 0022 431F     		subs	r3, r0, #5
 1477 0024 DC40     		lsrs	r4, r4, r3
 1478              	.LVL127:
 537:lvgl/src/misc/lv_tlsf.c ****         fl -= (FL_INDEX_SHIFT - 1);
 1479              		.loc 1 537 12 view .LVU445
 1480 0026 84F02004 		eor	r4, r4, #32
 1481              	.LVL128:
 538:lvgl/src/misc/lv_tlsf.c ****     }
 1482              		.loc 1 538 9 is_stmt 1 view .LVU446
 538:lvgl/src/misc/lv_tlsf.c ****     }
 1483              		.loc 1 538 12 is_stmt 0 view .LVU447
 1484 002a 0638     		subs	r0, r0, #6
 1485              	.LVL129:
 538:lvgl/src/misc/lv_tlsf.c ****     }
 1486              		.loc 1 538 12 view .LVU448
 1487 002c F2E7     		b	.L91
 1488              		.cfi_endproc
 1489              	.LFE24:
 1491              		.section	.text.block_insert,"ax",%progbits
 1492              		.align	1
 1493              		.syntax unified
 1494              		.thumb
 1495              		.thumb_func
 1497              	block_insert:
 1498              	.LVL130:
 1499              	.LFB30:
 641:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1500              		.loc 1 641 1 is_stmt 1 view -0
 1501              		.cfi_startproc
 1502              		@ args = 0, pretend = 0, frame = 8
 1503              		@ frame_needed = 0, uses_anonymous_args = 0
 641:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1504              		.loc 1 641 1 is_stmt 0 view .LVU450
 1505 0000 30B5     		push	{r4, r5, lr}
 1506              		.cfi_def_cfa_offset 12
 1507              		.cfi_offset 4, -12
 1508              		.cfi_offset 5, -8
 1509              		.cfi_offset 14, -4
 1510 0002 83B0     		sub	sp, sp, #12
 1511              		.cfi_def_cfa_offset 24
 1512 0004 0546     		mov	r5, r0
 1513 0006 0C46     		mov	r4, r1
 642:lvgl/src/misc/lv_tlsf.c ****     mapping_insert(block_size(block), &fl, &sl);
 1514              		.loc 1 642 5 is_stmt 1 view .LVU451
 643:lvgl/src/misc/lv_tlsf.c ****     insert_free_block(control, block, fl, sl);
 1515              		.loc 1 643 5 view .LVU452
 1516 0008 0846     		mov	r0, r1
 1517              	.LVL131:
 643:lvgl/src/misc/lv_tlsf.c ****     insert_free_block(control, block, fl, sl);
 1518              		.loc 1 643 5 is_stmt 0 view .LVU453
 1519 000a FFF7FEFF 		bl	block_size
 1520              	.LVL132:
 643:lvgl/src/misc/lv_tlsf.c ****     insert_free_block(control, block, fl, sl);
 1521              		.loc 1 643 5 view .LVU454
 1522 000e 6A46     		mov	r2, sp
 1523 0010 01A9     		add	r1, sp, #4
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 44


 1524 0012 FFF7FEFF 		bl	mapping_insert
 1525              	.LVL133:
 644:lvgl/src/misc/lv_tlsf.c **** }
 1526              		.loc 1 644 5 is_stmt 1 view .LVU455
 1527 0016 009B     		ldr	r3, [sp]
 1528 0018 019A     		ldr	r2, [sp, #4]
 1529 001a 2146     		mov	r1, r4
 1530 001c 2846     		mov	r0, r5
 1531 001e FFF7FEFF 		bl	insert_free_block
 1532              	.LVL134:
 645:lvgl/src/misc/lv_tlsf.c **** 
 1533              		.loc 1 645 1 is_stmt 0 view .LVU456
 1534 0022 03B0     		add	sp, sp, #12
 1535              		.cfi_def_cfa_offset 12
 1536              		@ sp needed
 1537 0024 30BD     		pop	{r4, r5, pc}
 645:lvgl/src/misc/lv_tlsf.c **** 
 1538              		.loc 1 645 1 view .LVU457
 1539              		.cfi_endproc
 1540              	.LFE30:
 1542              		.section	.text.block_trim_free,"ax",%progbits
 1543              		.align	1
 1544              		.syntax unified
 1545              		.thumb
 1546              		.thumb_func
 1548              	block_trim_free:
 1549              	.LVL135:
 1550              	.LFB36:
 715:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_free(block) && "block must be free");
 1551              		.loc 1 715 1 is_stmt 1 view -0
 1552              		.cfi_startproc
 1553              		@ args = 0, pretend = 0, frame = 0
 1554              		@ frame_needed = 0, uses_anonymous_args = 0
 715:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_free(block) && "block must be free");
 1555              		.loc 1 715 1 is_stmt 0 view .LVU459
 1556 0000 70B5     		push	{r4, r5, r6, lr}
 1557              		.cfi_def_cfa_offset 16
 1558              		.cfi_offset 4, -16
 1559              		.cfi_offset 5, -12
 1560              		.cfi_offset 6, -8
 1561              		.cfi_offset 14, -4
 1562 0002 0646     		mov	r6, r0
 1563 0004 0C46     		mov	r4, r1
 1564 0006 1546     		mov	r5, r2
 716:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1565              		.loc 1 716 5 is_stmt 1 view .LVU460
 716:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1566              		.loc 1 716 5 view .LVU461
 1567 0008 0846     		mov	r0, r1
 1568              	.LVL136:
 716:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1569              		.loc 1 716 5 is_stmt 0 view .LVU462
 1570 000a FFF7FEFF 		bl	block_is_free
 1571              	.LVL137:
 716:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1572              		.loc 1 716 5 view .LVU463
 1573 000e 00B9     		cbnz	r0, .L97
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 45


 1574              	.L98:
 716:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1575              		.loc 1 716 5 is_stmt 1 discriminator 1 view .LVU464
 716:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1576              		.loc 1 716 5 discriminator 1 view .LVU465
 716:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1577              		.loc 1 716 5 discriminator 1 view .LVU466
 716:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1578              		.loc 1 716 5 discriminator 1 view .LVU467
 716:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1579              		.loc 1 716 5 discriminator 1 view .LVU468
 716:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1580              		.loc 1 716 5 discriminator 1 view .LVU469
 1581 0010 FEE7     		b	.L98
 1582              	.L97:
 716:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1583              		.loc 1 716 5 discriminator 4 view .LVU470
 717:lvgl/src/misc/lv_tlsf.c ****         block_header_t * remaining_block = block_split(block, size);
 1584              		.loc 1 717 5 discriminator 4 view .LVU471
 717:lvgl/src/misc/lv_tlsf.c ****         block_header_t * remaining_block = block_split(block, size);
 1585              		.loc 1 717 8 is_stmt 0 discriminator 4 view .LVU472
 1586 0012 2946     		mov	r1, r5
 1587 0014 2046     		mov	r0, r4
 1588 0016 FFF7FEFF 		bl	block_can_split
 1589              	.LVL138:
 717:lvgl/src/misc/lv_tlsf.c ****         block_header_t * remaining_block = block_split(block, size);
 1590              		.loc 1 717 7 discriminator 4 view .LVU473
 1591 001a 00B9     		cbnz	r0, .L101
 1592              	.LVL139:
 1593              	.L96:
 723:lvgl/src/misc/lv_tlsf.c **** 
 1594              		.loc 1 723 1 view .LVU474
 1595 001c 70BD     		pop	{r4, r5, r6, pc}
 1596              	.LVL140:
 1597              	.L101:
 1598              	.LBB3:
 718:lvgl/src/misc/lv_tlsf.c ****         block_link_next(block);
 1599              		.loc 1 718 9 is_stmt 1 view .LVU475
 718:lvgl/src/misc/lv_tlsf.c ****         block_link_next(block);
 1600              		.loc 1 718 44 is_stmt 0 view .LVU476
 1601 001e 2946     		mov	r1, r5
 1602 0020 2046     		mov	r0, r4
 1603 0022 FFF7FEFF 		bl	block_split
 1604              	.LVL141:
 1605 0026 0546     		mov	r5, r0
 1606              	.LVL142:
 719:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1607              		.loc 1 719 9 is_stmt 1 view .LVU477
 1608 0028 2046     		mov	r0, r4
 1609              	.LVL143:
 719:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1610              		.loc 1 719 9 is_stmt 0 view .LVU478
 1611 002a FFF7FEFF 		bl	block_link_next
 1612              	.LVL144:
 720:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 1613              		.loc 1 720 9 is_stmt 1 view .LVU479
 1614 002e 2846     		mov	r0, r5
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 46


 1615 0030 FFF7FEFF 		bl	block_set_prev_free
 1616              	.LVL145:
 721:lvgl/src/misc/lv_tlsf.c ****     }
 1617              		.loc 1 721 9 view .LVU480
 1618 0034 2946     		mov	r1, r5
 1619 0036 3046     		mov	r0, r6
 1620 0038 FFF7FEFF 		bl	block_insert
 1621              	.LVL146:
 1622              	.LBE3:
 723:lvgl/src/misc/lv_tlsf.c **** 
 1623              		.loc 1 723 1 is_stmt 0 view .LVU481
 1624 003c EEE7     		b	.L96
 1625              		.cfi_endproc
 1626              	.LFE36:
 1628              		.section	.text.block_prepare_used,"ax",%progbits
 1629              		.align	1
 1630              		.syntax unified
 1631              		.thumb
 1632              		.thumb_func
 1634              	block_prepare_used:
 1635              	.LVL147:
 1636              	.LFB40:
 782:lvgl/src/misc/lv_tlsf.c ****     void * p = 0;
 1637              		.loc 1 782 1 is_stmt 1 view -0
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 0
 1640              		@ frame_needed = 0, uses_anonymous_args = 0
 782:lvgl/src/misc/lv_tlsf.c ****     void * p = 0;
 1641              		.loc 1 782 1 is_stmt 0 view .LVU483
 1642 0000 10B5     		push	{r4, lr}
 1643              		.cfi_def_cfa_offset 8
 1644              		.cfi_offset 4, -8
 1645              		.cfi_offset 14, -4
 783:lvgl/src/misc/lv_tlsf.c ****     if(block) {
 1646              		.loc 1 783 5 is_stmt 1 view .LVU484
 1647              	.LVL148:
 784:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(size && "size must be non-zero");
 1648              		.loc 1 784 5 view .LVU485
 784:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(size && "size must be non-zero");
 1649              		.loc 1 784 7 is_stmt 0 view .LVU486
 1650 0002 0C46     		mov	r4, r1
 1651 0004 51B1     		cbz	r1, .L106
 785:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1652              		.loc 1 785 9 is_stmt 1 view .LVU487
 785:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1653              		.loc 1 785 9 view .LVU488
 1654 0006 02B9     		cbnz	r2, .L104
 1655              	.L105:
 785:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1656              		.loc 1 785 9 discriminator 1 view .LVU489
 785:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1657              		.loc 1 785 9 discriminator 1 view .LVU490
 785:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1658              		.loc 1 785 9 discriminator 1 view .LVU491
 785:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1659              		.loc 1 785 9 discriminator 1 view .LVU492
 785:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 47


 1660              		.loc 1 785 9 discriminator 1 view .LVU493
 785:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1661              		.loc 1 785 9 discriminator 1 view .LVU494
 1662 0008 FEE7     		b	.L105
 1663              	.L104:
 785:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1664              		.loc 1 785 9 discriminator 2 view .LVU495
 786:lvgl/src/misc/lv_tlsf.c ****         block_mark_as_used(block);
 1665              		.loc 1 786 9 discriminator 2 view .LVU496
 1666 000a FFF7FEFF 		bl	block_trim_free
 1667              	.LVL149:
 787:lvgl/src/misc/lv_tlsf.c ****         p = block_to_ptr(block);
 1668              		.loc 1 787 9 discriminator 2 view .LVU497
 1669 000e 2046     		mov	r0, r4
 1670 0010 FFF7FEFF 		bl	block_mark_as_used
 1671              	.LVL150:
 788:lvgl/src/misc/lv_tlsf.c ****     }
 1672              		.loc 1 788 9 discriminator 2 view .LVU498
 788:lvgl/src/misc/lv_tlsf.c ****     }
 1673              		.loc 1 788 13 is_stmt 0 discriminator 2 view .LVU499
 1674 0014 2046     		mov	r0, r4
 1675 0016 FFF7FEFF 		bl	block_to_ptr
 1676              	.LVL151:
 1677              	.L102:
 791:lvgl/src/misc/lv_tlsf.c **** 
 1678              		.loc 1 791 1 view .LVU500
 1679 001a 10BD     		pop	{r4, pc}
 1680              	.LVL152:
 1681              	.L106:
 783:lvgl/src/misc/lv_tlsf.c ****     if(block) {
 1682              		.loc 1 783 12 view .LVU501
 1683 001c 0846     		mov	r0, r1
 1684              	.LVL153:
 790:lvgl/src/misc/lv_tlsf.c **** }
 1685              		.loc 1 790 5 is_stmt 1 view .LVU502
 790:lvgl/src/misc/lv_tlsf.c **** }
 1686              		.loc 1 790 12 is_stmt 0 view .LVU503
 1687 001e FCE7     		b	.L102
 1688              		.cfi_endproc
 1689              	.LFE40:
 1691              		.section	.text.block_trim_free_leading,"ax",%progbits
 1692              		.align	1
 1693              		.syntax unified
 1694              		.thumb
 1695              		.thumb_func
 1697              	block_trim_free_leading:
 1698              	.LVL154:
 1699              	.LFB38:
 740:lvgl/src/misc/lv_tlsf.c ****     block_header_t * remaining_block = block;
 1700              		.loc 1 740 1 is_stmt 1 view -0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
 740:lvgl/src/misc/lv_tlsf.c ****     block_header_t * remaining_block = block;
 1704              		.loc 1 740 1 is_stmt 0 view .LVU505
 1705 0000 70B5     		push	{r4, r5, r6, lr}
 1706              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 48


 1707              		.cfi_offset 4, -16
 1708              		.cfi_offset 5, -12
 1709              		.cfi_offset 6, -8
 1710              		.cfi_offset 14, -4
 1711 0002 0646     		mov	r6, r0
 1712 0004 0C46     		mov	r4, r1
 1713 0006 1546     		mov	r5, r2
 741:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1714              		.loc 1 741 5 is_stmt 1 view .LVU506
 1715              	.LVL155:
 742:lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 1716              		.loc 1 742 5 view .LVU507
 742:lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 1717              		.loc 1 742 8 is_stmt 0 view .LVU508
 1718 0008 1146     		mov	r1, r2
 1719              	.LVL156:
 742:lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 1720              		.loc 1 742 8 view .LVU509
 1721 000a 2046     		mov	r0, r4
 1722              	.LVL157:
 742:lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 1723              		.loc 1 742 8 view .LVU510
 1724 000c FFF7FEFF 		bl	block_can_split
 1725              	.LVL158:
 742:lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 1726              		.loc 1 742 7 view .LVU511
 1727 0010 08B9     		cbnz	r0, .L111
 1728              	.LVL159:
 1729              	.L109:
 751:lvgl/src/misc/lv_tlsf.c **** }
 1730              		.loc 1 751 5 is_stmt 1 view .LVU512
 752:lvgl/src/misc/lv_tlsf.c **** 
 1731              		.loc 1 752 1 is_stmt 0 view .LVU513
 1732 0012 2046     		mov	r0, r4
 1733 0014 70BD     		pop	{r4, r5, r6, pc}
 1734              	.LVL160:
 1735              	.L111:
 744:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1736              		.loc 1 744 9 is_stmt 1 view .LVU514
 744:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1737              		.loc 1 744 27 is_stmt 0 view .LVU515
 1738 0016 291F     		subs	r1, r5, #4
 1739 0018 2046     		mov	r0, r4
 1740 001a FFF7FEFF 		bl	block_split
 1741              	.LVL161:
 1742 001e 0546     		mov	r5, r0
 1743              	.LVL162:
 745:lvgl/src/misc/lv_tlsf.c **** 
 1744              		.loc 1 745 9 is_stmt 1 view .LVU516
 1745 0020 FFF7FEFF 		bl	block_set_prev_free
 1746              	.LVL163:
 747:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, block);
 1747              		.loc 1 747 9 view .LVU517
 1748 0024 2046     		mov	r0, r4
 1749 0026 FFF7FEFF 		bl	block_link_next
 1750              	.LVL164:
 748:lvgl/src/misc/lv_tlsf.c ****     }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 49


 1751              		.loc 1 748 9 view .LVU518
 1752 002a 2146     		mov	r1, r4
 1753 002c 3046     		mov	r0, r6
 1754 002e FFF7FEFF 		bl	block_insert
 1755              	.LVL165:
 744:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1756              		.loc 1 744 27 is_stmt 0 view .LVU519
 1757 0032 2C46     		mov	r4, r5
 1758              	.LVL166:
 744:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1759              		.loc 1 744 27 view .LVU520
 1760 0034 EDE7     		b	.L109
 1761              		.cfi_endproc
 1762              	.LFE38:
 1764              		.section	.text.block_remove,"ax",%progbits
 1765              		.align	1
 1766              		.syntax unified
 1767              		.thumb
 1768              		.thumb_func
 1770              	block_remove:
 1771              	.LVL167:
 1772              	.LFB29:
 633:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1773              		.loc 1 633 1 is_stmt 1 view -0
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 8
 1776              		@ frame_needed = 0, uses_anonymous_args = 0
 633:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1777              		.loc 1 633 1 is_stmt 0 view .LVU522
 1778 0000 30B5     		push	{r4, r5, lr}
 1779              		.cfi_def_cfa_offset 12
 1780              		.cfi_offset 4, -12
 1781              		.cfi_offset 5, -8
 1782              		.cfi_offset 14, -4
 1783 0002 83B0     		sub	sp, sp, #12
 1784              		.cfi_def_cfa_offset 24
 1785 0004 0546     		mov	r5, r0
 1786 0006 0C46     		mov	r4, r1
 634:lvgl/src/misc/lv_tlsf.c ****     mapping_insert(block_size(block), &fl, &sl);
 1787              		.loc 1 634 5 is_stmt 1 view .LVU523
 635:lvgl/src/misc/lv_tlsf.c ****     remove_free_block(control, block, fl, sl);
 1788              		.loc 1 635 5 view .LVU524
 1789 0008 0846     		mov	r0, r1
 1790              	.LVL168:
 635:lvgl/src/misc/lv_tlsf.c ****     remove_free_block(control, block, fl, sl);
 1791              		.loc 1 635 5 is_stmt 0 view .LVU525
 1792 000a FFF7FEFF 		bl	block_size
 1793              	.LVL169:
 635:lvgl/src/misc/lv_tlsf.c ****     remove_free_block(control, block, fl, sl);
 1794              		.loc 1 635 5 view .LVU526
 1795 000e 6A46     		mov	r2, sp
 1796 0010 01A9     		add	r1, sp, #4
 1797 0012 FFF7FEFF 		bl	mapping_insert
 1798              	.LVL170:
 636:lvgl/src/misc/lv_tlsf.c **** }
 1799              		.loc 1 636 5 is_stmt 1 view .LVU527
 1800 0016 009B     		ldr	r3, [sp]
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 50


 1801 0018 019A     		ldr	r2, [sp, #4]
 1802 001a 2146     		mov	r1, r4
 1803 001c 2846     		mov	r0, r5
 1804 001e FFF7FEFF 		bl	remove_free_block
 1805              	.LVL171:
 637:lvgl/src/misc/lv_tlsf.c **** 
 1806              		.loc 1 637 1 is_stmt 0 view .LVU528
 1807 0022 03B0     		add	sp, sp, #12
 1808              		.cfi_def_cfa_offset 12
 1809              		@ sp needed
 1810 0024 30BD     		pop	{r4, r5, pc}
 637:lvgl/src/misc/lv_tlsf.c **** 
 1811              		.loc 1 637 1 view .LVU529
 1812              		.cfi_endproc
 1813              	.LFE29:
 1815              		.section	.text.block_merge_prev,"ax",%progbits
 1816              		.align	1
 1817              		.syntax unified
 1818              		.thumb
 1819              		.thumb_func
 1821              	block_merge_prev:
 1822              	.LVL172:
 1823              	.LFB34:
 686:lvgl/src/misc/lv_tlsf.c ****     if(block_is_prev_free(block)) {
 1824              		.loc 1 686 1 is_stmt 1 view -0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 0
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 686:lvgl/src/misc/lv_tlsf.c ****     if(block_is_prev_free(block)) {
 1828              		.loc 1 686 1 is_stmt 0 view .LVU531
 1829 0000 70B5     		push	{r4, r5, r6, lr}
 1830              		.cfi_def_cfa_offset 16
 1831              		.cfi_offset 4, -16
 1832              		.cfi_offset 5, -12
 1833              		.cfi_offset 6, -8
 1834              		.cfi_offset 14, -4
 1835 0002 0546     		mov	r5, r0
 1836 0004 0C46     		mov	r4, r1
 687:lvgl/src/misc/lv_tlsf.c ****         block_header_t * prev = block_prev(block);
 1837              		.loc 1 687 5 is_stmt 1 view .LVU532
 687:lvgl/src/misc/lv_tlsf.c ****         block_header_t * prev = block_prev(block);
 1838              		.loc 1 687 8 is_stmt 0 view .LVU533
 1839 0006 0846     		mov	r0, r1
 1840              	.LVL173:
 687:lvgl/src/misc/lv_tlsf.c ****         block_header_t * prev = block_prev(block);
 1841              		.loc 1 687 8 view .LVU534
 1842 0008 FFF7FEFF 		bl	block_is_prev_free
 1843              	.LVL174:
 687:lvgl/src/misc/lv_tlsf.c ****         block_header_t * prev = block_prev(block);
 1844              		.loc 1 687 7 view .LVU535
 1845 000c 08B9     		cbnz	r0, .L121
 1846              	.L115:
 695:lvgl/src/misc/lv_tlsf.c **** }
 1847              		.loc 1 695 5 is_stmt 1 view .LVU536
 696:lvgl/src/misc/lv_tlsf.c **** 
 1848              		.loc 1 696 1 is_stmt 0 view .LVU537
 1849 000e 2046     		mov	r0, r4
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 51


 1850 0010 70BD     		pop	{r4, r5, r6, pc}
 1851              	.LVL175:
 1852              	.L121:
 1853              	.LBB4:
 688:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(prev && "prev physical block can't be null");
 1854              		.loc 1 688 9 is_stmt 1 view .LVU538
 688:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(prev && "prev physical block can't be null");
 1855              		.loc 1 688 33 is_stmt 0 view .LVU539
 1856 0012 2046     		mov	r0, r4
 1857 0014 FFF7FEFF 		bl	block_prev
 1858              	.LVL176:
 689:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1859              		.loc 1 689 9 is_stmt 1 view .LVU540
 689:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1860              		.loc 1 689 9 view .LVU541
 1861 0018 0646     		mov	r6, r0
 1862 001a 18B1     		cbz	r0, .L117
 689:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1863              		.loc 1 689 9 discriminator 2 view .LVU542
 690:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1864              		.loc 1 690 9 discriminator 2 view .LVU543
 690:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1865              		.loc 1 690 9 discriminator 2 view .LVU544
 1866 001c FFF7FEFF 		bl	block_is_free
 1867              	.LVL177:
 690:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1868              		.loc 1 690 9 is_stmt 0 discriminator 2 view .LVU545
 1869 0020 08B9     		cbnz	r0, .L118
 1870              	.L119:
 690:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1871              		.loc 1 690 9 is_stmt 1 discriminator 2 view .LVU546
 690:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1872              		.loc 1 690 9 discriminator 2 view .LVU547
 690:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1873              		.loc 1 690 9 discriminator 2 view .LVU548
 690:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1874              		.loc 1 690 9 discriminator 2 view .LVU549
 690:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1875              		.loc 1 690 9 discriminator 2 view .LVU550
 690:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1876              		.loc 1 690 9 discriminator 2 view .LVU551
 1877 0022 FEE7     		b	.L119
 1878              	.LVL178:
 1879              	.L117:
 689:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1880              		.loc 1 689 9 discriminator 1 view .LVU552
 689:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1881              		.loc 1 689 9 discriminator 1 view .LVU553
 689:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1882              		.loc 1 689 9 discriminator 1 view .LVU554
 689:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1883              		.loc 1 689 9 discriminator 1 view .LVU555
 689:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1884              		.loc 1 689 9 discriminator 1 view .LVU556
 689:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1885              		.loc 1 689 9 discriminator 1 view .LVU557
 1886 0024 FEE7     		b	.L117
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 52


 1887              	.LVL179:
 1888              	.L118:
 690:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1889              		.loc 1 690 9 discriminator 4 view .LVU558
 691:lvgl/src/misc/lv_tlsf.c ****         block = block_absorb(prev, block);
 1890              		.loc 1 691 9 discriminator 4 view .LVU559
 1891 0026 3146     		mov	r1, r6
 1892 0028 2846     		mov	r0, r5
 1893 002a FFF7FEFF 		bl	block_remove
 1894              	.LVL180:
 692:lvgl/src/misc/lv_tlsf.c ****     }
 1895              		.loc 1 692 9 discriminator 4 view .LVU560
 692:lvgl/src/misc/lv_tlsf.c ****     }
 1896              		.loc 1 692 17 is_stmt 0 discriminator 4 view .LVU561
 1897 002e 2146     		mov	r1, r4
 1898 0030 3046     		mov	r0, r6
 1899 0032 FFF7FEFF 		bl	block_absorb
 1900              	.LVL181:
 1901 0036 0446     		mov	r4, r0
 1902              	.LVL182:
 692:lvgl/src/misc/lv_tlsf.c ****     }
 1903              		.loc 1 692 17 discriminator 4 view .LVU562
 1904 0038 E9E7     		b	.L115
 1905              	.LBE4:
 1906              		.cfi_endproc
 1907              	.LFE34:
 1909              		.section	.text.block_merge_next,"ax",%progbits
 1910              		.align	1
 1911              		.syntax unified
 1912              		.thumb
 1913              		.thumb_func
 1915              	block_merge_next:
 1916              	.LVL183:
 1917              	.LFB35:
 700:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
 1918              		.loc 1 700 1 is_stmt 1 view -0
 1919              		.cfi_startproc
 1920              		@ args = 0, pretend = 0, frame = 0
 1921              		@ frame_needed = 0, uses_anonymous_args = 0
 700:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
 1922              		.loc 1 700 1 is_stmt 0 view .LVU564
 1923 0000 70B5     		push	{r4, r5, r6, lr}
 1924              		.cfi_def_cfa_offset 16
 1925              		.cfi_offset 4, -16
 1926              		.cfi_offset 5, -12
 1927              		.cfi_offset 6, -8
 1928              		.cfi_offset 14, -4
 1929 0002 0546     		mov	r5, r0
 1930 0004 0C46     		mov	r4, r1
 701:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next physical block can't be null");
 1931              		.loc 1 701 5 is_stmt 1 view .LVU565
 701:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next physical block can't be null");
 1932              		.loc 1 701 29 is_stmt 0 view .LVU566
 1933 0006 0846     		mov	r0, r1
 1934              	.LVL184:
 701:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next physical block can't be null");
 1935              		.loc 1 701 29 view .LVU567
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 53


 1936 0008 FFF7FEFF 		bl	block_next
 1937              	.LVL185:
 702:lvgl/src/misc/lv_tlsf.c **** 
 1938              		.loc 1 702 5 is_stmt 1 view .LVU568
 702:lvgl/src/misc/lv_tlsf.c **** 
 1939              		.loc 1 702 5 view .LVU569
 1940 000c 40B1     		cbz	r0, .L124
 1941 000e 0646     		mov	r6, r0
 702:lvgl/src/misc/lv_tlsf.c **** 
 1942              		.loc 1 702 5 discriminator 2 view .LVU570
 704:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_last(block) && "previous block can't be last");
 1943              		.loc 1 704 5 discriminator 2 view .LVU571
 704:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_last(block) && "previous block can't be last");
 1944              		.loc 1 704 8 is_stmt 0 discriminator 2 view .LVU572
 1945 0010 FFF7FEFF 		bl	block_is_free
 1946              	.LVL186:
 704:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_last(block) && "previous block can't be last");
 1947              		.loc 1 704 7 discriminator 2 view .LVU573
 1948 0014 70B1     		cbz	r0, .L125
 705:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1949              		.loc 1 705 9 is_stmt 1 view .LVU574
 705:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1950              		.loc 1 705 9 view .LVU575
 1951 0016 2046     		mov	r0, r4
 1952 0018 FFF7FEFF 		bl	block_is_last
 1953              	.LVL187:
 1954 001c 08B1     		cbz	r0, .L126
 1955              	.L127:
 705:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1956              		.loc 1 705 9 discriminator 2 view .LVU576
 705:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1957              		.loc 1 705 9 discriminator 2 view .LVU577
 705:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1958              		.loc 1 705 9 discriminator 2 view .LVU578
 705:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1959              		.loc 1 705 9 discriminator 2 view .LVU579
 705:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1960              		.loc 1 705 9 discriminator 2 view .LVU580
 705:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1961              		.loc 1 705 9 discriminator 2 view .LVU581
 1962 001e FEE7     		b	.L127
 1963              	.LVL188:
 1964              	.L124:
 702:lvgl/src/misc/lv_tlsf.c **** 
 1965              		.loc 1 702 5 discriminator 1 view .LVU582
 702:lvgl/src/misc/lv_tlsf.c **** 
 1966              		.loc 1 702 5 discriminator 1 view .LVU583
 702:lvgl/src/misc/lv_tlsf.c **** 
 1967              		.loc 1 702 5 discriminator 1 view .LVU584
 702:lvgl/src/misc/lv_tlsf.c **** 
 1968              		.loc 1 702 5 discriminator 1 view .LVU585
 702:lvgl/src/misc/lv_tlsf.c **** 
 1969              		.loc 1 702 5 discriminator 1 view .LVU586
 702:lvgl/src/misc/lv_tlsf.c **** 
 1970              		.loc 1 702 5 discriminator 1 view .LVU587
 1971 0020 FEE7     		b	.L124
 1972              	.LVL189:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 54


 1973              	.L126:
 705:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1974              		.loc 1 705 9 discriminator 2 view .LVU588
 706:lvgl/src/misc/lv_tlsf.c ****         block = block_absorb(block, next);
 1975              		.loc 1 706 9 discriminator 2 view .LVU589
 1976 0022 3146     		mov	r1, r6
 1977 0024 2846     		mov	r0, r5
 1978 0026 FFF7FEFF 		bl	block_remove
 1979              	.LVL190:
 707:lvgl/src/misc/lv_tlsf.c ****     }
 1980              		.loc 1 707 9 discriminator 2 view .LVU590
 707:lvgl/src/misc/lv_tlsf.c ****     }
 1981              		.loc 1 707 17 is_stmt 0 discriminator 2 view .LVU591
 1982 002a 3146     		mov	r1, r6
 1983 002c 2046     		mov	r0, r4
 1984 002e FFF7FEFF 		bl	block_absorb
 1985              	.LVL191:
 1986 0032 0446     		mov	r4, r0
 1987              	.LVL192:
 1988              	.L125:
 710:lvgl/src/misc/lv_tlsf.c **** }
 1989              		.loc 1 710 5 is_stmt 1 view .LVU592
 711:lvgl/src/misc/lv_tlsf.c **** 
 1990              		.loc 1 711 1 is_stmt 0 view .LVU593
 1991 0034 2046     		mov	r0, r4
 1992 0036 70BD     		pop	{r4, r5, r6, pc}
 711:lvgl/src/misc/lv_tlsf.c **** 
 1993              		.loc 1 711 1 view .LVU594
 1994              		.cfi_endproc
 1995              	.LFE35:
 1997              		.section	.text.block_trim_used,"ax",%progbits
 1998              		.align	1
 1999              		.syntax unified
 2000              		.thumb
 2001              		.thumb_func
 2003              	block_trim_used:
 2004              	.LVL193:
 2005              	.LFB37:
 727:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_free(block) && "block must be used");
 2006              		.loc 1 727 1 is_stmt 1 view -0
 2007              		.cfi_startproc
 2008              		@ args = 0, pretend = 0, frame = 0
 2009              		@ frame_needed = 0, uses_anonymous_args = 0
 727:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_free(block) && "block must be used");
 2010              		.loc 1 727 1 is_stmt 0 view .LVU596
 2011 0000 70B5     		push	{r4, r5, r6, lr}
 2012              		.cfi_def_cfa_offset 16
 2013              		.cfi_offset 4, -16
 2014              		.cfi_offset 5, -12
 2015              		.cfi_offset 6, -8
 2016              		.cfi_offset 14, -4
 2017 0002 0646     		mov	r6, r0
 2018 0004 0C46     		mov	r4, r1
 2019 0006 1546     		mov	r5, r2
 728:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2020              		.loc 1 728 5 is_stmt 1 view .LVU597
 728:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 55


 2021              		.loc 1 728 5 view .LVU598
 2022 0008 0846     		mov	r0, r1
 2023              	.LVL194:
 728:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2024              		.loc 1 728 5 is_stmt 0 view .LVU599
 2025 000a FFF7FEFF 		bl	block_is_free
 2026              	.LVL195:
 728:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2027              		.loc 1 728 5 view .LVU600
 2028 000e 00B1     		cbz	r0, .L130
 2029              	.L131:
 728:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2030              		.loc 1 728 5 is_stmt 1 discriminator 1 view .LVU601
 728:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2031              		.loc 1 728 5 discriminator 1 view .LVU602
 728:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2032              		.loc 1 728 5 discriminator 1 view .LVU603
 728:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2033              		.loc 1 728 5 discriminator 1 view .LVU604
 728:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2034              		.loc 1 728 5 discriminator 1 view .LVU605
 728:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2035              		.loc 1 728 5 discriminator 1 view .LVU606
 2036 0010 FEE7     		b	.L131
 2037              	.L130:
 728:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2038              		.loc 1 728 5 discriminator 2 view .LVU607
 729:lvgl/src/misc/lv_tlsf.c ****         /* If the next block is free, we must coalesce. */
 2039              		.loc 1 729 5 discriminator 2 view .LVU608
 729:lvgl/src/misc/lv_tlsf.c ****         /* If the next block is free, we must coalesce. */
 2040              		.loc 1 729 8 is_stmt 0 discriminator 2 view .LVU609
 2041 0012 2946     		mov	r1, r5
 2042 0014 2046     		mov	r0, r4
 2043 0016 FFF7FEFF 		bl	block_can_split
 2044              	.LVL196:
 729:lvgl/src/misc/lv_tlsf.c ****         /* If the next block is free, we must coalesce. */
 2045              		.loc 1 729 7 discriminator 2 view .LVU610
 2046 001a 00B9     		cbnz	r0, .L134
 2047              	.LVL197:
 2048              	.L129:
 737:lvgl/src/misc/lv_tlsf.c **** 
 2049              		.loc 1 737 1 view .LVU611
 2050 001c 70BD     		pop	{r4, r5, r6, pc}
 2051              	.LVL198:
 2052              	.L134:
 2053              	.LBB5:
 731:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_used(remaining_block);
 2054              		.loc 1 731 9 is_stmt 1 view .LVU612
 731:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_used(remaining_block);
 2055              		.loc 1 731 44 is_stmt 0 view .LVU613
 2056 001e 2946     		mov	r1, r5
 2057 0020 2046     		mov	r0, r4
 2058 0022 FFF7FEFF 		bl	block_split
 2059              	.LVL199:
 2060 0026 0446     		mov	r4, r0
 2061              	.LVL200:
 732:lvgl/src/misc/lv_tlsf.c **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 56


 2062              		.loc 1 732 9 is_stmt 1 view .LVU614
 2063 0028 FFF7FEFF 		bl	block_set_prev_used
 2064              	.LVL201:
 734:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 2065              		.loc 1 734 9 view .LVU615
 734:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 2066              		.loc 1 734 27 is_stmt 0 view .LVU616
 2067 002c 2146     		mov	r1, r4
 2068 002e 3046     		mov	r0, r6
 2069 0030 FFF7FEFF 		bl	block_merge_next
 2070              	.LVL202:
 2071 0034 0146     		mov	r1, r0
 2072              	.LVL203:
 735:lvgl/src/misc/lv_tlsf.c ****     }
 2073              		.loc 1 735 9 is_stmt 1 view .LVU617
 2074 0036 3046     		mov	r0, r6
 2075              	.LVL204:
 735:lvgl/src/misc/lv_tlsf.c ****     }
 2076              		.loc 1 735 9 is_stmt 0 view .LVU618
 2077 0038 FFF7FEFF 		bl	block_insert
 2078              	.LVL205:
 735:lvgl/src/misc/lv_tlsf.c ****     }
 2079              		.loc 1 735 9 view .LVU619
 2080              	.LBE5:
 737:lvgl/src/misc/lv_tlsf.c **** 
 2081              		.loc 1 737 1 view .LVU620
 2082 003c EEE7     		b	.L129
 2083              		.cfi_endproc
 2084              	.LFE37:
 2086              		.section	.text.mapping_search,"ax",%progbits
 2087              		.align	1
 2088              		.syntax unified
 2089              		.thumb
 2090              		.thumb_func
 2092              	mapping_search:
 2093              	.LVL206:
 2094              	.LFB25:
 546:lvgl/src/misc/lv_tlsf.c ****     if(size >= SMALL_BLOCK_SIZE) {
 2095              		.loc 1 546 1 is_stmt 1 view -0
 2096              		.cfi_startproc
 2097              		@ args = 0, pretend = 0, frame = 0
 2098              		@ frame_needed = 0, uses_anonymous_args = 0
 546:lvgl/src/misc/lv_tlsf.c ****     if(size >= SMALL_BLOCK_SIZE) {
 2099              		.loc 1 546 1 is_stmt 0 view .LVU622
 2100 0000 70B5     		push	{r4, r5, r6, lr}
 2101              		.cfi_def_cfa_offset 16
 2102              		.cfi_offset 4, -16
 2103              		.cfi_offset 5, -12
 2104              		.cfi_offset 6, -8
 2105              		.cfi_offset 14, -4
 2106 0002 0446     		mov	r4, r0
 2107 0004 0D46     		mov	r5, r1
 2108 0006 1646     		mov	r6, r2
 547:lvgl/src/misc/lv_tlsf.c ****         const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 2109              		.loc 1 547 5 is_stmt 1 view .LVU623
 547:lvgl/src/misc/lv_tlsf.c ****         const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 2110              		.loc 1 547 7 is_stmt 0 view .LVU624
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 57


 2111 0008 7F28     		cmp	r0, #127
 2112 000a 06D9     		bls	.L136
 2113              	.LBB6:
 548:lvgl/src/misc/lv_tlsf.c ****         size += round;
 2114              		.loc 1 548 9 is_stmt 1 view .LVU625
 548:lvgl/src/misc/lv_tlsf.c ****         size += round;
 2115              		.loc 1 548 37 is_stmt 0 view .LVU626
 2116 000c FFF7FEFF 		bl	tlsf_fls
 2117              	.LVL207:
 548:lvgl/src/misc/lv_tlsf.c ****         size += round;
 2118              		.loc 1 548 58 view .LVU627
 2119 0010 431F     		subs	r3, r0, #5
 548:lvgl/src/misc/lv_tlsf.c ****         size += round;
 2120              		.loc 1 548 33 view .LVU628
 2121 0012 0120     		movs	r0, #1
 2122 0014 9840     		lsls	r0, r0, r3
 548:lvgl/src/misc/lv_tlsf.c ****         size += round;
 2123              		.loc 1 548 82 view .LVU629
 2124 0016 0138     		subs	r0, r0, #1
 2125              	.LVL208:
 549:lvgl/src/misc/lv_tlsf.c ****     }
 2126              		.loc 1 549 9 is_stmt 1 view .LVU630
 549:lvgl/src/misc/lv_tlsf.c ****     }
 2127              		.loc 1 549 14 is_stmt 0 view .LVU631
 2128 0018 0444     		add	r4, r4, r0
 2129              	.LVL209:
 2130              	.L136:
 549:lvgl/src/misc/lv_tlsf.c ****     }
 2131              		.loc 1 549 14 view .LVU632
 2132              	.LBE6:
 551:lvgl/src/misc/lv_tlsf.c **** }
 2133              		.loc 1 551 5 is_stmt 1 view .LVU633
 2134 001a 3246     		mov	r2, r6
 2135 001c 2946     		mov	r1, r5
 2136 001e 2046     		mov	r0, r4
 2137 0020 FFF7FEFF 		bl	mapping_insert
 2138              	.LVL210:
 552:lvgl/src/misc/lv_tlsf.c **** 
 2139              		.loc 1 552 1 is_stmt 0 view .LVU634
 2140 0024 70BD     		pop	{r4, r5, r6, pc}
 552:lvgl/src/misc/lv_tlsf.c **** 
 2141              		.loc 1 552 1 view .LVU635
 2142              		.cfi_endproc
 2143              	.LFE25:
 2145              		.section	.text.tlsf_ffs,"ax",%progbits
 2146              		.align	1
 2147              		.syntax unified
 2148              		.thumb
 2149              		.thumb_func
 2151              	tlsf_ffs:
 2152              	.LVL211:
 2153              	.LFB1:
  95:lvgl/src/misc/lv_tlsf.c ****     return __builtin_ffs(word) - 1;
 2154              		.loc 1 95 1 is_stmt 1 view -0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 0
 2157              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 58


 2158              		@ link register save eliminated.
  95:lvgl/src/misc/lv_tlsf.c ****     return __builtin_ffs(word) - 1;
 2159              		.loc 1 95 1 is_stmt 0 view .LVU637
 2160 0000 0346     		mov	r3, r0
  96:lvgl/src/misc/lv_tlsf.c **** }
 2161              		.loc 1 96 5 is_stmt 1 view .LVU638
  96:lvgl/src/misc/lv_tlsf.c **** }
 2162              		.loc 1 96 12 is_stmt 0 view .LVU639
 2163 0002 90FAA0F0 		rbit	r0, r0
 2164              	.LVL212:
  96:lvgl/src/misc/lv_tlsf.c **** }
 2165              		.loc 1 96 12 view .LVU640
 2166 0006 B0FA80F0 		clz	r0, r0
 2167 000a 0BB9     		cbnz	r3, .L139
 2168 000c 4FF0FF30 		mov	r0, #-1
 2169              	.L139:
  97:lvgl/src/misc/lv_tlsf.c **** 
 2170              		.loc 1 97 1 view .LVU641
 2171 0010 7047     		bx	lr
 2172              		.cfi_endproc
 2173              	.LFE1:
 2175              		.section	.text.search_suitable_block,"ax",%progbits
 2176              		.align	1
 2177              		.syntax unified
 2178              		.thumb
 2179              		.thumb_func
 2181              	search_suitable_block:
 2182              	.LVL213:
 2183              	.LFB26:
 555:lvgl/src/misc/lv_tlsf.c ****     int fl = *fli;
 2184              		.loc 1 555 1 is_stmt 1 view -0
 2185              		.cfi_startproc
 2186              		@ args = 0, pretend = 0, frame = 0
 2187              		@ frame_needed = 0, uses_anonymous_args = 0
 555:lvgl/src/misc/lv_tlsf.c ****     int fl = *fli;
 2188              		.loc 1 555 1 is_stmt 0 view .LVU643
 2189 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2190              		.cfi_def_cfa_offset 24
 2191              		.cfi_offset 3, -24
 2192              		.cfi_offset 4, -20
 2193              		.cfi_offset 5, -16
 2194              		.cfi_offset 6, -12
 2195              		.cfi_offset 7, -8
 2196              		.cfi_offset 14, -4
 2197 0002 0446     		mov	r4, r0
 2198 0004 1646     		mov	r6, r2
 556:lvgl/src/misc/lv_tlsf.c ****     int sl = *sli;
 2199              		.loc 1 556 5 is_stmt 1 view .LVU644
 556:lvgl/src/misc/lv_tlsf.c ****     int sl = *sli;
 2200              		.loc 1 556 9 is_stmt 0 view .LVU645
 2201 0006 0D68     		ldr	r5, [r1]
 2202              	.LVL214:
 557:lvgl/src/misc/lv_tlsf.c **** 
 2203              		.loc 1 557 5 is_stmt 1 view .LVU646
 557:lvgl/src/misc/lv_tlsf.c **** 
 2204              		.loc 1 557 9 is_stmt 0 view .LVU647
 2205 0008 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 59


 2206              	.LVL215:
 563:lvgl/src/misc/lv_tlsf.c ****     if(!sl_map) {
 2207              		.loc 1 563 5 is_stmt 1 view .LVU648
 563:lvgl/src/misc/lv_tlsf.c ****     if(!sl_map) {
 2208              		.loc 1 563 45 is_stmt 0 view .LVU649
 2209 000a 2B1D     		adds	r3, r5, #4
 2210 000c 00EB8303 		add	r3, r0, r3, lsl #2
 2211 0010 5B68     		ldr	r3, [r3, #4]
 563:lvgl/src/misc/lv_tlsf.c ****     if(!sl_map) {
 2212              		.loc 1 563 57 view .LVU650
 2213 0012 4FF0FF30 		mov	r0, #-1
 2214              	.LVL216:
 563:lvgl/src/misc/lv_tlsf.c ****     if(!sl_map) {
 2215              		.loc 1 563 57 view .LVU651
 2216 0016 9040     		lsls	r0, r0, r2
 2217              	.LVL217:
 564:lvgl/src/misc/lv_tlsf.c ****         /* No block exists. Search in the next largest first-level list. */
 2218              		.loc 1 564 5 is_stmt 1 view .LVU652
 564:lvgl/src/misc/lv_tlsf.c ****         /* No block exists. Search in the next largest first-level list. */
 2219              		.loc 1 564 7 is_stmt 0 view .LVU653
 2220 0018 1840     		ands	r0, r3, r0
 2221              	.LVL218:
 564:lvgl/src/misc/lv_tlsf.c ****         /* No block exists. Search in the next largest first-level list. */
 2222              		.loc 1 564 7 view .LVU654
 2223 001a 10D1     		bne	.L141
 2224 001c 0F46     		mov	r7, r1
 2225              	.LBB7:
 566:lvgl/src/misc/lv_tlsf.c ****         if(!fl_map) {
 2226              		.loc 1 566 9 is_stmt 1 view .LVU655
 566:lvgl/src/misc/lv_tlsf.c ****         if(!fl_map) {
 2227              		.loc 1 566 44 is_stmt 0 view .LVU656
 2228 001e 2269     		ldr	r2, [r4, #16]
 2229              	.LVL219:
 566:lvgl/src/misc/lv_tlsf.c ****         if(!fl_map) {
 2230              		.loc 1 566 70 view .LVU657
 2231 0020 0135     		adds	r5, r5, #1
 2232              	.LVL220:
 566:lvgl/src/misc/lv_tlsf.c ****         if(!fl_map) {
 2233              		.loc 1 566 63 view .LVU658
 2234 0022 4FF0FF33 		mov	r3, #-1
 2235 0026 AB40     		lsls	r3, r3, r5
 2236              	.LVL221:
 567:lvgl/src/misc/lv_tlsf.c ****             /* No free blocks available, memory has been exhausted. */
 2237              		.loc 1 567 9 is_stmt 1 view .LVU659
 567:lvgl/src/misc/lv_tlsf.c ****             /* No free blocks available, memory has been exhausted. */
 2238              		.loc 1 567 11 is_stmt 0 view .LVU660
 2239 0028 12EA0300 		ands	r0, r2, r3
 2240              	.LVL222:
 567:lvgl/src/misc/lv_tlsf.c ****             /* No free blocks available, memory has been exhausted. */
 2241              		.loc 1 567 11 view .LVU661
 2242 002c 13D0     		beq	.L145
 572:lvgl/src/misc/lv_tlsf.c ****         *fli = fl;
 2243              		.loc 1 572 9 is_stmt 1 view .LVU662
 572:lvgl/src/misc/lv_tlsf.c ****         *fli = fl;
 2244              		.loc 1 572 14 is_stmt 0 view .LVU663
 2245 002e FFF7FEFF 		bl	tlsf_ffs
 2246              	.LVL223:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 60


 572:lvgl/src/misc/lv_tlsf.c ****         *fli = fl;
 2247              		.loc 1 572 14 view .LVU664
 2248 0032 0546     		mov	r5, r0
 2249              	.LVL224:
 573:lvgl/src/misc/lv_tlsf.c ****         sl_map = control->sl_bitmap[fl];
 2250              		.loc 1 573 9 is_stmt 1 view .LVU665
 573:lvgl/src/misc/lv_tlsf.c ****         sl_map = control->sl_bitmap[fl];
 2251              		.loc 1 573 14 is_stmt 0 view .LVU666
 2252 0034 3860     		str	r0, [r7]
 574:lvgl/src/misc/lv_tlsf.c ****     }
 2253              		.loc 1 574 9 is_stmt 1 view .LVU667
 574:lvgl/src/misc/lv_tlsf.c ****     }
 2254              		.loc 1 574 16 is_stmt 0 view .LVU668
 2255 0036 031D     		adds	r3, r0, #4
 2256 0038 04EB8303 		add	r3, r4, r3, lsl #2
 2257 003c 5868     		ldr	r0, [r3, #4]
 2258              	.LVL225:
 2259              	.L141:
 574:lvgl/src/misc/lv_tlsf.c ****     }
 2260              		.loc 1 574 16 view .LVU669
 2261              	.LBE7:
 576:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2262              		.loc 1 576 5 is_stmt 1 view .LVU670
 576:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2263              		.loc 1 576 5 view .LVU671
 2264 003e 00B9     		cbnz	r0, .L143
 2265              	.L144:
 576:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2266              		.loc 1 576 5 discriminator 1 view .LVU672
 576:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2267              		.loc 1 576 5 discriminator 1 view .LVU673
 576:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2268              		.loc 1 576 5 discriminator 1 view .LVU674
 576:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2269              		.loc 1 576 5 discriminator 1 view .LVU675
 576:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2270              		.loc 1 576 5 discriminator 1 view .LVU676
 576:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2271              		.loc 1 576 5 discriminator 1 view .LVU677
 2272 0040 FEE7     		b	.L144
 2273              	.L143:
 576:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2274              		.loc 1 576 5 discriminator 2 view .LVU678
 577:lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 2275              		.loc 1 577 5 discriminator 2 view .LVU679
 577:lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 2276              		.loc 1 577 10 is_stmt 0 discriminator 2 view .LVU680
 2277 0042 FFF7FEFF 		bl	tlsf_ffs
 2278              	.LVL226:
 578:lvgl/src/misc/lv_tlsf.c **** 
 2279              		.loc 1 578 5 is_stmt 1 discriminator 2 view .LVU681
 578:lvgl/src/misc/lv_tlsf.c **** 
 2280              		.loc 1 578 10 is_stmt 0 discriminator 2 view .LVU682
 2281 0046 3060     		str	r0, [r6]
 581:lvgl/src/misc/lv_tlsf.c **** }
 2282              		.loc 1 581 5 is_stmt 1 discriminator 2 view .LVU683
 581:lvgl/src/misc/lv_tlsf.c **** }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 61


 2283              		.loc 1 581 31 is_stmt 0 discriminator 2 view .LVU684
 2284 0048 00EB4513 		add	r3, r0, r5, lsl #5
 2285 004c 1233     		adds	r3, r3, #18
 2286 004e 04EB8304 		add	r4, r4, r3, lsl #2
 2287              	.LVL227:
 581:lvgl/src/misc/lv_tlsf.c **** }
 2288              		.loc 1 581 31 discriminator 2 view .LVU685
 2289 0052 6068     		ldr	r0, [r4, #4]
 2290              	.LVL228:
 2291              	.L140:
 582:lvgl/src/misc/lv_tlsf.c **** 
 2292              		.loc 1 582 1 view .LVU686
 2293 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2294              	.LVL229:
 2295              	.L145:
 2296              	.LBB8:
 569:lvgl/src/misc/lv_tlsf.c ****         }
 2297              		.loc 1 569 20 view .LVU687
 2298 0056 0020     		movs	r0, #0
 2299              	.LVL230:
 569:lvgl/src/misc/lv_tlsf.c ****         }
 2300              		.loc 1 569 20 view .LVU688
 2301 0058 FCE7     		b	.L140
 2302              	.LBE8:
 2303              		.cfi_endproc
 2304              	.LFE26:
 2306              		.section	.text.block_locate_free,"ax",%progbits
 2307              		.align	1
 2308              		.syntax unified
 2309              		.thumb
 2310              		.thumb_func
 2312              	block_locate_free:
 2313              	.LVL231:
 2314              	.LFB39:
 755:lvgl/src/misc/lv_tlsf.c ****     int fl = 0, sl = 0;
 2315              		.loc 1 755 1 is_stmt 1 view -0
 2316              		.cfi_startproc
 2317              		@ args = 0, pretend = 0, frame = 8
 2318              		@ frame_needed = 0, uses_anonymous_args = 0
 755:lvgl/src/misc/lv_tlsf.c ****     int fl = 0, sl = 0;
 2319              		.loc 1 755 1 is_stmt 0 view .LVU690
 2320 0000 70B5     		push	{r4, r5, r6, lr}
 2321              		.cfi_def_cfa_offset 16
 2322              		.cfi_offset 4, -16
 2323              		.cfi_offset 5, -12
 2324              		.cfi_offset 6, -8
 2325              		.cfi_offset 14, -4
 2326 0002 82B0     		sub	sp, sp, #8
 2327              		.cfi_def_cfa_offset 24
 756:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = 0;
 2328              		.loc 1 756 5 is_stmt 1 view .LVU691
 756:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = 0;
 2329              		.loc 1 756 9 is_stmt 0 view .LVU692
 2330 0004 0023     		movs	r3, #0
 2331 0006 0193     		str	r3, [sp, #4]
 756:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = 0;
 2332              		.loc 1 756 17 view .LVU693
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 62


 2333 0008 0093     		str	r3, [sp]
 757:lvgl/src/misc/lv_tlsf.c **** 
 2334              		.loc 1 757 5 is_stmt 1 view .LVU694
 2335              	.LVL232:
 759:lvgl/src/misc/lv_tlsf.c ****         mapping_search(size, &fl, &sl);
 2336              		.loc 1 759 5 view .LVU695
 759:lvgl/src/misc/lv_tlsf.c ****         mapping_search(size, &fl, &sl);
 2337              		.loc 1 759 7 is_stmt 0 view .LVU696
 2338 000a E1B1     		cbz	r1, .L151
 2339 000c 0446     		mov	r4, r0
 2340 000e 0E46     		mov	r6, r1
 760:lvgl/src/misc/lv_tlsf.c **** 
 2341              		.loc 1 760 9 is_stmt 1 view .LVU697
 2342 0010 6A46     		mov	r2, sp
 2343 0012 01A9     		add	r1, sp, #4
 2344              	.LVL233:
 760:lvgl/src/misc/lv_tlsf.c **** 
 2345              		.loc 1 760 9 is_stmt 0 view .LVU698
 2346 0014 3046     		mov	r0, r6
 2347              	.LVL234:
 760:lvgl/src/misc/lv_tlsf.c **** 
 2348              		.loc 1 760 9 view .LVU699
 2349 0016 FFF7FEFF 		bl	mapping_search
 2350              	.LVL235:
 768:lvgl/src/misc/lv_tlsf.c ****             block = search_suitable_block(control, &fl, &sl);
 2351              		.loc 1 768 9 is_stmt 1 view .LVU700
 768:lvgl/src/misc/lv_tlsf.c ****             block = search_suitable_block(control, &fl, &sl);
 2352              		.loc 1 768 15 is_stmt 0 view .LVU701
 2353 001a 019B     		ldr	r3, [sp, #4]
 768:lvgl/src/misc/lv_tlsf.c ****             block = search_suitable_block(control, &fl, &sl);
 2354              		.loc 1 768 11 view .LVU702
 2355 001c 0D2B     		cmp	r3, #13
 2356 001e 16DC     		bgt	.L152
 769:lvgl/src/misc/lv_tlsf.c ****         }
 2357              		.loc 1 769 13 is_stmt 1 view .LVU703
 769:lvgl/src/misc/lv_tlsf.c ****         }
 2358              		.loc 1 769 21 is_stmt 0 view .LVU704
 2359 0020 6A46     		mov	r2, sp
 2360 0022 01A9     		add	r1, sp, #4
 2361 0024 2046     		mov	r0, r4
 2362 0026 FFF7FEFF 		bl	search_suitable_block
 2363              	.LVL236:
 773:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_size(block) >= size);
 2364              		.loc 1 773 5 is_stmt 1 view .LVU705
 773:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_size(block) >= size);
 2365              		.loc 1 773 7 is_stmt 0 view .LVU706
 2366 002a 0546     		mov	r5, r0
 2367 002c 60B1     		cbz	r0, .L147
 774:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2368              		.loc 1 774 9 is_stmt 1 view .LVU707
 774:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2369              		.loc 1 774 9 view .LVU708
 2370 002e FFF7FEFF 		bl	block_size
 2371              	.LVL237:
 774:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2372              		.loc 1 774 9 is_stmt 0 view .LVU709
 2373 0032 B042     		cmp	r0, r6
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 63


 2374 0034 00D2     		bcs	.L149
 2375              	.L150:
 774:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2376              		.loc 1 774 9 is_stmt 1 discriminator 1 view .LVU710
 774:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2377              		.loc 1 774 9 discriminator 1 view .LVU711
 774:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2378              		.loc 1 774 9 discriminator 1 view .LVU712
 774:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2379              		.loc 1 774 9 discriminator 1 view .LVU713
 774:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2380              		.loc 1 774 9 discriminator 1 view .LVU714
 774:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2381              		.loc 1 774 9 discriminator 1 view .LVU715
 2382 0036 FEE7     		b	.L150
 2383              	.L149:
 774:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2384              		.loc 1 774 9 discriminator 2 view .LVU716
 775:lvgl/src/misc/lv_tlsf.c ****     }
 2385              		.loc 1 775 9 discriminator 2 view .LVU717
 2386 0038 009B     		ldr	r3, [sp]
 2387 003a 019A     		ldr	r2, [sp, #4]
 2388 003c 2946     		mov	r1, r5
 2389 003e 2046     		mov	r0, r4
 2390 0040 FFF7FEFF 		bl	remove_free_block
 2391              	.LVL238:
 2392 0044 00E0     		b	.L147
 2393              	.LVL239:
 2394              	.L151:
 757:lvgl/src/misc/lv_tlsf.c **** 
 2395              		.loc 1 757 22 is_stmt 0 view .LVU718
 2396 0046 0025     		movs	r5, #0
 2397              	.LVL240:
 2398              	.L147:
 779:lvgl/src/misc/lv_tlsf.c **** 
 2399              		.loc 1 779 1 view .LVU719
 2400 0048 2846     		mov	r0, r5
 2401 004a 02B0     		add	sp, sp, #8
 2402              		.cfi_remember_state
 2403              		.cfi_def_cfa_offset 16
 2404              		@ sp needed
 2405 004c 70BD     		pop	{r4, r5, r6, pc}
 2406              	.LVL241:
 2407              	.L152:
 2408              		.cfi_restore_state
 757:lvgl/src/misc/lv_tlsf.c **** 
 2409              		.loc 1 757 22 view .LVU720
 2410 004e 0025     		movs	r5, #0
 2411              	.LVL242:
 778:lvgl/src/misc/lv_tlsf.c **** }
 2412              		.loc 1 778 5 is_stmt 1 view .LVU721
 778:lvgl/src/misc/lv_tlsf.c **** }
 2413              		.loc 1 778 12 is_stmt 0 view .LVU722
 2414 0050 FAE7     		b	.L147
 2415              		.cfi_endproc
 2416              	.LFE39:
 2418              		.section	.text.lv_tlsf_check,"ax",%progbits
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 64


 2419              		.align	1
 2420              		.global	lv_tlsf_check
 2421              		.syntax unified
 2422              		.thumb
 2423              		.thumb_func
 2425              	lv_tlsf_check:
 2426              	.LVL243:
 2427              	.LFB43:
 839:lvgl/src/misc/lv_tlsf.c ****     int i, j;
 2428              		.loc 1 839 1 is_stmt 1 view -0
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 8
 2431              		@ frame_needed = 0, uses_anonymous_args = 0
 839:lvgl/src/misc/lv_tlsf.c ****     int i, j;
 2432              		.loc 1 839 1 is_stmt 0 view .LVU724
 2433 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2434              		.cfi_def_cfa_offset 24
 2435              		.cfi_offset 4, -24
 2436              		.cfi_offset 5, -20
 2437              		.cfi_offset 6, -16
 2438              		.cfi_offset 7, -12
 2439              		.cfi_offset 8, -8
 2440              		.cfi_offset 14, -4
 2441 0004 82B0     		sub	sp, sp, #8
 2442              		.cfi_def_cfa_offset 32
 2443 0006 0546     		mov	r5, r0
 840:lvgl/src/misc/lv_tlsf.c **** 
 2444              		.loc 1 840 5 is_stmt 1 view .LVU725
 842:lvgl/src/misc/lv_tlsf.c ****     int status = 0;
 2445              		.loc 1 842 5 view .LVU726
 2446              	.LVL244:
 843:lvgl/src/misc/lv_tlsf.c **** 
 2447              		.loc 1 843 5 view .LVU727
 846:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2448              		.loc 1 846 5 view .LVU728
 846:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2449              		.loc 1 846 11 is_stmt 0 view .LVU729
 2450 0008 0026     		movs	r6, #0
 2451              	.LVL245:
 2452              	.L155:
 846:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2453              		.loc 1 846 16 is_stmt 1 discriminator 1 view .LVU730
 846:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2454              		.loc 1 846 5 is_stmt 0 discriminator 1 view .LVU731
 2455 000a 0D2E     		cmp	r6, #13
 2456 000c 4FDC     		bgt	.L182
 847:lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 2457              		.loc 1 847 15 view .LVU732
 2458 000e 0027     		movs	r7, #0
 2459              	.L179:
 2460              	.LVL246:
 847:lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 2461              		.loc 1 847 20 is_stmt 1 discriminator 1 view .LVU733
 847:lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 2462              		.loc 1 847 9 is_stmt 0 discriminator 1 view .LVU734
 2463 0010 1F2F     		cmp	r7, #31
 2464 0012 4ADC     		bgt	.L183
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 65


 2465              	.LBB9:
 848:lvgl/src/misc/lv_tlsf.c ****             const int sl_list = control->sl_bitmap[i];
 2466              		.loc 1 848 13 is_stmt 1 view .LVU735
 848:lvgl/src/misc/lv_tlsf.c ****             const int sl_list = control->sl_bitmap[i];
 2467              		.loc 1 848 57 is_stmt 0 view .LVU736
 2468 0014 0123     		movs	r3, #1
 2469 0016 03FA06F0 		lsl	r0, r3, r6
 2470              	.LVL247:
 849:lvgl/src/misc/lv_tlsf.c ****             const int sl_map = sl_list & (1U << j);
 2471              		.loc 1 849 13 is_stmt 1 view .LVU737
 849:lvgl/src/misc/lv_tlsf.c ****             const int sl_map = sl_list & (1U << j);
 2472              		.loc 1 849 51 is_stmt 0 view .LVU738
 2473 001a 311D     		adds	r1, r6, #4
 2474 001c 05EB8101 		add	r1, r5, r1, lsl #2
 2475 0020 4A68     		ldr	r2, [r1, #4]
 2476              	.LVL248:
 850:lvgl/src/misc/lv_tlsf.c ****             const block_header_t * block = control->blocks[i][j];
 2477              		.loc 1 850 13 is_stmt 1 view .LVU739
 850:lvgl/src/misc/lv_tlsf.c ****             const block_header_t * block = control->blocks[i][j];
 2478              		.loc 1 850 46 is_stmt 0 view .LVU740
 2479 0022 BB40     		lsls	r3, r3, r7
 850:lvgl/src/misc/lv_tlsf.c ****             const block_header_t * block = control->blocks[i][j];
 2480              		.loc 1 850 40 view .LVU741
 2481 0024 1340     		ands	r3, r3, r2
 2482              	.LVL249:
 851:lvgl/src/misc/lv_tlsf.c **** 
 2483              		.loc 1 851 13 is_stmt 1 view .LVU742
 851:lvgl/src/misc/lv_tlsf.c **** 
 2484              		.loc 1 851 36 is_stmt 0 view .LVU743
 2485 0026 07EB4611 		add	r1, r7, r6, lsl #5
 2486 002a 1231     		adds	r1, r1, #18
 2487 002c 05EB8101 		add	r1, r5, r1, lsl #2
 2488 0030 4C68     		ldr	r4, [r1, #4]
 2489              	.LVL250:
 854:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!sl_map && "second-level map must be null");
 2490              		.loc 1 854 13 is_stmt 1 view .LVU744
 854:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!sl_map && "second-level map must be null");
 2491              		.loc 1 854 15 is_stmt 0 view .LVU745
 2492 0032 2969     		ldr	r1, [r5, #16]
 2493 0034 0142     		tst	r1, r0
 2494 0036 00D1     		bne	.L156
 855:lvgl/src/misc/lv_tlsf.c ****             }
 2495              		.loc 1 855 17 is_stmt 1 view .LVU746
 855:lvgl/src/misc/lv_tlsf.c ****             }
 2496              		.loc 1 855 17 view .LVU747
 2497 0038 1BB9     		cbnz	r3, .L157
 2498              	.L156:
 855:lvgl/src/misc/lv_tlsf.c ****             }
 2499              		.loc 1 855 72 discriminator 5 view .LVU748
 858:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block == &control->block_null && "block list must be null");
 2500              		.loc 1 858 13 discriminator 5 view .LVU749
 858:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block == &control->block_null && "block list must be null");
 2501              		.loc 1 858 15 is_stmt 0 discriminator 5 view .LVU750
 2502 003a 1BB9     		cbnz	r3, .L158
 859:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2503              		.loc 1 859 17 is_stmt 1 view .LVU751
 859:lvgl/src/misc/lv_tlsf.c ****                 continue;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 66


 2504              		.loc 1 859 17 view .LVU752
 2505 003c A542     		cmp	r5, r4
 2506 003e 32D0     		beq	.L159
 2507              	.L160:
 859:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2508              		.loc 1 859 17 discriminator 2 view .LVU753
 859:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2509              		.loc 1 859 17 discriminator 2 view .LVU754
 859:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2510              		.loc 1 859 17 discriminator 2 view .LVU755
 859:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2511              		.loc 1 859 17 discriminator 2 view .LVU756
 859:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2512              		.loc 1 859 17 discriminator 2 view .LVU757
 859:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2513              		.loc 1 859 17 discriminator 2 view .LVU758
 2514 0040 FEE7     		b	.L160
 2515              	.LVL251:
 2516              	.L157:
 855:lvgl/src/misc/lv_tlsf.c ****             }
 2517              		.loc 1 855 17 discriminator 1 view .LVU759
 855:lvgl/src/misc/lv_tlsf.c ****             }
 2518              		.loc 1 855 17 discriminator 1 view .LVU760
 855:lvgl/src/misc/lv_tlsf.c ****             }
 2519              		.loc 1 855 17 discriminator 1 view .LVU761
 855:lvgl/src/misc/lv_tlsf.c ****             }
 2520              		.loc 1 855 17 discriminator 1 view .LVU762
 855:lvgl/src/misc/lv_tlsf.c ****             }
 2521              		.loc 1 855 17 discriminator 1 view .LVU763
 855:lvgl/src/misc/lv_tlsf.c ****             }
 2522              		.loc 1 855 17 discriminator 1 view .LVU764
 2523 0042 FEE7     		b	.L157
 2524              	.L158:
 864:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2525              		.loc 1 864 13 view .LVU765
 864:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2526              		.loc 1 864 13 view .LVU766
 2527 0044 3AB3     		cbz	r2, .L162
 864:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2528              		.loc 1 864 13 discriminator 5 view .LVU767
 864:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2529              		.loc 1 864 13 discriminator 5 view .LVU768
 864:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2530              		.loc 1 864 73 discriminator 5 view .LVU769
 865:lvgl/src/misc/lv_tlsf.c **** 
 2531              		.loc 1 865 13 discriminator 5 view .LVU770
 865:lvgl/src/misc/lv_tlsf.c **** 
 2532              		.loc 1 865 13 discriminator 5 view .LVU771
 2533 0046 A542     		cmp	r5, r4
 2534 0048 26D0     		beq	.L164
 2535              	.LVL252:
 2536              	.L163:
 867:lvgl/src/misc/lv_tlsf.c ****                 int fli, sli;
 2537              		.loc 1 867 18 view .LVU772
 2538 004a A542     		cmp	r5, r4
 2539 004c 2BD0     		beq	.L159
 2540              	.LBB10:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 67


 868:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_free(block) && "block should be free");
 2541              		.loc 1 868 17 view .LVU773
 869:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2542              		.loc 1 869 17 view .LVU774
 869:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2543              		.loc 1 869 17 view .LVU775
 2544 004e 2046     		mov	r0, r4
 2545 0050 FFF7FEFF 		bl	block_is_free
 2546              	.LVL253:
 2547 0054 08B3     		cbz	r0, .L166
 869:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2548              		.loc 1 869 17 discriminator 9 view .LVU776
 869:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2549              		.loc 1 869 17 discriminator 9 view .LVU777
 869:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2550              		.loc 1 869 76 discriminator 9 view .LVU778
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2551              		.loc 1 870 17 discriminator 9 view .LVU779
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2552              		.loc 1 870 17 discriminator 9 view .LVU780
 2553 0056 2046     		mov	r0, r4
 2554 0058 FFF7FEFF 		bl	block_is_prev_free
 2555              	.LVL254:
 2556 005c F0B9     		cbnz	r0, .L168
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2557              		.loc 1 870 17 discriminator 5 view .LVU781
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2558              		.loc 1 870 17 discriminator 5 view .LVU782
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2559              		.loc 1 870 90 discriminator 5 view .LVU783
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2560              		.loc 1 871 17 discriminator 5 view .LVU784
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2561              		.loc 1 871 17 discriminator 5 view .LVU785
 2562 005e 2046     		mov	r0, r4
 2563 0060 FFF7FEFF 		bl	block_next
 2564              	.LVL255:
 2565 0064 8046     		mov	r8, r0
 2566 0066 FFF7FEFF 		bl	block_is_free
 2567              	.LVL256:
 2568 006a C0B9     		cbnz	r0, .L170
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2569              		.loc 1 871 17 discriminator 5 view .LVU786
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2570              		.loc 1 871 17 discriminator 5 view .LVU787
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2571              		.loc 1 871 97 discriminator 5 view .LVU788
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2572              		.loc 1 872 17 discriminator 5 view .LVU789
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2573              		.loc 1 872 17 discriminator 5 view .LVU790
 2574 006c 4046     		mov	r0, r8
 2575 006e FFF7FEFF 		bl	block_is_prev_free
 2576              	.LVL257:
 2577 0072 A8B1     		cbz	r0, .L172
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2578              		.loc 1 872 17 discriminator 9 view .LVU791
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 68


 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2579              		.loc 1 872 17 discriminator 9 view .LVU792
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2580              		.loc 1 872 93 discriminator 9 view .LVU793
 873:lvgl/src/misc/lv_tlsf.c **** 
 2581              		.loc 1 873 17 discriminator 9 view .LVU794
 873:lvgl/src/misc/lv_tlsf.c **** 
 2582              		.loc 1 873 17 discriminator 9 view .LVU795
 2583 0074 2046     		mov	r0, r4
 2584 0076 FFF7FEFF 		bl	block_size
 2585              	.LVL258:
 2586 007a 0B28     		cmp	r0, #11
 2587 007c 11D9     		bls	.L174
 873:lvgl/src/misc/lv_tlsf.c **** 
 2588              		.loc 1 873 17 discriminator 9 view .LVU796
 873:lvgl/src/misc/lv_tlsf.c **** 
 2589              		.loc 1 873 17 discriminator 9 view .LVU797
 873:lvgl/src/misc/lv_tlsf.c **** 
 2590              		.loc 1 873 93 discriminator 9 view .LVU798
 875:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(fli == i && sli == j && "block size indexed in wrong list");
 2591              		.loc 1 875 17 discriminator 9 view .LVU799
 2592 007e 01AA     		add	r2, sp, #4
 2593 0080 6946     		mov	r1, sp
 2594 0082 FFF7FEFF 		bl	mapping_insert
 2595              	.LVL259:
 876:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2596              		.loc 1 876 17 discriminator 9 view .LVU800
 876:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2597              		.loc 1 876 17 discriminator 9 view .LVU801
 2598 0086 009B     		ldr	r3, [sp]
 2599 0088 B342     		cmp	r3, r6
 2600 008a 0BD1     		bne	.L175
 876:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2601              		.loc 1 876 17 is_stmt 0 discriminator 2 view .LVU802
 2602 008c 019B     		ldr	r3, [sp, #4]
 2603 008e BB42     		cmp	r3, r7
 2604 0090 08D1     		bne	.L175
 876:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2605              		.loc 1 876 17 is_stmt 1 discriminator 9 view .LVU803
 876:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2606              		.loc 1 876 17 discriminator 9 view .LVU804
 876:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2607              		.loc 1 876 88 discriminator 9 view .LVU805
 877:lvgl/src/misc/lv_tlsf.c ****             }
 2608              		.loc 1 877 17 discriminator 9 view .LVU806
 877:lvgl/src/misc/lv_tlsf.c ****             }
 2609              		.loc 1 877 23 is_stmt 0 discriminator 9 view .LVU807
 2610 0092 A468     		ldr	r4, [r4, #8]
 2611              	.LVL260:
 877:lvgl/src/misc/lv_tlsf.c ****             }
 2612              		.loc 1 877 23 discriminator 9 view .LVU808
 2613 0094 D9E7     		b	.L163
 2614              	.LVL261:
 2615              	.L162:
 877:lvgl/src/misc/lv_tlsf.c ****             }
 2616              		.loc 1 877 23 discriminator 9 view .LVU809
 2617              	.LBE10:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 69


 864:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2618              		.loc 1 864 13 is_stmt 1 discriminator 3 view .LVU810
 864:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2619              		.loc 1 864 13 discriminator 3 view .LVU811
 864:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2620              		.loc 1 864 13 discriminator 3 view .LVU812
 864:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2621              		.loc 1 864 13 discriminator 3 view .LVU813
 864:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2622              		.loc 1 864 13 discriminator 3 view .LVU814
 864:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2623              		.loc 1 864 13 discriminator 3 view .LVU815
 2624 0096 FEE7     		b	.L162
 2625              	.L164:
 865:lvgl/src/misc/lv_tlsf.c **** 
 2626              		.loc 1 865 13 discriminator 4 view .LVU816
 865:lvgl/src/misc/lv_tlsf.c **** 
 2627              		.loc 1 865 13 discriminator 4 view .LVU817
 865:lvgl/src/misc/lv_tlsf.c **** 
 2628              		.loc 1 865 13 discriminator 4 view .LVU818
 865:lvgl/src/misc/lv_tlsf.c **** 
 2629              		.loc 1 865 13 discriminator 4 view .LVU819
 865:lvgl/src/misc/lv_tlsf.c **** 
 2630              		.loc 1 865 13 discriminator 4 view .LVU820
 865:lvgl/src/misc/lv_tlsf.c **** 
 2631              		.loc 1 865 13 discriminator 4 view .LVU821
 2632 0098 FEE7     		b	.L164
 2633              	.LVL262:
 2634              	.L166:
 2635              	.LBB11:
 869:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2636              		.loc 1 869 17 discriminator 5 view .LVU822
 869:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2637              		.loc 1 869 17 discriminator 5 view .LVU823
 869:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2638              		.loc 1 869 17 discriminator 5 view .LVU824
 869:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2639              		.loc 1 869 17 discriminator 5 view .LVU825
 869:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2640              		.loc 1 869 17 discriminator 5 view .LVU826
 869:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2641              		.loc 1 869 17 discriminator 5 view .LVU827
 2642 009a FEE7     		b	.L166
 2643              	.L168:
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2644              		.loc 1 870 17 discriminator 6 view .LVU828
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2645              		.loc 1 870 17 discriminator 6 view .LVU829
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2646              		.loc 1 870 17 discriminator 6 view .LVU830
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2647              		.loc 1 870 17 discriminator 6 view .LVU831
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2648              		.loc 1 870 17 discriminator 6 view .LVU832
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2649              		.loc 1 870 17 discriminator 6 view .LVU833
 2650 009c FEE7     		b	.L168
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 70


 2651              	.L170:
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2652              		.loc 1 871 17 discriminator 7 view .LVU834
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2653              		.loc 1 871 17 discriminator 7 view .LVU835
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2654              		.loc 1 871 17 discriminator 7 view .LVU836
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2655              		.loc 1 871 17 discriminator 7 view .LVU837
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2656              		.loc 1 871 17 discriminator 7 view .LVU838
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2657              		.loc 1 871 17 discriminator 7 view .LVU839
 2658 009e FEE7     		b	.L170
 2659              	.L172:
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2660              		.loc 1 872 17 discriminator 8 view .LVU840
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2661              		.loc 1 872 17 discriminator 8 view .LVU841
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2662              		.loc 1 872 17 discriminator 8 view .LVU842
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2663              		.loc 1 872 17 discriminator 8 view .LVU843
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2664              		.loc 1 872 17 discriminator 8 view .LVU844
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2665              		.loc 1 872 17 discriminator 8 view .LVU845
 2666 00a0 FEE7     		b	.L172
 2667              	.L174:
 873:lvgl/src/misc/lv_tlsf.c **** 
 2668              		.loc 1 873 17 discriminator 9 view .LVU846
 873:lvgl/src/misc/lv_tlsf.c **** 
 2669              		.loc 1 873 17 discriminator 9 view .LVU847
 873:lvgl/src/misc/lv_tlsf.c **** 
 2670              		.loc 1 873 17 discriminator 9 view .LVU848
 873:lvgl/src/misc/lv_tlsf.c **** 
 2671              		.loc 1 873 17 discriminator 9 view .LVU849
 873:lvgl/src/misc/lv_tlsf.c **** 
 2672              		.loc 1 873 17 discriminator 9 view .LVU850
 873:lvgl/src/misc/lv_tlsf.c **** 
 2673              		.loc 1 873 17 discriminator 9 view .LVU851
 2674 00a2 FEE7     		b	.L174
 2675              	.L175:
 876:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2676              		.loc 1 876 17 discriminator 10 view .LVU852
 876:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2677              		.loc 1 876 17 discriminator 10 view .LVU853
 876:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2678              		.loc 1 876 17 discriminator 10 view .LVU854
 876:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2679              		.loc 1 876 17 discriminator 10 view .LVU855
 876:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2680              		.loc 1 876 17 discriminator 10 view .LVU856
 876:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2681              		.loc 1 876 17 discriminator 10 view .LVU857
 2682 00a4 FEE7     		b	.L175
 2683              	.L159:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 71


 876:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2684              		.loc 1 876 17 is_stmt 0 discriminator 10 view .LVU858
 2685              	.LBE11:
 2686              	.LBE9:
 847:lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 2687              		.loc 1 847 40 is_stmt 1 discriminator 2 view .LVU859
 2688 00a6 0137     		adds	r7, r7, #1
 2689              	.LVL263:
 847:lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 2690              		.loc 1 847 40 is_stmt 0 discriminator 2 view .LVU860
 2691 00a8 B2E7     		b	.L179
 2692              	.LVL264:
 2693              	.L183:
 846:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2694              		.loc 1 846 36 is_stmt 1 discriminator 2 view .LVU861
 2695 00aa 0136     		adds	r6, r6, #1
 2696              	.LVL265:
 846:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2697              		.loc 1 846 36 is_stmt 0 discriminator 2 view .LVU862
 2698 00ac ADE7     		b	.L155
 2699              	.LVL266:
 2700              	.L182:
 882:lvgl/src/misc/lv_tlsf.c **** }
 2701              		.loc 1 882 5 is_stmt 1 view .LVU863
 883:lvgl/src/misc/lv_tlsf.c **** 
 2702              		.loc 1 883 1 is_stmt 0 view .LVU864
 2703 00ae 0020     		movs	r0, #0
 2704 00b0 02B0     		add	sp, sp, #8
 2705              		.cfi_def_cfa_offset 24
 2706              		@ sp needed
 2707 00b2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 883:lvgl/src/misc/lv_tlsf.c **** 
 2708              		.loc 1 883 1 view .LVU865
 2709              		.cfi_endproc
 2710              	.LFE43:
 2712              		.section	.text.lv_tlsf_walk_pool,"ax",%progbits
 2713              		.align	1
 2714              		.global	lv_tlsf_walk_pool
 2715              		.syntax unified
 2716              		.thumb
 2717              		.thumb_func
 2719              	lv_tlsf_walk_pool:
 2720              	.LVL267:
 2721              	.LFB45:
 892:lvgl/src/misc/lv_tlsf.c **** 
 893:lvgl/src/misc/lv_tlsf.c **** void lv_tlsf_walk_pool(lv_pool_t pool, lv_tlsf_walker walker, void * user)
 894:lvgl/src/misc/lv_tlsf.c **** {
 2722              		.loc 1 894 1 is_stmt 1 view -0
 2723              		.cfi_startproc
 2724              		@ args = 0, pretend = 0, frame = 0
 2725              		@ frame_needed = 0, uses_anonymous_args = 0
 2726              		.loc 1 894 1 is_stmt 0 view .LVU867
 2727 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2728              		.cfi_def_cfa_offset 24
 2729              		.cfi_offset 4, -24
 2730              		.cfi_offset 5, -20
 2731              		.cfi_offset 6, -16
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 72


 2732              		.cfi_offset 7, -12
 2733              		.cfi_offset 8, -8
 2734              		.cfi_offset 14, -4
 2735 0004 1746     		mov	r7, r2
 895:lvgl/src/misc/lv_tlsf.c ****     lv_tlsf_walker pool_walker = walker ? walker : default_walker;
 2736              		.loc 1 895 5 is_stmt 1 view .LVU868
 2737              		.loc 1 895 50 is_stmt 0 view .LVU869
 2738 0006 8846     		mov	r8, r1
 2739 0008 29B1     		cbz	r1, .L191
 2740              	.L185:
 2741              	.LVL268:
 896:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block =
 2742              		.loc 1 896 5 is_stmt 1 discriminator 4 view .LVU870
 897:lvgl/src/misc/lv_tlsf.c ****         offset_to_block(pool, -(int)block_header_overhead);
 2743              		.loc 1 897 9 is_stmt 0 discriminator 4 view .LVU871
 2744 000a 6FF00301 		mvn	r1, #3
 2745              	.LVL269:
 2746              		.loc 1 897 9 discriminator 4 view .LVU872
 2747 000e FFF7FEFF 		bl	offset_to_block
 2748              	.LVL270:
 2749              		.loc 1 897 9 discriminator 4 view .LVU873
 2750 0012 0446     		mov	r4, r0
 2751              	.LVL271:
 898:lvgl/src/misc/lv_tlsf.c **** 
 899:lvgl/src/misc/lv_tlsf.c ****     while(block && !block_is_last(block)) {
 2752              		.loc 1 899 5 is_stmt 1 discriminator 4 view .LVU874
 2753              		.loc 1 899 10 is_stmt 0 discriminator 4 view .LVU875
 2754 0014 18E0     		b	.L186
 2755              	.LVL272:
 2756              	.L191:
 895:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block =
 2757              		.loc 1 895 50 view .LVU876
 2758 0016 DFF84080 		ldr	r8, .L192
 2759 001a F6E7     		b	.L185
 2760              	.LVL273:
 2761              	.L188:
 900:lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2762              		.loc 1 900 9 is_stmt 1 view .LVU877
 2763 001c 2046     		mov	r0, r4
 2764 001e FFF7FEFF 		bl	block_to_ptr
 2765              	.LVL274:
 2766 0022 0546     		mov	r5, r0
 2767 0024 2046     		mov	r0, r4
 2768 0026 FFF7FEFF 		bl	block_size
 2769              	.LVL275:
 2770 002a 0646     		mov	r6, r0
 901:lvgl/src/misc/lv_tlsf.c ****             block_to_ptr(block),
 902:lvgl/src/misc/lv_tlsf.c ****             block_size(block),
 903:lvgl/src/misc/lv_tlsf.c ****             !block_is_free(block),
 2771              		.loc 1 903 14 is_stmt 0 view .LVU878
 2772 002c 2046     		mov	r0, r4
 2773 002e FFF7FEFF 		bl	block_is_free
 2774              	.LVL276:
 900:lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2775              		.loc 1 900 9 view .LVU879
 2776 0032 3B46     		mov	r3, r7
 2777 0034 B0FA80F2 		clz	r2, r0
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 73


 2778 0038 5209     		lsrs	r2, r2, #5
 2779 003a 3146     		mov	r1, r6
 2780 003c 2846     		mov	r0, r5
 2781 003e C047     		blx	r8
 2782              	.LVL277:
 904:lvgl/src/misc/lv_tlsf.c ****             user);
 905:lvgl/src/misc/lv_tlsf.c ****         block = block_next(block);
 2783              		.loc 1 905 9 is_stmt 1 view .LVU880
 2784              		.loc 1 905 17 is_stmt 0 view .LVU881
 2785 0040 2046     		mov	r0, r4
 2786 0042 FFF7FEFF 		bl	block_next
 2787              	.LVL278:
 2788 0046 0446     		mov	r4, r0
 2789              	.LVL279:
 2790              	.L186:
 899:lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2791              		.loc 1 899 10 is_stmt 1 view .LVU882
 2792 0048 24B1     		cbz	r4, .L184
 899:lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2793              		.loc 1 899 21 is_stmt 0 discriminator 1 view .LVU883
 2794 004a 2046     		mov	r0, r4
 899:lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2795              		.loc 1 899 21 discriminator 1 view .LVU884
 2796 004c FFF7FEFF 		bl	block_is_last
 2797              	.LVL280:
 899:lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2798              		.loc 1 899 17 discriminator 1 view .LVU885
 2799 0050 0028     		cmp	r0, #0
 2800 0052 E3D0     		beq	.L188
 2801              	.L184:
 906:lvgl/src/misc/lv_tlsf.c ****     }
 907:lvgl/src/misc/lv_tlsf.c **** }
 2802              		.loc 1 907 1 view .LVU886
 2803 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2804              	.LVL281:
 2805              	.L193:
 2806              		.loc 1 907 1 view .LVU887
 2807              		.align	2
 2808              	.L192:
 2809 0058 00000000 		.word	default_walker
 2810              		.cfi_endproc
 2811              	.LFE45:
 2813              		.section	.text.lv_tlsf_block_size,"ax",%progbits
 2814              		.align	1
 2815              		.global	lv_tlsf_block_size
 2816              		.syntax unified
 2817              		.thumb
 2818              		.thumb_func
 2820              	lv_tlsf_block_size:
 2821              	.LVL282:
 2822              	.LFB46:
 908:lvgl/src/misc/lv_tlsf.c **** 
 909:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_block_size(void * ptr)
 910:lvgl/src/misc/lv_tlsf.c **** {
 2823              		.loc 1 910 1 is_stmt 1 view -0
 2824              		.cfi_startproc
 2825              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 74


 2826              		@ frame_needed = 0, uses_anonymous_args = 0
 911:lvgl/src/misc/lv_tlsf.c ****     size_t size = 0;
 2827              		.loc 1 911 5 view .LVU889
 912:lvgl/src/misc/lv_tlsf.c ****     if(ptr) {
 2828              		.loc 1 912 5 view .LVU890
 2829              		.loc 1 912 7 is_stmt 0 view .LVU891
 2830 0000 28B1     		cbz	r0, .L196
 910:lvgl/src/misc/lv_tlsf.c ****     size_t size = 0;
 2831              		.loc 1 910 1 view .LVU892
 2832 0002 08B5     		push	{r3, lr}
 2833              		.cfi_def_cfa_offset 8
 2834              		.cfi_offset 3, -8
 2835              		.cfi_offset 14, -4
 2836              	.LBB12:
 913:lvgl/src/misc/lv_tlsf.c ****         const block_header_t * block = block_from_ptr(ptr);
 2837              		.loc 1 913 9 is_stmt 1 view .LVU893
 2838              		.loc 1 913 40 is_stmt 0 view .LVU894
 2839 0004 FFF7FEFF 		bl	block_from_ptr
 2840              	.LVL283:
 914:lvgl/src/misc/lv_tlsf.c ****         size = block_size(block);
 2841              		.loc 1 914 9 is_stmt 1 view .LVU895
 2842              		.loc 1 914 16 is_stmt 0 view .LVU896
 2843 0008 FFF7FEFF 		bl	block_size
 2844              	.LVL284:
 2845              		.loc 1 914 16 view .LVU897
 2846              	.LBE12:
 915:lvgl/src/misc/lv_tlsf.c ****     }
 916:lvgl/src/misc/lv_tlsf.c ****     return size;
 917:lvgl/src/misc/lv_tlsf.c **** }
 2847              		.loc 1 917 1 view .LVU898
 2848 000c 08BD     		pop	{r3, pc}
 2849              	.LVL285:
 2850              	.L196:
 2851              		.cfi_def_cfa_offset 0
 2852              		.cfi_restore 3
 2853              		.cfi_restore 14
 911:lvgl/src/misc/lv_tlsf.c ****     if(ptr) {
 2854              		.loc 1 911 12 view .LVU899
 2855 000e 0020     		movs	r0, #0
 2856              	.LVL286:
 916:lvgl/src/misc/lv_tlsf.c **** }
 2857              		.loc 1 916 5 is_stmt 1 view .LVU900
 2858              		.loc 1 917 1 is_stmt 0 view .LVU901
 2859 0010 7047     		bx	lr
 2860              		.cfi_endproc
 2861              	.LFE46:
 2863              		.section	.text.lv_tlsf_check_pool,"ax",%progbits
 2864              		.align	1
 2865              		.global	lv_tlsf_check_pool
 2866              		.syntax unified
 2867              		.thumb
 2868              		.thumb_func
 2870              	lv_tlsf_check_pool:
 2871              	.LVL287:
 2872              	.LFB47:
 918:lvgl/src/misc/lv_tlsf.c **** 
 919:lvgl/src/misc/lv_tlsf.c **** int lv_tlsf_check_pool(lv_pool_t pool)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 75


 920:lvgl/src/misc/lv_tlsf.c **** {
 2873              		.loc 1 920 1 is_stmt 1 view -0
 2874              		.cfi_startproc
 2875              		@ args = 0, pretend = 0, frame = 8
 2876              		@ frame_needed = 0, uses_anonymous_args = 0
 2877              		.loc 1 920 1 is_stmt 0 view .LVU903
 2878 0000 00B5     		push	{lr}
 2879              		.cfi_def_cfa_offset 4
 2880              		.cfi_offset 14, -4
 2881 0002 83B0     		sub	sp, sp, #12
 2882              		.cfi_def_cfa_offset 16
 921:lvgl/src/misc/lv_tlsf.c ****     /* Check that the blocks are physically correct. */
 922:lvgl/src/misc/lv_tlsf.c ****     integrity_t integ = { 0, 0 };
 2883              		.loc 1 922 5 is_stmt 1 view .LVU904
 2884              		.loc 1 922 17 is_stmt 0 view .LVU905
 2885 0004 0023     		movs	r3, #0
 2886 0006 0093     		str	r3, [sp]
 2887 0008 0193     		str	r3, [sp, #4]
 923:lvgl/src/misc/lv_tlsf.c ****     lv_tlsf_walk_pool(pool, integrity_walker, &integ);
 2888              		.loc 1 923 5 is_stmt 1 view .LVU906
 2889 000a 6A46     		mov	r2, sp
 2890 000c 0349     		ldr	r1, .L203
 2891 000e FFF7FEFF 		bl	lv_tlsf_walk_pool
 2892              	.LVL288:
 924:lvgl/src/misc/lv_tlsf.c **** 
 925:lvgl/src/misc/lv_tlsf.c ****     return integ.status;
 2893              		.loc 1 925 5 view .LVU907
 926:lvgl/src/misc/lv_tlsf.c **** }
 2894              		.loc 1 926 1 is_stmt 0 view .LVU908
 2895 0012 0198     		ldr	r0, [sp, #4]
 2896 0014 03B0     		add	sp, sp, #12
 2897              		.cfi_def_cfa_offset 4
 2898              		@ sp needed
 2899 0016 5DF804FB 		ldr	pc, [sp], #4
 2900              	.L204:
 2901 001a 00BF     		.align	2
 2902              	.L203:
 2903 001c 00000000 		.word	integrity_walker
 2904              		.cfi_endproc
 2905              	.LFE47:
 2907              		.section	.text.lv_tlsf_size,"ax",%progbits
 2908              		.align	1
 2909              		.global	lv_tlsf_size
 2910              		.syntax unified
 2911              		.thumb
 2912              		.thumb_func
 2914              	lv_tlsf_size:
 2915              	.LFB48:
 927:lvgl/src/misc/lv_tlsf.c **** 
 928:lvgl/src/misc/lv_tlsf.c **** /*
 929:lvgl/src/misc/lv_tlsf.c **** ** Size of the TLSF structures in a given memory block passed to
 930:lvgl/src/misc/lv_tlsf.c **** ** lv_tlsf_create, equal to the size of a control_t
 931:lvgl/src/misc/lv_tlsf.c **** */
 932:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_size(void)
 933:lvgl/src/misc/lv_tlsf.c **** {
 2916              		.loc 1 933 1 is_stmt 1 view -0
 2917              		.cfi_startproc
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 76


 2918              		@ args = 0, pretend = 0, frame = 0
 2919              		@ frame_needed = 0, uses_anonymous_args = 0
 2920              		@ link register save eliminated.
 934:lvgl/src/misc/lv_tlsf.c ****     return sizeof(control_t);
 2921              		.loc 1 934 5 view .LVU910
 935:lvgl/src/misc/lv_tlsf.c **** }
 2922              		.loc 1 935 1 is_stmt 0 view .LVU911
 2923 0000 40F24C70 		movw	r0, #1868
 2924 0004 7047     		bx	lr
 2925              		.cfi_endproc
 2926              	.LFE48:
 2928              		.section	.text.lv_tlsf_align_size,"ax",%progbits
 2929              		.align	1
 2930              		.global	lv_tlsf_align_size
 2931              		.syntax unified
 2932              		.thumb
 2933              		.thumb_func
 2935              	lv_tlsf_align_size:
 2936              	.LFB49:
 936:lvgl/src/misc/lv_tlsf.c **** 
 937:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_align_size(void)
 938:lvgl/src/misc/lv_tlsf.c **** {
 2937              		.loc 1 938 1 is_stmt 1 view -0
 2938              		.cfi_startproc
 2939              		@ args = 0, pretend = 0, frame = 0
 2940              		@ frame_needed = 0, uses_anonymous_args = 0
 2941              		@ link register save eliminated.
 939:lvgl/src/misc/lv_tlsf.c ****     return ALIGN_SIZE;
 2942              		.loc 1 939 5 view .LVU913
 940:lvgl/src/misc/lv_tlsf.c **** }
 2943              		.loc 1 940 1 is_stmt 0 view .LVU914
 2944 0000 0420     		movs	r0, #4
 2945 0002 7047     		bx	lr
 2946              		.cfi_endproc
 2947              	.LFE49:
 2949              		.section	.text.lv_tlsf_block_size_min,"ax",%progbits
 2950              		.align	1
 2951              		.global	lv_tlsf_block_size_min
 2952              		.syntax unified
 2953              		.thumb
 2954              		.thumb_func
 2956              	lv_tlsf_block_size_min:
 2957              	.LFB50:
 941:lvgl/src/misc/lv_tlsf.c **** 
 942:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_block_size_min(void)
 943:lvgl/src/misc/lv_tlsf.c **** {
 2958              		.loc 1 943 1 is_stmt 1 view -0
 2959              		.cfi_startproc
 2960              		@ args = 0, pretend = 0, frame = 0
 2961              		@ frame_needed = 0, uses_anonymous_args = 0
 2962              		@ link register save eliminated.
 944:lvgl/src/misc/lv_tlsf.c ****     return block_size_min;
 2963              		.loc 1 944 5 view .LVU916
 945:lvgl/src/misc/lv_tlsf.c **** }
 2964              		.loc 1 945 1 is_stmt 0 view .LVU917
 2965 0000 0C20     		movs	r0, #12
 2966 0002 7047     		bx	lr
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 77


 2967              		.cfi_endproc
 2968              	.LFE50:
 2970              		.section	.text.lv_tlsf_block_size_max,"ax",%progbits
 2971              		.align	1
 2972              		.global	lv_tlsf_block_size_max
 2973              		.syntax unified
 2974              		.thumb
 2975              		.thumb_func
 2977              	lv_tlsf_block_size_max:
 2978              	.LFB51:
 946:lvgl/src/misc/lv_tlsf.c **** 
 947:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_block_size_max(void)
 948:lvgl/src/misc/lv_tlsf.c **** {
 2979              		.loc 1 948 1 is_stmt 1 view -0
 2980              		.cfi_startproc
 2981              		@ args = 0, pretend = 0, frame = 0
 2982              		@ frame_needed = 0, uses_anonymous_args = 0
 2983              		@ link register save eliminated.
 949:lvgl/src/misc/lv_tlsf.c ****     return block_size_max;
 2984              		.loc 1 949 5 view .LVU919
 950:lvgl/src/misc/lv_tlsf.c **** }
 2985              		.loc 1 950 1 is_stmt 0 view .LVU920
 2986 0000 4FF48010 		mov	r0, #1048576
 2987 0004 7047     		bx	lr
 2988              		.cfi_endproc
 2989              	.LFE51:
 2991              		.section	.text.lv_tlsf_pool_overhead,"ax",%progbits
 2992              		.align	1
 2993              		.global	lv_tlsf_pool_overhead
 2994              		.syntax unified
 2995              		.thumb
 2996              		.thumb_func
 2998              	lv_tlsf_pool_overhead:
 2999              	.LFB52:
 951:lvgl/src/misc/lv_tlsf.c **** 
 952:lvgl/src/misc/lv_tlsf.c **** /*
 953:lvgl/src/misc/lv_tlsf.c **** ** Overhead of the TLSF structures in a given memory block passed to
 954:lvgl/src/misc/lv_tlsf.c **** ** lv_tlsf_add_pool, equal to the overhead of a free block and the
 955:lvgl/src/misc/lv_tlsf.c **** ** sentinel block.
 956:lvgl/src/misc/lv_tlsf.c **** */
 957:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_pool_overhead(void)
 958:lvgl/src/misc/lv_tlsf.c **** {
 3000              		.loc 1 958 1 is_stmt 1 view -0
 3001              		.cfi_startproc
 3002              		@ args = 0, pretend = 0, frame = 0
 3003              		@ frame_needed = 0, uses_anonymous_args = 0
 3004              		@ link register save eliminated.
 959:lvgl/src/misc/lv_tlsf.c ****     return 2 * block_header_overhead;
 3005              		.loc 1 959 5 view .LVU922
 960:lvgl/src/misc/lv_tlsf.c **** }
 3006              		.loc 1 960 1 is_stmt 0 view .LVU923
 3007 0000 0820     		movs	r0, #8
 3008 0002 7047     		bx	lr
 3009              		.cfi_endproc
 3010              	.LFE52:
 3012              		.section	.text.lv_tlsf_alloc_overhead,"ax",%progbits
 3013              		.align	1
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 78


 3014              		.global	lv_tlsf_alloc_overhead
 3015              		.syntax unified
 3016              		.thumb
 3017              		.thumb_func
 3019              	lv_tlsf_alloc_overhead:
 3020              	.LFB53:
 961:lvgl/src/misc/lv_tlsf.c **** 
 962:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_alloc_overhead(void)
 963:lvgl/src/misc/lv_tlsf.c **** {
 3021              		.loc 1 963 1 is_stmt 1 view -0
 3022              		.cfi_startproc
 3023              		@ args = 0, pretend = 0, frame = 0
 3024              		@ frame_needed = 0, uses_anonymous_args = 0
 3025              		@ link register save eliminated.
 964:lvgl/src/misc/lv_tlsf.c ****     return block_header_overhead;
 3026              		.loc 1 964 5 view .LVU925
 965:lvgl/src/misc/lv_tlsf.c **** }
 3027              		.loc 1 965 1 is_stmt 0 view .LVU926
 3028 0000 0420     		movs	r0, #4
 3029 0002 7047     		bx	lr
 3030              		.cfi_endproc
 3031              	.LFE53:
 3033              		.section	.text.lv_tlsf_add_pool,"ax",%progbits
 3034              		.align	1
 3035              		.global	lv_tlsf_add_pool
 3036              		.syntax unified
 3037              		.thumb
 3038              		.thumb_func
 3040              	lv_tlsf_add_pool:
 3041              	.LVL289:
 3042              	.LFB54:
 966:lvgl/src/misc/lv_tlsf.c **** 
 967:lvgl/src/misc/lv_tlsf.c **** lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
 968:lvgl/src/misc/lv_tlsf.c **** {
 3043              		.loc 1 968 1 is_stmt 1 view -0
 3044              		.cfi_startproc
 3045              		@ args = 0, pretend = 0, frame = 0
 3046              		@ frame_needed = 0, uses_anonymous_args = 0
 3047              		.loc 1 968 1 is_stmt 0 view .LVU928
 3048 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3049              		.cfi_def_cfa_offset 24
 3050              		.cfi_offset 3, -24
 3051              		.cfi_offset 4, -20
 3052              		.cfi_offset 5, -16
 3053              		.cfi_offset 6, -12
 3054              		.cfi_offset 7, -8
 3055              		.cfi_offset 14, -4
 3056 0002 0746     		mov	r7, r0
 3057 0004 0C46     		mov	r4, r1
 3058 0006 1546     		mov	r5, r2
 969:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block;
 3059              		.loc 1 969 5 is_stmt 1 view .LVU929
 970:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next;
 3060              		.loc 1 970 5 view .LVU930
 971:lvgl/src/misc/lv_tlsf.c **** 
 972:lvgl/src/misc/lv_tlsf.c ****     const size_t pool_overhead = lv_tlsf_pool_overhead();
 3061              		.loc 1 972 5 view .LVU931
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 79


 3062              		.loc 1 972 34 is_stmt 0 view .LVU932
 3063 0008 FFF7FEFF 		bl	lv_tlsf_pool_overhead
 3064              	.LVL290:
 973:lvgl/src/misc/lv_tlsf.c ****     const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 3065              		.loc 1 973 5 is_stmt 1 view .LVU933
 3066              		.loc 1 973 31 is_stmt 0 view .LVU934
 3067 000c 0421     		movs	r1, #4
 3068 000e 281A     		subs	r0, r5, r0
 3069              	.LVL291:
 3070              		.loc 1 973 31 view .LVU935
 3071 0010 FFF7FEFF 		bl	align_down
 3072              	.LVL292:
 974:lvgl/src/misc/lv_tlsf.c **** 
 975:lvgl/src/misc/lv_tlsf.c ****     if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 3073              		.loc 1 975 5 is_stmt 1 view .LVU936
 3074              		.loc 1 975 7 is_stmt 0 view .LVU937
 3075 0014 14F0030F 		tst	r4, #3
 3076 0018 27D1     		bne	.L213
 3077 001a 0546     		mov	r5, r0
 3078              	.LVL293:
 976:lvgl/src/misc/lv_tlsf.c ****         printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
 977:lvgl/src/misc/lv_tlsf.c ****                (unsigned int)ALIGN_SIZE);
 978:lvgl/src/misc/lv_tlsf.c ****         return 0;
 979:lvgl/src/misc/lv_tlsf.c ****     }
 980:lvgl/src/misc/lv_tlsf.c **** 
 981:lvgl/src/misc/lv_tlsf.c ****     if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 3079              		.loc 1 981 5 is_stmt 1 view .LVU938
 3080              		.loc 1 981 36 is_stmt 0 view .LVU939
 3081 001c A0F10C02 		sub	r2, r0, #12
 3082              		.loc 1 981 7 view .LVU940
 3083 0020 144B     		ldr	r3, .L216
 3084 0022 9A42     		cmp	r2, r3
 3085 0024 23D8     		bhi	.L214
 982:lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_64BIT)
 983:lvgl/src/misc/lv_tlsf.c ****         printf("lv_tlsf_add_pool: Memory size must be between 0x%x and 0x%x00 bytes.\n",
 984:lvgl/src/misc/lv_tlsf.c ****                (unsigned int)(pool_overhead + block_size_min),
 985:lvgl/src/misc/lv_tlsf.c ****                (unsigned int)((pool_overhead + block_size_max) / 256));
 986:lvgl/src/misc/lv_tlsf.c **** #else
 987:lvgl/src/misc/lv_tlsf.c ****         printf("lv_tlsf_add_pool: Memory size must be between %u and %u bytes.\n",
 988:lvgl/src/misc/lv_tlsf.c ****                (unsigned int)(pool_overhead + block_size_min),
 989:lvgl/src/misc/lv_tlsf.c ****                (unsigned int)(pool_overhead + block_size_max));
 990:lvgl/src/misc/lv_tlsf.c **** #endif
 991:lvgl/src/misc/lv_tlsf.c ****         return 0;
 992:lvgl/src/misc/lv_tlsf.c ****     }
 993:lvgl/src/misc/lv_tlsf.c **** 
 994:lvgl/src/misc/lv_tlsf.c ****     /*
 995:lvgl/src/misc/lv_tlsf.c ****     ** Create the main free block. Offset the start of the block slightly
 996:lvgl/src/misc/lv_tlsf.c ****     ** so that the prev_phys_block field falls outside of the pool -
 997:lvgl/src/misc/lv_tlsf.c ****     ** it will never be used.
 998:lvgl/src/misc/lv_tlsf.c ****     */
 999:lvgl/src/misc/lv_tlsf.c ****     block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
 3086              		.loc 1 999 5 is_stmt 1 view .LVU941
 3087              		.loc 1 999 13 is_stmt 0 view .LVU942
 3088 0026 6FF00301 		mvn	r1, #3
 3089 002a 2046     		mov	r0, r4
 3090              	.LVL294:
 3091              		.loc 1 999 13 view .LVU943
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 80


 3092 002c FFF7FEFF 		bl	offset_to_block
 3093              	.LVL295:
 3094 0030 0646     		mov	r6, r0
 3095              	.LVL296:
1000:lvgl/src/misc/lv_tlsf.c ****     block_set_size(block, pool_bytes);
 3096              		.loc 1 1000 5 is_stmt 1 view .LVU944
 3097 0032 2946     		mov	r1, r5
 3098 0034 FFF7FEFF 		bl	block_set_size
 3099              	.LVL297:
1001:lvgl/src/misc/lv_tlsf.c ****     block_set_free(block);
 3100              		.loc 1 1001 5 view .LVU945
 3101 0038 3046     		mov	r0, r6
 3102 003a FFF7FEFF 		bl	block_set_free
 3103              	.LVL298:
1002:lvgl/src/misc/lv_tlsf.c ****     block_set_prev_used(block);
 3104              		.loc 1 1002 5 view .LVU946
 3105 003e 3046     		mov	r0, r6
 3106 0040 FFF7FEFF 		bl	block_set_prev_used
 3107              	.LVL299:
1003:lvgl/src/misc/lv_tlsf.c ****     block_insert(tlsf_cast(control_t *, tlsf), block);
 3108              		.loc 1 1003 5 view .LVU947
 3109 0044 3146     		mov	r1, r6
 3110 0046 3846     		mov	r0, r7
 3111 0048 FFF7FEFF 		bl	block_insert
 3112              	.LVL300:
1004:lvgl/src/misc/lv_tlsf.c **** 
1005:lvgl/src/misc/lv_tlsf.c ****     /* Split the block to create a zero-size sentinel block. */
1006:lvgl/src/misc/lv_tlsf.c ****     next = block_link_next(block);
 3113              		.loc 1 1006 5 view .LVU948
 3114              		.loc 1 1006 12 is_stmt 0 view .LVU949
 3115 004c 3046     		mov	r0, r6
 3116 004e FFF7FEFF 		bl	block_link_next
 3117              	.LVL301:
 3118 0052 0546     		mov	r5, r0
 3119              	.LVL302:
1007:lvgl/src/misc/lv_tlsf.c ****     block_set_size(next, 0);
 3120              		.loc 1 1007 5 is_stmt 1 view .LVU950
 3121 0054 0021     		movs	r1, #0
 3122 0056 FFF7FEFF 		bl	block_set_size
 3123              	.LVL303:
1008:lvgl/src/misc/lv_tlsf.c ****     block_set_used(next);
 3124              		.loc 1 1008 5 view .LVU951
 3125 005a 2846     		mov	r0, r5
 3126 005c FFF7FEFF 		bl	block_set_used
 3127              	.LVL304:
1009:lvgl/src/misc/lv_tlsf.c ****     block_set_prev_free(next);
 3128              		.loc 1 1009 5 view .LVU952
 3129 0060 2846     		mov	r0, r5
 3130 0062 FFF7FEFF 		bl	block_set_prev_free
 3131              	.LVL305:
1010:lvgl/src/misc/lv_tlsf.c **** 
1011:lvgl/src/misc/lv_tlsf.c ****     return mem;
 3132              		.loc 1 1011 5 view .LVU953
 3133              		.loc 1 1011 12 is_stmt 0 view .LVU954
 3134 0066 2046     		mov	r0, r4
 3135              	.LVL306:
 3136              	.L211:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 81


1012:lvgl/src/misc/lv_tlsf.c **** }
 3137              		.loc 1 1012 1 view .LVU955
 3138 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3139              	.LVL307:
 3140              	.L213:
 978:lvgl/src/misc/lv_tlsf.c ****     }
 3141              		.loc 1 978 16 view .LVU956
 3142 006a 0020     		movs	r0, #0
 3143              	.LVL308:
 978:lvgl/src/misc/lv_tlsf.c ****     }
 3144              		.loc 1 978 16 view .LVU957
 3145 006c FCE7     		b	.L211
 3146              	.LVL309:
 3147              	.L214:
 991:lvgl/src/misc/lv_tlsf.c ****     }
 3148              		.loc 1 991 16 view .LVU958
 3149 006e 0020     		movs	r0, #0
 3150              	.LVL310:
 991:lvgl/src/misc/lv_tlsf.c ****     }
 3151              		.loc 1 991 16 view .LVU959
 3152 0070 FAE7     		b	.L211
 3153              	.L217:
 3154 0072 00BF     		.align	2
 3155              	.L216:
 3156 0074 F4FF0F00 		.word	1048564
 3157              		.cfi_endproc
 3158              	.LFE54:
 3160              		.section	.text.lv_tlsf_remove_pool,"ax",%progbits
 3161              		.align	1
 3162              		.global	lv_tlsf_remove_pool
 3163              		.syntax unified
 3164              		.thumb
 3165              		.thumb_func
 3167              	lv_tlsf_remove_pool:
 3168              	.LVL311:
 3169              	.LFB55:
1013:lvgl/src/misc/lv_tlsf.c **** 
1014:lvgl/src/misc/lv_tlsf.c **** void lv_tlsf_remove_pool(lv_tlsf_t tlsf, lv_pool_t pool)
1015:lvgl/src/misc/lv_tlsf.c **** {
 3170              		.loc 1 1015 1 is_stmt 1 view -0
 3171              		.cfi_startproc
 3172              		@ args = 0, pretend = 0, frame = 8
 3173              		@ frame_needed = 0, uses_anonymous_args = 0
 3174              		.loc 1 1015 1 is_stmt 0 view .LVU961
 3175 0000 70B5     		push	{r4, r5, r6, lr}
 3176              		.cfi_def_cfa_offset 16
 3177              		.cfi_offset 4, -16
 3178              		.cfi_offset 5, -12
 3179              		.cfi_offset 6, -8
 3180              		.cfi_offset 14, -4
 3181 0002 82B0     		sub	sp, sp, #8
 3182              		.cfi_def_cfa_offset 24
 3183 0004 0546     		mov	r5, r0
 3184 0006 0846     		mov	r0, r1
 3185              	.LVL312:
1016:lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
 3186              		.loc 1 1016 5 is_stmt 1 view .LVU962
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 82


1017:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = offset_to_block(pool, -(int)block_header_overhead);
 3187              		.loc 1 1017 5 view .LVU963
 3188              		.loc 1 1017 30 is_stmt 0 view .LVU964
 3189 0008 6FF00301 		mvn	r1, #3
 3190              	.LVL313:
 3191              		.loc 1 1017 30 view .LVU965
 3192 000c FFF7FEFF 		bl	offset_to_block
 3193              	.LVL314:
 3194              		.loc 1 1017 30 view .LVU966
 3195 0010 0446     		mov	r4, r0
 3196              	.LVL315:
1018:lvgl/src/misc/lv_tlsf.c **** 
1019:lvgl/src/misc/lv_tlsf.c ****     int fl = 0, sl = 0;
 3197              		.loc 1 1019 5 is_stmt 1 view .LVU967
 3198              		.loc 1 1019 9 is_stmt 0 view .LVU968
 3199 0012 0023     		movs	r3, #0
 3200 0014 0193     		str	r3, [sp, #4]
 3201              		.loc 1 1019 17 view .LVU969
 3202 0016 0093     		str	r3, [sp]
1020:lvgl/src/misc/lv_tlsf.c **** 
1021:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_free(block) && "block should be free");
 3203              		.loc 1 1021 5 is_stmt 1 view .LVU970
 3204              		.loc 1 1021 5 view .LVU971
 3205 0018 FFF7FEFF 		bl	block_is_free
 3206              	.LVL316:
 3207              		.loc 1 1021 5 is_stmt 0 view .LVU972
 3208 001c 00B9     		cbnz	r0, .L219
 3209              	.L220:
 3210              		.loc 1 1021 5 is_stmt 1 discriminator 1 view .LVU973
 3211              		.loc 1 1021 5 discriminator 1 view .LVU974
 3212              		.loc 1 1021 5 discriminator 1 view .LVU975
 3213              		.loc 1 1021 5 discriminator 1 view .LVU976
 3214              		.loc 1 1021 5 discriminator 1 view .LVU977
 3215              		.loc 1 1021 5 discriminator 1 view .LVU978
 3216 001e FEE7     		b	.L220
 3217              	.L219:
 3218              		.loc 1 1021 5 discriminator 4 view .LVU979
1022:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_free(block_next(block)) && "next block should not be free");
 3219              		.loc 1 1022 5 discriminator 4 view .LVU980
 3220              		.loc 1 1022 5 discriminator 4 view .LVU981
 3221 0020 2046     		mov	r0, r4
 3222 0022 FFF7FEFF 		bl	block_next
 3223              	.LVL317:
 3224 0026 0646     		mov	r6, r0
 3225 0028 FFF7FEFF 		bl	block_is_free
 3226              	.LVL318:
 3227 002c 00B1     		cbz	r0, .L221
 3228              	.L222:
 3229              		.loc 1 1022 5 discriminator 2 view .LVU982
 3230              		.loc 1 1022 5 discriminator 2 view .LVU983
 3231              		.loc 1 1022 5 discriminator 2 view .LVU984
 3232              		.loc 1 1022 5 discriminator 2 view .LVU985
 3233              		.loc 1 1022 5 discriminator 2 view .LVU986
 3234              		.loc 1 1022 5 discriminator 2 view .LVU987
 3235 002e FEE7     		b	.L222
 3236              	.L221:
 3237              		.loc 1 1022 5 discriminator 2 view .LVU988
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 83


1023:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_size(block_next(block)) == 0 && "next block size should be zero");
 3238              		.loc 1 1023 5 discriminator 2 view .LVU989
 3239              		.loc 1 1023 5 discriminator 2 view .LVU990
 3240 0030 3046     		mov	r0, r6
 3241 0032 FFF7FEFF 		bl	block_size
 3242              	.LVL319:
 3243 0036 00B1     		cbz	r0, .L223
 3244              	.L224:
 3245              		.loc 1 1023 5 discriminator 3 view .LVU991
 3246              		.loc 1 1023 5 discriminator 3 view .LVU992
 3247              		.loc 1 1023 5 discriminator 3 view .LVU993
 3248              		.loc 1 1023 5 discriminator 3 view .LVU994
 3249              		.loc 1 1023 5 discriminator 3 view .LVU995
 3250              		.loc 1 1023 5 discriminator 3 view .LVU996
 3251 0038 FEE7     		b	.L224
 3252              	.L223:
 3253              		.loc 1 1023 5 discriminator 2 view .LVU997
1024:lvgl/src/misc/lv_tlsf.c **** 
1025:lvgl/src/misc/lv_tlsf.c ****     mapping_insert(block_size(block), &fl, &sl);
 3254              		.loc 1 1025 5 discriminator 2 view .LVU998
 3255 003a 2046     		mov	r0, r4
 3256 003c FFF7FEFF 		bl	block_size
 3257              	.LVL320:
 3258 0040 6A46     		mov	r2, sp
 3259 0042 01A9     		add	r1, sp, #4
 3260 0044 FFF7FEFF 		bl	mapping_insert
 3261              	.LVL321:
1026:lvgl/src/misc/lv_tlsf.c ****     remove_free_block(control, block, fl, sl);
 3262              		.loc 1 1026 5 discriminator 2 view .LVU999
 3263 0048 009B     		ldr	r3, [sp]
 3264 004a 019A     		ldr	r2, [sp, #4]
 3265 004c 2146     		mov	r1, r4
 3266 004e 2846     		mov	r0, r5
 3267 0050 FFF7FEFF 		bl	remove_free_block
 3268              	.LVL322:
1027:lvgl/src/misc/lv_tlsf.c **** }
 3269              		.loc 1 1027 1 is_stmt 0 discriminator 2 view .LVU1000
 3270 0054 02B0     		add	sp, sp, #8
 3271              		.cfi_def_cfa_offset 16
 3272              		@ sp needed
 3273 0056 70BD     		pop	{r4, r5, r6, pc}
 3274              		.loc 1 1027 1 discriminator 2 view .LVU1001
 3275              		.cfi_endproc
 3276              	.LFE55:
 3278              		.section	.text.lv_tlsf_create,"ax",%progbits
 3279              		.align	1
 3280              		.global	lv_tlsf_create
 3281              		.syntax unified
 3282              		.thumb
 3283              		.thumb_func
 3285              	lv_tlsf_create:
 3286              	.LVL323:
 3287              	.LFB56:
1028:lvgl/src/misc/lv_tlsf.c **** 
1029:lvgl/src/misc/lv_tlsf.c **** /*
1030:lvgl/src/misc/lv_tlsf.c **** ** TLSF main interface.
1031:lvgl/src/misc/lv_tlsf.c **** */
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 84


1032:lvgl/src/misc/lv_tlsf.c **** 
1033:lvgl/src/misc/lv_tlsf.c **** #if _DEBUG
1034:lvgl/src/misc/lv_tlsf.c **** int test_ffs_fls()
1035:lvgl/src/misc/lv_tlsf.c **** {
1036:lvgl/src/misc/lv_tlsf.c ****     /* Verify ffs/fls work properly. */
1037:lvgl/src/misc/lv_tlsf.c ****     int rv = 0;
1038:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_ffs(0) == -1) ? 0 : 0x1;
1039:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls(0) == -1) ? 0 : 0x2;
1040:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_ffs(1) == 0) ? 0 : 0x4;
1041:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls(1) == 0) ? 0 : 0x8;
1042:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_ffs(0x80000000) == 31) ? 0 : 0x10;
1043:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_ffs(0x80008000) == 15) ? 0 : 0x20;
1044:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls(0x80000008) == 31) ? 0 : 0x40;
1045:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls(0x7FFFFFFF) == 30) ? 0 : 0x80;
1046:lvgl/src/misc/lv_tlsf.c **** 
1047:lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_64BIT)
1048:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls_sizet(0x80000000) == 31) ? 0 : 0x100;
1049:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls_sizet(0x100000000) == 32) ? 0 : 0x200;
1050:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls_sizet(0xffffffffffffffff) == 63) ? 0 : 0x400;
1051:lvgl/src/misc/lv_tlsf.c **** #endif
1052:lvgl/src/misc/lv_tlsf.c **** 
1053:lvgl/src/misc/lv_tlsf.c ****     if(rv) {
1054:lvgl/src/misc/lv_tlsf.c ****         printf("test_ffs_fls: %x ffs/fls tests failed.\n", rv);
1055:lvgl/src/misc/lv_tlsf.c ****     }
1056:lvgl/src/misc/lv_tlsf.c ****     return rv;
1057:lvgl/src/misc/lv_tlsf.c **** }
1058:lvgl/src/misc/lv_tlsf.c **** #endif
1059:lvgl/src/misc/lv_tlsf.c **** 
1060:lvgl/src/misc/lv_tlsf.c **** lv_tlsf_t lv_tlsf_create(void * mem)
1061:lvgl/src/misc/lv_tlsf.c **** {
 3288              		.loc 1 1061 1 is_stmt 1 view -0
 3289              		.cfi_startproc
 3290              		@ args = 0, pretend = 0, frame = 0
 3291              		@ frame_needed = 0, uses_anonymous_args = 0
1062:lvgl/src/misc/lv_tlsf.c **** #if _DEBUG
1063:lvgl/src/misc/lv_tlsf.c ****     if(test_ffs_fls()) {
1064:lvgl/src/misc/lv_tlsf.c ****         return 0;
1065:lvgl/src/misc/lv_tlsf.c ****     }
1066:lvgl/src/misc/lv_tlsf.c **** #endif
1067:lvgl/src/misc/lv_tlsf.c **** 
1068:lvgl/src/misc/lv_tlsf.c ****     if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 3292              		.loc 1 1068 5 view .LVU1003
 3293              		.loc 1 1068 7 is_stmt 0 view .LVU1004
 3294 0000 10F0030F 		tst	r0, #3
 3295 0004 05D1     		bne	.L228
1061:lvgl/src/misc/lv_tlsf.c **** #if _DEBUG
 3296              		.loc 1 1061 1 view .LVU1005
 3297 0006 10B5     		push	{r4, lr}
 3298              		.cfi_def_cfa_offset 8
 3299              		.cfi_offset 4, -8
 3300              		.cfi_offset 14, -4
 3301 0008 0446     		mov	r4, r0
1069:lvgl/src/misc/lv_tlsf.c ****         printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
1070:lvgl/src/misc/lv_tlsf.c ****                (unsigned int)ALIGN_SIZE);
1071:lvgl/src/misc/lv_tlsf.c ****         return 0;
1072:lvgl/src/misc/lv_tlsf.c ****     }
1073:lvgl/src/misc/lv_tlsf.c **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 85


1074:lvgl/src/misc/lv_tlsf.c ****     control_constructor(tlsf_cast(control_t *, mem));
 3302              		.loc 1 1074 5 is_stmt 1 view .LVU1006
 3303 000a FFF7FEFF 		bl	control_constructor
 3304              	.LVL324:
1075:lvgl/src/misc/lv_tlsf.c **** 
1076:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(lv_tlsf_t, mem);
 3305              		.loc 1 1076 5 view .LVU1007
 3306              		.loc 1 1076 12 is_stmt 0 view .LVU1008
 3307 000e 2046     		mov	r0, r4
1077:lvgl/src/misc/lv_tlsf.c **** }
 3308              		.loc 1 1077 1 view .LVU1009
 3309 0010 10BD     		pop	{r4, pc}
 3310              	.LVL325:
 3311              	.L228:
 3312              		.cfi_def_cfa_offset 0
 3313              		.cfi_restore 4
 3314              		.cfi_restore 14
1071:lvgl/src/misc/lv_tlsf.c ****     }
 3315              		.loc 1 1071 16 view .LVU1010
 3316 0012 0020     		movs	r0, #0
 3317              	.LVL326:
 3318              		.loc 1 1077 1 view .LVU1011
 3319 0014 7047     		bx	lr
 3320              		.cfi_endproc
 3321              	.LFE56:
 3323              		.section	.text.lv_tlsf_create_with_pool,"ax",%progbits
 3324              		.align	1
 3325              		.global	lv_tlsf_create_with_pool
 3326              		.syntax unified
 3327              		.thumb
 3328              		.thumb_func
 3330              	lv_tlsf_create_with_pool:
 3331              	.LVL327:
 3332              	.LFB57:
1078:lvgl/src/misc/lv_tlsf.c **** 
1079:lvgl/src/misc/lv_tlsf.c **** lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
1080:lvgl/src/misc/lv_tlsf.c **** {
 3333              		.loc 1 1080 1 is_stmt 1 view -0
 3334              		.cfi_startproc
 3335              		@ args = 0, pretend = 0, frame = 0
 3336              		@ frame_needed = 0, uses_anonymous_args = 0
 3337              		.loc 1 1080 1 is_stmt 0 view .LVU1013
 3338 0000 70B5     		push	{r4, r5, r6, lr}
 3339              		.cfi_def_cfa_offset 16
 3340              		.cfi_offset 4, -16
 3341              		.cfi_offset 5, -12
 3342              		.cfi_offset 6, -8
 3343              		.cfi_offset 14, -4
 3344 0002 0546     		mov	r5, r0
 3345 0004 0E46     		mov	r6, r1
1081:lvgl/src/misc/lv_tlsf.c ****     lv_tlsf_t tlsf = lv_tlsf_create(mem);
 3346              		.loc 1 1081 5 is_stmt 1 view .LVU1014
 3347              		.loc 1 1081 22 is_stmt 0 view .LVU1015
 3348 0006 FFF7FEFF 		bl	lv_tlsf_create
 3349              	.LVL328:
 3350              		.loc 1 1081 22 view .LVU1016
 3351 000a 0446     		mov	r4, r0
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 86


 3352              	.LVL329:
1082:lvgl/src/misc/lv_tlsf.c ****     lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 3353              		.loc 1 1082 5 is_stmt 1 view .LVU1017
 3354              		.loc 1 1082 42 is_stmt 0 view .LVU1018
 3355 000c FFF7FEFF 		bl	lv_tlsf_size
 3356              	.LVL330:
 3357              		.loc 1 1082 5 view .LVU1019
 3358 0010 321A     		subs	r2, r6, r0
 3359 0012 2918     		adds	r1, r5, r0
 3360 0014 2046     		mov	r0, r4
 3361 0016 FFF7FEFF 		bl	lv_tlsf_add_pool
 3362              	.LVL331:
1083:lvgl/src/misc/lv_tlsf.c ****     return tlsf;
 3363              		.loc 1 1083 5 is_stmt 1 view .LVU1020
1084:lvgl/src/misc/lv_tlsf.c **** }
 3364              		.loc 1 1084 1 is_stmt 0 view .LVU1021
 3365 001a 2046     		mov	r0, r4
 3366 001c 70BD     		pop	{r4, r5, r6, pc}
 3367              		.loc 1 1084 1 view .LVU1022
 3368              		.cfi_endproc
 3369              	.LFE57:
 3371              		.section	.text.lv_tlsf_destroy,"ax",%progbits
 3372              		.align	1
 3373              		.global	lv_tlsf_destroy
 3374              		.syntax unified
 3375              		.thumb
 3376              		.thumb_func
 3378              	lv_tlsf_destroy:
 3379              	.LVL332:
 3380              	.LFB58:
1085:lvgl/src/misc/lv_tlsf.c **** 
1086:lvgl/src/misc/lv_tlsf.c **** void lv_tlsf_destroy(lv_tlsf_t tlsf)
1087:lvgl/src/misc/lv_tlsf.c **** {
 3381              		.loc 1 1087 1 is_stmt 1 view -0
 3382              		.cfi_startproc
 3383              		@ args = 0, pretend = 0, frame = 0
 3384              		@ frame_needed = 0, uses_anonymous_args = 0
 3385              		@ link register save eliminated.
1088:lvgl/src/misc/lv_tlsf.c ****     /* Nothing to do. */
1089:lvgl/src/misc/lv_tlsf.c ****     LV_UNUSED(tlsf);
 3386              		.loc 1 1089 5 view .LVU1024
1090:lvgl/src/misc/lv_tlsf.c **** }
 3387              		.loc 1 1090 1 is_stmt 0 view .LVU1025
 3388 0000 7047     		bx	lr
 3389              		.cfi_endproc
 3390              	.LFE58:
 3392              		.section	.text.lv_tlsf_get_pool,"ax",%progbits
 3393              		.align	1
 3394              		.global	lv_tlsf_get_pool
 3395              		.syntax unified
 3396              		.thumb
 3397              		.thumb_func
 3399              	lv_tlsf_get_pool:
 3400              	.LVL333:
 3401              	.LFB59:
1091:lvgl/src/misc/lv_tlsf.c **** 
1092:lvgl/src/misc/lv_tlsf.c **** lv_pool_t lv_tlsf_get_pool(lv_tlsf_t tlsf)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 87


1093:lvgl/src/misc/lv_tlsf.c **** {
 3402              		.loc 1 1093 1 is_stmt 1 view -0
 3403              		.cfi_startproc
 3404              		@ args = 0, pretend = 0, frame = 0
 3405              		@ frame_needed = 0, uses_anonymous_args = 0
 3406              		.loc 1 1093 1 is_stmt 0 view .LVU1027
 3407 0000 10B5     		push	{r4, lr}
 3408              		.cfi_def_cfa_offset 8
 3409              		.cfi_offset 4, -8
 3410              		.cfi_offset 14, -4
 3411 0002 0446     		mov	r4, r0
1094:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
 3412              		.loc 1 1094 5 is_stmt 1 view .LVU1028
 3413              		.loc 1 1094 12 is_stmt 0 view .LVU1029
 3414 0004 FFF7FEFF 		bl	lv_tlsf_size
 3415              	.LVL334:
1095:lvgl/src/misc/lv_tlsf.c **** }
 3416              		.loc 1 1095 1 view .LVU1030
 3417 0008 2044     		add	r0, r0, r4
 3418 000a 10BD     		pop	{r4, pc}
 3419              		.loc 1 1095 1 view .LVU1031
 3420              		.cfi_endproc
 3421              	.LFE59:
 3423              		.section	.text.lv_tlsf_malloc,"ax",%progbits
 3424              		.align	1
 3425              		.global	lv_tlsf_malloc
 3426              		.syntax unified
 3427              		.thumb
 3428              		.thumb_func
 3430              	lv_tlsf_malloc:
 3431              	.LVL335:
 3432              	.LFB60:
1096:lvgl/src/misc/lv_tlsf.c **** 
1097:lvgl/src/misc/lv_tlsf.c **** void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
1098:lvgl/src/misc/lv_tlsf.c **** {
 3433              		.loc 1 1098 1 is_stmt 1 view -0
 3434              		.cfi_startproc
 3435              		@ args = 0, pretend = 0, frame = 0
 3436              		@ frame_needed = 0, uses_anonymous_args = 0
 3437              		.loc 1 1098 1 is_stmt 0 view .LVU1033
 3438 0000 38B5     		push	{r3, r4, r5, lr}
 3439              		.cfi_def_cfa_offset 16
 3440              		.cfi_offset 3, -16
 3441              		.cfi_offset 4, -12
 3442              		.cfi_offset 5, -8
 3443              		.cfi_offset 14, -4
 3444 0002 0446     		mov	r4, r0
 3445 0004 0846     		mov	r0, r1
 3446              	.LVL336:
1099:lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
 3447              		.loc 1 1099 5 is_stmt 1 view .LVU1034
1100:lvgl/src/misc/lv_tlsf.c ****     const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 3448              		.loc 1 1100 5 view .LVU1035
 3449              		.loc 1 1100 27 is_stmt 0 view .LVU1036
 3450 0006 0421     		movs	r1, #4
 3451              	.LVL337:
 3452              		.loc 1 1100 27 view .LVU1037
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 88


 3453 0008 FFF7FEFF 		bl	adjust_request_size
 3454              	.LVL338:
 3455              		.loc 1 1100 27 view .LVU1038
 3456 000c 0546     		mov	r5, r0
 3457              	.LVL339:
1101:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = block_locate_free(control, adjust);
 3458              		.loc 1 1101 5 is_stmt 1 view .LVU1039
 3459              		.loc 1 1101 30 is_stmt 0 view .LVU1040
 3460 000e 0146     		mov	r1, r0
 3461 0010 2046     		mov	r0, r4
 3462              	.LVL340:
 3463              		.loc 1 1101 30 view .LVU1041
 3464 0012 FFF7FEFF 		bl	block_locate_free
 3465              	.LVL341:
 3466              		.loc 1 1101 30 view .LVU1042
 3467 0016 0146     		mov	r1, r0
 3468              	.LVL342:
1102:lvgl/src/misc/lv_tlsf.c ****     return block_prepare_used(control, block, adjust);
 3469              		.loc 1 1102 5 is_stmt 1 view .LVU1043
 3470              		.loc 1 1102 12 is_stmt 0 view .LVU1044
 3471 0018 2A46     		mov	r2, r5
 3472 001a 2046     		mov	r0, r4
 3473              	.LVL343:
 3474              		.loc 1 1102 12 view .LVU1045
 3475 001c FFF7FEFF 		bl	block_prepare_used
 3476              	.LVL344:
1103:lvgl/src/misc/lv_tlsf.c **** }
 3477              		.loc 1 1103 1 view .LVU1046
 3478 0020 38BD     		pop	{r3, r4, r5, pc}
 3479              		.loc 1 1103 1 view .LVU1047
 3480              		.cfi_endproc
 3481              	.LFE60:
 3483              		.section	.text.lv_tlsf_memalign,"ax",%progbits
 3484              		.align	1
 3485              		.global	lv_tlsf_memalign
 3486              		.syntax unified
 3487              		.thumb
 3488              		.thumb_func
 3490              	lv_tlsf_memalign:
 3491              	.LVL345:
 3492              	.LFB61:
1104:lvgl/src/misc/lv_tlsf.c **** 
1105:lvgl/src/misc/lv_tlsf.c **** void * lv_tlsf_memalign(lv_tlsf_t tlsf, size_t align, size_t size)
1106:lvgl/src/misc/lv_tlsf.c **** {
 3493              		.loc 1 1106 1 is_stmt 1 view -0
 3494              		.cfi_startproc
 3495              		@ args = 0, pretend = 0, frame = 0
 3496              		@ frame_needed = 0, uses_anonymous_args = 0
 3497              		.loc 1 1106 1 is_stmt 0 view .LVU1049
 3498 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3499              		.cfi_def_cfa_offset 24
 3500              		.cfi_offset 4, -24
 3501              		.cfi_offset 5, -20
 3502              		.cfi_offset 6, -16
 3503              		.cfi_offset 7, -12
 3504              		.cfi_offset 8, -8
 3505              		.cfi_offset 14, -4
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 89


 3506 0004 0646     		mov	r6, r0
 3507 0006 0C46     		mov	r4, r1
1107:lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
 3508              		.loc 1 1107 5 is_stmt 1 view .LVU1050
 3509              	.LVL346:
1108:lvgl/src/misc/lv_tlsf.c ****     const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 3510              		.loc 1 1108 5 view .LVU1051
 3511              		.loc 1 1108 27 is_stmt 0 view .LVU1052
 3512 0008 0421     		movs	r1, #4
 3513              	.LVL347:
 3514              		.loc 1 1108 27 view .LVU1053
 3515 000a 1046     		mov	r0, r2
 3516              	.LVL348:
 3517              		.loc 1 1108 27 view .LVU1054
 3518 000c FFF7FEFF 		bl	adjust_request_size
 3519              	.LVL349:
 3520              		.loc 1 1108 27 view .LVU1055
 3521 0010 0546     		mov	r5, r0
 3522              	.LVL350:
1109:lvgl/src/misc/lv_tlsf.c **** 
1110:lvgl/src/misc/lv_tlsf.c ****     /*
1111:lvgl/src/misc/lv_tlsf.c ****     ** We must allocate an additional minimum block size bytes so that if
1112:lvgl/src/misc/lv_tlsf.c ****     ** our free block will leave an alignment gap which is smaller, we can
1113:lvgl/src/misc/lv_tlsf.c ****     ** trim a leading free block and release it back to the pool. We must
1114:lvgl/src/misc/lv_tlsf.c ****     ** do this because the previous physical block is in use, therefore
1115:lvgl/src/misc/lv_tlsf.c ****     ** the prev_phys_block field is not valid, and we can't simply adjust
1116:lvgl/src/misc/lv_tlsf.c ****     ** the size of that block.
1117:lvgl/src/misc/lv_tlsf.c ****     */
1118:lvgl/src/misc/lv_tlsf.c ****     const size_t gap_minimum = sizeof(block_header_t);
 3523              		.loc 1 1118 5 is_stmt 1 view .LVU1056
1119:lvgl/src/misc/lv_tlsf.c ****     const size_t size_with_gap = adjust_request_size(adjust + align + gap_minimum, align);
 3524              		.loc 1 1119 5 view .LVU1057
 3525              		.loc 1 1119 61 is_stmt 0 view .LVU1058
 3526 0012 2044     		add	r0, r0, r4
 3527              	.LVL351:
 3528              		.loc 1 1119 34 view .LVU1059
 3529 0014 2146     		mov	r1, r4
 3530 0016 1030     		adds	r0, r0, #16
 3531 0018 FFF7FEFF 		bl	adjust_request_size
 3532              	.LVL352:
 3533 001c 0146     		mov	r1, r0
 3534              	.LVL353:
1120:lvgl/src/misc/lv_tlsf.c **** 
1121:lvgl/src/misc/lv_tlsf.c ****     /*
1122:lvgl/src/misc/lv_tlsf.c ****     ** If alignment is less than or equals base alignment, we're done.
1123:lvgl/src/misc/lv_tlsf.c ****     ** If we requested 0 bytes, return null, as lv_tlsf_malloc(0) does.
1124:lvgl/src/misc/lv_tlsf.c ****     */
1125:lvgl/src/misc/lv_tlsf.c ****     const size_t aligned_size = (adjust && align > ALIGN_SIZE) ? size_with_gap : adjust;
 3535              		.loc 1 1125 5 is_stmt 1 view .LVU1060
 3536              		.loc 1 1125 80 is_stmt 0 view .LVU1061
 3537 001e 002D     		cmp	r5, #0
 3538 0020 18BF     		it	ne
 3539 0022 042C     		cmpne	r4, #4
 3540 0024 00D8     		bhi	.L241
 3541 0026 2946     		mov	r1, r5
 3542              	.L241:
 3543              	.LVL354:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 90


1126:lvgl/src/misc/lv_tlsf.c **** 
1127:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = block_locate_free(control, aligned_size);
 3544              		.loc 1 1127 5 is_stmt 1 discriminator 4 view .LVU1062
 3545              		.loc 1 1127 30 is_stmt 0 discriminator 4 view .LVU1063
 3546 0028 3046     		mov	r0, r6
 3547              	.LVL355:
 3548              		.loc 1 1127 30 discriminator 4 view .LVU1064
 3549 002a FFF7FEFF 		bl	block_locate_free
 3550              	.LVL356:
1128:lvgl/src/misc/lv_tlsf.c **** 
1129:lvgl/src/misc/lv_tlsf.c ****     /* This can't be a static assert. */
1130:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(sizeof(block_header_t) == block_size_min + block_header_overhead);
 3551              		.loc 1 1130 5 is_stmt 1 discriminator 4 view .LVU1065
 3552              		.loc 1 1130 5 discriminator 4 view .LVU1066
 3553              		.loc 1 1130 5 discriminator 4 view .LVU1067
1131:lvgl/src/misc/lv_tlsf.c **** 
1132:lvgl/src/misc/lv_tlsf.c ****     if(block) {
 3554              		.loc 1 1132 5 discriminator 4 view .LVU1068
 3555              		.loc 1 1132 7 is_stmt 0 discriminator 4 view .LVU1069
 3556 002e 0746     		mov	r7, r0
 3557 0030 F8B1     		cbz	r0, .L242
 3558              	.LBB13:
1133:lvgl/src/misc/lv_tlsf.c ****         void * ptr = block_to_ptr(block);
 3559              		.loc 1 1133 9 is_stmt 1 view .LVU1070
 3560              		.loc 1 1133 22 is_stmt 0 view .LVU1071
 3561 0032 FFF7FEFF 		bl	block_to_ptr
 3562              	.LVL357:
 3563              		.loc 1 1133 22 view .LVU1072
 3564 0036 8046     		mov	r8, r0
 3565              	.LVL358:
1134:lvgl/src/misc/lv_tlsf.c ****         void * aligned = align_ptr(ptr, align);
 3566              		.loc 1 1134 9 is_stmt 1 view .LVU1073
 3567              		.loc 1 1134 26 is_stmt 0 view .LVU1074
 3568 0038 2146     		mov	r1, r4
 3569 003a FFF7FEFF 		bl	align_ptr
 3570              	.LVL359:
1135:lvgl/src/misc/lv_tlsf.c ****         size_t gap = tlsf_cast(size_t,
 3571              		.loc 1 1135 9 is_stmt 1 view .LVU1075
 3572              		.loc 1 1135 22 is_stmt 0 view .LVU1076
 3573 003e A0EB0802 		sub	r2, r0, r8
 3574              	.LVL360:
1136:lvgl/src/misc/lv_tlsf.c ****                                tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
1137:lvgl/src/misc/lv_tlsf.c **** 
1138:lvgl/src/misc/lv_tlsf.c ****         /* If gap size is too small, offset to next aligned boundary. */
1139:lvgl/src/misc/lv_tlsf.c ****         if(gap && gap < gap_minimum) {
 3575              		.loc 1 1139 9 is_stmt 1 view .LVU1077
 3576              		.loc 1 1139 16 is_stmt 0 view .LVU1078
 3577 0042 531E     		subs	r3, r2, #1
 3578              		.loc 1 1139 11 view .LVU1079
 3579 0044 0E2B     		cmp	r3, #14
 3580 0046 03D9     		bls	.L248
 3581              	.L243:
1140:lvgl/src/misc/lv_tlsf.c ****             const size_t gap_remain = gap_minimum - gap;
1141:lvgl/src/misc/lv_tlsf.c ****             const size_t offset = tlsf_max(gap_remain, align);
1142:lvgl/src/misc/lv_tlsf.c ****             const void * next_aligned = tlsf_cast(void *,
1143:lvgl/src/misc/lv_tlsf.c ****                                                   tlsf_cast(tlsfptr_t, aligned) + offset);
1144:lvgl/src/misc/lv_tlsf.c **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 91


1145:lvgl/src/misc/lv_tlsf.c ****             aligned = align_ptr(next_aligned, align);
1146:lvgl/src/misc/lv_tlsf.c ****             gap = tlsf_cast(size_t,
1147:lvgl/src/misc/lv_tlsf.c ****                             tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
1148:lvgl/src/misc/lv_tlsf.c ****         }
1149:lvgl/src/misc/lv_tlsf.c **** 
1150:lvgl/src/misc/lv_tlsf.c ****         if(gap) {
 3582              		.loc 1 1150 9 is_stmt 1 view .LVU1080
 3583              		.loc 1 1150 11 is_stmt 0 view .LVU1081
 3584 0048 9AB1     		cbz	r2, .L242
1151:lvgl/src/misc/lv_tlsf.c ****             tlsf_assert(gap >= gap_minimum && "gap size too small");
 3585              		.loc 1 1151 13 is_stmt 1 view .LVU1082
 3586              		.loc 1 1151 13 view .LVU1083
 3587 004a 0F2A     		cmp	r2, #15
 3588 004c 0CD8     		bhi	.L244
 3589              	.L245:
 3590              		.loc 1 1151 13 discriminator 2 view .LVU1084
 3591              		.loc 1 1151 13 discriminator 2 view .LVU1085
 3592              		.loc 1 1151 13 discriminator 2 view .LVU1086
 3593              		.loc 1 1151 13 discriminator 2 view .LVU1087
 3594              		.loc 1 1151 13 discriminator 2 view .LVU1088
 3595              		.loc 1 1151 13 discriminator 2 view .LVU1089
 3596 004e FEE7     		b	.L245
 3597              	.L248:
 3598              	.LBB14:
1140:lvgl/src/misc/lv_tlsf.c ****             const size_t gap_remain = gap_minimum - gap;
 3599              		.loc 1 1140 13 view .LVU1090
1140:lvgl/src/misc/lv_tlsf.c ****             const size_t gap_remain = gap_minimum - gap;
 3600              		.loc 1 1140 26 is_stmt 0 view .LVU1091
 3601 0050 C2F11002 		rsb	r2, r2, #16
 3602              	.LVL361:
1141:lvgl/src/misc/lv_tlsf.c ****             const void * next_aligned = tlsf_cast(void *,
 3603              		.loc 1 1141 13 is_stmt 1 view .LVU1092
1142:lvgl/src/misc/lv_tlsf.c ****                                                   tlsf_cast(tlsfptr_t, aligned) + offset);
 3604              		.loc 1 1142 13 view .LVU1093
1145:lvgl/src/misc/lv_tlsf.c ****             gap = tlsf_cast(size_t,
 3605              		.loc 1 1145 13 view .LVU1094
1145:lvgl/src/misc/lv_tlsf.c ****             gap = tlsf_cast(size_t,
 3606              		.loc 1 1145 23 is_stmt 0 view .LVU1095
 3607 0054 2146     		mov	r1, r4
 3608 0056 9442     		cmp	r4, r2
 3609 0058 2CBF     		ite	cs
 3610 005a 0019     		addcs	r0, r0, r4
 3611 005c 8018     		addcc	r0, r0, r2
 3612              	.LVL362:
1145:lvgl/src/misc/lv_tlsf.c ****             gap = tlsf_cast(size_t,
 3613              		.loc 1 1145 23 view .LVU1096
 3614 005e FFF7FEFF 		bl	align_ptr
 3615              	.LVL363:
1146:lvgl/src/misc/lv_tlsf.c ****                             tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
 3616              		.loc 1 1146 13 is_stmt 1 view .LVU1097
1146:lvgl/src/misc/lv_tlsf.c ****                             tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
 3617              		.loc 1 1146 19 is_stmt 0 view .LVU1098
 3618 0062 A0EB0802 		sub	r2, r0, r8
 3619              	.LVL364:
1146:lvgl/src/misc/lv_tlsf.c ****                             tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
 3620              		.loc 1 1146 19 view .LVU1099
 3621 0066 EFE7     		b	.L243
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 92


 3622              	.L244:
1146:lvgl/src/misc/lv_tlsf.c ****                             tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
 3623              		.loc 1 1146 19 view .LVU1100
 3624              	.LBE14:
 3625              		.loc 1 1151 13 is_stmt 1 discriminator 2 view .LVU1101
1152:lvgl/src/misc/lv_tlsf.c ****             block = block_trim_free_leading(control, block, gap);
 3626              		.loc 1 1152 13 discriminator 2 view .LVU1102
 3627              		.loc 1 1152 21 is_stmt 0 discriminator 2 view .LVU1103
 3628 0068 3946     		mov	r1, r7
 3629 006a 3046     		mov	r0, r6
 3630              	.LVL365:
 3631              		.loc 1 1152 21 discriminator 2 view .LVU1104
 3632 006c FFF7FEFF 		bl	block_trim_free_leading
 3633              	.LVL366:
 3634              		.loc 1 1152 21 discriminator 2 view .LVU1105
 3635 0070 0746     		mov	r7, r0
 3636              	.LVL367:
 3637              	.L242:
 3638              		.loc 1 1152 21 discriminator 2 view .LVU1106
 3639              	.LBE13:
1153:lvgl/src/misc/lv_tlsf.c ****         }
1154:lvgl/src/misc/lv_tlsf.c ****     }
1155:lvgl/src/misc/lv_tlsf.c **** 
1156:lvgl/src/misc/lv_tlsf.c ****     return block_prepare_used(control, block, adjust);
 3640              		.loc 1 1156 5 is_stmt 1 view .LVU1107
 3641              		.loc 1 1156 12 is_stmt 0 view .LVU1108
 3642 0072 2A46     		mov	r2, r5
 3643 0074 3946     		mov	r1, r7
 3644 0076 3046     		mov	r0, r6
 3645 0078 FFF7FEFF 		bl	block_prepare_used
 3646              	.LVL368:
1157:lvgl/src/misc/lv_tlsf.c **** }
 3647              		.loc 1 1157 1 view .LVU1109
 3648 007c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3649              		.loc 1 1157 1 view .LVU1110
 3650              		.cfi_endproc
 3651              	.LFE61:
 3653              		.section	.text.lv_tlsf_free,"ax",%progbits
 3654              		.align	1
 3655              		.global	lv_tlsf_free
 3656              		.syntax unified
 3657              		.thumb
 3658              		.thumb_func
 3660              	lv_tlsf_free:
 3661              	.LVL369:
 3662              	.LFB62:
1158:lvgl/src/misc/lv_tlsf.c **** 
1159:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
1160:lvgl/src/misc/lv_tlsf.c **** {
 3663              		.loc 1 1160 1 is_stmt 1 view -0
 3664              		.cfi_startproc
 3665              		@ args = 0, pretend = 0, frame = 0
 3666              		@ frame_needed = 0, uses_anonymous_args = 0
 3667              		.loc 1 1160 1 is_stmt 0 view .LVU1112
 3668 0000 70B5     		push	{r4, r5, r6, lr}
 3669              		.cfi_def_cfa_offset 16
 3670              		.cfi_offset 4, -16
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 93


 3671              		.cfi_offset 5, -12
 3672              		.cfi_offset 6, -8
 3673              		.cfi_offset 14, -4
1161:lvgl/src/misc/lv_tlsf.c ****     size_t size = 0;
 3674              		.loc 1 1161 5 is_stmt 1 view .LVU1113
 3675              	.LVL370:
1162:lvgl/src/misc/lv_tlsf.c ****     /* Don't attempt to free a NULL pointer. */
1163:lvgl/src/misc/lv_tlsf.c ****     if(ptr) {
 3676              		.loc 1 1163 5 view .LVU1114
 3677              		.loc 1 1163 7 is_stmt 0 view .LVU1115
 3678 0002 C9B1     		cbz	r1, .L253
 3679 0004 0546     		mov	r5, r0
 3680 0006 0846     		mov	r0, r1
 3681              	.LVL371:
 3682              	.LBB15:
1164:lvgl/src/misc/lv_tlsf.c ****         control_t * control = tlsf_cast(control_t *, tlsf);
 3683              		.loc 1 1164 9 is_stmt 1 view .LVU1116
1165:lvgl/src/misc/lv_tlsf.c ****         block_header_t * block = block_from_ptr(ptr);
 3684              		.loc 1 1165 9 view .LVU1117
 3685              		.loc 1 1165 34 is_stmt 0 view .LVU1118
 3686 0008 FFF7FEFF 		bl	block_from_ptr
 3687              	.LVL372:
 3688              		.loc 1 1165 34 view .LVU1119
 3689 000c 0446     		mov	r4, r0
 3690              	.LVL373:
1166:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_free(block) && "block already marked as free");
 3691              		.loc 1 1166 9 is_stmt 1 view .LVU1120
 3692              		.loc 1 1166 9 view .LVU1121
 3693 000e FFF7FEFF 		bl	block_is_free
 3694              	.LVL374:
 3695              		.loc 1 1166 9 is_stmt 0 view .LVU1122
 3696 0012 00B1     		cbz	r0, .L251
 3697              	.L252:
 3698              		.loc 1 1166 9 is_stmt 1 discriminator 1 view .LVU1123
 3699              		.loc 1 1166 9 discriminator 1 view .LVU1124
 3700              		.loc 1 1166 9 discriminator 1 view .LVU1125
 3701              		.loc 1 1166 9 discriminator 1 view .LVU1126
 3702              		.loc 1 1166 9 discriminator 1 view .LVU1127
 3703              		.loc 1 1166 9 discriminator 1 view .LVU1128
 3704 0014 FEE7     		b	.L252
 3705              	.L251:
 3706              		.loc 1 1166 9 discriminator 2 view .LVU1129
1167:lvgl/src/misc/lv_tlsf.c ****         size = block->size;
 3707              		.loc 1 1167 9 discriminator 2 view .LVU1130
 3708              		.loc 1 1167 14 is_stmt 0 discriminator 2 view .LVU1131
 3709 0016 6668     		ldr	r6, [r4, #4]
 3710              	.LVL375:
1168:lvgl/src/misc/lv_tlsf.c ****         block_mark_as_free(block);
 3711              		.loc 1 1168 9 is_stmt 1 discriminator 2 view .LVU1132
 3712 0018 2046     		mov	r0, r4
 3713 001a FFF7FEFF 		bl	block_mark_as_free
 3714              	.LVL376:
1169:lvgl/src/misc/lv_tlsf.c ****         block = block_merge_prev(control, block);
 3715              		.loc 1 1169 9 discriminator 2 view .LVU1133
 3716              		.loc 1 1169 17 is_stmt 0 discriminator 2 view .LVU1134
 3717 001e 2146     		mov	r1, r4
 3718 0020 2846     		mov	r0, r5
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 94


 3719 0022 FFF7FEFF 		bl	block_merge_prev
 3720              	.LVL377:
 3721 0026 0146     		mov	r1, r0
 3722              	.LVL378:
1170:lvgl/src/misc/lv_tlsf.c ****         block = block_merge_next(control, block);
 3723              		.loc 1 1170 9 is_stmt 1 discriminator 2 view .LVU1135
 3724              		.loc 1 1170 17 is_stmt 0 discriminator 2 view .LVU1136
 3725 0028 2846     		mov	r0, r5
 3726              	.LVL379:
 3727              		.loc 1 1170 17 discriminator 2 view .LVU1137
 3728 002a FFF7FEFF 		bl	block_merge_next
 3729              	.LVL380:
 3730              		.loc 1 1170 17 discriminator 2 view .LVU1138
 3731 002e 0146     		mov	r1, r0
 3732              	.LVL381:
1171:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, block);
 3733              		.loc 1 1171 9 is_stmt 1 discriminator 2 view .LVU1139
 3734 0030 2846     		mov	r0, r5
 3735              	.LVL382:
 3736              		.loc 1 1171 9 is_stmt 0 discriminator 2 view .LVU1140
 3737 0032 FFF7FEFF 		bl	block_insert
 3738              	.LVL383:
 3739              		.loc 1 1171 9 discriminator 2 view .LVU1141
 3740 0036 00E0     		b	.L249
 3741              	.LVL384:
 3742              	.L253:
 3743              		.loc 1 1171 9 discriminator 2 view .LVU1142
 3744              	.LBE15:
1161:lvgl/src/misc/lv_tlsf.c ****     /* Don't attempt to free a NULL pointer. */
 3745              		.loc 1 1161 12 view .LVU1143
 3746 0038 0026     		movs	r6, #0
1172:lvgl/src/misc/lv_tlsf.c ****     }
1173:lvgl/src/misc/lv_tlsf.c **** 
1174:lvgl/src/misc/lv_tlsf.c ****     return size;
 3747              		.loc 1 1174 5 is_stmt 1 view .LVU1144
 3748              	.LVL385:
 3749              	.L249:
1175:lvgl/src/misc/lv_tlsf.c **** }
 3750              		.loc 1 1175 1 is_stmt 0 view .LVU1145
 3751 003a 3046     		mov	r0, r6
 3752 003c 70BD     		pop	{r4, r5, r6, pc}
 3753              		.cfi_endproc
 3754              	.LFE62:
 3756              		.section	.text.lv_tlsf_realloc,"ax",%progbits
 3757              		.align	1
 3758              		.global	lv_tlsf_realloc
 3759              		.syntax unified
 3760              		.thumb
 3761              		.thumb_func
 3763              	lv_tlsf_realloc:
 3764              	.LVL386:
 3765              	.LFB63:
1176:lvgl/src/misc/lv_tlsf.c **** 
1177:lvgl/src/misc/lv_tlsf.c **** /*
1178:lvgl/src/misc/lv_tlsf.c **** ** The TLSF block information provides us with enough information to
1179:lvgl/src/misc/lv_tlsf.c **** ** provide a reasonably intelligent implementation of realloc, growing or
1180:lvgl/src/misc/lv_tlsf.c **** ** shrinking the currently allocated block as required.
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 95


1181:lvgl/src/misc/lv_tlsf.c **** **
1182:lvgl/src/misc/lv_tlsf.c **** ** This routine handles the somewhat esoteric edge cases of realloc:
1183:lvgl/src/misc/lv_tlsf.c **** ** - a non-zero size with a null pointer will behave like malloc
1184:lvgl/src/misc/lv_tlsf.c **** ** - a zero size with a non-null pointer will behave like free
1185:lvgl/src/misc/lv_tlsf.c **** ** - a request that cannot be satisfied will leave the original buffer
1186:lvgl/src/misc/lv_tlsf.c **** **   untouched
1187:lvgl/src/misc/lv_tlsf.c **** ** - an extended buffer size will leave the newly-allocated area with
1188:lvgl/src/misc/lv_tlsf.c **** **   contents undefined
1189:lvgl/src/misc/lv_tlsf.c **** */
1190:lvgl/src/misc/lv_tlsf.c **** void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
1191:lvgl/src/misc/lv_tlsf.c **** {
 3766              		.loc 1 1191 1 is_stmt 1 view -0
 3767              		.cfi_startproc
 3768              		@ args = 0, pretend = 0, frame = 0
 3769              		@ frame_needed = 0, uses_anonymous_args = 0
 3770              		.loc 1 1191 1 is_stmt 0 view .LVU1147
 3771 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3772              		.cfi_def_cfa_offset 40
 3773              		.cfi_offset 3, -40
 3774              		.cfi_offset 4, -36
 3775              		.cfi_offset 5, -32
 3776              		.cfi_offset 6, -28
 3777              		.cfi_offset 7, -24
 3778              		.cfi_offset 8, -20
 3779              		.cfi_offset 9, -16
 3780              		.cfi_offset 10, -12
 3781              		.cfi_offset 11, -8
 3782              		.cfi_offset 14, -4
 3783 0004 0446     		mov	r4, r0
1192:lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
 3784              		.loc 1 1192 5 is_stmt 1 view .LVU1148
 3785              	.LVL387:
1193:lvgl/src/misc/lv_tlsf.c ****     void * p = 0;
 3786              		.loc 1 1193 5 view .LVU1149
1194:lvgl/src/misc/lv_tlsf.c **** 
1195:lvgl/src/misc/lv_tlsf.c ****     /* Zero-size requests are treated as free. */
1196:lvgl/src/misc/lv_tlsf.c ****     if(ptr && size == 0) {
 3787              		.loc 1 1196 5 view .LVU1150
 3788              		.loc 1 1196 8 is_stmt 0 view .LVU1151
 3789 0006 0F46     		mov	r7, r1
 3790              		.loc 1 1196 12 view .LVU1152
 3791 0008 0039     		subs	r1, r1, #0
 3792              	.LVL388:
 3793              		.loc 1 1196 12 view .LVU1153
 3794 000a 18BF     		it	ne
 3795 000c 0121     		movne	r1, #1
 3796 000e 002A     		cmp	r2, #0
 3797 0010 18BF     		it	ne
 3798 0012 0021     		movne	r1, #0
 3799              		.loc 1 1196 7 view .LVU1154
 3800 0014 21BB     		cbnz	r1, .L266
 3801 0016 9046     		mov	r8, r2
1197:lvgl/src/misc/lv_tlsf.c ****         lv_tlsf_free(tlsf, ptr);
1198:lvgl/src/misc/lv_tlsf.c ****     }
1199:lvgl/src/misc/lv_tlsf.c ****     /* Requests with NULL pointers are treated as malloc. */
1200:lvgl/src/misc/lv_tlsf.c ****     else if(!ptr) {
 3802              		.loc 1 1200 10 is_stmt 1 view .LVU1155
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 96


 3803              		.loc 1 1200 12 is_stmt 0 view .LVU1156
 3804 0018 3FB3     		cbz	r7, .L267
 3805              	.LBB16:
1201:lvgl/src/misc/lv_tlsf.c ****         p = lv_tlsf_malloc(tlsf, size);
1202:lvgl/src/misc/lv_tlsf.c ****     }
1203:lvgl/src/misc/lv_tlsf.c ****     else {
1204:lvgl/src/misc/lv_tlsf.c ****         block_header_t * block = block_from_ptr(ptr);
 3806              		.loc 1 1204 9 is_stmt 1 view .LVU1157
 3807              		.loc 1 1204 34 is_stmt 0 view .LVU1158
 3808 001a 3846     		mov	r0, r7
 3809              	.LVL389:
 3810              		.loc 1 1204 34 view .LVU1159
 3811 001c FFF7FEFF 		bl	block_from_ptr
 3812              	.LVL390:
 3813              		.loc 1 1204 34 view .LVU1160
 3814 0020 0646     		mov	r6, r0
 3815              	.LVL391:
1205:lvgl/src/misc/lv_tlsf.c ****         block_header_t * next = block_next(block);
 3816              		.loc 1 1205 9 is_stmt 1 view .LVU1161
 3817              		.loc 1 1205 33 is_stmt 0 view .LVU1162
 3818 0022 FFF7FEFF 		bl	block_next
 3819              	.LVL392:
 3820              		.loc 1 1205 33 view .LVU1163
 3821 0026 8146     		mov	r9, r0
 3822              	.LVL393:
1206:lvgl/src/misc/lv_tlsf.c **** 
1207:lvgl/src/misc/lv_tlsf.c ****         const size_t cursize = block_size(block);
 3823              		.loc 1 1207 9 is_stmt 1 view .LVU1164
 3824              		.loc 1 1207 32 is_stmt 0 view .LVU1165
 3825 0028 3046     		mov	r0, r6
 3826              	.LVL394:
 3827              		.loc 1 1207 32 view .LVU1166
 3828 002a FFF7FEFF 		bl	block_size
 3829              	.LVL395:
 3830 002e 0546     		mov	r5, r0
 3831              	.LVL396:
1208:lvgl/src/misc/lv_tlsf.c ****         const size_t combined = cursize + block_size(next) + block_header_overhead;
 3832              		.loc 1 1208 9 is_stmt 1 view .LVU1167
 3833              		.loc 1 1208 43 is_stmt 0 view .LVU1168
 3834 0030 4846     		mov	r0, r9
 3835              	.LVL397:
 3836              		.loc 1 1208 43 view .LVU1169
 3837 0032 FFF7FEFF 		bl	block_size
 3838              	.LVL398:
 3839              		.loc 1 1208 41 view .LVU1170
 3840 0036 4319     		adds	r3, r0, r5
 3841              		.loc 1 1208 22 view .LVU1171
 3842 0038 03F1040A 		add	r10, r3, #4
 3843              	.LVL399:
1209:lvgl/src/misc/lv_tlsf.c ****         const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 3844              		.loc 1 1209 9 is_stmt 1 view .LVU1172
 3845              		.loc 1 1209 31 is_stmt 0 view .LVU1173
 3846 003c 0421     		movs	r1, #4
 3847 003e 4046     		mov	r0, r8
 3848 0040 FFF7FEFF 		bl	adjust_request_size
 3849              	.LVL400:
1210:lvgl/src/misc/lv_tlsf.c ****         if(size > cursize && adjust == 0) {
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 97


 3850              		.loc 1 1210 9 is_stmt 1 view .LVU1174
 3851              		.loc 1 1210 37 is_stmt 0 view .LVU1175
 3852 0044 8346     		mov	fp, r0
 3853              		.loc 1 1210 27 view .LVU1176
 3854 0046 A845     		cmp	r8, r5
 3855 0048 94BF     		ite	ls
 3856 004a 0023     		movls	r3, #0
 3857 004c 0123     		movhi	r3, #1
 3858 004e 0028     		cmp	r0, #0
 3859 0050 18BF     		it	ne
 3860 0052 0023     		movne	r3, #0
 3861              		.loc 1 1210 11 view .LVU1177
 3862 0054 E3BB     		cbnz	r3, .L264
1211:lvgl/src/misc/lv_tlsf.c ****             /* The request is probably too large, fail */
1212:lvgl/src/misc/lv_tlsf.c ****             return NULL;
1213:lvgl/src/misc/lv_tlsf.c ****         }
1214:lvgl/src/misc/lv_tlsf.c **** 
1215:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_free(block) && "block already marked as free");
 3863              		.loc 1 1215 9 is_stmt 1 view .LVU1178
 3864              		.loc 1 1215 9 view .LVU1179
 3865 0056 3046     		mov	r0, r6
 3866              	.LVL401:
 3867              		.loc 1 1215 9 is_stmt 0 view .LVU1180
 3868 0058 FFF7FEFF 		bl	block_is_free
 3869              	.LVL402:
 3870 005c 60B1     		cbz	r0, .L259
 3871              	.L260:
 3872              		.loc 1 1215 9 is_stmt 1 discriminator 1 view .LVU1181
 3873              		.loc 1 1215 9 discriminator 1 view .LVU1182
 3874              		.loc 1 1215 9 discriminator 1 view .LVU1183
 3875              		.loc 1 1215 9 discriminator 1 view .LVU1184
 3876              		.loc 1 1215 9 discriminator 1 view .LVU1185
 3877              		.loc 1 1215 9 discriminator 1 view .LVU1186
 3878 005e FEE7     		b	.L260
 3879              	.LVL403:
 3880              	.L266:
 3881              		.loc 1 1215 9 is_stmt 0 discriminator 1 view .LVU1187
 3882              	.LBE16:
1197:lvgl/src/misc/lv_tlsf.c ****     }
 3883              		.loc 1 1197 9 is_stmt 1 view .LVU1188
 3884 0060 3946     		mov	r1, r7
 3885 0062 FFF7FEFF 		bl	lv_tlsf_free
 3886              	.LVL404:
1193:lvgl/src/misc/lv_tlsf.c **** 
 3887              		.loc 1 1193 12 is_stmt 0 view .LVU1189
 3888 0066 0026     		movs	r6, #0
 3889 0068 03E0     		b	.L255
 3890              	.LVL405:
 3891              	.L267:
1201:lvgl/src/misc/lv_tlsf.c ****     }
 3892              		.loc 1 1201 9 is_stmt 1 view .LVU1190
1201:lvgl/src/misc/lv_tlsf.c ****     }
 3893              		.loc 1 1201 13 is_stmt 0 view .LVU1191
 3894 006a 1146     		mov	r1, r2
 3895 006c FFF7FEFF 		bl	lv_tlsf_malloc
 3896              	.LVL406:
1201:lvgl/src/misc/lv_tlsf.c ****     }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 98


 3897              		.loc 1 1201 13 view .LVU1192
 3898 0070 0646     		mov	r6, r0
 3899              	.LVL407:
 3900              	.L255:
1216:lvgl/src/misc/lv_tlsf.c **** 
1217:lvgl/src/misc/lv_tlsf.c ****         /*
1218:lvgl/src/misc/lv_tlsf.c ****         ** If the next block is used, or when combined with the current
1219:lvgl/src/misc/lv_tlsf.c ****         ** block, does not offer enough space, we must reallocate and copy.
1220:lvgl/src/misc/lv_tlsf.c ****         */
1221:lvgl/src/misc/lv_tlsf.c ****         if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
1222:lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
1223:lvgl/src/misc/lv_tlsf.c ****             if(p) {
1224:lvgl/src/misc/lv_tlsf.c ****                 const size_t minsize = tlsf_min(cursize, size);
1225:lvgl/src/misc/lv_tlsf.c ****                 lv_memcpy(p, ptr, minsize);
1226:lvgl/src/misc/lv_tlsf.c ****                 lv_tlsf_free(tlsf, ptr);
1227:lvgl/src/misc/lv_tlsf.c ****             }
1228:lvgl/src/misc/lv_tlsf.c ****         }
1229:lvgl/src/misc/lv_tlsf.c ****         else {
1230:lvgl/src/misc/lv_tlsf.c ****             /* Do we need to expand to the next block? */
1231:lvgl/src/misc/lv_tlsf.c ****             if(adjust > cursize) {
1232:lvgl/src/misc/lv_tlsf.c ****                 block_merge_next(control, block);
1233:lvgl/src/misc/lv_tlsf.c ****                 block_mark_as_used(block);
1234:lvgl/src/misc/lv_tlsf.c ****             }
1235:lvgl/src/misc/lv_tlsf.c **** 
1236:lvgl/src/misc/lv_tlsf.c ****             /* Trim the resulting block and return the original pointer. */
1237:lvgl/src/misc/lv_tlsf.c ****             block_trim_used(control, block, adjust);
1238:lvgl/src/misc/lv_tlsf.c ****             p = ptr;
1239:lvgl/src/misc/lv_tlsf.c ****         }
1240:lvgl/src/misc/lv_tlsf.c ****     }
1241:lvgl/src/misc/lv_tlsf.c **** 
1242:lvgl/src/misc/lv_tlsf.c ****     return p;
1243:lvgl/src/misc/lv_tlsf.c **** }
 3901              		.loc 1 1243 1 view .LVU1193
 3902 0072 3046     		mov	r0, r6
 3903 0074 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3904              	.LVL408:
 3905              	.L259:
 3906              	.LBB18:
1215:lvgl/src/misc/lv_tlsf.c **** 
 3907              		.loc 1 1215 9 is_stmt 1 discriminator 2 view .LVU1194
1221:lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
 3908              		.loc 1 1221 9 discriminator 2 view .LVU1195
1221:lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
 3909              		.loc 1 1221 11 is_stmt 0 discriminator 2 view .LVU1196
 3910 0078 5D45     		cmp	r5, fp
 3911 007a 18D2     		bcs	.L261
1221:lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
 3912              		.loc 1 1221 34 discriminator 1 view .LVU1197
 3913 007c 4846     		mov	r0, r9
 3914 007e FFF7FEFF 		bl	block_is_free
 3915              	.LVL409:
1221:lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
 3916              		.loc 1 1221 29 discriminator 1 view .LVU1198
 3917 0082 08B1     		cbz	r0, .L262
1221:lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
 3918              		.loc 1 1221 54 discriminator 2 view .LVU1199
 3919 0084 DA45     		cmp	r10, fp
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 99


 3920 0086 12D2     		bcs	.L261
 3921              	.L262:
1222:lvgl/src/misc/lv_tlsf.c ****             if(p) {
 3922              		.loc 1 1222 13 is_stmt 1 view .LVU1200
1222:lvgl/src/misc/lv_tlsf.c ****             if(p) {
 3923              		.loc 1 1222 17 is_stmt 0 view .LVU1201
 3924 0088 4146     		mov	r1, r8
 3925 008a 2046     		mov	r0, r4
 3926 008c FFF7FEFF 		bl	lv_tlsf_malloc
 3927              	.LVL410:
1223:lvgl/src/misc/lv_tlsf.c ****                 const size_t minsize = tlsf_min(cursize, size);
 3928              		.loc 1 1223 13 is_stmt 1 view .LVU1202
1223:lvgl/src/misc/lv_tlsf.c ****                 const size_t minsize = tlsf_min(cursize, size);
 3929              		.loc 1 1223 15 is_stmt 0 view .LVU1203
 3930 0090 0646     		mov	r6, r0
 3931              	.LVL411:
1223:lvgl/src/misc/lv_tlsf.c ****                 const size_t minsize = tlsf_min(cursize, size);
 3932              		.loc 1 1223 15 view .LVU1204
 3933 0092 0028     		cmp	r0, #0
 3934 0094 EDD0     		beq	.L255
 3935              	.LBB17:
1224:lvgl/src/misc/lv_tlsf.c ****                 lv_memcpy(p, ptr, minsize);
 3936              		.loc 1 1224 17 is_stmt 1 view .LVU1205
 3937              	.LVL412:
1225:lvgl/src/misc/lv_tlsf.c ****                 lv_tlsf_free(tlsf, ptr);
 3938              		.loc 1 1225 17 view .LVU1206
 3939 0096 4246     		mov	r2, r8
 3940 0098 A845     		cmp	r8, r5
 3941 009a 28BF     		it	cs
 3942 009c 2A46     		movcs	r2, r5
 3943 009e 3946     		mov	r1, r7
 3944 00a0 FFF7FEFF 		bl	lv_memcpy
 3945              	.LVL413:
1226:lvgl/src/misc/lv_tlsf.c ****             }
 3946              		.loc 1 1226 17 view .LVU1207
 3947 00a4 3946     		mov	r1, r7
 3948 00a6 2046     		mov	r0, r4
 3949 00a8 FFF7FEFF 		bl	lv_tlsf_free
 3950              	.LVL414:
 3951 00ac E1E7     		b	.L255
 3952              	.LVL415:
 3953              	.L261:
1226:lvgl/src/misc/lv_tlsf.c ****             }
 3954              		.loc 1 1226 17 is_stmt 0 view .LVU1208
 3955              	.LBE17:
1231:lvgl/src/misc/lv_tlsf.c ****                 block_merge_next(control, block);
 3956              		.loc 1 1231 13 is_stmt 1 view .LVU1209
1231:lvgl/src/misc/lv_tlsf.c ****                 block_merge_next(control, block);
 3957              		.loc 1 1231 15 is_stmt 0 view .LVU1210
 3958 00ae 5D45     		cmp	r5, fp
 3959 00b0 06D3     		bcc	.L268
 3960              	.L263:
1237:lvgl/src/misc/lv_tlsf.c ****             p = ptr;
 3961              		.loc 1 1237 13 is_stmt 1 view .LVU1211
 3962 00b2 5A46     		mov	r2, fp
 3963 00b4 3146     		mov	r1, r6
 3964 00b6 2046     		mov	r0, r4
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 100


 3965 00b8 FFF7FEFF 		bl	block_trim_used
 3966              	.LVL416:
1238:lvgl/src/misc/lv_tlsf.c ****         }
 3967              		.loc 1 1238 13 view .LVU1212
1238:lvgl/src/misc/lv_tlsf.c ****         }
 3968              		.loc 1 1238 15 is_stmt 0 view .LVU1213
 3969 00bc 3E46     		mov	r6, r7
 3970              	.LVL417:
1238:lvgl/src/misc/lv_tlsf.c ****         }
 3971              		.loc 1 1238 15 view .LVU1214
 3972 00be D8E7     		b	.L255
 3973              	.LVL418:
 3974              	.L268:
1232:lvgl/src/misc/lv_tlsf.c ****                 block_mark_as_used(block);
 3975              		.loc 1 1232 17 is_stmt 1 view .LVU1215
 3976 00c0 3146     		mov	r1, r6
 3977 00c2 2046     		mov	r0, r4
 3978 00c4 FFF7FEFF 		bl	block_merge_next
 3979              	.LVL419:
1233:lvgl/src/misc/lv_tlsf.c ****             }
 3980              		.loc 1 1233 17 view .LVU1216
 3981 00c8 3046     		mov	r0, r6
 3982 00ca FFF7FEFF 		bl	block_mark_as_used
 3983              	.LVL420:
 3984 00ce F0E7     		b	.L263
 3985              	.LVL421:
 3986              	.L264:
1212:lvgl/src/misc/lv_tlsf.c ****         }
 3987              		.loc 1 1212 20 is_stmt 0 view .LVU1217
 3988 00d0 0026     		movs	r6, #0
 3989              	.LVL422:
1212:lvgl/src/misc/lv_tlsf.c ****         }
 3990              		.loc 1 1212 20 view .LVU1218
 3991 00d2 CEE7     		b	.L255
 3992              	.LBE18:
 3993              		.cfi_endproc
 3994              	.LFE63:
 3996              		.text
 3997              	.Letext0:
 3998              		.file 2 "c:\\tools\\gcc-arm-none-eabi\\lib\\gcc\\arm-none-eabi\\10.3.1\\include\\stddef.h"
 3999              		.file 3 "lvgl/src/misc/lv_tlsf.h"
 4000              		.file 4 "lvgl/src/misc/lv_mem.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 101


DEFINED SYMBOLS
                            *ABS*:00000000 lv_tlsf.c
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:19     .text.block_size:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:24     .text.block_size:00000000 block_size
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:44     .text.block_set_size:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:49     .text.block_set_size:00000000 block_set_size
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:76     .text.block_is_last:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:81     .text.block_is_last:00000000 block_is_last
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:105    .text.block_is_free:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:110    .text.block_is_free:00000000 block_is_free
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:129    .text.block_set_free:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:134    .text.block_set_free:00000000 block_set_free
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:153    .text.block_set_used:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:158    .text.block_set_used:00000000 block_set_used
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:177    .text.block_is_prev_free:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:182    .text.block_is_prev_free:00000000 block_is_prev_free
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:201    .text.block_set_prev_free:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:206    .text.block_set_prev_free:00000000 block_set_prev_free
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:225    .text.block_set_prev_used:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:230    .text.block_set_prev_used:00000000 block_set_prev_used
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:249    .text.block_from_ptr:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:254    .text.block_from_ptr:00000000 block_from_ptr
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:272    .text.block_to_ptr:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:277    .text.block_to_ptr:00000000 block_to_ptr
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:295    .text.offset_to_block:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:300    .text.offset_to_block:00000000 offset_to_block
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:318    .text.block_prev:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:323    .text.block_prev:00000000 block_prev
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:361    .text.block_next:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:366    .text.block_next:00000000 block_next
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:423    .text.block_link_next:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:428    .text.block_link_next:00000000 block_link_next
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:456    .text.block_mark_as_free:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:461    .text.block_mark_as_free:00000000 block_mark_as_free
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:492    .text.block_mark_as_used:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:497    .text.block_mark_as_used:00000000 block_mark_as_used
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:528    .text.align_up:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:533    .text.align_up:00000000 align_up
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:572    .text.align_down:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:577    .text.align_down:00000000 align_down
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:613    .text.align_ptr:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:618    .text.align_ptr:00000000 align_ptr
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:659    .text.adjust_request_size:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:664    .text.adjust_request_size:00000000 adjust_request_size
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:718    .text.remove_free_block:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:723    .text.remove_free_block:00000000 remove_free_block
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:830    .text.insert_free_block:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:835    .text.insert_free_block:00000000 insert_free_block
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:955    .text.block_can_split:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:960    .text.block_can_split:00000000 block_can_split
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:991    .text.block_split:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:996    .text.block_split:00000000 block_split
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1116   .text.block_absorb:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1121   .text.block_absorb:00000000 block_absorb
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1177   .text.control_constructor:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1182   .text.control_constructor:00000000 control_constructor
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1247   .text.integrity_walker:00000000 $t
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 102


C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1252   .text.integrity_walker:00000000 integrity_walker
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1348   .text.default_walker:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1353   .text.default_walker:00000000 default_walker
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1371   .text.tlsf_fls:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1376   .text.tlsf_fls:00000000 tlsf_fls
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1411   .text.mapping_insert:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1416   .text.mapping_insert:00000000 mapping_insert
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1492   .text.block_insert:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1497   .text.block_insert:00000000 block_insert
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1543   .text.block_trim_free:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1548   .text.block_trim_free:00000000 block_trim_free
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1629   .text.block_prepare_used:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1634   .text.block_prepare_used:00000000 block_prepare_used
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1692   .text.block_trim_free_leading:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1697   .text.block_trim_free_leading:00000000 block_trim_free_leading
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1765   .text.block_remove:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1770   .text.block_remove:00000000 block_remove
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1816   .text.block_merge_prev:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1821   .text.block_merge_prev:00000000 block_merge_prev
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1910   .text.block_merge_next:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1915   .text.block_merge_next:00000000 block_merge_next
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:1998   .text.block_trim_used:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2003   .text.block_trim_used:00000000 block_trim_used
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2087   .text.mapping_search:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2092   .text.mapping_search:00000000 mapping_search
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2146   .text.tlsf_ffs:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2151   .text.tlsf_ffs:00000000 tlsf_ffs
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2176   .text.search_suitable_block:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2181   .text.search_suitable_block:00000000 search_suitable_block
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2307   .text.block_locate_free:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2312   .text.block_locate_free:00000000 block_locate_free
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2419   .text.lv_tlsf_check:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2425   .text.lv_tlsf_check:00000000 lv_tlsf_check
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2713   .text.lv_tlsf_walk_pool:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2719   .text.lv_tlsf_walk_pool:00000000 lv_tlsf_walk_pool
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2809   .text.lv_tlsf_walk_pool:00000058 $d
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2814   .text.lv_tlsf_block_size:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2820   .text.lv_tlsf_block_size:00000000 lv_tlsf_block_size
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2864   .text.lv_tlsf_check_pool:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2870   .text.lv_tlsf_check_pool:00000000 lv_tlsf_check_pool
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2903   .text.lv_tlsf_check_pool:0000001c $d
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2908   .text.lv_tlsf_size:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2914   .text.lv_tlsf_size:00000000 lv_tlsf_size
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2929   .text.lv_tlsf_align_size:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2935   .text.lv_tlsf_align_size:00000000 lv_tlsf_align_size
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2950   .text.lv_tlsf_block_size_min:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2956   .text.lv_tlsf_block_size_min:00000000 lv_tlsf_block_size_min
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2971   .text.lv_tlsf_block_size_max:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2977   .text.lv_tlsf_block_size_max:00000000 lv_tlsf_block_size_max
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2992   .text.lv_tlsf_pool_overhead:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:2998   .text.lv_tlsf_pool_overhead:00000000 lv_tlsf_pool_overhead
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3013   .text.lv_tlsf_alloc_overhead:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3019   .text.lv_tlsf_alloc_overhead:00000000 lv_tlsf_alloc_overhead
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3034   .text.lv_tlsf_add_pool:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3040   .text.lv_tlsf_add_pool:00000000 lv_tlsf_add_pool
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3156   .text.lv_tlsf_add_pool:00000074 $d
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3161   .text.lv_tlsf_remove_pool:00000000 $t
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s 			page 103


C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3167   .text.lv_tlsf_remove_pool:00000000 lv_tlsf_remove_pool
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3279   .text.lv_tlsf_create:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3285   .text.lv_tlsf_create:00000000 lv_tlsf_create
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3324   .text.lv_tlsf_create_with_pool:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3330   .text.lv_tlsf_create_with_pool:00000000 lv_tlsf_create_with_pool
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3372   .text.lv_tlsf_destroy:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3378   .text.lv_tlsf_destroy:00000000 lv_tlsf_destroy
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3393   .text.lv_tlsf_get_pool:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3399   .text.lv_tlsf_get_pool:00000000 lv_tlsf_get_pool
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3424   .text.lv_tlsf_malloc:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3430   .text.lv_tlsf_malloc:00000000 lv_tlsf_malloc
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3484   .text.lv_tlsf_memalign:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3490   .text.lv_tlsf_memalign:00000000 lv_tlsf_memalign
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3654   .text.lv_tlsf_free:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3660   .text.lv_tlsf_free:00000000 lv_tlsf_free
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3757   .text.lv_tlsf_realloc:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccynYOVr.s:3763   .text.lv_tlsf_realloc:00000000 lv_tlsf_realloc

UNDEFINED SYMBOLS
lv_memcpy
