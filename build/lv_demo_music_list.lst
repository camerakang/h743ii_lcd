ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_demo_music_list.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata.add_list_btn.str1.4,"aMS",%progbits,1
  19              		.align	2
  20              	.LC0:
  21 0000 256C753A 		.ascii	"%lu:%02lu\000"
  21      2530326C 
  21      7500
  22              		.section	.text.add_list_btn,"ax",%progbits
  23              		.align	1
  24              		.syntax unified
  25              		.thumb
  26              		.thumb_func
  28              	add_list_btn:
  29              	.LVL0:
  30              	.LFB207:
  31              		.file 1 "lvgl/demos/music/lv_demo_music_list.c"
   1:lvgl/demos/music/lv_demo_music_list.c **** /**
   2:lvgl/demos/music/lv_demo_music_list.c ****  * @file lv_demo_music_list.c
   3:lvgl/demos/music/lv_demo_music_list.c ****  *
   4:lvgl/demos/music/lv_demo_music_list.c ****  */
   5:lvgl/demos/music/lv_demo_music_list.c **** 
   6:lvgl/demos/music/lv_demo_music_list.c **** /*********************
   7:lvgl/demos/music/lv_demo_music_list.c ****  *      INCLUDES
   8:lvgl/demos/music/lv_demo_music_list.c ****  *********************/
   9:lvgl/demos/music/lv_demo_music_list.c **** #include "lv_demo_music_list.h"
  10:lvgl/demos/music/lv_demo_music_list.c **** #if LV_USE_DEMO_MUSIC
  11:lvgl/demos/music/lv_demo_music_list.c **** 
  12:lvgl/demos/music/lv_demo_music_list.c **** #include "lv_demo_music_main.h"
  13:lvgl/demos/music/lv_demo_music_list.c **** 
  14:lvgl/demos/music/lv_demo_music_list.c **** /*********************
  15:lvgl/demos/music/lv_demo_music_list.c ****  *      DEFINES
  16:lvgl/demos/music/lv_demo_music_list.c ****  *********************/
  17:lvgl/demos/music/lv_demo_music_list.c **** 
  18:lvgl/demos/music/lv_demo_music_list.c **** /**********************
  19:lvgl/demos/music/lv_demo_music_list.c ****  *      TYPEDEFS
  20:lvgl/demos/music/lv_demo_music_list.c ****  **********************/
  21:lvgl/demos/music/lv_demo_music_list.c **** 
  22:lvgl/demos/music/lv_demo_music_list.c **** /**********************
  23:lvgl/demos/music/lv_demo_music_list.c ****  *  STATIC PROTOTYPES
  24:lvgl/demos/music/lv_demo_music_list.c ****  **********************/
  25:lvgl/demos/music/lv_demo_music_list.c **** static lv_obj_t * add_list_btn(lv_obj_t * parent, uint32_t track_id);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 2


  26:lvgl/demos/music/lv_demo_music_list.c **** static void btn_click_event_cb(lv_event_t * e);
  27:lvgl/demos/music/lv_demo_music_list.c **** 
  28:lvgl/demos/music/lv_demo_music_list.c **** /**********************
  29:lvgl/demos/music/lv_demo_music_list.c ****  *  STATIC VARIABLES
  30:lvgl/demos/music/lv_demo_music_list.c ****  **********************/
  31:lvgl/demos/music/lv_demo_music_list.c **** static lv_obj_t * list;
  32:lvgl/demos/music/lv_demo_music_list.c **** static const lv_font_t * font_small;
  33:lvgl/demos/music/lv_demo_music_list.c **** static const lv_font_t * font_medium;
  34:lvgl/demos/music/lv_demo_music_list.c **** static lv_style_t style_scrollbar;
  35:lvgl/demos/music/lv_demo_music_list.c **** static lv_style_t style_btn;
  36:lvgl/demos/music/lv_demo_music_list.c **** static lv_style_t style_btn_pr;
  37:lvgl/demos/music/lv_demo_music_list.c **** static lv_style_t style_btn_chk;
  38:lvgl/demos/music/lv_demo_music_list.c **** static lv_style_t style_btn_dis;
  39:lvgl/demos/music/lv_demo_music_list.c **** static lv_style_t style_title;
  40:lvgl/demos/music/lv_demo_music_list.c **** static lv_style_t style_artist;
  41:lvgl/demos/music/lv_demo_music_list.c **** static lv_style_t style_time;
  42:lvgl/demos/music/lv_demo_music_list.c **** LV_IMG_DECLARE(img_lv_demo_music_btn_list_play);
  43:lvgl/demos/music/lv_demo_music_list.c **** LV_IMG_DECLARE(img_lv_demo_music_btn_list_pause);
  44:lvgl/demos/music/lv_demo_music_list.c **** 
  45:lvgl/demos/music/lv_demo_music_list.c **** /**********************
  46:lvgl/demos/music/lv_demo_music_list.c ****  *      MACROS
  47:lvgl/demos/music/lv_demo_music_list.c ****  **********************/
  48:lvgl/demos/music/lv_demo_music_list.c **** 
  49:lvgl/demos/music/lv_demo_music_list.c **** /**********************
  50:lvgl/demos/music/lv_demo_music_list.c ****  *   GLOBAL FUNCTIONS
  51:lvgl/demos/music/lv_demo_music_list.c ****  **********************/
  52:lvgl/demos/music/lv_demo_music_list.c **** 
  53:lvgl/demos/music/lv_demo_music_list.c **** lv_obj_t * _lv_demo_music_list_create(lv_obj_t * parent)
  54:lvgl/demos/music/lv_demo_music_list.c **** {
  55:lvgl/demos/music/lv_demo_music_list.c **** #if LV_DEMO_MUSIC_LARGE
  56:lvgl/demos/music/lv_demo_music_list.c ****     font_small = &lv_font_montserrat_16;
  57:lvgl/demos/music/lv_demo_music_list.c ****     font_medium = &lv_font_montserrat_22;
  58:lvgl/demos/music/lv_demo_music_list.c **** #else
  59:lvgl/demos/music/lv_demo_music_list.c ****     font_small = &lv_font_montserrat_12;
  60:lvgl/demos/music/lv_demo_music_list.c ****     font_medium = &lv_font_montserrat_16;
  61:lvgl/demos/music/lv_demo_music_list.c **** #endif
  62:lvgl/demos/music/lv_demo_music_list.c **** 
  63:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_init(&style_scrollbar);
  64:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_width(&style_scrollbar,  4);
  65:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_opa(&style_scrollbar, LV_OPA_COVER);
  66:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_color(&style_scrollbar, lv_color_hex3(0xeee));
  67:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_radius(&style_scrollbar, LV_RADIUS_CIRCLE);
  68:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_pad_right(&style_scrollbar, 4);
  69:lvgl/demos/music/lv_demo_music_list.c **** 
  70:lvgl/demos/music/lv_demo_music_list.c ****     static const lv_coord_t grid_cols[] = {LV_GRID_CONTENT, LV_GRID_FR(1), LV_GRID_CONTENT, LV_GRID
  71:lvgl/demos/music/lv_demo_music_list.c **** #if LV_DEMO_MUSIC_LARGE
  72:lvgl/demos/music/lv_demo_music_list.c ****     static const lv_coord_t grid_rows[] = {35,  30, LV_GRID_TEMPLATE_LAST};
  73:lvgl/demos/music/lv_demo_music_list.c **** #else
  74:lvgl/demos/music/lv_demo_music_list.c ****     static const lv_coord_t grid_rows[] = {22,  17, LV_GRID_TEMPLATE_LAST};
  75:lvgl/demos/music/lv_demo_music_list.c **** #endif
  76:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_init(&style_btn);
  77:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_opa(&style_btn, LV_OPA_TRANSP);
  78:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_grid_column_dsc_array(&style_btn, grid_cols);
  79:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_grid_row_dsc_array(&style_btn, grid_rows);
  80:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_grid_row_align(&style_btn, LV_GRID_ALIGN_CENTER);
  81:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_layout(&style_btn, LV_LAYOUT_GRID);
  82:lvgl/demos/music/lv_demo_music_list.c **** #if LV_DEMO_MUSIC_LARGE
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 3


  83:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_pad_right(&style_btn, 30);
  84:lvgl/demos/music/lv_demo_music_list.c **** #else
  85:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_pad_right(&style_btn, 20);
  86:lvgl/demos/music/lv_demo_music_list.c **** #endif
  87:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_init(&style_btn_pr);
  88:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_opa(&style_btn_pr, LV_OPA_COVER);
  89:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_color(&style_btn_pr,  lv_color_hex(0x4c4965));
  90:lvgl/demos/music/lv_demo_music_list.c **** 
  91:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_init(&style_btn_chk);
  92:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_opa(&style_btn_chk, LV_OPA_COVER);
  93:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_color(&style_btn_chk, lv_color_hex(0x4c4965));
  94:lvgl/demos/music/lv_demo_music_list.c **** 
  95:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_init(&style_btn_dis);
  96:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_opa(&style_btn_dis, LV_OPA_40);
  97:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_img_opa(&style_btn_dis, LV_OPA_40);
  98:lvgl/demos/music/lv_demo_music_list.c **** 
  99:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_init(&style_title);
 100:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_font(&style_title, font_medium);
 101:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_color(&style_title, lv_color_hex(0xffffff));
 102:lvgl/demos/music/lv_demo_music_list.c **** 
 103:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_init(&style_artist);
 104:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_font(&style_artist, font_small);
 105:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_color(&style_artist, lv_color_hex(0xb1b0be));
 106:lvgl/demos/music/lv_demo_music_list.c **** 
 107:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_init(&style_time);
 108:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_font(&style_time, font_medium);
 109:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_color(&style_time, lv_color_hex(0xffffff));
 110:lvgl/demos/music/lv_demo_music_list.c **** 
 111:lvgl/demos/music/lv_demo_music_list.c ****     /*Create an empty transparent container*/
 112:lvgl/demos/music/lv_demo_music_list.c ****     list = lv_obj_create(parent);
 113:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_remove_style_all(list);
 114:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_size(list, LV_HOR_RES, LV_VER_RES - LV_DEMO_MUSIC_HANDLE_SIZE);
 115:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_y(list, LV_DEMO_MUSIC_HANDLE_SIZE);
 116:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_add_style(list, &style_scrollbar, LV_PART_SCROLLBAR);
 117:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_flex_flow(list, LV_FLEX_FLOW_COLUMN);
 118:lvgl/demos/music/lv_demo_music_list.c **** 
 119:lvgl/demos/music/lv_demo_music_list.c ****     uint32_t track_id;
 120:lvgl/demos/music/lv_demo_music_list.c ****     for(track_id = 0; _lv_demo_music_get_title(track_id); track_id++) {
 121:lvgl/demos/music/lv_demo_music_list.c ****         add_list_btn(list,  track_id);
 122:lvgl/demos/music/lv_demo_music_list.c ****     }
 123:lvgl/demos/music/lv_demo_music_list.c **** 
 124:lvgl/demos/music/lv_demo_music_list.c **** #if LV_DEMO_MUSIC_SQUARE || LV_DEMO_MUSIC_ROUND
 125:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_scroll_snap_y(list, LV_SCROLL_SNAP_CENTER);
 126:lvgl/demos/music/lv_demo_music_list.c **** #endif
 127:lvgl/demos/music/lv_demo_music_list.c **** 
 128:lvgl/demos/music/lv_demo_music_list.c ****     _lv_demo_music_list_btn_check(0, true);
 129:lvgl/demos/music/lv_demo_music_list.c **** 
 130:lvgl/demos/music/lv_demo_music_list.c ****     return list;
 131:lvgl/demos/music/lv_demo_music_list.c **** }
 132:lvgl/demos/music/lv_demo_music_list.c **** 
 133:lvgl/demos/music/lv_demo_music_list.c **** void _lv_demo_music_list_close(void)
 134:lvgl/demos/music/lv_demo_music_list.c **** {
 135:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_scrollbar);
 136:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_btn);
 137:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_btn_pr);
 138:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_btn_chk);
 139:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_btn_dis);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 4


 140:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_title);
 141:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_artist);
 142:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_time);
 143:lvgl/demos/music/lv_demo_music_list.c **** }
 144:lvgl/demos/music/lv_demo_music_list.c **** 
 145:lvgl/demos/music/lv_demo_music_list.c **** void _lv_demo_music_list_btn_check(uint32_t track_id, bool state)
 146:lvgl/demos/music/lv_demo_music_list.c **** {
 147:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * btn = lv_obj_get_child(list, track_id);
 148:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * icon = lv_obj_get_child(btn, 0);
 149:lvgl/demos/music/lv_demo_music_list.c **** 
 150:lvgl/demos/music/lv_demo_music_list.c ****     if(state) {
 151:lvgl/demos/music/lv_demo_music_list.c ****         lv_obj_add_state(btn, LV_STATE_CHECKED);
 152:lvgl/demos/music/lv_demo_music_list.c ****         lv_img_set_src(icon, &img_lv_demo_music_btn_list_pause);
 153:lvgl/demos/music/lv_demo_music_list.c ****         lv_obj_scroll_to_view(btn, LV_ANIM_ON);
 154:lvgl/demos/music/lv_demo_music_list.c ****     }
 155:lvgl/demos/music/lv_demo_music_list.c ****     else {
 156:lvgl/demos/music/lv_demo_music_list.c ****         lv_obj_clear_state(btn, LV_STATE_CHECKED);
 157:lvgl/demos/music/lv_demo_music_list.c ****         lv_img_set_src(icon, &img_lv_demo_music_btn_list_play);
 158:lvgl/demos/music/lv_demo_music_list.c ****     }
 159:lvgl/demos/music/lv_demo_music_list.c **** }
 160:lvgl/demos/music/lv_demo_music_list.c **** 
 161:lvgl/demos/music/lv_demo_music_list.c **** /**********************
 162:lvgl/demos/music/lv_demo_music_list.c ****  *   STATIC FUNCTIONS
 163:lvgl/demos/music/lv_demo_music_list.c ****  **********************/
 164:lvgl/demos/music/lv_demo_music_list.c **** 
 165:lvgl/demos/music/lv_demo_music_list.c **** static lv_obj_t * add_list_btn(lv_obj_t * parent, uint32_t track_id)
 166:lvgl/demos/music/lv_demo_music_list.c **** {
  32              		.loc 1 166 1 view -0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 32
  35              		@ frame_needed = 0, uses_anonymous_args = 0
  36              		.loc 1 166 1 is_stmt 0 view .LVU1
  37 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  38              		.cfi_def_cfa_offset 32
  39              		.cfi_offset 4, -32
  40              		.cfi_offset 5, -28
  41              		.cfi_offset 6, -24
  42              		.cfi_offset 7, -20
  43              		.cfi_offset 8, -16
  44              		.cfi_offset 9, -12
  45              		.cfi_offset 10, -8
  46              		.cfi_offset 14, -4
  47 0004 8CB0     		sub	sp, sp, #48
  48              		.cfi_def_cfa_offset 80
  49 0006 0446     		mov	r4, r0
  50 0008 0D46     		mov	r5, r1
 167:lvgl/demos/music/lv_demo_music_list.c ****     uint32_t t = _lv_demo_music_get_track_length(track_id);
  51              		.loc 1 167 5 is_stmt 1 view .LVU2
  52              		.loc 1 167 18 is_stmt 0 view .LVU3
  53 000a 0846     		mov	r0, r1
  54              	.LVL1:
  55              		.loc 1 167 18 view .LVU4
  56 000c FFF7FEFF 		bl	_lv_demo_music_get_track_length
  57              	.LVL2:
 168:lvgl/demos/music/lv_demo_music_list.c ****     char time[32];
  58              		.loc 1 168 5 is_stmt 1 view .LVU5
 169:lvgl/demos/music/lv_demo_music_list.c ****     lv_snprintf(time, sizeof(time), "%"LV_PRIu32":%02"LV_PRIu32, t / 60, t % 60);
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 5


  59              		.loc 1 169 5 view .LVU6
  60 0010 5A4B     		ldr	r3, .L5
  61 0012 A3FB0023 		umull	r2, r3, r3, r0
  62 0016 5B09     		lsrs	r3, r3, #5
  63 0018 C3EB0312 		rsb	r2, r3, r3, lsl #4
  64 001c A0EB8202 		sub	r2, r0, r2, lsl #2
  65 0020 0092     		str	r2, [sp]
  66 0022 574A     		ldr	r2, .L5+4
  67 0024 2021     		movs	r1, #32
  68 0026 04A8     		add	r0, sp, #16
  69              	.LVL3:
  70              		.loc 1 169 5 is_stmt 0 view .LVU7
  71 0028 FFF7FEFF 		bl	lv_snprintf
  72              	.LVL4:
 170:lvgl/demos/music/lv_demo_music_list.c ****     const char * title = _lv_demo_music_get_title(track_id);
  73              		.loc 1 170 5 is_stmt 1 view .LVU8
  74              		.loc 1 170 26 is_stmt 0 view .LVU9
  75 002c 2846     		mov	r0, r5
  76 002e FFF7FEFF 		bl	_lv_demo_music_get_title
  77              	.LVL5:
  78 0032 0746     		mov	r7, r0
  79              	.LVL6:
 171:lvgl/demos/music/lv_demo_music_list.c ****     const char * artist = _lv_demo_music_get_artist(track_id);
  80              		.loc 1 171 5 is_stmt 1 view .LVU10
  81              		.loc 1 171 27 is_stmt 0 view .LVU11
  82 0034 2846     		mov	r0, r5
  83              	.LVL7:
  84              		.loc 1 171 27 view .LVU12
  85 0036 FFF7FEFF 		bl	_lv_demo_music_get_artist
  86              	.LVL8:
  87 003a 8146     		mov	r9, r0
  88              	.LVL9:
 172:lvgl/demos/music/lv_demo_music_list.c **** 
 173:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * btn = lv_obj_create(parent);
  89              		.loc 1 173 5 is_stmt 1 view .LVU13
  90              		.loc 1 173 22 is_stmt 0 view .LVU14
  91 003c 2046     		mov	r0, r4
  92              	.LVL10:
  93              		.loc 1 173 22 view .LVU15
  94 003e FFF7FEFF 		bl	lv_obj_create
  95              	.LVL11:
  96 0042 0446     		mov	r4, r0
  97              	.LVL12:
 174:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_remove_style_all(btn);
  98              		.loc 1 174 5 is_stmt 1 view .LVU16
  99              	.LBB28:
 100              	.LBI28:
 101              		.file 2 "lvgl/demos/music/../../src/core/lv_obj_style.h"
   1:lvgl/demos/music/../../src/core/lv_obj_style.h **** /**
   2:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * @file lv_obj_style.h
   3:lvgl/demos/music/../../src/core/lv_obj_style.h ****  *
   4:lvgl/demos/music/../../src/core/lv_obj_style.h ****  */
   5:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
   6:lvgl/demos/music/../../src/core/lv_obj_style.h **** #ifndef LV_OBJ_STYLE_H
   7:lvgl/demos/music/../../src/core/lv_obj_style.h **** #define LV_OBJ_STYLE_H
   8:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
   9:lvgl/demos/music/../../src/core/lv_obj_style.h **** #ifdef __cplusplus
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 6


  10:lvgl/demos/music/../../src/core/lv_obj_style.h **** extern "C" {
  11:lvgl/demos/music/../../src/core/lv_obj_style.h **** #endif
  12:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
  13:lvgl/demos/music/../../src/core/lv_obj_style.h **** /*********************
  14:lvgl/demos/music/../../src/core/lv_obj_style.h ****  *      INCLUDES
  15:lvgl/demos/music/../../src/core/lv_obj_style.h ****  *********************/
  16:lvgl/demos/music/../../src/core/lv_obj_style.h **** #include <stdint.h>
  17:lvgl/demos/music/../../src/core/lv_obj_style.h **** #include <stdbool.h>
  18:lvgl/demos/music/../../src/core/lv_obj_style.h **** #include "../misc/lv_bidi.h"
  19:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
  20:lvgl/demos/music/../../src/core/lv_obj_style.h **** /*********************
  21:lvgl/demos/music/../../src/core/lv_obj_style.h ****  *      DEFINES
  22:lvgl/demos/music/../../src/core/lv_obj_style.h ****  *********************/
  23:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
  24:lvgl/demos/music/../../src/core/lv_obj_style.h **** /**********************
  25:lvgl/demos/music/../../src/core/lv_obj_style.h ****  *      TYPEDEFS
  26:lvgl/demos/music/../../src/core/lv_obj_style.h ****  **********************/
  27:lvgl/demos/music/../../src/core/lv_obj_style.h **** /*Can't include lv_obj.h because it includes this header file*/
  28:lvgl/demos/music/../../src/core/lv_obj_style.h **** struct _lv_obj_t;
  29:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
  30:lvgl/demos/music/../../src/core/lv_obj_style.h **** typedef enum {
  31:lvgl/demos/music/../../src/core/lv_obj_style.h ****     _LV_STYLE_STATE_CMP_SAME,           /*The style properties in the 2 states are identical*/
  32:lvgl/demos/music/../../src/core/lv_obj_style.h ****     _LV_STYLE_STATE_CMP_DIFF_REDRAW,    /*The differences can be shown with a simple redraw*/
  33:lvgl/demos/music/../../src/core/lv_obj_style.h ****     _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD,  /*The differences can be shown with a simple redraw*/
  34:lvgl/demos/music/../../src/core/lv_obj_style.h ****     _LV_STYLE_STATE_CMP_DIFF_LAYOUT,    /*The differences can be shown with a simple redraw*/
  35:lvgl/demos/music/../../src/core/lv_obj_style.h **** } _lv_style_state_cmp_t;
  36:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
  37:lvgl/demos/music/../../src/core/lv_obj_style.h **** typedef uint32_t lv_style_selector_t;
  38:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
  39:lvgl/demos/music/../../src/core/lv_obj_style.h **** typedef struct {
  40:lvgl/demos/music/../../src/core/lv_obj_style.h ****     lv_style_t * style;
  41:lvgl/demos/music/../../src/core/lv_obj_style.h ****     uint32_t selector : 24;
  42:lvgl/demos/music/../../src/core/lv_obj_style.h ****     uint32_t is_local : 1;
  43:lvgl/demos/music/../../src/core/lv_obj_style.h ****     uint32_t is_trans : 1;
  44:lvgl/demos/music/../../src/core/lv_obj_style.h **** } _lv_obj_style_t;
  45:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
  46:lvgl/demos/music/../../src/core/lv_obj_style.h **** typedef struct {
  47:lvgl/demos/music/../../src/core/lv_obj_style.h ****     uint16_t time;
  48:lvgl/demos/music/../../src/core/lv_obj_style.h ****     uint16_t delay;
  49:lvgl/demos/music/../../src/core/lv_obj_style.h ****     lv_style_selector_t selector;
  50:lvgl/demos/music/../../src/core/lv_obj_style.h ****     lv_style_prop_t prop;
  51:lvgl/demos/music/../../src/core/lv_obj_style.h ****     lv_anim_path_cb_t path_cb;
  52:lvgl/demos/music/../../src/core/lv_obj_style.h **** #if LV_USE_USER_DATA
  53:lvgl/demos/music/../../src/core/lv_obj_style.h ****     void * user_data;
  54:lvgl/demos/music/../../src/core/lv_obj_style.h **** #endif
  55:lvgl/demos/music/../../src/core/lv_obj_style.h **** } _lv_obj_style_transition_dsc_t;
  56:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
  57:lvgl/demos/music/../../src/core/lv_obj_style.h **** /**********************
  58:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * GLOBAL PROTOTYPES
  59:lvgl/demos/music/../../src/core/lv_obj_style.h ****  **********************/
  60:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
  61:lvgl/demos/music/../../src/core/lv_obj_style.h **** /**
  62:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * Initialize the object related style manager module.
  63:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * Called by LVGL in `lv_init()`
  64:lvgl/demos/music/../../src/core/lv_obj_style.h ****  */
  65:lvgl/demos/music/../../src/core/lv_obj_style.h **** void _lv_obj_style_init(void);
  66:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 7


  67:lvgl/demos/music/../../src/core/lv_obj_style.h **** /**
  68:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * Add a style to an object.
  69:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * @param obj       pointer to an object
  70:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * @param style     pointer to a style to add
  71:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * @param selector  OR-ed value of parts and state to which the style should be added
  72:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * @example         lv_obj_add_style(btn, &style_btn, 0); //Default button style
  73:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * @example         lv_obj_add_style(btn, &btn_red, LV_STATE_PRESSED); //Overwrite only some colors
  74:lvgl/demos/music/../../src/core/lv_obj_style.h ****  */
  75:lvgl/demos/music/../../src/core/lv_obj_style.h **** void lv_obj_add_style(struct _lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector);
  76:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
  77:lvgl/demos/music/../../src/core/lv_obj_style.h **** /**
  78:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * Add a style to an object.
  79:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * @param obj       pointer to an object
  80:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * @param style     pointer to a style to remove. Can be NULL to check only the selector
  81:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * @param selector  OR-ed values of states and a part to remove only styles with matching selectors
  82:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * @example lv_obj_remove_style(obj, &style, LV_PART_ANY | LV_STATE_ANY); //Remove a specific style
  83:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * @example lv_obj_remove_style(obj, NULL, LV_PART_MAIN | LV_STATE_ANY); //Remove all styles from t
  84:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * @example lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY); //Remove all styles
  85:lvgl/demos/music/../../src/core/lv_obj_style.h ****  */
  86:lvgl/demos/music/../../src/core/lv_obj_style.h **** void lv_obj_remove_style(struct _lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector);
  87:lvgl/demos/music/../../src/core/lv_obj_style.h **** 
  88:lvgl/demos/music/../../src/core/lv_obj_style.h **** /**
  89:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * Remove all styles from an object
  90:lvgl/demos/music/../../src/core/lv_obj_style.h ****  * @param obj       pointer to an object
  91:lvgl/demos/music/../../src/core/lv_obj_style.h ****  */
  92:lvgl/demos/music/../../src/core/lv_obj_style.h **** static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
 102              		.loc 2 92 20 view .LVU17
 103              	.LBB29:
  93:lvgl/demos/music/../../src/core/lv_obj_style.h **** {
  94:lvgl/demos/music/../../src/core/lv_obj_style.h ****     lv_obj_remove_style(obj, NULL, (lv_style_selector_t)LV_PART_ANY | (lv_style_selector_t)LV_STATE
 104              		.loc 2 94 5 view .LVU18
 105 0044 4F4A     		ldr	r2, .L5+8
 106 0046 0021     		movs	r1, #0
 107 0048 FFF7FEFF 		bl	lv_obj_remove_style
 108              	.LVL13:
 109              		.loc 2 94 5 is_stmt 0 view .LVU19
 110              	.LBE29:
 111              	.LBE28:
 175:lvgl/demos/music/lv_demo_music_list.c **** #if LV_DEMO_MUSIC_LARGE
 176:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_size(btn, lv_pct(100), 110);
 177:lvgl/demos/music/lv_demo_music_list.c **** #else
 178:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_size(btn, lv_pct(100), 60);
 112              		.loc 1 178 5 is_stmt 1 view .LVU20
 113              		.file 3 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_area.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @file lv_area.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #ifndef LV_AREA_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_AREA_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*********************
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 8


  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #include "../lv_conf_internal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #include <stdbool.h>
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #include <stdint.h>
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*********************
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      DEFINES
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *********************/
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #if LV_USE_LARGE_COORD
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef int32_t lv_coord_t;
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #else
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef int16_t lv_coord_t;
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #endif
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**********************
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      TYPEDEFS
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  **********************/
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Represents a point on the screen.
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef struct {
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t x;
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t y;
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** } lv_point_t;
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /** Represents an area of the screen.*/
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef struct {
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t x1;
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t y1;
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t x2;
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t y2;
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** } lv_area_t;
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /** Alignments*/
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** enum {
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_DEFAULT = 0,
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_TOP_LEFT,
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_TOP_MID,
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_TOP_RIGHT,
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_BOTTOM_LEFT,
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_BOTTOM_MID,
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_BOTTOM_RIGHT,
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_LEFT_MID,
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_RIGHT_MID,
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_CENTER,
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_TOP_LEFT,
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_TOP_MID,
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_TOP_RIGHT,
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_BOTTOM_LEFT,
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_BOTTOM_MID,
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_BOTTOM_RIGHT,
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_LEFT_TOP,
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_LEFT_MID,
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 9


  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_LEFT_BOTTOM,
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_RIGHT_TOP,
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_RIGHT_MID,
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_RIGHT_BOTTOM,
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** };
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef uint8_t lv_align_t;
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** enum {
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_NONE     = 0x00,
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_LEFT     = (1 << 0),
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_RIGHT    = (1 << 1),
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_TOP      = (1 << 2),
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_BOTTOM   = (1 << 3),
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_HOR      = LV_DIR_LEFT | LV_DIR_RIGHT,
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_VER      = LV_DIR_TOP | LV_DIR_BOTTOM,
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_ALL      = LV_DIR_HOR | LV_DIR_VER,
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** };
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef uint8_t lv_dir_t;
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**********************
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * GLOBAL PROTOTYPES
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  **********************/
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Initialize an area
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x1 left coordinate of the area
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param y1 top coordinate of the area
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x2 right coordinate of the area
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param y2 bottom coordinate of the area
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2);
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Copy an area
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param dest pointer to the destination area
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param src pointer to the source area
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->x1 = src->x1;
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->y1 = src->y1;
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->x2 = src->x2;
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->y2 = src->y2;
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** }
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get the width of an area
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return the width of the area (if x1 == x2 -> width = 1)
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** }
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 10


 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get the height of an area
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return the height of the area (if y1 == y2 -> height = 1)
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** }
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Set the width of an area
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param w the new width of the area (w == 1 makes x1 == x2)
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_set_width(lv_area_t * area_p, lv_coord_t w);
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Set the height of an area
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param h the new height of the area (h == 1 makes y1 == y2)
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_set_height(lv_area_t * area_p, lv_coord_t h);
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Set the position of an area (width and height will be kept)
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x the new x coordinate of the area
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param y the new y coordinate of the area
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void _lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y);
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Return with area of an area (x * y)
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return size of area
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** uint32_t lv_area_get_size(const lv_area_t * area_p);
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_increase(lv_area_t * area, lv_coord_t w_extra, lv_coord_t h_extra);
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_move(lv_area_t * area, lv_coord_t x_ofs, lv_coord_t y_ofs);
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get the common parts of two areas
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param res_p pointer to an area, the result will be stored her
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to the first area
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to the second area
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return false: the two area has NO common parts, res_p is invalid
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get resulting sub areas after removing the common parts of two areas from the first area
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param res_p pointer to an array of areas with a count of 4, the resulting areas will be stored 
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to the first area
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to the second area
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 11


 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return number of results (max 4) or -1 if no intersect
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** int8_t _lv_area_diff(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Join two areas into a third which involves the other two
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param res_p pointer to an area, the result will be stored here
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to the first area
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to the second area
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if a point is on an area
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a_p pointer to an area
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param p_p pointer to a point
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param radius radius of area (e.g. for rounded rectangle)
 202:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return false:the point is out of the area
 203:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 204:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius);
 205:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 206:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 207:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if two area has common parts
 208:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to an area.
 209:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to an other area
 210:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return false: a1_p and a2_p has no common parts
 211:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 212:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p);
 213:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 214:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 215:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if an area is fully on an other
 216:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param ain_p pointer to an area which could be in 'aholder_p'
 217:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param aholder_p pointer to an area which could involve 'ain_p'
 218:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 219:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return true: `ain_p` is fully inside `aholder_p`
 220:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 221:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius);
 222:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 223:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 224:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if an area is fully out of an other
 225:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param aout_p pointer to an area which could be in 'aholder_p'
 226:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param aholder_p pointer to an area which could involve 'ain_p'
 227:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 228:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return true: `aout_p` is fully outside `aholder_p`
 229:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 230:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_out(const lv_area_t * aout_p, const lv_area_t * aholder_p, lv_coord_t radius);
 231:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 232:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 233:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if 2 area is the same
 234:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a pointer to an area
 235:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param b pointer to another area
 236:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 237:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_equal(const lv_area_t * a, const lv_area_t * b);
 238:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 239:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 240:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Align an area to an other
 241:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param base an are where the other will be aligned
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 12


 242:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param to_align the area to align
 243:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param align `LV_ALIGN_...`
 244:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 245:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_align(const lv_area_t * base, lv_area_t * to_align, lv_align_t align, lv_coord_t ofs_x
 246:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 247:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_point_transform(lv_point_t * p, int32_t angle, int32_t zoom, const lv_point_t * pivot);
 248:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**********************
 250:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      MACROS
 251:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  **********************/
 252:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 253:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #if LV_USE_LARGE_COORD
 254:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_SHIFT    (29U)
 255:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #else
 256:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_SHIFT    (13U)
 257:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #endif
 258:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_MASK     (3 << _LV_COORD_TYPE_SHIFT)
 260:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE(x)       ((x) & _LV_COORD_TYPE_MASK)  /*Extract type specifiers*/
 261:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_PLAIN(x)      ((x) & ~_LV_COORD_TYPE_MASK) /*Remove type specifiers*/
 262:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 263:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_PX       (0 << _LV_COORD_TYPE_SHIFT)
 264:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_SPEC     (1 << _LV_COORD_TYPE_SHIFT)
 265:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_PX_NEG   (3 << _LV_COORD_TYPE_SHIFT)
 266:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 267:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_IS_PX(x)       (_LV_COORD_TYPE(x) == _LV_COORD_TYPE_PX || \
 268:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****                                  _LV_COORD_TYPE(x) == _LV_COORD_TYPE_PX_NEG ? true : false)
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_IS_SPEC(x)     (_LV_COORD_TYPE(x) == _LV_COORD_TYPE_SPEC ? true : false)
 270:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 271:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_SET_SPEC(x)    ((x) | _LV_COORD_TYPE_SPEC)
 272:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 273:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*Special coordinates*/
 274:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_PCT(x)               (x < 0 ? LV_COORD_SET_SPEC(1000 - (x)) : LV_COORD_SET_SPEC(x))
 275:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_IS_PCT(x)      ((LV_COORD_IS_SPEC(x) && _LV_COORD_PLAIN(x) <= 2000) ? true : false
 276:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_GET_PCT(x)     (_LV_COORD_PLAIN(x) > 1000 ? 1000 - _LV_COORD_PLAIN(x) : _LV_COORD_
 277:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_SIZE_CONTENT         LV_COORD_SET_SPEC(2001)
 278:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 279:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** LV_EXPORT_CONST_INT(LV_SIZE_CONTENT);
 280:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 281:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*Max coordinate value*/
 282:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_MAX            ((1 << _LV_COORD_TYPE_SHIFT) - 1)
 283:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_MIN            (-LV_COORD_MAX)
 284:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 285:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** LV_EXPORT_CONST_INT(LV_COORD_MAX);
 286:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** LV_EXPORT_CONST_INT(LV_COORD_MIN);
 287:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 288:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 289:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Convert a percentage value to `lv_coord_t`.
 290:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Percentage values are stored in special range
 291:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x the percentage (0..1000)
 292:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return a coordinate that stores the percentage
 293:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 294:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** static inline lv_coord_t lv_pct(lv_coord_t x)
 295:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 296:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     return LV_PCT(x);
 114              		.loc 3 296 5 view .LVU21
 115              		.loc 1 178 5 is_stmt 0 view .LVU22
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 13


 116 004c 3C22     		movs	r2, #60
 117 004e 42F26401 		movw	r1, #8292
 118 0052 2046     		mov	r0, r4
 119 0054 FFF7FEFF 		bl	lv_obj_set_size
 120              	.LVL14:
 179:lvgl/demos/music/lv_demo_music_list.c **** #endif
 180:lvgl/demos/music/lv_demo_music_list.c **** 
 181:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_add_style(btn, &style_btn, 0);
 121              		.loc 1 181 5 is_stmt 1 view .LVU23
 122 0058 0022     		movs	r2, #0
 123 005a 4B49     		ldr	r1, .L5+12
 124 005c 2046     		mov	r0, r4
 125 005e FFF7FEFF 		bl	lv_obj_add_style
 126              	.LVL15:
 182:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_add_style(btn, &style_btn_pr, LV_STATE_PRESSED);
 127              		.loc 1 182 5 view .LVU24
 128 0062 2022     		movs	r2, #32
 129 0064 4949     		ldr	r1, .L5+16
 130 0066 2046     		mov	r0, r4
 131 0068 FFF7FEFF 		bl	lv_obj_add_style
 132              	.LVL16:
 183:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_add_style(btn, &style_btn_chk, LV_STATE_CHECKED);
 133              		.loc 1 183 5 view .LVU25
 134 006c 0122     		movs	r2, #1
 135 006e 4849     		ldr	r1, .L5+20
 136 0070 2046     		mov	r0, r4
 137 0072 FFF7FEFF 		bl	lv_obj_add_style
 138              	.LVL17:
 184:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_add_style(btn, &style_btn_dis, LV_STATE_DISABLED);
 139              		.loc 1 184 5 view .LVU26
 140 0076 8022     		movs	r2, #128
 141 0078 4649     		ldr	r1, .L5+24
 142 007a 2046     		mov	r0, r4
 143 007c FFF7FEFF 		bl	lv_obj_add_style
 144              	.LVL18:
 185:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_add_event_cb(btn, btn_click_event_cb, LV_EVENT_CLICKED, NULL);
 145              		.loc 1 185 5 view .LVU27
 146 0080 0023     		movs	r3, #0
 147 0082 0722     		movs	r2, #7
 148 0084 4449     		ldr	r1, .L5+28
 149 0086 2046     		mov	r0, r4
 150 0088 FFF7FEFF 		bl	lv_obj_add_event_cb
 151              	.LVL19:
 186:lvgl/demos/music/lv_demo_music_list.c **** 
 187:lvgl/demos/music/lv_demo_music_list.c ****     if(track_id >= 3) {
 152              		.loc 1 187 5 view .LVU28
 153              		.loc 1 187 7 is_stmt 0 view .LVU29
 154 008c 022D     		cmp	r5, #2
 155 008e 6FD8     		bhi	.L4
 156              	.L2:
 188:lvgl/demos/music/lv_demo_music_list.c ****         lv_obj_add_state(btn, LV_STATE_DISABLED);
 189:lvgl/demos/music/lv_demo_music_list.c ****     }
 190:lvgl/demos/music/lv_demo_music_list.c **** 
 191:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * icon = lv_img_create(btn);
 157              		.loc 1 191 5 is_stmt 1 view .LVU30
 158              		.loc 1 191 23 is_stmt 0 view .LVU31
 159 0090 2046     		mov	r0, r4
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 14


 160 0092 FFF7FEFF 		bl	lv_img_create
 161              	.LVL20:
 162 0096 8246     		mov	r10, r0
 163              	.LVL21:
 192:lvgl/demos/music/lv_demo_music_list.c ****     lv_img_set_src(icon, &img_lv_demo_music_btn_list_play);
 164              		.loc 1 192 5 is_stmt 1 view .LVU32
 165 0098 4049     		ldr	r1, .L5+32
 166 009a FFF7FEFF 		bl	lv_img_set_src
 167              	.LVL22:
 193:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_grid_cell(icon, LV_GRID_ALIGN_START, 0, 1, LV_GRID_ALIGN_CENTER, 0, 2);
 168              		.loc 1 193 5 view .LVU33
 169 009e 4FF00208 		mov	r8, #2
 170 00a2 CDF80880 		str	r8, [sp, #8]
 171 00a6 0026     		movs	r6, #0
 172 00a8 0196     		str	r6, [sp, #4]
 173 00aa 0125     		movs	r5, #1
 174              	.LVL23:
 175              		.loc 1 193 5 is_stmt 0 view .LVU34
 176 00ac 0095     		str	r5, [sp]
 177 00ae 2B46     		mov	r3, r5
 178 00b0 3246     		mov	r2, r6
 179 00b2 3146     		mov	r1, r6
 180 00b4 5046     		mov	r0, r10
 181 00b6 FFF7FEFF 		bl	lv_obj_set_grid_cell
 182              	.LVL24:
 194:lvgl/demos/music/lv_demo_music_list.c **** 
 195:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * title_label = lv_label_create(btn);
 183              		.loc 1 195 5 is_stmt 1 view .LVU35
 184              		.loc 1 195 30 is_stmt 0 view .LVU36
 185 00ba 2046     		mov	r0, r4
 186 00bc FFF7FEFF 		bl	lv_label_create
 187              	.LVL25:
 188 00c0 8246     		mov	r10, r0
 189              	.LVL26:
 196:lvgl/demos/music/lv_demo_music_list.c ****     lv_label_set_text(title_label, title);
 190              		.loc 1 196 5 is_stmt 1 view .LVU37
 191 00c2 3946     		mov	r1, r7
 192 00c4 FFF7FEFF 		bl	lv_label_set_text
 193              	.LVL27:
 197:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_grid_cell(title_label, LV_GRID_ALIGN_START, 1, 1, LV_GRID_ALIGN_CENTER, 0, 1);
 194              		.loc 1 197 5 view .LVU38
 195 00c8 0295     		str	r5, [sp, #8]
 196 00ca 0196     		str	r6, [sp, #4]
 197 00cc 0095     		str	r5, [sp]
 198 00ce 2B46     		mov	r3, r5
 199 00d0 2A46     		mov	r2, r5
 200 00d2 3146     		mov	r1, r6
 201 00d4 5046     		mov	r0, r10
 202 00d6 FFF7FEFF 		bl	lv_obj_set_grid_cell
 203              	.LVL28:
 198:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_add_style(title_label, &style_title, 0);
 204              		.loc 1 198 5 view .LVU39
 205 00da 3246     		mov	r2, r6
 206 00dc 3049     		ldr	r1, .L5+36
 207 00de 5046     		mov	r0, r10
 208 00e0 FFF7FEFF 		bl	lv_obj_add_style
 209              	.LVL29:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 15


 199:lvgl/demos/music/lv_demo_music_list.c **** 
 200:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * artist_label = lv_label_create(btn);
 210              		.loc 1 200 5 view .LVU40
 211              		.loc 1 200 31 is_stmt 0 view .LVU41
 212 00e4 2046     		mov	r0, r4
 213 00e6 FFF7FEFF 		bl	lv_label_create
 214              	.LVL30:
 215 00ea 0746     		mov	r7, r0
 216              	.LVL31:
 201:lvgl/demos/music/lv_demo_music_list.c ****     lv_label_set_text(artist_label, artist);
 217              		.loc 1 201 5 is_stmt 1 view .LVU42
 218 00ec 4946     		mov	r1, r9
 219 00ee FFF7FEFF 		bl	lv_label_set_text
 220              	.LVL32:
 202:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_add_style(artist_label, &style_artist, 0);
 221              		.loc 1 202 5 view .LVU43
 222 00f2 3246     		mov	r2, r6
 223 00f4 2B49     		ldr	r1, .L5+40
 224 00f6 3846     		mov	r0, r7
 225 00f8 FFF7FEFF 		bl	lv_obj_add_style
 226              	.LVL33:
 203:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_grid_cell(artist_label, LV_GRID_ALIGN_START, 1, 1, LV_GRID_ALIGN_CENTER, 1, 1);
 227              		.loc 1 203 5 view .LVU44
 228 00fc 0295     		str	r5, [sp, #8]
 229 00fe 0195     		str	r5, [sp, #4]
 230 0100 0095     		str	r5, [sp]
 231 0102 2B46     		mov	r3, r5
 232 0104 2A46     		mov	r2, r5
 233 0106 3146     		mov	r1, r6
 234 0108 3846     		mov	r0, r7
 235 010a FFF7FEFF 		bl	lv_obj_set_grid_cell
 236              	.LVL34:
 204:lvgl/demos/music/lv_demo_music_list.c **** 
 205:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * time_label = lv_label_create(btn);
 237              		.loc 1 205 5 view .LVU45
 238              		.loc 1 205 29 is_stmt 0 view .LVU46
 239 010e 2046     		mov	r0, r4
 240 0110 FFF7FEFF 		bl	lv_label_create
 241              	.LVL35:
 242 0114 0746     		mov	r7, r0
 243              	.LVL36:
 206:lvgl/demos/music/lv_demo_music_list.c ****     lv_label_set_text(time_label, time);
 244              		.loc 1 206 5 is_stmt 1 view .LVU47
 245 0116 04A9     		add	r1, sp, #16
 246 0118 FFF7FEFF 		bl	lv_label_set_text
 247              	.LVL37:
 207:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_add_style(time_label, &style_time, 0);
 248              		.loc 1 207 5 view .LVU48
 249 011c 3246     		mov	r2, r6
 250 011e 2249     		ldr	r1, .L5+44
 251 0120 3846     		mov	r0, r7
 252 0122 FFF7FEFF 		bl	lv_obj_add_style
 253              	.LVL38:
 208:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_grid_cell(time_label, LV_GRID_ALIGN_END, 2, 1, LV_GRID_ALIGN_CENTER, 0, 2);
 254              		.loc 1 208 5 view .LVU49
 255 0126 CDF80880 		str	r8, [sp, #8]
 256 012a 0196     		str	r6, [sp, #4]
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 16


 257 012c 0095     		str	r5, [sp]
 258 012e 2B46     		mov	r3, r5
 259 0130 4246     		mov	r2, r8
 260 0132 4146     		mov	r1, r8
 261 0134 3846     		mov	r0, r7
 262 0136 FFF7FEFF 		bl	lv_obj_set_grid_cell
 263              	.LVL39:
 209:lvgl/demos/music/lv_demo_music_list.c **** 
 210:lvgl/demos/music/lv_demo_music_list.c ****     LV_IMG_DECLARE(img_lv_demo_music_list_border);
 264              		.loc 1 210 5 view .LVU50
 265              		.loc 1 210 50 view .LVU51
 211:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * border = lv_img_create(btn);
 266              		.loc 1 211 5 view .LVU52
 267              		.loc 1 211 25 is_stmt 0 view .LVU53
 268 013a 2046     		mov	r0, r4
 269 013c FFF7FEFF 		bl	lv_img_create
 270              	.LVL40:
 271 0140 0546     		mov	r5, r0
 272              	.LVL41:
 212:lvgl/demos/music/lv_demo_music_list.c ****     lv_img_set_src(border, &img_lv_demo_music_list_border);
 273              		.loc 1 212 5 is_stmt 1 view .LVU54
 274 0142 1A49     		ldr	r1, .L5+48
 275 0144 FFF7FEFF 		bl	lv_img_set_src
 276              	.LVL42:
 213:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_width(border, lv_pct(120));
 277              		.loc 1 213 5 view .LVU55
 278              		.loc 3 296 5 view .LVU56
 279              		.loc 1 213 5 is_stmt 0 view .LVU57
 280 0148 42F27801 		movw	r1, #8312
 281 014c 2846     		mov	r0, r5
 282 014e FFF7FEFF 		bl	lv_obj_set_width
 283              	.LVL43:
 214:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_align(border, LV_ALIGN_BOTTOM_MID, 0, 0);
 284              		.loc 1 214 5 is_stmt 1 view .LVU58
 285 0152 3346     		mov	r3, r6
 286 0154 3246     		mov	r2, r6
 287 0156 0521     		movs	r1, #5
 288 0158 2846     		mov	r0, r5
 289 015a FFF7FEFF 		bl	lv_obj_align
 290              	.LVL44:
 215:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_add_flag(border, LV_OBJ_FLAG_IGNORE_LAYOUT);
 291              		.loc 1 215 5 view .LVU59
 292 015e 4FF40031 		mov	r1, #131072
 293 0162 2846     		mov	r0, r5
 294 0164 FFF7FEFF 		bl	lv_obj_add_flag
 295              	.LVL45:
 216:lvgl/demos/music/lv_demo_music_list.c **** 
 217:lvgl/demos/music/lv_demo_music_list.c ****     return btn;
 296              		.loc 1 217 5 view .LVU60
 218:lvgl/demos/music/lv_demo_music_list.c **** }
 297              		.loc 1 218 1 is_stmt 0 view .LVU61
 298 0168 2046     		mov	r0, r4
 299 016a 0CB0     		add	sp, sp, #48
 300              		.cfi_remember_state
 301              		.cfi_def_cfa_offset 32
 302              		@ sp needed
 303 016c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 17


 304              	.LVL46:
 305              	.L4:
 306              		.cfi_restore_state
 188:lvgl/demos/music/lv_demo_music_list.c ****     }
 307              		.loc 1 188 9 is_stmt 1 view .LVU62
 308 0170 8021     		movs	r1, #128
 309 0172 2046     		mov	r0, r4
 310 0174 FFF7FEFF 		bl	lv_obj_add_state
 311              	.LVL47:
 312 0178 8AE7     		b	.L2
 313              	.L6:
 314 017a 00BF     		.align	2
 315              	.L5:
 316 017c 89888888 		.word	-2004318071
 317 0180 00000000 		.word	.LC0
 318 0184 FFFF0F00 		.word	1048575
 319 0188 00000000 		.word	.LANCHOR0
 320 018c 00000000 		.word	.LANCHOR1
 321 0190 00000000 		.word	.LANCHOR2
 322 0194 00000000 		.word	.LANCHOR3
 323 0198 00000000 		.word	btn_click_event_cb
 324 019c 00000000 		.word	img_lv_demo_music_btn_list_play
 325 01a0 00000000 		.word	.LANCHOR4
 326 01a4 00000000 		.word	.LANCHOR5
 327 01a8 00000000 		.word	.LANCHOR6
 328 01ac 00000000 		.word	img_lv_demo_music_list_border
 329              		.cfi_endproc
 330              	.LFE207:
 332              		.section	.text.btn_click_event_cb,"ax",%progbits
 333              		.align	1
 334              		.syntax unified
 335              		.thumb
 336              		.thumb_func
 338              	btn_click_event_cb:
 339              	.LVL48:
 340              	.LFB208:
 219:lvgl/demos/music/lv_demo_music_list.c **** 
 220:lvgl/demos/music/lv_demo_music_list.c **** static void btn_click_event_cb(lv_event_t * e)
 221:lvgl/demos/music/lv_demo_music_list.c **** {
 341              		.loc 1 221 1 view -0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 0
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345              		.loc 1 221 1 is_stmt 0 view .LVU64
 346 0000 08B5     		push	{r3, lr}
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 3, -8
 349              		.cfi_offset 14, -4
 222:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * btn = lv_event_get_target(e);
 350              		.loc 1 222 5 is_stmt 1 view .LVU65
 351              		.loc 1 222 22 is_stmt 0 view .LVU66
 352 0002 FFF7FEFF 		bl	lv_event_get_target
 353              	.LVL49:
 223:lvgl/demos/music/lv_demo_music_list.c **** 
 224:lvgl/demos/music/lv_demo_music_list.c ****     uint32_t idx = lv_obj_get_child_id(btn);
 354              		.loc 1 224 5 is_stmt 1 view .LVU67
 355              	.LBB30:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 18


 356              	.LBI30:
 357              		.file 4 "lvgl/demos/music/../../src/lv_api_map.h"
   1:lvgl/demos/music/../../src/lv_api_map.h **** /**
   2:lvgl/demos/music/../../src/lv_api_map.h ****  * @file lv_api_map.h
   3:lvgl/demos/music/../../src/lv_api_map.h ****  *
   4:lvgl/demos/music/../../src/lv_api_map.h ****  */
   5:lvgl/demos/music/../../src/lv_api_map.h **** 
   6:lvgl/demos/music/../../src/lv_api_map.h **** #ifndef LV_API_MAP_H
   7:lvgl/demos/music/../../src/lv_api_map.h **** #define LV_API_MAP_H
   8:lvgl/demos/music/../../src/lv_api_map.h **** 
   9:lvgl/demos/music/../../src/lv_api_map.h **** #ifdef __cplusplus
  10:lvgl/demos/music/../../src/lv_api_map.h **** extern "C" {
  11:lvgl/demos/music/../../src/lv_api_map.h **** #endif
  12:lvgl/demos/music/../../src/lv_api_map.h **** 
  13:lvgl/demos/music/../../src/lv_api_map.h **** /*********************
  14:lvgl/demos/music/../../src/lv_api_map.h ****  *      INCLUDES
  15:lvgl/demos/music/../../src/lv_api_map.h ****  *********************/
  16:lvgl/demos/music/../../src/lv_api_map.h **** #include "../lvgl.h"
  17:lvgl/demos/music/../../src/lv_api_map.h **** 
  18:lvgl/demos/music/../../src/lv_api_map.h **** /*********************
  19:lvgl/demos/music/../../src/lv_api_map.h ****  *      DEFINES
  20:lvgl/demos/music/../../src/lv_api_map.h ****  *********************/
  21:lvgl/demos/music/../../src/lv_api_map.h **** 
  22:lvgl/demos/music/../../src/lv_api_map.h **** #define LV_NO_TASK_READY        LV_NO_TIMER_READY
  23:lvgl/demos/music/../../src/lv_api_map.h **** #define LV_INDEV_STATE_REL      LV_INDEV_STATE_RELEASED
  24:lvgl/demos/music/../../src/lv_api_map.h **** #define LV_INDEV_STATE_PR       LV_INDEV_STATE_PRESSED
  25:lvgl/demos/music/../../src/lv_api_map.h **** #define LV_OBJ_FLAG_SNAPABLE    LV_OBJ_FLAG_SNAPPABLE   /*Fixed typo*/
  26:lvgl/demos/music/../../src/lv_api_map.h **** 
  27:lvgl/demos/music/../../src/lv_api_map.h **** /**********************
  28:lvgl/demos/music/../../src/lv_api_map.h ****  *      TYPEDEFS
  29:lvgl/demos/music/../../src/lv_api_map.h ****  **********************/
  30:lvgl/demos/music/../../src/lv_api_map.h **** 
  31:lvgl/demos/music/../../src/lv_api_map.h **** /**********************
  32:lvgl/demos/music/../../src/lv_api_map.h ****  * GLOBAL PROTOTYPES
  33:lvgl/demos/music/../../src/lv_api_map.h ****  **********************/
  34:lvgl/demos/music/../../src/lv_api_map.h **** 
  35:lvgl/demos/music/../../src/lv_api_map.h **** static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_task_handler(void)
  36:lvgl/demos/music/../../src/lv_api_map.h **** {
  37:lvgl/demos/music/../../src/lv_api_map.h ****     return lv_timer_handler();
  38:lvgl/demos/music/../../src/lv_api_map.h **** }
  39:lvgl/demos/music/../../src/lv_api_map.h **** 
  40:lvgl/demos/music/../../src/lv_api_map.h **** /**********************
  41:lvgl/demos/music/../../src/lv_api_map.h ****  *      MACROS
  42:lvgl/demos/music/../../src/lv_api_map.h ****  **********************/
  43:lvgl/demos/music/../../src/lv_api_map.h **** 
  44:lvgl/demos/music/../../src/lv_api_map.h **** /**********************
  45:lvgl/demos/music/../../src/lv_api_map.h ****  * INLINE FUNCTIONS
  46:lvgl/demos/music/../../src/lv_api_map.h ****  **********************/
  47:lvgl/demos/music/../../src/lv_api_map.h **** 
  48:lvgl/demos/music/../../src/lv_api_map.h **** /**
  49:lvgl/demos/music/../../src/lv_api_map.h ****  * Move the object to the foreground.
  50:lvgl/demos/music/../../src/lv_api_map.h ****  * It will look like if it was created as the last child of its parent.
  51:lvgl/demos/music/../../src/lv_api_map.h ****  * It also means it can cover any of the siblings.
  52:lvgl/demos/music/../../src/lv_api_map.h ****  * @param obj       pointer to an object
  53:lvgl/demos/music/../../src/lv_api_map.h ****  */
  54:lvgl/demos/music/../../src/lv_api_map.h **** static inline void lv_obj_move_foreground(lv_obj_t * obj)
  55:lvgl/demos/music/../../src/lv_api_map.h **** {
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 19


  56:lvgl/demos/music/../../src/lv_api_map.h ****     lv_obj_t * parent = lv_obj_get_parent(obj);
  57:lvgl/demos/music/../../src/lv_api_map.h ****     lv_obj_move_to_index(obj, lv_obj_get_child_cnt(parent) - 1);
  58:lvgl/demos/music/../../src/lv_api_map.h **** }
  59:lvgl/demos/music/../../src/lv_api_map.h **** 
  60:lvgl/demos/music/../../src/lv_api_map.h **** /**
  61:lvgl/demos/music/../../src/lv_api_map.h ****  * Move the object to the background.
  62:lvgl/demos/music/../../src/lv_api_map.h ****  * It will look like if it was created as the first child of its parent.
  63:lvgl/demos/music/../../src/lv_api_map.h ****  * It also means any of the siblings can cover the object.
  64:lvgl/demos/music/../../src/lv_api_map.h ****  * @param obj       pointer to an object
  65:lvgl/demos/music/../../src/lv_api_map.h ****  */
  66:lvgl/demos/music/../../src/lv_api_map.h **** static inline void lv_obj_move_background(lv_obj_t * obj)
  67:lvgl/demos/music/../../src/lv_api_map.h **** {
  68:lvgl/demos/music/../../src/lv_api_map.h ****     lv_obj_move_to_index(obj, 0);
  69:lvgl/demos/music/../../src/lv_api_map.h **** }
  70:lvgl/demos/music/../../src/lv_api_map.h **** 
  71:lvgl/demos/music/../../src/lv_api_map.h **** /**********************
  72:lvgl/demos/music/../../src/lv_api_map.h ****  * DEPRECATED FUNCTIONS
  73:lvgl/demos/music/../../src/lv_api_map.h ****  **********************/
  74:lvgl/demos/music/../../src/lv_api_map.h **** 
  75:lvgl/demos/music/../../src/lv_api_map.h **** static inline uint32_t lv_obj_get_child_id(const struct _lv_obj_t * obj)
 358              		.loc 4 75 24 view .LVU68
 359              	.LBB31:
  76:lvgl/demos/music/../../src/lv_api_map.h **** {
  77:lvgl/demos/music/../../src/lv_api_map.h ****     LV_LOG_WARN("lv_obj_get_child_id(obj) is deprecated, please use lv_obj_get_index(obj).");
 360              		.loc 4 77 5 view .LVU69
 361              		.loc 4 77 5 view .LVU70
 362              		.loc 4 77 5 view .LVU71
  78:lvgl/demos/music/../../src/lv_api_map.h ****     return lv_obj_get_index(obj);
 363              		.loc 4 78 5 view .LVU72
 364              		.loc 4 78 12 is_stmt 0 view .LVU73
 365 0006 FFF7FEFF 		bl	lv_obj_get_index
 366              	.LVL50:
 367              		.loc 4 78 12 view .LVU74
 368              	.LBE31:
 369              	.LBE30:
 225:lvgl/demos/music/lv_demo_music_list.c **** 
 226:lvgl/demos/music/lv_demo_music_list.c ****     _lv_demo_music_play(idx);
 370              		.loc 1 226 5 is_stmt 1 view .LVU75
 371 000a FFF7FEFF 		bl	_lv_demo_music_play
 372              	.LVL51:
 227:lvgl/demos/music/lv_demo_music_list.c **** }
 373              		.loc 1 227 1 is_stmt 0 view .LVU76
 374 000e 08BD     		pop	{r3, pc}
 375              		.cfi_endproc
 376              	.LFE208:
 378              		.section	.text._lv_demo_music_list_close,"ax",%progbits
 379              		.align	1
 380              		.global	_lv_demo_music_list_close
 381              		.syntax unified
 382              		.thumb
 383              		.thumb_func
 385              	_lv_demo_music_list_close:
 386              	.LFB205:
 134:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_scrollbar);
 387              		.loc 1 134 1 is_stmt 1 view -0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 20


 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391 0000 08B5     		push	{r3, lr}
 392              		.cfi_def_cfa_offset 8
 393              		.cfi_offset 3, -8
 394              		.cfi_offset 14, -4
 135:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_btn);
 395              		.loc 1 135 5 view .LVU78
 396 0002 0C48     		ldr	r0, .L11
 397 0004 FFF7FEFF 		bl	lv_style_reset
 398              	.LVL52:
 136:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_btn_pr);
 399              		.loc 1 136 5 view .LVU79
 400 0008 0B48     		ldr	r0, .L11+4
 401 000a FFF7FEFF 		bl	lv_style_reset
 402              	.LVL53:
 137:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_btn_chk);
 403              		.loc 1 137 5 view .LVU80
 404 000e 0B48     		ldr	r0, .L11+8
 405 0010 FFF7FEFF 		bl	lv_style_reset
 406              	.LVL54:
 138:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_btn_dis);
 407              		.loc 1 138 5 view .LVU81
 408 0014 0A48     		ldr	r0, .L11+12
 409 0016 FFF7FEFF 		bl	lv_style_reset
 410              	.LVL55:
 139:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_title);
 411              		.loc 1 139 5 view .LVU82
 412 001a 0A48     		ldr	r0, .L11+16
 413 001c FFF7FEFF 		bl	lv_style_reset
 414              	.LVL56:
 140:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_artist);
 415              		.loc 1 140 5 view .LVU83
 416 0020 0948     		ldr	r0, .L11+20
 417 0022 FFF7FEFF 		bl	lv_style_reset
 418              	.LVL57:
 141:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_reset(&style_time);
 419              		.loc 1 141 5 view .LVU84
 420 0026 0948     		ldr	r0, .L11+24
 421 0028 FFF7FEFF 		bl	lv_style_reset
 422              	.LVL58:
 142:lvgl/demos/music/lv_demo_music_list.c **** }
 423              		.loc 1 142 5 view .LVU85
 424 002c 0848     		ldr	r0, .L11+28
 425 002e FFF7FEFF 		bl	lv_style_reset
 426              	.LVL59:
 143:lvgl/demos/music/lv_demo_music_list.c **** 
 427              		.loc 1 143 1 is_stmt 0 view .LVU86
 428 0032 08BD     		pop	{r3, pc}
 429              	.L12:
 430              		.align	2
 431              	.L11:
 432 0034 00000000 		.word	.LANCHOR7
 433 0038 00000000 		.word	.LANCHOR0
 434 003c 00000000 		.word	.LANCHOR1
 435 0040 00000000 		.word	.LANCHOR2
 436 0044 00000000 		.word	.LANCHOR3
 437 0048 00000000 		.word	.LANCHOR4
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 21


 438 004c 00000000 		.word	.LANCHOR5
 439 0050 00000000 		.word	.LANCHOR6
 440              		.cfi_endproc
 441              	.LFE205:
 443              		.section	.text._lv_demo_music_list_btn_check,"ax",%progbits
 444              		.align	1
 445              		.global	_lv_demo_music_list_btn_check
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 450              	_lv_demo_music_list_btn_check:
 451              	.LVL60:
 452              	.LFB206:
 146:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * btn = lv_obj_get_child(list, track_id);
 453              		.loc 1 146 1 is_stmt 1 view -0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 146:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * btn = lv_obj_get_child(list, track_id);
 457              		.loc 1 146 1 is_stmt 0 view .LVU88
 458 0000 70B5     		push	{r4, r5, r6, lr}
 459              		.cfi_def_cfa_offset 16
 460              		.cfi_offset 4, -16
 461              		.cfi_offset 5, -12
 462              		.cfi_offset 6, -8
 463              		.cfi_offset 14, -4
 464 0002 0E46     		mov	r6, r1
 147:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * icon = lv_obj_get_child(btn, 0);
 465              		.loc 1 147 5 is_stmt 1 view .LVU89
 147:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * icon = lv_obj_get_child(btn, 0);
 466              		.loc 1 147 22 is_stmt 0 view .LVU90
 467 0004 0146     		mov	r1, r0
 468              	.LVL61:
 147:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * icon = lv_obj_get_child(btn, 0);
 469              		.loc 1 147 22 view .LVU91
 470 0006 104B     		ldr	r3, .L17
 471 0008 1868     		ldr	r0, [r3]
 472              	.LVL62:
 147:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * icon = lv_obj_get_child(btn, 0);
 473              		.loc 1 147 22 view .LVU92
 474 000a FFF7FEFF 		bl	lv_obj_get_child
 475              	.LVL63:
 147:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_t * icon = lv_obj_get_child(btn, 0);
 476              		.loc 1 147 22 view .LVU93
 477 000e 0446     		mov	r4, r0
 478              	.LVL64:
 148:lvgl/demos/music/lv_demo_music_list.c **** 
 479              		.loc 1 148 5 is_stmt 1 view .LVU94
 148:lvgl/demos/music/lv_demo_music_list.c **** 
 480              		.loc 1 148 23 is_stmt 0 view .LVU95
 481 0010 0021     		movs	r1, #0
 482 0012 FFF7FEFF 		bl	lv_obj_get_child
 483              	.LVL65:
 148:lvgl/demos/music/lv_demo_music_list.c **** 
 484              		.loc 1 148 23 view .LVU96
 485 0016 0546     		mov	r5, r0
 486              	.LVL66:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 22


 150:lvgl/demos/music/lv_demo_music_list.c ****         lv_obj_add_state(btn, LV_STATE_CHECKED);
 487              		.loc 1 150 5 is_stmt 1 view .LVU97
 150:lvgl/demos/music/lv_demo_music_list.c ****         lv_obj_add_state(btn, LV_STATE_CHECKED);
 488              		.loc 1 150 7 is_stmt 0 view .LVU98
 489 0018 66B1     		cbz	r6, .L14
 151:lvgl/demos/music/lv_demo_music_list.c ****         lv_img_set_src(icon, &img_lv_demo_music_btn_list_pause);
 490              		.loc 1 151 9 is_stmt 1 view .LVU99
 491 001a 0121     		movs	r1, #1
 492 001c 2046     		mov	r0, r4
 493              	.LVL67:
 151:lvgl/demos/music/lv_demo_music_list.c ****         lv_img_set_src(icon, &img_lv_demo_music_btn_list_pause);
 494              		.loc 1 151 9 is_stmt 0 view .LVU100
 495 001e FFF7FEFF 		bl	lv_obj_add_state
 496              	.LVL68:
 152:lvgl/demos/music/lv_demo_music_list.c ****         lv_obj_scroll_to_view(btn, LV_ANIM_ON);
 497              		.loc 1 152 9 is_stmt 1 view .LVU101
 498 0022 0A49     		ldr	r1, .L17+4
 499 0024 2846     		mov	r0, r5
 500 0026 FFF7FEFF 		bl	lv_img_set_src
 501              	.LVL69:
 153:lvgl/demos/music/lv_demo_music_list.c ****     }
 502              		.loc 1 153 9 view .LVU102
 503 002a 0121     		movs	r1, #1
 504 002c 2046     		mov	r0, r4
 505 002e FFF7FEFF 		bl	lv_obj_scroll_to_view
 506              	.LVL70:
 507              	.L13:
 159:lvgl/demos/music/lv_demo_music_list.c **** 
 508              		.loc 1 159 1 is_stmt 0 view .LVU103
 509 0032 70BD     		pop	{r4, r5, r6, pc}
 510              	.LVL71:
 511              	.L14:
 156:lvgl/demos/music/lv_demo_music_list.c ****         lv_img_set_src(icon, &img_lv_demo_music_btn_list_play);
 512              		.loc 1 156 9 is_stmt 1 view .LVU104
 513 0034 0121     		movs	r1, #1
 514 0036 2046     		mov	r0, r4
 515              	.LVL72:
 156:lvgl/demos/music/lv_demo_music_list.c ****         lv_img_set_src(icon, &img_lv_demo_music_btn_list_play);
 516              		.loc 1 156 9 is_stmt 0 view .LVU105
 517 0038 FFF7FEFF 		bl	lv_obj_clear_state
 518              	.LVL73:
 157:lvgl/demos/music/lv_demo_music_list.c ****     }
 519              		.loc 1 157 9 is_stmt 1 view .LVU106
 520 003c 0449     		ldr	r1, .L17+8
 521 003e 2846     		mov	r0, r5
 522 0040 FFF7FEFF 		bl	lv_img_set_src
 523              	.LVL74:
 159:lvgl/demos/music/lv_demo_music_list.c **** 
 524              		.loc 1 159 1 is_stmt 0 view .LVU107
 525 0044 F5E7     		b	.L13
 526              	.L18:
 527 0046 00BF     		.align	2
 528              	.L17:
 529 0048 00000000 		.word	.LANCHOR8
 530 004c 00000000 		.word	img_lv_demo_music_btn_list_pause
 531 0050 00000000 		.word	img_lv_demo_music_btn_list_play
 532              		.cfi_endproc
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 23


 533              	.LFE206:
 535              		.section	.text._lv_demo_music_list_create,"ax",%progbits
 536              		.align	1
 537              		.global	_lv_demo_music_list_create
 538              		.syntax unified
 539              		.thumb
 540              		.thumb_func
 542              	_lv_demo_music_list_create:
 543              	.LVL75:
 544              	.LFB204:
  54:lvgl/demos/music/lv_demo_music_list.c **** #if LV_DEMO_MUSIC_LARGE
 545              		.loc 1 54 1 is_stmt 1 view -0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
  54:lvgl/demos/music/lv_demo_music_list.c **** #if LV_DEMO_MUSIC_LARGE
 549              		.loc 1 54 1 is_stmt 0 view .LVU109
 550 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 551              		.cfi_def_cfa_offset 32
 552              		.cfi_offset 3, -32
 553              		.cfi_offset 4, -28
 554              		.cfi_offset 5, -24
 555              		.cfi_offset 6, -20
 556              		.cfi_offset 7, -16
 557              		.cfi_offset 8, -12
 558              		.cfi_offset 9, -8
 559              		.cfi_offset 14, -4
 560 0004 0646     		mov	r6, r0
  59:lvgl/demos/music/lv_demo_music_list.c ****     font_medium = &lv_font_montserrat_16;
 561              		.loc 1 59 5 is_stmt 1 view .LVU110
  59:lvgl/demos/music/lv_demo_music_list.c ****     font_medium = &lv_font_montserrat_16;
 562              		.loc 1 59 16 is_stmt 0 view .LVU111
 563 0006 DFF8E481 		ldr	r8, .L23+68
 564 000a 674B     		ldr	r3, .L23
 565 000c C8F80030 		str	r3, [r8]
  60:lvgl/demos/music/lv_demo_music_list.c **** #endif
 566              		.loc 1 60 5 is_stmt 1 view .LVU112
  60:lvgl/demos/music/lv_demo_music_list.c **** #endif
 567              		.loc 1 60 17 is_stmt 0 view .LVU113
 568 0010 664F     		ldr	r7, .L23+4
 569 0012 674B     		ldr	r3, .L23+8
 570 0014 3B60     		str	r3, [r7]
  63:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_width(&style_scrollbar,  4);
 571              		.loc 1 63 5 is_stmt 1 view .LVU114
 572 0016 674C     		ldr	r4, .L23+12
 573 0018 2046     		mov	r0, r4
 574              	.LVL76:
  63:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_width(&style_scrollbar,  4);
 575              		.loc 1 63 5 is_stmt 0 view .LVU115
 576 001a FFF7FEFF 		bl	lv_style_init
 577              	.LVL77:
  64:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_opa(&style_scrollbar, LV_OPA_COVER);
 578              		.loc 1 64 5 is_stmt 1 view .LVU116
 579 001e 0421     		movs	r1, #4
 580 0020 2046     		mov	r0, r4
 581 0022 FFF7FEFF 		bl	lv_style_set_width
 582              	.LVL78:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 24


  65:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_color(&style_scrollbar, lv_color_hex3(0xeee));
 583              		.loc 1 65 5 view .LVU117
 584 0026 FF21     		movs	r1, #255
 585 0028 2046     		mov	r0, r4
 586 002a FFF7FEFF 		bl	lv_style_set_bg_opa
 587              	.LVL79:
  66:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_radius(&style_scrollbar, LV_RADIUS_CIRCLE);
 588              		.loc 1 66 5 view .LVU118
 589              	.LBB32:
 590              	.LBI32:
 591              		.file 5 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_color.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @file lv_color.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #ifndef LV_COLOR_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include "../lv_conf_internal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include "lv_assert.h"
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include "lv_math.h"
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include "lv_types.h"
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*Error checking*/
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 24
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #error "LV_COLOR_DEPTH 24 is deprecated. Use LV_COLOR_DEPTH 32 instead (lv_conf.h)"
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH != 16 && LV_COLOR_16_SWAP != 0
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #error "LV_COLOR_16_SWAP requires LV_COLOR_DEPTH == 16. Set it in lv_conf.h"
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #include <stdint.h>
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*********************
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *      DEFINES
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *********************/
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_DEPTH);
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_16_SWAP);
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Opacity percentages.
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** enum {
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_TRANSP = 0,
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_0      = 0,
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_10     = 25,
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_20     = 51,
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_30     = 76,
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 25


  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_40     = 102,
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_50     = 127,
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_60     = 153,
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_70     = 178,
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_80     = 204,
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_90     = 229,
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_100    = 255,
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_OPA_COVER  = 255,
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** };
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_OPA_MIN 2    /*Opacities below this will be transparent*/
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_OPA_MAX 253  /*Opacities above this will fully cover*/
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SIZE 8
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SIZE 8
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SIZE 16
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SIZE 32
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #error "Invalid LV_COLOR_DEPTH in lv_conf.h! Set it to 1, 8, 16 or 32!"
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if defined(__cplusplus) && !defined(_LV_COLOR_HAS_MODERN_CPP)
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** * MSVC compiler's definition of the __cplusplus indicating 199711L regardless to C++ standard versi
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** * see https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-cplusplus
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** * so we use _MSC_VER macro instead of __cplusplus
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** */
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #ifdef _MSC_VER
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if _MSC_VER >= 1900 /*Visual Studio 2015*/
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if __cplusplus >= 201103L
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif /*__cplusplus*/
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #ifndef _LV_COLOR_HAS_MODERN_CPP
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 0
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if _LV_COLOR_HAS_MODERN_CPP
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*Fix msvc compiler error C4576 inside C++ code*/
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER lv_color_t
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER (lv_color_t)
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*---------------------------------------
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Macros for all existing color depths
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * to set/get values of the color channels
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *------------------------------------------*/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 26


 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_R1(c, v) (c).ch.red = (uint8_t)((v) & 0x1)
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G1(c, v) (c).ch.green = (uint8_t)((v) & 0x1)
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_B1(c, v) (c).ch.blue = (uint8_t)((v) & 0x1)
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_A1(c, v) do {} while(0)
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_R1(c) (c).ch.red
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G1(c) (c).ch.green
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_B1(c) (c).ch.blue
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_A1(c) 0xFF
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER1 {0x00}
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE1(r8, g8, b8)  {(uint8_t)((b8 >> 7) | (g8 >> 7) | (r8 >> 7))}
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_R8(c, v) (c).ch.red = (uint8_t)((v) & 0x7U)
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G8(c, v) (c).ch.green = (uint8_t)((v) & 0x7U)
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_B8(c, v) (c).ch.blue = (uint8_t)((v) & 0x3U)
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_A8(c, v) do {} while(0)
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_R8(c) (c).ch.red
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G8(c) (c).ch.green
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_B8(c) (c).ch.blue
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_A8(c) 0xFF
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER8 {{0x00, 0x00, 0x00}}
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE8(r8, g8, b8) {{(uint8_t)((b8 >> 6) & 0x3U), (uint8_t)((g8 >> 5) & 0x7U), (ui
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_R16(c, v) (c).ch.red = (uint8_t)((v) & 0x1FU)
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G16(c, v) (c).ch.green = (uint8_t)((v) & 0x3FU)
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G16(c, v) {(c).ch.green_h = (uint8_t)(((v) >> 3) & 0x7); (c).ch.green_l = (ui
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_B16(c, v) (c).ch.blue = (uint8_t)((v) & 0x1FU)
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_A16(c, v) do {} while(0)
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_R16(c) (c).ch.red
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G16(c) (c).ch.green
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G16(c) (((c).ch.green_h << 3) + (c).ch.green_l)
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_B16(c) (c).ch.blue
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_A16(c) 0xFF
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16  {{0x00, 0x00, 0x00}}
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((b8 >> 3) & 0x1FU), (uint8_t)((g8 >> 2) & 0x3FU), 
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16 {{0x00, 0x00, 0x00, 0x00}}
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((g8 >> 5) & 0x7U), (uint8_t)((r8 >> 3) & 0x1FU), (
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_R32(c, v) (c).ch.red = (uint8_t)((v) & 0xFF)
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_G32(c, v) (c).ch.green = (uint8_t)((v) & 0xFF)
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_B32(c, v) (c).ch.blue = (uint8_t)((v) & 0xFF)
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_SET_A32(c, v) (c).ch.alpha = (uint8_t)((v) & 0xFF)
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 27


 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_R32(c) (c).ch.red
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_G32(c) (c).ch.green
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_B32(c) (c).ch.blue
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_GET_A32(c) (c).ch.alpha
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER32  {{0x00, 0x00, 0x00, 0x00}}
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** # define LV_COLOR_MAKE32(r8, g8, b8) {{b8, g8, r8, 0xff}} /*Fix 0xff alpha*/
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*---------------------------------------
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Macros for the current color depth
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * to set/get values of the color channels
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *------------------------------------------*/
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SET_R(c, v) LV_CONCAT(LV_COLOR_SET_R, LV_COLOR_DEPTH)(c, v)
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SET_G(c, v) LV_CONCAT(LV_COLOR_SET_G, LV_COLOR_DEPTH)(c, v)
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SET_B(c, v) LV_CONCAT(LV_COLOR_SET_B, LV_COLOR_DEPTH)(c, v)
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_SET_A(c, v) LV_CONCAT(LV_COLOR_SET_A, LV_COLOR_DEPTH)(c, v)
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_GET_R(c) LV_CONCAT(LV_COLOR_GET_R, LV_COLOR_DEPTH)(c)
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_GET_G(c) LV_CONCAT(LV_COLOR_GET_G, LV_COLOR_DEPTH)(c)
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_GET_B(c) LV_CONCAT(LV_COLOR_GET_B, LV_COLOR_DEPTH)(c)
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_GET_A(c) LV_CONCAT(LV_COLOR_GET_A, LV_COLOR_DEPTH)(c)
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define _LV_COLOR_ZERO_INITIALIZER LV_CONCAT(_LV_COLOR_ZERO_INITIALIZER, LV_COLOR_DEPTH)
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #define LV_COLOR_MAKE(r8, g8, b8) LV_CONCAT(LV_COLOR_MAKE, LV_COLOR_DEPTH)(r8, g8, b8)
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**********************
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *      TYPEDEFS
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  **********************/
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef union {
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint8_t full; /*must be declared first to set all bits of byte via initializer list*/
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     union {
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t blue : 1;
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t green : 1;
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t red : 1;
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     } ch;
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color1_t;
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef union {
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     struct {
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t blue : 2;
 202:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t green : 3;
 203:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t red : 3;
 204:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     } ch;
 205:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint8_t full;
 206:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color8_t;
 207:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 208:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef union {
 209:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     struct {
 210:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 211:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t blue : 5;
 212:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t green : 6;
 213:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t red : 5;
 214:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 215:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t green_h : 3;
 216:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t red : 5;
 217:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t blue : 5;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 28


 218:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint16_t green_l : 3;
 219:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 220:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     } ch;
 221:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint16_t full;
 222:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color16_t;
 223:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 224:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef union {
 225:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     struct {
 226:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t blue;
 227:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t green;
 228:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t red;
 229:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         uint8_t alpha;
 230:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     } ch;
 231:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint32_t full;
 232:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color32_t;
 233:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 234:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef LV_CONCAT3(uint, LV_COLOR_SIZE, _t) lv_color_int_t;
 235:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef LV_CONCAT3(lv_color, LV_COLOR_DEPTH, _t) lv_color_t;
 236:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 237:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef struct {
 238:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint16_t h;
 239:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint8_t s;
 240:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint8_t v;
 241:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color_hsv_t;
 242:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 243:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @cond Doxygen_Suppress
 244:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*No idea where the guard is required but else throws warnings in the docs*/
 245:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef uint8_t lv_opa_t;
 246:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @endcond
 247:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 248:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** struct _lv_color_filter_dsc_t;
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 250:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef lv_color_t (*lv_color_filter_cb_t)(const struct _lv_color_filter_dsc_t *, lv_color_t, lv_op
 251:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 252:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef struct _lv_color_filter_dsc_t {
 253:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_filter_cb_t filter_cb;
 254:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     void * user_data;
 255:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_color_filter_dsc_t;
 256:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 257:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** typedef enum {
 258:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_RED,
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_PINK,
 260:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_PURPLE,
 261:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_DEEP_PURPLE,
 262:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_INDIGO,
 263:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_BLUE,
 264:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_LIGHT_BLUE,
 265:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_CYAN,
 266:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_TEAL,
 267:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_GREEN,
 268:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_LIGHT_GREEN,
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_LIME,
 270:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_YELLOW,
 271:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_AMBER,
 272:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_ORANGE,
 273:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_DEEP_ORANGE,
 274:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_BROWN,
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 29


 275:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_BLUE_GREY,
 276:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_GREY,
 277:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     _LV_PALETTE_LAST,
 278:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_PALETTE_NONE = 0xff,
 279:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** } lv_palette_t;
 280:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 281:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**********************
 282:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * GLOBAL PROTOTYPES
 283:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  **********************/
 284:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 285:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /*In color conversations:
 286:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * - When converting to bigger color type the LSB weight of 1 LSB is calculated
 287:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *   E.g. 16 bit Red has 5 bits
 288:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *         8 bit Red has 3 bits
 289:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *        ----------------------
 290:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *        8 bit red LSB = (2^5 - 1) / (2^3 - 1) = 31 / 7 = 4
 291:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *
 292:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * - When calculating to smaller color type simply shift out the LSBs
 293:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *   E.g.  8 bit Red has 3 bits
 294:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *        16 bit Red has 5 bits
 295:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *        ----------------------
 296:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *         Shift right with 5 - 3 = 2
 297:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 298:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint8_t lv_color_to1(lv_color_t color)
 299:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 300:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
 301:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return color.full;
 302:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
 303:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x4) || (LV_COLOR_GET_G(color) & 0x4) || (LV_COLOR_GET_B(color) & 0
 304:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 1;
 305:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 306:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else {
 307:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 308:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 309:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
 310:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x10) || (LV_COLOR_GET_G(color) & 0x20) || (LV_COLOR_GET_B(color) &
 311:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 1;
 312:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 313:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else {
 314:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 315:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 316:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 317:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x80) || (LV_COLOR_GET_G(color) & 0x80) || (LV_COLOR_GET_B(color) &
 318:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 1;
 319:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 320:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else {
 321:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 322:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 323:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 324:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 325:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 326:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint8_t lv_color_to8(lv_color_t color)
 327:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 328:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
 329:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if(color.full == 0)
 330:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 331:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 30


 332:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0xFF;
 333:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
 334:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return color.full;
 335:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
 336:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color8_t ret;
 337:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 2); /*5 - 3  = 2*/
 338:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 3); /*6 - 3  = 3*/
 339:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 3); /*5 - 2  = 3*/
 340:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 341:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 342:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color8_t ret;
 343:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 5); /*8 - 3  = 5*/
 344:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 5); /*8 - 3  = 5*/
 345:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 6); /*8 - 2  = 6*/
 346:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 347:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 348:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 349:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 350:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint16_t lv_color_to16(lv_color_t color)
 351:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 352:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
 353:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if(color.full == 0)
 354:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0;
 355:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else
 356:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0xFFFF;
 357:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
 358:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color16_t ret;
 359:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) * 4);  /*(2^5 - 1)/(2^3 - 1) = 31/7 = 4*/
 360:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) * 9);  /*(2^6 - 1)/(2^3 - 1) = 63/7 = 9*/
 361:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) * 10); /*(2^5 - 1)/(2^2 - 1) = 31/3 = 10*/
 362:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 363:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
 364:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return color.full;
 365:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 366:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color16_t ret;
 367:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) >> 3); /*8 - 5  = 3*/
 368:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) >> 2); /*8 - 6  = 2*/
 369:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) >> 3); /*8 - 5  = 3*/
 370:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 371:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 372:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 373:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 374:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint32_t lv_color_to32(lv_color_t color)
 375:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 376:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 1
 377:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if(color.full == 0)
 378:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0xFF000000;
 379:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else
 380:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         return 0xFFFFFFFF;
 381:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 8
 382:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color32_t ret;
 383:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R32(ret, LV_COLOR_GET_R(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 384:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G32(ret, LV_COLOR_GET_G(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 385:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B32(ret, LV_COLOR_GET_B(color) * 85); /*(2^8 - 1)/(2^2 - 1) = 255/3 = 85*/
 386:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 387:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 388:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 16
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 31


 389:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /**
 390:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * The floating point math for conversion is:
 391:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *  valueto = valuefrom * ( (2^bitsto - 1) / (float)(2^bitsfrom - 1) )
 392:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * The faster integer math for conversion is:
 393:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *  valueto = ( valuefrom * multiplier + adder ) >> divisor
 394:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *   multiplier = FLOOR( ( (2^bitsto - 1) << divisor ) / (float)(2^bitsfrom - 1) )
 395:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *
 396:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * Find the first divisor where ( adder >> divisor ) <= 0
 397:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *
 398:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * 5-bit to 8-bit: ( 31 * multiplier + adder ) >> divisor = 255
 399:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * divisor  multiplier  adder  min (0)  max (31)
 400:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       0           8      7        7       255
 401:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       1          16     14        7       255
 402:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       2          32     28        7       255
 403:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       3          65     25        3       255
 404:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       4         131     19        1       255
 405:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       5         263      7        0       255
 406:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *
 407:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * 6-bit to 8-bit: 255 = ( 63 * multiplier + adder ) >> divisor
 408:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      * divisor  multiplier  adder  min (0)  max (63)
 409:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       0           4      3        3       255
 410:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       1           8      6        3       255
 411:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       2          16     12        3       255
 412:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       3          32     24        3       255
 413:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       4          64     48        3       255
 414:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       5         129     33        1       255
 415:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      *       6         259      3        0       255
 416:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****      */
 417:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 418:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color32_t ret;
 419:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 420:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 421:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 422:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 423:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret.full;
 424:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 425:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return color.full;
 426:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 427:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 428:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 429:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @cond Doxygen_Suppress
 430:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 431:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 432:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Mix two colors with a given ratio.
 433:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param c1 the first color to mix (usually the foreground)
 434:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param c2 the second color to mix (usually the background)
 435:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 436:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the mixed color
 437:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 438:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t LV_ATTRIBUTE_FAST_MEM lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t m
 439:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 440:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t ret;
 441:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 442:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 16 && LV_COLOR_MIX_ROUND_OFS == 0
 443:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 1
 444:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     c1.full = c1.full << 8 | c1.full >> 8;
 445:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     c2.full = c2.full << 8 | c2.full >> 8;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 32


 446:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 447:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Source: https://stackoverflow.com/a/50012418/1999969*/
 448:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 449:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 450:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                   0x7E0F81F; /*0b00000111111000001111100000011111*/
 451:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 452:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 453:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     ret.full = (uint16_t)((result >> 16) | result);
 454:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 1
 455:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     ret.full = ret.full << 8 | ret.full >> 8;
 456:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 457:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH != 1
 458:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*LV_COLOR_DEPTH == 8, 16 or 32*/
 459:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 460:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 461:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 462:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 463:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 464:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 465:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 466:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 467:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 468:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 469:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 470:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 471:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret;
 472:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 473:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 474:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline void LV_ATTRIBUTE_FAST_MEM lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out
 475:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 476:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH != 1
 477:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 478:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 479:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 480:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 481:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     (void) mix;
 482:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Pre-multiplication can't be used with 1 bpp*/
 483:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[0] = LV_COLOR_GET_R(c);
 484:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[1] = LV_COLOR_GET_G(c);
 485:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     out[2] = LV_COLOR_GET_B(c);
 486:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 487:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 488:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 489:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 490:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 491:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Mix two colors with a given ratio. It runs faster then `lv_color_mix` but requires some pre comp
 492:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param premult_c1 The first color. Should be preprocessed with `lv_color_premult(c1)`
 493:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param c2 The second color. As it is no pre computation required on it
 494:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param mix The ratio of the colors. 0: full `c1`, 255: full `c2`, 127: half `c1` and half `c2`.
 495:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  *            Should be modified like mix = `255 - mix`
 496:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the mixed color
 497:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @note 255 won't give clearly `c1`.
 498:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 499:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t LV_ATTRIBUTE_FAST_MEM lv_color_mix_premult(uint16_t * premult_c1, lv_color
 500:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 501:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t ret;
 502:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH != 1
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 33


 503:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*LV_COLOR_DEPTH == 8 or 32*/
 504:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OF
 505:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OF
 506:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OF
 507:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 508:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 509:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 510:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Restore color1*/
 511:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t c1;
 512:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_R(c1, premult_c1[0]);
 513:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_G(c1, premult_c1[1]);
 514:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     LV_COLOR_SET_B(c1, premult_c1[2]);
 515:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 516:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 517:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 518:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return ret;
 519:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 520:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 521:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 522:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Mix two colors. Both color can have alpha value.
 523:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param bg_color background color
 524:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param bg_opa alpha of the background color
 525:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param fg_color foreground color
 526:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param fg_opa alpha of the foreground color
 527:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param res_color the result color
 528:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param res_opa the result opacity
 529:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 530:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline void LV_ATTRIBUTE_FAST_MEM lv_color_mix_with_alpha(lv_color_t bg_color, lv_opa_t bg_o
 531:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                                                  lv_color_t fg_color, lv_opa_t fg_o
 532:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                                                                  lv_color_t * res_color, lv_opa_t *
 533:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 534:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Pick the foreground if it's fully opaque or the Background is fully transparent*/
 535:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     if(fg_opa >= LV_OPA_MAX || bg_opa <= LV_OPA_MIN) {
 536:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         res_color->full = fg_color.full;
 537:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_opa = fg_opa;
 538:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 539:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Transparent foreground: use the Background*/
 540:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else if(fg_opa <= LV_OPA_MIN) {
 541:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         res_color->full = bg_color.full;
 542:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_opa = bg_opa;
 543:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 544:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Opaque background: use simple mix*/
 545:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else if(bg_opa >= LV_OPA_MAX) {
 546:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_color = lv_color_mix(fg_color, bg_color, fg_opa);
 547:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_opa = LV_OPA_COVER;
 548:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 549:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /*Both colors have alpha. Expensive calculation need to be applied*/
 550:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     else {
 551:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         /*Save the parameters and the result. If they will be asked again don't compute again*/
 552:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_opa_t fg_opa_save     = 0;
 553:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_opa_t bg_opa_save     = 0;
 554:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_color_t fg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 555:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_color_t bg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 556:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_color_t res_color_saved = _LV_COLOR_ZERO_INITIALIZER;
 557:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         static lv_opa_t res_opa_saved = 0;
 558:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 559:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         if(fg_opa != fg_opa_save || bg_opa != bg_opa_save || fg_color.full != fg_color_save.full ||
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 34


 560:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****            bg_color.full != bg_color_save.full) {
 561:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             fg_opa_save        = fg_opa;
 562:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             bg_opa_save        = bg_opa;
 563:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             fg_color_save.full = fg_color.full;
 564:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             bg_color_save.full = bg_color.full;
 565:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             /*Info:
 566:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****              * https://en.wikipedia.org/wiki/Alpha_compositing#Analytical_derivation_of_the_over_op
 567:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             res_opa_saved = 255 - ((uint16_t)((uint16_t)(255 - fg_opa) * (255 - bg_opa)) >> 8);
 568:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             LV_ASSERT(res_opa_saved != 0);
 569:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             lv_opa_t ratio = (uint16_t)((uint16_t)fg_opa * 255) / res_opa_saved;
 570:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****             res_color_saved = lv_color_mix(fg_color, bg_color, ratio);
 571:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 572:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         }
 573:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 574:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         res_color->full = res_color_saved.full;
 575:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         *res_opa = res_opa_saved;
 576:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     }
 577:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 578:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 579:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** //! @endcond
 580:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 581:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** /**
 582:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * Get the brightness of a color
 583:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @param color a color
 584:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  * @return the brightness [0..255]
 585:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****  */
 586:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline uint8_t lv_color_brightness(lv_color_t color)
 587:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 588:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color32_t c32;
 589:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     c32.full        = lv_color_to32(color);
 590:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR
 591:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return (uint8_t)(bright >> 3);
 592:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 593:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 594:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
 595:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 597:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 598:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 599:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_hex(uint32_t c)
 600:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 601:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_DEPTH == 16
 602:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t r;
 603:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #if LV_COLOR_16_SWAP == 0
 604:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /* Convert a 4 bytes per pixel in format ARGB32 to R5G6B5 format
 605:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         naive way (by calling lv_color_make with components):
 606:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     r = ((c & 0xFF0000) >> 19)
 607:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     g = ((c & 0xFF00) >> 10)
 608:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     b = ((c & 0xFF) >> 3)
 609:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     rgb565 = (r << 11) | (g << 5) | b
 610:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         That's 3 mask, 5 bitshift and 2 or operations
 611:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 612:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         A bit better:
 613:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     r = ((c & 0xF80000) >> 8)
 614:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     g = ((c & 0xFC00) >> 5)
 615:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     b = ((c & 0xFF) >> 3)
 616:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****                     rgb565 = r | g | b
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 35


 617:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****         That's 3 mask, 3 bitshifts and 2 or operations */
 618:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 8) | ((c & 0xFC00) >> 5) | ((c & 0xFF) >> 3));
 619:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else
 620:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     /* We want: rrrr rrrr GGGg gggg bbbb bbbb => gggb bbbb rrrr rGGG */
 621:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 16) | ((c & 0xFC00) >> 13) | ((c & 0x1C00) << 3) | ((c &
 622:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 623:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return r;
 624:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #elif LV_COLOR_DEPTH == 32
 625:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     lv_color_t r;
 626:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = c | 0xFF000000;
 627:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return r;
 628:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 629:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xF
 630:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #endif
 631:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 632:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** 
 633:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** static inline lv_color_t lv_color_hex3(uint32_t c)
 592              		.loc 5 633 26 view .LVU119
 593              	.LBE32:
 634:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 635:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((
 594              		.loc 5 635 5 view .LVU120
 595              	.LBB35:
 596              	.LBB33:
 597              	.LBI33:
 594:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 598              		.loc 5 594 26 view .LVU121
 599              	.LBB34:
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 600              		.loc 5 596 5 view .LVU122
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 601              		.loc 5 596 12 is_stmt 0 view .LVU123
 602 002e 6FF01103 		mvn	r3, #17
 603 0032 0021     		movs	r1, #0
 604 0034 63F30701 		bfi	r1, r3, #0, #8
 605 0038 63F30F21 		bfi	r1, r3, #8, #8
 606 003c 63F31741 		bfi	r1, r3, #16, #8
 607              	.LVL80:
 596:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** }
 608              		.loc 5 596 12 view .LVU124
 609              	.LBE34:
 610              	.LBE33:
 611              	.LBE35:
  66:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_radius(&style_scrollbar, LV_RADIUS_CIRCLE);
 612              		.loc 1 66 5 view .LVU125
 613 0040 41F07F41 		orr	r1, r1, #-16777216
 614 0044 2046     		mov	r0, r4
 615 0046 FFF7FEFF 		bl	lv_style_set_bg_color
 616              	.LVL81:
  67:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_pad_right(&style_scrollbar, 4);
 617              		.loc 1 67 5 is_stmt 1 view .LVU126
 618 004a 47F6FF71 		movw	r1, #32767
 619 004e 2046     		mov	r0, r4
 620 0050 FFF7FEFF 		bl	lv_style_set_radius
 621              	.LVL82:
  68:lvgl/demos/music/lv_demo_music_list.c **** 
 622              		.loc 1 68 5 view .LVU127
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 36


 623 0054 0421     		movs	r1, #4
 624 0056 2046     		mov	r0, r4
 625 0058 FFF7FEFF 		bl	lv_style_set_pad_right
 626              	.LVL83:
  70:lvgl/demos/music/lv_demo_music_list.c **** #if LV_DEMO_MUSIC_LARGE
 627              		.loc 1 70 5 view .LVU128
  74:lvgl/demos/music/lv_demo_music_list.c **** #endif
 628              		.loc 1 74 5 view .LVU129
  76:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_opa(&style_btn, LV_OPA_TRANSP);
 629              		.loc 1 76 5 view .LVU130
 630 005c 564D     		ldr	r5, .L23+16
 631 005e 2846     		mov	r0, r5
 632 0060 FFF7FEFF 		bl	lv_style_init
 633              	.LVL84:
  77:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_grid_column_dsc_array(&style_btn, grid_cols);
 634              		.loc 1 77 5 view .LVU131
 635 0064 0021     		movs	r1, #0
 636 0066 2846     		mov	r0, r5
 637 0068 FFF7FEFF 		bl	lv_style_set_bg_opa
 638              	.LVL85:
  78:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_grid_row_dsc_array(&style_btn, grid_rows);
 639              		.loc 1 78 5 view .LVU132
 640 006c 5349     		ldr	r1, .L23+20
 641 006e 2846     		mov	r0, r5
 642 0070 FFF7FEFF 		bl	lv_style_set_grid_column_dsc_array
 643              	.LVL86:
  79:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_grid_row_align(&style_btn, LV_GRID_ALIGN_CENTER);
 644              		.loc 1 79 5 view .LVU133
 645 0074 5249     		ldr	r1, .L23+24
 646 0076 2846     		mov	r0, r5
 647 0078 FFF7FEFF 		bl	lv_style_set_grid_row_dsc_array
 648              	.LVL87:
  80:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_layout(&style_btn, LV_LAYOUT_GRID);
 649              		.loc 1 80 5 view .LVU134
 650 007c 0121     		movs	r1, #1
 651 007e 2846     		mov	r0, r5
 652 0080 FFF7FEFF 		bl	lv_style_set_grid_row_align
 653              	.LVL88:
  81:lvgl/demos/music/lv_demo_music_list.c **** #if LV_DEMO_MUSIC_LARGE
 654              		.loc 1 81 5 view .LVU135
 655 0084 4F4B     		ldr	r3, .L23+28
 656 0086 1988     		ldrh	r1, [r3]
 657 0088 2846     		mov	r0, r5
 658 008a FFF7FEFF 		bl	lv_style_set_layout
 659              	.LVL89:
  85:lvgl/demos/music/lv_demo_music_list.c **** #endif
 660              		.loc 1 85 5 view .LVU136
 661 008e 1421     		movs	r1, #20
 662 0090 2846     		mov	r0, r5
 663 0092 FFF7FEFF 		bl	lv_style_set_pad_right
 664              	.LVL90:
  87:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_opa(&style_btn_pr, LV_OPA_COVER);
 665              		.loc 1 87 5 view .LVU137
 666 0096 4C4D     		ldr	r5, .L23+32
 667 0098 2846     		mov	r0, r5
 668 009a FFF7FEFF 		bl	lv_style_init
 669              	.LVL91:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 37


  88:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_color(&style_btn_pr,  lv_color_hex(0x4c4965));
 670              		.loc 1 88 5 view .LVU138
 671 009e FF21     		movs	r1, #255
 672 00a0 2846     		mov	r0, r5
 673 00a2 FFF7FEFF 		bl	lv_style_set_bg_opa
 674              	.LVL92:
  89:lvgl/demos/music/lv_demo_music_list.c **** 
 675              		.loc 1 89 5 view .LVU139
 676              	.LBB36:
 677              	.LBI36:
 599:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 678              		.loc 5 599 26 view .LVU140
 679              	.LBB37:
 625:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = c | 0xFF000000;
 680              		.loc 5 625 5 view .LVU141
 626:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return r;
 681              		.loc 5 626 5 view .LVU142
 626:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return r;
 682              		.loc 5 626 12 is_stmt 0 view .LVU143
 683 00a6 DFF84891 		ldr	r9, .L23+72
 684              	.LVL93:
 627:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 685              		.loc 5 627 5 is_stmt 1 view .LVU144
 627:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 686              		.loc 5 627 5 is_stmt 0 view .LVU145
 687              	.LBE37:
 688              	.LBE36:
  89:lvgl/demos/music/lv_demo_music_list.c **** 
 689              		.loc 1 89 5 view .LVU146
 690 00aa 4946     		mov	r1, r9
 691 00ac 2846     		mov	r0, r5
 692 00ae FFF7FEFF 		bl	lv_style_set_bg_color
 693              	.LVL94:
  91:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_opa(&style_btn_chk, LV_OPA_COVER);
 694              		.loc 1 91 5 is_stmt 1 view .LVU147
 695 00b2 464D     		ldr	r5, .L23+36
 696 00b4 2846     		mov	r0, r5
 697 00b6 FFF7FEFF 		bl	lv_style_init
 698              	.LVL95:
  92:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_bg_color(&style_btn_chk, lv_color_hex(0x4c4965));
 699              		.loc 1 92 5 view .LVU148
 700 00ba FF21     		movs	r1, #255
 701 00bc 2846     		mov	r0, r5
 702 00be FFF7FEFF 		bl	lv_style_set_bg_opa
 703              	.LVL96:
  93:lvgl/demos/music/lv_demo_music_list.c **** 
 704              		.loc 1 93 5 view .LVU149
 705              	.LBB38:
 706              	.LBI38:
 599:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 707              		.loc 5 599 26 view .LVU150
 708              	.LBB39:
 625:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = c | 0xFF000000;
 709              		.loc 5 625 5 view .LVU151
 626:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return r;
 710              		.loc 5 626 5 view .LVU152
 627:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 38


 711              		.loc 5 627 5 view .LVU153
 627:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 712              		.loc 5 627 5 is_stmt 0 view .LVU154
 713              	.LBE39:
 714              	.LBE38:
  93:lvgl/demos/music/lv_demo_music_list.c **** 
 715              		.loc 1 93 5 view .LVU155
 716 00c2 4946     		mov	r1, r9
 717 00c4 2846     		mov	r0, r5
 718 00c6 FFF7FEFF 		bl	lv_style_set_bg_color
 719              	.LVL97:
  95:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_opa(&style_btn_dis, LV_OPA_40);
 720              		.loc 1 95 5 is_stmt 1 view .LVU156
 721 00ca 414D     		ldr	r5, .L23+40
 722 00cc 2846     		mov	r0, r5
 723 00ce FFF7FEFF 		bl	lv_style_init
 724              	.LVL98:
  96:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_img_opa(&style_btn_dis, LV_OPA_40);
 725              		.loc 1 96 5 view .LVU157
 726 00d2 6621     		movs	r1, #102
 727 00d4 2846     		mov	r0, r5
 728 00d6 FFF7FEFF 		bl	lv_style_set_text_opa
 729              	.LVL99:
  97:lvgl/demos/music/lv_demo_music_list.c **** 
 730              		.loc 1 97 5 view .LVU158
 731 00da 6621     		movs	r1, #102
 732 00dc 2846     		mov	r0, r5
 733 00de FFF7FEFF 		bl	lv_style_set_img_opa
 734              	.LVL100:
  99:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_font(&style_title, font_medium);
 735              		.loc 1 99 5 view .LVU159
 736 00e2 3C4D     		ldr	r5, .L23+44
 737 00e4 2846     		mov	r0, r5
 738 00e6 FFF7FEFF 		bl	lv_style_init
 739              	.LVL101:
 100:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_color(&style_title, lv_color_hex(0xffffff));
 740              		.loc 1 100 5 view .LVU160
 741 00ea 3968     		ldr	r1, [r7]
 742 00ec 2846     		mov	r0, r5
 743 00ee FFF7FEFF 		bl	lv_style_set_text_font
 744              	.LVL102:
 101:lvgl/demos/music/lv_demo_music_list.c **** 
 745              		.loc 1 101 5 view .LVU161
 746              	.LBB40:
 747              	.LBI40:
 599:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 748              		.loc 5 599 26 view .LVU162
 749              	.LBB41:
 625:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = c | 0xFF000000;
 750              		.loc 5 625 5 view .LVU163
 626:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return r;
 751              		.loc 5 626 5 view .LVU164
 626:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return r;
 752              		.loc 5 626 12 is_stmt 0 view .LVU165
 753 00f2 4FF0FF39 		mov	r9, #-1
 754              	.LVL103:
 627:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 39


 755              		.loc 5 627 5 is_stmt 1 view .LVU166
 627:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 756              		.loc 5 627 5 is_stmt 0 view .LVU167
 757              	.LBE41:
 758              	.LBE40:
 101:lvgl/demos/music/lv_demo_music_list.c **** 
 759              		.loc 1 101 5 view .LVU168
 760 00f6 4946     		mov	r1, r9
 761 00f8 2846     		mov	r0, r5
 762 00fa FFF7FEFF 		bl	lv_style_set_text_color
 763              	.LVL104:
 103:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_font(&style_artist, font_small);
 764              		.loc 1 103 5 is_stmt 1 view .LVU169
 765 00fe 364D     		ldr	r5, .L23+48
 766 0100 2846     		mov	r0, r5
 767 0102 FFF7FEFF 		bl	lv_style_init
 768              	.LVL105:
 104:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_color(&style_artist, lv_color_hex(0xb1b0be));
 769              		.loc 1 104 5 view .LVU170
 770 0106 D8F80010 		ldr	r1, [r8]
 771 010a 2846     		mov	r0, r5
 772 010c FFF7FEFF 		bl	lv_style_set_text_font
 773              	.LVL106:
 105:lvgl/demos/music/lv_demo_music_list.c **** 
 774              		.loc 1 105 5 view .LVU171
 775              	.LBB42:
 776              	.LBI42:
 599:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 777              		.loc 5 599 26 view .LVU172
 778              	.LBB43:
 625:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = c | 0xFF000000;
 779              		.loc 5 625 5 view .LVU173
 626:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return r;
 780              		.loc 5 626 5 view .LVU174
 627:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 781              		.loc 5 627 5 view .LVU175
 627:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 782              		.loc 5 627 5 is_stmt 0 view .LVU176
 783              	.LBE43:
 784              	.LBE42:
 105:lvgl/demos/music/lv_demo_music_list.c **** 
 785              		.loc 1 105 5 view .LVU177
 786 0110 3249     		ldr	r1, .L23+52
 787 0112 2846     		mov	r0, r5
 788 0114 FFF7FEFF 		bl	lv_style_set_text_color
 789              	.LVL107:
 107:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_font(&style_time, font_medium);
 790              		.loc 1 107 5 is_stmt 1 view .LVU178
 791 0118 314D     		ldr	r5, .L23+56
 792 011a 2846     		mov	r0, r5
 793 011c FFF7FEFF 		bl	lv_style_init
 794              	.LVL108:
 108:lvgl/demos/music/lv_demo_music_list.c ****     lv_style_set_text_color(&style_time, lv_color_hex(0xffffff));
 795              		.loc 1 108 5 view .LVU179
 796 0120 3968     		ldr	r1, [r7]
 797 0122 2846     		mov	r0, r5
 798 0124 FFF7FEFF 		bl	lv_style_set_text_font
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 40


 799              	.LVL109:
 109:lvgl/demos/music/lv_demo_music_list.c **** 
 800              		.loc 1 109 5 view .LVU180
 801              	.LBB44:
 802              	.LBI44:
 599:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** {
 803              		.loc 5 599 26 view .LVU181
 804              	.LBB45:
 625:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     r.full = c | 0xFF000000;
 805              		.loc 5 625 5 view .LVU182
 626:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h ****     return r;
 806              		.loc 5 626 5 view .LVU183
 627:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 807              		.loc 5 627 5 view .LVU184
 627:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 808              		.loc 5 627 5 is_stmt 0 view .LVU185
 809              	.LBE45:
 810              	.LBE44:
 109:lvgl/demos/music/lv_demo_music_list.c **** 
 811              		.loc 1 109 5 view .LVU186
 812 0128 4946     		mov	r1, r9
 813 012a 2846     		mov	r0, r5
 814 012c FFF7FEFF 		bl	lv_style_set_text_color
 815              	.LVL110:
 112:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_remove_style_all(list);
 816              		.loc 1 112 5 is_stmt 1 view .LVU187
 112:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_remove_style_all(list);
 817              		.loc 1 112 12 is_stmt 0 view .LVU188
 818 0130 3046     		mov	r0, r6
 819 0132 FFF7FEFF 		bl	lv_obj_create
 820              	.LVL111:
 112:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_remove_style_all(list);
 821              		.loc 1 112 10 view .LVU189
 822 0136 2B4D     		ldr	r5, .L23+60
 823 0138 2860     		str	r0, [r5]
 113:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_size(list, LV_HOR_RES, LV_VER_RES - LV_DEMO_MUSIC_HANDLE_SIZE);
 824              		.loc 1 113 5 is_stmt 1 view .LVU190
 825              	.LVL112:
 826              	.LBB46:
 827              	.LBI46:
  92:lvgl/demos/music/../../src/core/lv_obj_style.h **** {
 828              		.loc 2 92 20 view .LVU191
 829              	.LBB47:
 830              		.loc 2 94 5 view .LVU192
 831 013a 2B4A     		ldr	r2, .L23+64
 832 013c 0021     		movs	r1, #0
 833 013e FFF7FEFF 		bl	lv_obj_remove_style
 834              	.LVL113:
 835              		.loc 2 94 5 is_stmt 0 view .LVU193
 836              	.LBE47:
 837              	.LBE46:
 114:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_y(list, LV_DEMO_MUSIC_HANDLE_SIZE);
 838              		.loc 1 114 5 is_stmt 1 view .LVU194
 839 0142 2F68     		ldr	r7, [r5]
 840 0144 FFF7FEFF 		bl	lv_disp_get_default
 841              	.LVL114:
 842 0148 FFF7FEFF 		bl	lv_disp_get_hor_res
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 41


 843              	.LVL115:
 844 014c 0646     		mov	r6, r0
 845              	.LVL116:
 114:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_y(list, LV_DEMO_MUSIC_HANDLE_SIZE);
 846              		.loc 1 114 39 is_stmt 0 view .LVU195
 847 014e FFF7FEFF 		bl	lv_disp_get_default
 848              	.LVL117:
 849 0152 FFF7FEFF 		bl	lv_disp_get_ver_res
 850              	.LVL118:
 851 0156 82B2     		uxth	r2, r0
 114:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_y(list, LV_DEMO_MUSIC_HANDLE_SIZE);
 852              		.loc 1 114 50 view .LVU196
 853 0158 143A     		subs	r2, r2, #20
 114:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_y(list, LV_DEMO_MUSIC_HANDLE_SIZE);
 854              		.loc 1 114 5 view .LVU197
 855 015a 12B2     		sxth	r2, r2
 856 015c 3146     		mov	r1, r6
 857 015e 3846     		mov	r0, r7
 858 0160 FFF7FEFF 		bl	lv_obj_set_size
 859              	.LVL119:
 115:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_add_style(list, &style_scrollbar, LV_PART_SCROLLBAR);
 860              		.loc 1 115 5 is_stmt 1 view .LVU198
 861 0164 1421     		movs	r1, #20
 862 0166 2868     		ldr	r0, [r5]
 863 0168 FFF7FEFF 		bl	lv_obj_set_y
 864              	.LVL120:
 116:lvgl/demos/music/lv_demo_music_list.c ****     lv_obj_set_flex_flow(list, LV_FLEX_FLOW_COLUMN);
 865              		.loc 1 116 5 view .LVU199
 866 016c 4FF48032 		mov	r2, #65536
 867 0170 2146     		mov	r1, r4
 868 0172 2868     		ldr	r0, [r5]
 869 0174 FFF7FEFF 		bl	lv_obj_add_style
 870              	.LVL121:
 117:lvgl/demos/music/lv_demo_music_list.c **** 
 871              		.loc 1 117 5 view .LVU200
 872 0178 0121     		movs	r1, #1
 873 017a 2868     		ldr	r0, [r5]
 874 017c FFF7FEFF 		bl	lv_obj_set_flex_flow
 875              	.LVL122:
 119:lvgl/demos/music/lv_demo_music_list.c ****     for(track_id = 0; _lv_demo_music_get_title(track_id); track_id++) {
 876              		.loc 1 119 5 view .LVU201
 120:lvgl/demos/music/lv_demo_music_list.c ****         add_list_btn(list,  track_id);
 877              		.loc 1 120 5 view .LVU202
 120:lvgl/demos/music/lv_demo_music_list.c ****         add_list_btn(list,  track_id);
 878              		.loc 1 120 18 is_stmt 0 view .LVU203
 879 0180 0024     		movs	r4, #0
 120:lvgl/demos/music/lv_demo_music_list.c ****         add_list_btn(list,  track_id);
 880              		.loc 1 120 5 view .LVU204
 881 0182 05E0     		b	.L20
 882              	.LVL123:
 883              	.L21:
 121:lvgl/demos/music/lv_demo_music_list.c ****     }
 884              		.loc 1 121 9 is_stmt 1 discriminator 3 view .LVU205
 885 0184 2146     		mov	r1, r4
 886 0186 174B     		ldr	r3, .L23+60
 887 0188 1868     		ldr	r0, [r3]
 888 018a FFF7FEFF 		bl	add_list_btn
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 42


 889              	.LVL124:
 120:lvgl/demos/music/lv_demo_music_list.c ****         add_list_btn(list,  track_id);
 890              		.loc 1 120 59 discriminator 3 view .LVU206
 120:lvgl/demos/music/lv_demo_music_list.c ****         add_list_btn(list,  track_id);
 891              		.loc 1 120 67 is_stmt 0 discriminator 3 view .LVU207
 892 018e 0134     		adds	r4, r4, #1
 893              	.LVL125:
 894              	.L20:
 120:lvgl/demos/music/lv_demo_music_list.c ****         add_list_btn(list,  track_id);
 895              		.loc 1 120 23 is_stmt 1 discriminator 1 view .LVU208
 896 0190 2046     		mov	r0, r4
 897 0192 FFF7FEFF 		bl	_lv_demo_music_get_title
 898              	.LVL126:
 120:lvgl/demos/music/lv_demo_music_list.c ****         add_list_btn(list,  track_id);
 899              		.loc 1 120 5 is_stmt 0 discriminator 1 view .LVU209
 900 0196 0028     		cmp	r0, #0
 901 0198 F4D1     		bne	.L21
 128:lvgl/demos/music/lv_demo_music_list.c **** 
 902              		.loc 1 128 5 is_stmt 1 view .LVU210
 903 019a 0121     		movs	r1, #1
 904 019c FFF7FEFF 		bl	_lv_demo_music_list_btn_check
 905              	.LVL127:
 130:lvgl/demos/music/lv_demo_music_list.c **** }
 906              		.loc 1 130 5 view .LVU211
 131:lvgl/demos/music/lv_demo_music_list.c **** 
 907              		.loc 1 131 1 is_stmt 0 view .LVU212
 908 01a0 104B     		ldr	r3, .L23+60
 909 01a2 1868     		ldr	r0, [r3]
 910 01a4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 911              	.LVL128:
 912              	.L24:
 131:lvgl/demos/music/lv_demo_music_list.c **** 
 913              		.loc 1 131 1 view .LVU213
 914              		.align	2
 915              	.L23:
 916 01a8 00000000 		.word	lv_font_montserrat_12
 917 01ac 00000000 		.word	.LANCHOR10
 918 01b0 00000000 		.word	lv_font_montserrat_16
 919 01b4 00000000 		.word	.LANCHOR7
 920 01b8 00000000 		.word	.LANCHOR0
 921 01bc 00000000 		.word	.LANCHOR11
 922 01c0 00000000 		.word	.LANCHOR12
 923 01c4 00000000 		.word	LV_LAYOUT_GRID
 924 01c8 00000000 		.word	.LANCHOR1
 925 01cc 00000000 		.word	.LANCHOR2
 926 01d0 00000000 		.word	.LANCHOR3
 927 01d4 00000000 		.word	.LANCHOR4
 928 01d8 00000000 		.word	.LANCHOR5
 929 01dc BEB0B1FF 		.word	-5132098
 930 01e0 00000000 		.word	.LANCHOR6
 931 01e4 00000000 		.word	.LANCHOR8
 932 01e8 FFFF0F00 		.word	1048575
 933 01ec 00000000 		.word	.LANCHOR9
 934 01f0 65494CFF 		.word	-11777691
 935              		.cfi_endproc
 936              	.LFE204:
 938              		.section	.bss.font_medium,"aw",%nobits
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 43


 939              		.align	2
 940              		.set	.LANCHOR10,. + 0
 943              	font_medium:
 944 0000 00000000 		.space	4
 945              		.section	.bss.font_small,"aw",%nobits
 946              		.align	2
 947              		.set	.LANCHOR9,. + 0
 950              	font_small:
 951 0000 00000000 		.space	4
 952              		.section	.bss.list,"aw",%nobits
 953              		.align	2
 954              		.set	.LANCHOR8,. + 0
 957              	list:
 958 0000 00000000 		.space	4
 959              		.section	.bss.style_artist,"aw",%nobits
 960              		.align	2
 961              		.set	.LANCHOR5,. + 0
 964              	style_artist:
 965 0000 00000000 		.space	8
 965      00000000 
 966              		.section	.bss.style_btn,"aw",%nobits
 967              		.align	2
 968              		.set	.LANCHOR0,. + 0
 971              	style_btn:
 972 0000 00000000 		.space	8
 972      00000000 
 973              		.section	.bss.style_btn_chk,"aw",%nobits
 974              		.align	2
 975              		.set	.LANCHOR2,. + 0
 978              	style_btn_chk:
 979 0000 00000000 		.space	8
 979      00000000 
 980              		.section	.bss.style_btn_dis,"aw",%nobits
 981              		.align	2
 982              		.set	.LANCHOR3,. + 0
 985              	style_btn_dis:
 986 0000 00000000 		.space	8
 986      00000000 
 987              		.section	.bss.style_btn_pr,"aw",%nobits
 988              		.align	2
 989              		.set	.LANCHOR1,. + 0
 992              	style_btn_pr:
 993 0000 00000000 		.space	8
 993      00000000 
 994              		.section	.bss.style_scrollbar,"aw",%nobits
 995              		.align	2
 996              		.set	.LANCHOR7,. + 0
 999              	style_scrollbar:
 1000 0000 00000000 		.space	8
 1000      00000000 
 1001              		.section	.bss.style_time,"aw",%nobits
 1002              		.align	2
 1003              		.set	.LANCHOR6,. + 0
 1006              	style_time:
 1007 0000 00000000 		.space	8
 1007      00000000 
 1008              		.section	.bss.style_title,"aw",%nobits
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 44


 1009              		.align	2
 1010              		.set	.LANCHOR4,. + 0
 1013              	style_title:
 1014 0000 00000000 		.space	8
 1014      00000000 
 1015              		.section	.rodata.grid_cols.1,"a"
 1016              		.align	2
 1017              		.set	.LANCHOR11,. + 0
 1020              	grid_cols.1:
 1021 0000 9A1F     		.short	8090
 1022 0002 9C1F     		.short	8092
 1023 0004 9A1F     		.short	8090
 1024 0006 FF1F     		.short	8191
 1025              		.section	.rodata.grid_rows.0,"a"
 1026              		.align	2
 1027              		.set	.LANCHOR12,. + 0
 1030              	grid_rows.0:
 1031 0000 1600     		.short	22
 1032 0002 1100     		.short	17
 1033 0004 FF1F     		.short	8191
 1034              		.text
 1035              	.Letext0:
 1036              		.file 6 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 1037              		.file 7 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 1038              		.file 8 "lvgl/demos/music/../../src/misc/lv_anim.h"
 1039              		.file 9 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\font\\lv_font.h"
 1040              		.file 10 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style.h"
 1041              		.file 11 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\draw\\lv_img_buf.h"
 1042              		.file 12 "lvgl/demos/music/../../src/core/lv_obj.h"
 1043              		.file 13 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_ll.h"
 1044              		.file 14 "lvgl/demos/music/../../src/core/lv_group.h"
 1045              		.file 15 "lvgl/demos/music/../../src/core/lv_obj_scroll.h"
 1046              		.file 16 "lvgl/demos/music/../../src/core/lv_obj_class.h"
 1047              		.file 17 "lvgl/demos/music/../../src/core/lv_event.h"
 1048              		.file 18 "lvgl/demos/music/../../src/widgets/lv_bar.h"
 1049              		.file 19 "lvgl/demos/music/../../src/extra/layouts/flex/lv_flex.h"
 1050              		.file 20 "lvgl/demos/music/../../src/extra/layouts/grid/lv_grid.h"
 1051              		.file 21 "lvgl/demos/music/../../src/extra/widgets/imgbtn/lv_imgbtn.h"
 1052              		.file 22 "lvgl/demos/music/../../src/core/lv_obj_tree.h"
 1053              		.file 23 "lvgl/demos/music/lv_demo_music_main.h"
 1054              		.file 24 "lvgl/demos/music/lv_demo_music.h"
 1055              		.file 25 "lvgl/demos/music/../../src/misc/lv_printf.h"
 1056              		.file 26 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\core\\lv_obj_pos.h"
 1057              		.file 27 "lvgl/demos/music/../../src/widgets/lv_img.h"
 1058              		.file 28 "lvgl/demos/music/../../src/widgets/lv_label.h"
 1059              		.file 29 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style_gen.h"
 1060              		.file 30 "lvgl/demos/music/../../src/hal/lv_hal_disp.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 45


DEFINED SYMBOLS
                            *ABS*:00000000 lv_demo_music_list.c
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:19     .rodata.add_list_btn.str1.4:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:23     .text.add_list_btn:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:28     .text.add_list_btn:00000000 add_list_btn
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:316    .text.add_list_btn:0000017c $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:338    .text.btn_click_event_cb:00000000 btn_click_event_cb
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:333    .text.btn_click_event_cb:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:379    .text._lv_demo_music_list_close:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:385    .text._lv_demo_music_list_close:00000000 _lv_demo_music_list_close
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:432    .text._lv_demo_music_list_close:00000034 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:444    .text._lv_demo_music_list_btn_check:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:450    .text._lv_demo_music_list_btn_check:00000000 _lv_demo_music_list_btn_check
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:529    .text._lv_demo_music_list_btn_check:00000048 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:536    .text._lv_demo_music_list_create:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:542    .text._lv_demo_music_list_create:00000000 _lv_demo_music_list_create
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:916    .text._lv_demo_music_list_create:000001a8 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:939    .bss.font_medium:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:943    .bss.font_medium:00000000 font_medium
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:946    .bss.font_small:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:950    .bss.font_small:00000000 font_small
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:953    .bss.list:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:957    .bss.list:00000000 list
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:960    .bss.style_artist:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:964    .bss.style_artist:00000000 style_artist
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:967    .bss.style_btn:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:971    .bss.style_btn:00000000 style_btn
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:974    .bss.style_btn_chk:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:978    .bss.style_btn_chk:00000000 style_btn_chk
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:981    .bss.style_btn_dis:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:985    .bss.style_btn_dis:00000000 style_btn_dis
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:988    .bss.style_btn_pr:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:992    .bss.style_btn_pr:00000000 style_btn_pr
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:995    .bss.style_scrollbar:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:999    .bss.style_scrollbar:00000000 style_scrollbar
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:1002   .bss.style_time:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:1006   .bss.style_time:00000000 style_time
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:1009   .bss.style_title:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:1013   .bss.style_title:00000000 style_title
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:1016   .rodata.grid_cols.1:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:1020   .rodata.grid_cols.1:00000000 grid_cols.1
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:1026   .rodata.grid_rows.0:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s:1030   .rodata.grid_rows.0:00000000 grid_rows.0

UNDEFINED SYMBOLS
_lv_demo_music_get_track_length
lv_snprintf
_lv_demo_music_get_title
_lv_demo_music_get_artist
lv_obj_create
lv_obj_remove_style
lv_obj_set_size
lv_obj_add_style
lv_obj_add_event_cb
lv_img_create
lv_img_set_src
lv_obj_set_grid_cell
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccMdd6ET.s 			page 46


lv_label_create
lv_label_set_text
lv_obj_set_width
lv_obj_align
lv_obj_add_flag
lv_obj_add_state
img_lv_demo_music_btn_list_play
img_lv_demo_music_list_border
lv_event_get_target
lv_obj_get_index
_lv_demo_music_play
lv_style_reset
lv_obj_get_child
lv_obj_scroll_to_view
lv_obj_clear_state
img_lv_demo_music_btn_list_pause
lv_style_init
lv_style_set_width
lv_style_set_bg_opa
lv_style_set_bg_color
lv_style_set_radius
lv_style_set_pad_right
lv_style_set_grid_column_dsc_array
lv_style_set_grid_row_dsc_array
lv_style_set_grid_row_align
lv_style_set_layout
lv_style_set_text_opa
lv_style_set_img_opa
lv_style_set_text_font
lv_style_set_text_color
lv_disp_get_default
lv_disp_get_hor_res
lv_disp_get_ver_res
lv_obj_set_y
lv_obj_set_flex_flow
lv_font_montserrat_12
lv_font_montserrat_16
LV_LAYOUT_GRID
