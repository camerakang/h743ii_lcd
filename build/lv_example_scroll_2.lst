ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_example_scroll_2.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.sw_event_cb,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	sw_event_cb:
  25              	.LVL0:
  26              	.LFB204:
  27              		.file 1 "lvgl/examples/scroll/lv_example_scroll_2.c"
   1:lvgl/examples/scroll/lv_example_scroll_2.c **** #include "../lv_examples.h"
   2:lvgl/examples/scroll/lv_example_scroll_2.c **** #if LV_BUILD_EXAMPLES && LV_USE_FLEX
   3:lvgl/examples/scroll/lv_example_scroll_2.c **** 
   4:lvgl/examples/scroll/lv_example_scroll_2.c **** static void sw_event_cb(lv_event_t * e)
   5:lvgl/examples/scroll/lv_example_scroll_2.c **** {
  28              		.loc 1 5 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 5 1 is_stmt 0 view .LVU1
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39 0002 0446     		mov	r4, r0
   6:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_event_code_t code = lv_event_get_code(e);
  40              		.loc 1 6 5 is_stmt 1 view .LVU2
  41              		.loc 1 6 28 is_stmt 0 view .LVU3
  42 0004 FFF7FEFF 		bl	lv_event_get_code
  43              	.LVL1:
  44              		.loc 1 6 28 view .LVU4
  45 0008 0546     		mov	r5, r0
  46              	.LVL2:
   7:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_obj_t * sw = lv_event_get_target(e);
  47              		.loc 1 7 5 is_stmt 1 view .LVU5
  48              		.loc 1 7 21 is_stmt 0 view .LVU6
  49 000a 2046     		mov	r0, r4
  50 000c FFF7FEFF 		bl	lv_event_get_target
  51              	.LVL3:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 2


   8:lvgl/examples/scroll/lv_example_scroll_2.c **** 
   9:lvgl/examples/scroll/lv_example_scroll_2.c ****     if(code == LV_EVENT_VALUE_CHANGED) {
  52              		.loc 1 9 5 is_stmt 1 view .LVU7
  53              		.loc 1 9 7 is_stmt 0 view .LVU8
  54 0010 1C2D     		cmp	r5, #28
  55 0012 00D0     		beq	.L5
  56              	.LVL4:
  57              	.L1:
  10:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_t * list = lv_event_get_user_data(e);
  11:lvgl/examples/scroll/lv_example_scroll_2.c **** 
  12:lvgl/examples/scroll/lv_example_scroll_2.c ****         if(lv_obj_has_state(sw, LV_STATE_CHECKED)) lv_obj_add_flag(list, LV_OBJ_FLAG_SCROLL_ONE);
  13:lvgl/examples/scroll/lv_example_scroll_2.c ****         else lv_obj_clear_flag(list, LV_OBJ_FLAG_SCROLL_ONE);
  14:lvgl/examples/scroll/lv_example_scroll_2.c ****     }
  15:lvgl/examples/scroll/lv_example_scroll_2.c **** }
  58              		.loc 1 15 1 view .LVU9
  59 0014 70BD     		pop	{r4, r5, r6, pc}
  60              	.LVL5:
  61              	.L5:
  62              		.loc 1 15 1 view .LVU10
  63 0016 0646     		mov	r6, r0
  64              	.LBB7:
  10:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_t * list = lv_event_get_user_data(e);
  65              		.loc 1 10 9 is_stmt 1 view .LVU11
  10:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_t * list = lv_event_get_user_data(e);
  66              		.loc 1 10 27 is_stmt 0 view .LVU12
  67 0018 2046     		mov	r0, r4
  68              	.LVL6:
  10:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_t * list = lv_event_get_user_data(e);
  69              		.loc 1 10 27 view .LVU13
  70 001a FFF7FEFF 		bl	lv_event_get_user_data
  71              	.LVL7:
  72 001e 0446     		mov	r4, r0
  73              	.LVL8:
  12:lvgl/examples/scroll/lv_example_scroll_2.c ****         else lv_obj_clear_flag(list, LV_OBJ_FLAG_SCROLL_ONE);
  74              		.loc 1 12 9 is_stmt 1 view .LVU14
  12:lvgl/examples/scroll/lv_example_scroll_2.c ****         else lv_obj_clear_flag(list, LV_OBJ_FLAG_SCROLL_ONE);
  75              		.loc 1 12 12 is_stmt 0 view .LVU15
  76 0020 0121     		movs	r1, #1
  77 0022 3046     		mov	r0, r6
  78              	.LVL9:
  12:lvgl/examples/scroll/lv_example_scroll_2.c ****         else lv_obj_clear_flag(list, LV_OBJ_FLAG_SCROLL_ONE);
  79              		.loc 1 12 12 view .LVU16
  80 0024 FFF7FEFF 		bl	lv_obj_has_state
  81              	.LVL10:
  12:lvgl/examples/scroll/lv_example_scroll_2.c ****         else lv_obj_clear_flag(list, LV_OBJ_FLAG_SCROLL_ONE);
  82              		.loc 1 12 11 view .LVU17
  83 0028 20B1     		cbz	r0, .L3
  12:lvgl/examples/scroll/lv_example_scroll_2.c ****         else lv_obj_clear_flag(list, LV_OBJ_FLAG_SCROLL_ONE);
  84              		.loc 1 12 52 is_stmt 1 discriminator 1 view .LVU18
  85 002a 8021     		movs	r1, #128
  86 002c 2046     		mov	r0, r4
  87 002e FFF7FEFF 		bl	lv_obj_add_flag
  88              	.LVL11:
  89 0032 EFE7     		b	.L1
  90              	.L3:
  13:lvgl/examples/scroll/lv_example_scroll_2.c ****     }
  91              		.loc 1 13 14 view .LVU19
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 3


  92 0034 8021     		movs	r1, #128
  93 0036 2046     		mov	r0, r4
  94 0038 FFF7FEFF 		bl	lv_obj_clear_flag
  95              	.LVL12:
  96              	.LBE7:
  97              		.loc 1 15 1 is_stmt 0 view .LVU20
  98 003c EAE7     		b	.L1
  99              		.cfi_endproc
 100              	.LFE204:
 102              		.section	.rodata.lv_example_scroll_2.str1.4,"aMS",%progbits,1
 103              		.align	2
 104              	.LC0:
 105 0000 50616E65 		.ascii	"Panel %lu\012no snap\000"
 105      6C20256C 
 105      750A6E6F 
 105      20736E61 
 105      7000
 106 0012 0000     		.align	2
 107              	.LC1:
 108 0014 50616E65 		.ascii	"Panel %lu\000"
 108      6C20256C 
 108      7500
 109 001e 0000     		.align	2
 110              	.LC2:
 111 0020 4F6E6520 		.ascii	"One scroll\000"
 111      7363726F 
 111      6C6C00
 112              		.section	.text.lv_example_scroll_2,"ax",%progbits
 113              		.align	1
 114              		.global	lv_example_scroll_2
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 119              	lv_example_scroll_2:
 120              	.LFB205:
  16:lvgl/examples/scroll/lv_example_scroll_2.c **** 
  17:lvgl/examples/scroll/lv_example_scroll_2.c **** /**
  18:lvgl/examples/scroll/lv_example_scroll_2.c ****  * Show an example to scroll snap
  19:lvgl/examples/scroll/lv_example_scroll_2.c ****  */
  20:lvgl/examples/scroll/lv_example_scroll_2.c **** void lv_example_scroll_2(void)
  21:lvgl/examples/scroll/lv_example_scroll_2.c **** {
 121              		.loc 1 21 1 is_stmt 1 view -0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 126              		.cfi_def_cfa_offset 20
 127              		.cfi_offset 4, -20
 128              		.cfi_offset 5, -16
 129              		.cfi_offset 6, -12
 130              		.cfi_offset 7, -8
 131              		.cfi_offset 14, -4
 132 0002 83B0     		sub	sp, sp, #12
 133              		.cfi_def_cfa_offset 32
  22:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_obj_t * panel = lv_obj_create(lv_scr_act());
 134              		.loc 1 22 5 view .LVU22
 135              	.LBB17:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 4


 136              	.LBI17:
 137              		.file 2 "lvgl/examples/scroll/../../src/core/lv_disp.h"
   1:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
   2:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @file lv_disp.h
   3:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *
   4:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
   5:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
   6:lvgl/examples/scroll/../../src/core/lv_disp.h **** #ifndef LV_DISP_H
   7:lvgl/examples/scroll/../../src/core/lv_disp.h **** #define LV_DISP_H
   8:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
   9:lvgl/examples/scroll/../../src/core/lv_disp.h **** #ifdef __cplusplus
  10:lvgl/examples/scroll/../../src/core/lv_disp.h **** extern "C" {
  11:lvgl/examples/scroll/../../src/core/lv_disp.h **** #endif
  12:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  13:lvgl/examples/scroll/../../src/core/lv_disp.h **** /*********************
  14:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *      INCLUDES
  15:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *********************/
  16:lvgl/examples/scroll/../../src/core/lv_disp.h **** #include "../hal/lv_hal.h"
  17:lvgl/examples/scroll/../../src/core/lv_disp.h **** #include "lv_obj.h"
  18:lvgl/examples/scroll/../../src/core/lv_disp.h **** #include "lv_theme.h"
  19:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  20:lvgl/examples/scroll/../../src/core/lv_disp.h **** /*********************
  21:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *      DEFINES
  22:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *********************/
  23:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  24:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**********************
  25:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *      TYPEDEFS
  26:lvgl/examples/scroll/../../src/core/lv_disp.h ****  **********************/
  27:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  28:lvgl/examples/scroll/../../src/core/lv_disp.h **** typedef enum {
  29:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_NONE,
  30:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_LEFT,
  31:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_RIGHT,
  32:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_TOP,
  33:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OVER_BOTTOM,
  34:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_LEFT,
  35:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_RIGHT,
  36:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_TOP,
  37:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_MOVE_BOTTOM,
  38:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_IN,
  39:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_ON = LV_SCR_LOAD_ANIM_FADE_IN, /*For backward compatibility*/
  40:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_FADE_OUT,
  41:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_LEFT,
  42:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_RIGHT,
  43:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_TOP,
  44:lvgl/examples/scroll/../../src/core/lv_disp.h ****     LV_SCR_LOAD_ANIM_OUT_BOTTOM,
  45:lvgl/examples/scroll/../../src/core/lv_disp.h **** } lv_scr_load_anim_t;
  46:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  47:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**********************
  48:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * GLOBAL PROTOTYPES
  49:lvgl/examples/scroll/../../src/core/lv_disp.h ****  **********************/
  50:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  51:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
  52:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Return with a pointer to the active screen
  53:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to display which active screen should be get. (NULL to use the default
  54:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * screen)
  55:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return pointer to the active screen object (loaded by 'lv_scr_load()')
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 5


  56:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  57:lvgl/examples/scroll/../../src/core/lv_disp.h **** lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp);
  58:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  59:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
  60:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Return with a pointer to the previous screen. Only used during screen transitions.
  61:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to display which previous screen should be get. (NULL to use the default
  62:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * screen)
  63:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return pointer to the previous screen object or NULL if not used now
  64:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  65:lvgl/examples/scroll/../../src/core/lv_disp.h **** lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp);
  66:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  67:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
  68:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Make a screen active
  69:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param scr pointer to a screen
  70:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  71:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_load_scr(lv_obj_t * scr);
  72:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  73:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
  74:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Return with the top layer. (Same on every screen and it is above the normal screen layer)
  75:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
  76:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return pointer to the top layer object (transparent screen sized lv_obj)
  77:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  78:lvgl/examples/scroll/../../src/core/lv_disp.h **** lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp);
  79:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  80:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
  81:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Return with the sys. layer. (Same on every screen and it is above the normal screen and the top
  82:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * layer)
  83:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default sc
  84:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return pointer to the sys layer object (transparent screen sized lv_obj)
  85:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  86:lvgl/examples/scroll/../../src/core/lv_disp.h **** lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp);
  87:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  88:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
  89:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Set the theme of a display
  90:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display
  91:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  92:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_set_theme(lv_disp_t * disp, lv_theme_t * th);
  93:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
  94:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
  95:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Get the theme of a display
  96:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display
  97:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return the display's theme (can be NULL)
  98:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
  99:lvgl/examples/scroll/../../src/core/lv_disp.h **** lv_theme_t * lv_disp_get_theme(lv_disp_t * disp);
 100:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 101:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 102:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Set the background color of a display
 103:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display
 104:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param color color of the background
 105:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 106:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_set_bg_color(lv_disp_t * disp, lv_color_t color);
 107:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 108:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 109:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Set the background image of a display
 110:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display
 111:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param img_src path to file or pointer to an `lv_img_dsc_t` variable
 112:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 6


 113:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_set_bg_image(lv_disp_t * disp, const void  * img_src);
 114:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 115:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 116:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Set opacity of the background
 117:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display
 118:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param opa opacity (0..255)
 119:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 120:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_set_bg_opa(lv_disp_t * disp, lv_opa_t opa);
 121:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 122:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 123:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Switch screen with animation
 124:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param scr pointer to the new screen to load
 125:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param anim_type type of the animation from `lv_scr_load_anim_t`, e.g. `LV_SCR_LOAD_ANIM_MOVE_LE
 126:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param time time of the animation
 127:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param delay delay before the transition
 128:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param auto_del true: automatically delete the old screen
 129:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 130:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_scr_load_anim(lv_obj_t * scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, 
 131:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 132:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 133:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Get elapsed time since last user activity on a display (e.g. click)
 134:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to get the overall smallest inactivity)
 135:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return elapsed ticks (milliseconds) since the last activity
 136:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 137:lvgl/examples/scroll/../../src/core/lv_disp.h **** uint32_t lv_disp_get_inactive_time(const lv_disp_t * disp);
 138:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 139:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 140:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Manually trigger an activity on a display
 141:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 142:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 143:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_trig_activity(lv_disp_t * disp);
 144:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 145:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 146:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Clean any CPU cache that is related to the display.
 147:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 148:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 149:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_clean_dcache(lv_disp_t * disp);
 150:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 151:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 152:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Temporarily enable and disable the invalidation of the display.
 153:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 154:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param en true: enable invalidation; false: invalidation
 155:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 156:lvgl/examples/scroll/../../src/core/lv_disp.h **** void lv_disp_enable_invalidation(lv_disp_t * disp, bool en);
 157:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 158:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 159:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Get display invalidation is enabled.
 160:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display (NULL to use the default display)
 161:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return return true if invalidation is enabled
 162:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 163:lvgl/examples/scroll/../../src/core/lv_disp.h **** bool lv_disp_is_invalidation_enabled(lv_disp_t * disp);
 164:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 165:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 166:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Get a pointer to the screen refresher timer to
 167:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * modify its parameters with `lv_timer_...` functions.
 168:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @param disp pointer to a display
 169:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return pointer to the display refresher timer. (NULL on error)
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 7


 170:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 171:lvgl/examples/scroll/../../src/core/lv_disp.h **** lv_timer_t * _lv_disp_get_refr_timer(lv_disp_t * disp);
 172:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 173:lvgl/examples/scroll/../../src/core/lv_disp.h **** /*------------------------------------------------
 174:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * To improve backward compatibility
 175:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Recommended only if you have one display
 176:lvgl/examples/scroll/../../src/core/lv_disp.h ****  *------------------------------------------------*/
 177:lvgl/examples/scroll/../../src/core/lv_disp.h **** 
 178:lvgl/examples/scroll/../../src/core/lv_disp.h **** /**
 179:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * Get the active screen of the default display
 180:lvgl/examples/scroll/../../src/core/lv_disp.h ****  * @return pointer to the active screen
 181:lvgl/examples/scroll/../../src/core/lv_disp.h ****  */
 182:lvgl/examples/scroll/../../src/core/lv_disp.h **** static inline lv_obj_t * lv_scr_act(void)
 138              		.loc 2 182 26 view .LVU23
 139              	.LBB18:
 183:lvgl/examples/scroll/../../src/core/lv_disp.h **** {
 184:lvgl/examples/scroll/../../src/core/lv_disp.h ****     return lv_disp_get_scr_act(lv_disp_get_default());
 140              		.loc 2 184 5 view .LVU24
 141              		.loc 2 184 12 is_stmt 0 view .LVU25
 142 0004 FFF7FEFF 		bl	lv_disp_get_default
 143              	.LVL13:
 144 0008 FFF7FEFF 		bl	lv_disp_get_scr_act
 145              	.LVL14:
 146              	.LBE18:
 147              	.LBE17:
 148              		.loc 1 22 24 view .LVU26
 149 000c FFF7FEFF 		bl	lv_obj_create
 150              	.LVL15:
 151 0010 0746     		mov	r7, r0
 152              	.LVL16:
  23:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_obj_set_size(panel, 280, 120);
 153              		.loc 1 23 5 is_stmt 1 view .LVU27
 154 0012 7822     		movs	r2, #120
 155 0014 4FF48C71 		mov	r1, #280
 156 0018 FFF7FEFF 		bl	lv_obj_set_size
 157              	.LVL17:
  24:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_obj_set_scroll_snap_x(panel, LV_SCROLL_SNAP_CENTER);
 158              		.loc 1 24 5 view .LVU28
 159 001c 0321     		movs	r1, #3
 160 001e 3846     		mov	r0, r7
 161 0020 FFF7FEFF 		bl	lv_obj_set_scroll_snap_x
 162              	.LVL18:
  25:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_obj_set_flex_flow(panel, LV_FLEX_FLOW_ROW);
 163              		.loc 1 25 5 view .LVU29
 164 0024 0021     		movs	r1, #0
 165 0026 3846     		mov	r0, r7
 166 0028 FFF7FEFF 		bl	lv_obj_set_flex_flow
 167              	.LVL19:
  26:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_obj_align(panel, LV_ALIGN_CENTER, 0, 20);
 168              		.loc 1 26 5 view .LVU30
 169 002c 1423     		movs	r3, #20
 170 002e 0022     		movs	r2, #0
 171 0030 0921     		movs	r1, #9
 172 0032 3846     		mov	r0, r7
 173 0034 FFF7FEFF 		bl	lv_obj_align
 174              	.LVL20:
  27:lvgl/examples/scroll/lv_example_scroll_2.c **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 8


  28:lvgl/examples/scroll/lv_example_scroll_2.c ****     uint32_t i;
 175              		.loc 1 28 5 view .LVU31
  29:lvgl/examples/scroll/lv_example_scroll_2.c ****     for(i = 0; i < 10; i++) {
 176              		.loc 1 29 5 view .LVU32
 177              		.loc 1 29 11 is_stmt 0 view .LVU33
 178 0038 0024     		movs	r4, #0
 179              		.loc 1 29 5 view .LVU34
 180 003a 0FE0     		b	.L7
 181              	.LVL21:
 182              	.L13:
 183              	.LBB19:
  30:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_t * btn = lv_btn_create(panel);
  31:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_set_size(btn, 150, lv_pct(100));
  32:lvgl/examples/scroll/lv_example_scroll_2.c **** 
  33:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_t * label = lv_label_create(btn);
  34:lvgl/examples/scroll/lv_example_scroll_2.c ****         if(i == 3) {
  35:lvgl/examples/scroll/lv_example_scroll_2.c ****             lv_label_set_text_fmt(label, "Panel %"LV_PRIu32"\nno snap", i);
 184              		.loc 1 35 13 is_stmt 1 view .LVU35
 185 003c 2246     		mov	r2, r4
 186 003e 2849     		ldr	r1, .L14
 187 0040 FFF7FEFF 		bl	lv_label_set_text_fmt
 188              	.LVL22:
  36:lvgl/examples/scroll/lv_example_scroll_2.c ****             lv_obj_clear_flag(btn, LV_OBJ_FLAG_SNAPPABLE);
 189              		.loc 1 36 13 view .LVU36
 190 0044 4FF48051 		mov	r1, #4096
 191 0048 3046     		mov	r0, r6
 192 004a FFF7FEFF 		bl	lv_obj_clear_flag
 193              	.LVL23:
 194              	.L9:
  37:lvgl/examples/scroll/lv_example_scroll_2.c ****         }
  38:lvgl/examples/scroll/lv_example_scroll_2.c ****         else {
  39:lvgl/examples/scroll/lv_example_scroll_2.c ****             lv_label_set_text_fmt(label, "Panel %"LV_PRIu32, i);
  40:lvgl/examples/scroll/lv_example_scroll_2.c ****         }
  41:lvgl/examples/scroll/lv_example_scroll_2.c **** 
  42:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_center(label);
 195              		.loc 1 42 9 discriminator 2 view .LVU37
 196              	.LBB20:
 197              	.LBI20:
 198              		.file 3 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\core\\lv_obj_pos.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @file lv_obj_pos.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *
   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #ifndef LV_OBJ_POS_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #define LV_OBJ_POS_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** #include "../misc/lv_area.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /*********************
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 9


  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *      DEFINES
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *********************/
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**********************
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *      TYPEDEFS
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  **********************/
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** struct _lv_obj_t;
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** typedef void (*lv_layout_update_cb_t)(struct _lv_obj_t *, void * user_data);
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** typedef struct {
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****     lv_layout_update_cb_t cb;
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****     void * user_data;
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** } lv_layout_dsc_t;
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**********************
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * GLOBAL PROTOTYPES
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  **********************/
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the position of an object relative to the set alignment.
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param x         new x coordinate
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param y         new y coordinate
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_pos(struct _lv_obj_t * obj, lv_coord_t x, lv_coord_t y);
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the x coordinate of an object
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param x         new x coordinate
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_x(struct _lv_obj_t * obj, lv_coord_t x);
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the y coordinate of an object
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param y         new y coordinate
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            With default alignment it's the distance from the top left corner
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            E.g. LV_ALIGN_CENTER alignment it's the offset from the center of the parent
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The position is interpreted on the content area of the parent
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            The values can be set in pixel or in percentage of parent size with `lv_pct(v)`
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_y(struct _lv_obj_t * obj, lv_coord_t y);
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the size of an object.
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param w         the new width
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param h         the new height
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 10


  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            possible values are:
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  LV_SIZE_PCT(x)     to set size in percentage of the parent's content area size 
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_size(struct _lv_obj_t * obj, lv_coord_t w, lv_coord_t h);
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Recalculate the size of the object
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @return          true: the size has been changed
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** bool lv_obj_refr_size(struct _lv_obj_t * obj);
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the width of an object
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param w         the new width
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            possible values are:
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  lv_pct(x)           to set size in percentage of the parent's content area size
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_width(struct _lv_obj_t * obj, lv_coord_t w);
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the height of an object
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param h         the new height
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            possible values are:
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  pixel               simple set the size accordingly
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  LV_SIZE_CONTENT     set the size to involve all children in the given direction
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                  lv_pct(x)           to set size in percentage of the parent's content area size
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  *                                      x should be in [0..1000]% range
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_height(struct _lv_obj_t * obj, lv_coord_t h);
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the width reduced by the left and right padding and the border width.
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param w         the width without paddings in pixels
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_content_width(struct _lv_obj_t * obj, lv_coord_t w);
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set the height reduced by the top and bottom padding and the border width.
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param h         the height without paddings in pixels
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_content_height(struct _lv_obj_t * obj, lv_coord_t h);
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Set a layout for an object
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param layout    pointer to a layout descriptor to set
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 11


 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_layout(struct _lv_obj_t * obj, uint32_t layout);
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Test whether the and object is positioned by a layout or not
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to test
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @return true:    positioned by a layout; false: not positioned by a layout
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** bool lv_obj_is_layout_positioned(const struct _lv_obj_t * obj);
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Mark the object for layout update.
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj      pointer to an object whose children needs to be updated
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_mark_layout_as_dirty(struct _lv_obj_t * obj);
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Update the layout of an object.
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj      pointer to an object whose children needs to be updated
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_update_layout(const struct _lv_obj_t * obj);
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Register a new layout
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param cb        the layout update callback
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param user_data custom data that will be passed to `cb`
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @return          the ID of the new layout
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data);
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Change the alignment of an object.
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum) `LV_ALIGN_OUT_...` can't be used.
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_set_align(struct _lv_obj_t * obj, lv_align_t align);
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Change the alignment of an object and set new coordinates.
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Equivalent to:
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * lv_obj_set_align(obj, align);
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * lv_obj_set_pos(obj, x_ofs, y_ofs);
 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum) `LV_ALIGN_OUT_...` can't be used.
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param x_ofs     x coordinate offset after alignment
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param y_ofs     y coordinate offset after alignment
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_align(struct _lv_obj_t * obj, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs);
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Align an object to an other object.
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param base      pointer to an other object (if NULL `obj`s parent is used). 'obj' will be align
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param align     type of alignment (see 'lv_align_t' enum)
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param x_ofs     x coordinate offset after alignment
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param y_ofs     y coordinate offset after alignment
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            if the position or size of `base` changes `obj` needs to be aligned manually ag
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 12


 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** void lv_obj_align_to(struct _lv_obj_t * obj, const struct _lv_obj_t * base, lv_align_t align, lv_co
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****                      lv_coord_t y_ofs);
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** 
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** /**
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * Align an object to the center on its parent.
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @param obj       pointer to an object to align
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  * @note            if the parent size changes `obj` needs to be aligned manually again
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****  */
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** static inline void lv_obj_center(struct _lv_obj_t * obj)
 199              		.loc 3 199 20 discriminator 2 view .LVU38
 200              	.LBB21:
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h **** {
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\core\lv_obj_pos.h ****     lv_obj_align(obj, LV_ALIGN_CENTER, 0, 0);
 201              		.loc 3 201 5 discriminator 2 view .LVU39
 202 004e 0023     		movs	r3, #0
 203 0050 1A46     		mov	r2, r3
 204 0052 0921     		movs	r1, #9
 205 0054 2846     		mov	r0, r5
 206 0056 FFF7FEFF 		bl	lv_obj_align
 207              	.LVL24:
 208              		.loc 3 201 5 is_stmt 0 discriminator 2 view .LVU40
 209              	.LBE21:
 210              	.LBE20:
 211              	.LBE19:
  29:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_t * btn = lv_btn_create(panel);
 212              		.loc 1 29 24 is_stmt 1 discriminator 2 view .LVU41
  29:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_t * btn = lv_btn_create(panel);
 213              		.loc 1 29 25 is_stmt 0 discriminator 2 view .LVU42
 214 005a 0134     		adds	r4, r4, #1
 215              	.LVL25:
 216              	.L7:
  29:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_t * btn = lv_btn_create(panel);
 217              		.loc 1 29 16 is_stmt 1 discriminator 1 view .LVU43
  29:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_t * btn = lv_btn_create(panel);
 218              		.loc 1 29 5 is_stmt 0 discriminator 1 view .LVU44
 219 005c 092C     		cmp	r4, #9
 220 005e 13D8     		bhi	.L12
 221              	.LBB22:
  30:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_set_size(btn, 150, lv_pct(100));
 222              		.loc 1 30 9 is_stmt 1 view .LVU45
  30:lvgl/examples/scroll/lv_example_scroll_2.c ****         lv_obj_set_size(btn, 150, lv_pct(100));
 223              		.loc 1 30 26 is_stmt 0 view .LVU46
 224 0060 3846     		mov	r0, r7
 225 0062 FFF7FEFF 		bl	lv_btn_create
 226              	.LVL26:
 227 0066 0646     		mov	r6, r0
 228              	.LVL27:
  31:lvgl/examples/scroll/lv_example_scroll_2.c **** 
 229              		.loc 1 31 9 is_stmt 1 view .LVU47
  31:lvgl/examples/scroll/lv_example_scroll_2.c **** 
 230              		.loc 1 31 9 is_stmt 0 view .LVU48
 231              	.LBE22:
 232              		.file 4 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_area.h"
   1:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
   2:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @file lv_area.h
   3:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 13


   4:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
   5:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
   6:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #ifndef LV_AREA_H
   7:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_AREA_H
   8:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
   9:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #ifdef __cplusplus
  10:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** extern "C" {
  11:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #endif
  12:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  13:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*********************
  14:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      INCLUDES
  15:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *********************/
  16:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #include "../lv_conf_internal.h"
  17:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #include <stdbool.h>
  18:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #include <stdint.h>
  19:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  20:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*********************
  21:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      DEFINES
  22:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *********************/
  23:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  24:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #if LV_USE_LARGE_COORD
  25:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef int32_t lv_coord_t;
  26:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #else
  27:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef int16_t lv_coord_t;
  28:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #endif
  29:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  30:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**********************
  31:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      TYPEDEFS
  32:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  **********************/
  33:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  34:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
  35:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Represents a point on the screen.
  36:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
  37:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef struct {
  38:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t x;
  39:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t y;
  40:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** } lv_point_t;
  41:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  42:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /** Represents an area of the screen.*/
  43:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef struct {
  44:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t x1;
  45:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t y1;
  46:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t x2;
  47:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     lv_coord_t y2;
  48:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** } lv_area_t;
  49:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  50:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /** Alignments*/
  51:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** enum {
  52:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_DEFAULT = 0,
  53:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_TOP_LEFT,
  54:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_TOP_MID,
  55:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_TOP_RIGHT,
  56:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_BOTTOM_LEFT,
  57:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_BOTTOM_MID,
  58:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_BOTTOM_RIGHT,
  59:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_LEFT_MID,
  60:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_RIGHT_MID,
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 14


  61:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_CENTER,
  62:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  63:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_TOP_LEFT,
  64:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_TOP_MID,
  65:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_TOP_RIGHT,
  66:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_BOTTOM_LEFT,
  67:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_BOTTOM_MID,
  68:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_BOTTOM_RIGHT,
  69:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_LEFT_TOP,
  70:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_LEFT_MID,
  71:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_LEFT_BOTTOM,
  72:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_RIGHT_TOP,
  73:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_RIGHT_MID,
  74:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_ALIGN_OUT_RIGHT_BOTTOM,
  75:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** };
  76:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef uint8_t lv_align_t;
  77:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  78:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** enum {
  79:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_NONE     = 0x00,
  80:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_LEFT     = (1 << 0),
  81:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_RIGHT    = (1 << 1),
  82:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_TOP      = (1 << 2),
  83:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_BOTTOM   = (1 << 3),
  84:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_HOR      = LV_DIR_LEFT | LV_DIR_RIGHT,
  85:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_VER      = LV_DIR_TOP | LV_DIR_BOTTOM,
  86:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     LV_DIR_ALL      = LV_DIR_HOR | LV_DIR_VER,
  87:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** };
  88:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  89:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** typedef uint8_t lv_dir_t;
  90:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  91:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**********************
  92:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * GLOBAL PROTOTYPES
  93:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  **********************/
  94:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
  95:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
  96:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Initialize an area
  97:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
  98:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x1 left coordinate of the area
  99:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param y1 top coordinate of the area
 100:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x2 right coordinate of the area
 101:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param y2 bottom coordinate of the area
 102:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 103:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2);
 104:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 105:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 106:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Copy an area
 107:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param dest pointer to the destination area
 108:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param src pointer to the source area
 109:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 110:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
 111:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 112:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->x1 = src->x1;
 113:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->y1 = src->y1;
 114:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->x2 = src->x2;
 115:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     dest->y2 = src->y2;
 116:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** }
 117:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 15


 118:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 119:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get the width of an area
 120:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 121:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return the width of the area (if x1 == x2 -> width = 1)
 122:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 123:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
 124:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 125:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 126:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** }
 127:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 128:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 129:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get the height of an area
 130:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 131:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return the height of the area (if y1 == y2 -> height = 1)
 132:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 133:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
 134:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 135:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 136:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** }
 137:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 138:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 139:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Set the width of an area
 140:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 141:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param w the new width of the area (w == 1 makes x1 == x2)
 142:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 143:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_set_width(lv_area_t * area_p, lv_coord_t w);
 144:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 145:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 146:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Set the height of an area
 147:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 148:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param h the new height of the area (h == 1 makes y1 == y2)
 149:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 150:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_set_height(lv_area_t * area_p, lv_coord_t h);
 151:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 152:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 153:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Set the position of an area (width and height will be kept)
 154:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 155:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x the new x coordinate of the area
 156:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param y the new y coordinate of the area
 157:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 158:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void _lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y);
 159:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 160:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 161:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Return with area of an area (x * y)
 162:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param area_p pointer to an area
 163:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return size of area
 164:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 165:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** uint32_t lv_area_get_size(const lv_area_t * area_p);
 166:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 167:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_increase(lv_area_t * area, lv_coord_t w_extra, lv_coord_t h_extra);
 168:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 169:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_move(lv_area_t * area, lv_coord_t x_ofs, lv_coord_t y_ofs);
 170:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 171:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 172:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get the common parts of two areas
 173:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param res_p pointer to an area, the result will be stored her
 174:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to the first area
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 16


 175:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to the second area
 176:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return false: the two area has NO common parts, res_p is invalid
 177:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 178:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);
 179:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 180:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 181:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Get resulting sub areas after removing the common parts of two areas from the first area
 182:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param res_p pointer to an array of areas with a count of 4, the resulting areas will be stored 
 183:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to the first area
 184:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to the second area
 185:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return number of results (max 4) or -1 if no intersect
 186:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 187:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** int8_t _lv_area_diff(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);
 188:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 189:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 190:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Join two areas into a third which involves the other two
 191:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param res_p pointer to an area, the result will be stored here
 192:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to the first area
 193:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to the second area
 194:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 195:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);
 196:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 197:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 198:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if a point is on an area
 199:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a_p pointer to an area
 200:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param p_p pointer to a point
 201:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param radius radius of area (e.g. for rounded rectangle)
 202:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return false:the point is out of the area
 203:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 204:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius);
 205:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 206:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 207:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if two area has common parts
 208:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a1_p pointer to an area.
 209:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a2_p pointer to an other area
 210:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return false: a1_p and a2_p has no common parts
 211:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 212:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p);
 213:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 214:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 215:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if an area is fully on an other
 216:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param ain_p pointer to an area which could be in 'aholder_p'
 217:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param aholder_p pointer to an area which could involve 'ain_p'
 218:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 219:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return true: `ain_p` is fully inside `aholder_p`
 220:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 221:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius);
 222:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 223:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 224:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if an area is fully out of an other
 225:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param aout_p pointer to an area which could be in 'aholder_p'
 226:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param aholder_p pointer to an area which could involve 'ain_p'
 227:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 228:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return true: `aout_p` is fully outside `aholder_p`
 229:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 230:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_out(const lv_area_t * aout_p, const lv_area_t * aholder_p, lv_coord_t radius);
 231:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 17


 232:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 233:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Check if 2 area is the same
 234:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param a pointer to an area
 235:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param b pointer to another area
 236:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 237:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** bool _lv_area_is_equal(const lv_area_t * a, const lv_area_t * b);
 238:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 239:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
 240:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Align an area to an other
 241:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param base an are where the other will be aligned
 242:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param to_align the area to align
 243:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param align `LV_ALIGN_...`
 244:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 245:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_area_align(const lv_area_t * base, lv_area_t * to_align, lv_align_t align, lv_coord_t ofs_x
 246:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 247:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** void lv_point_transform(lv_point_t * p, int32_t angle, int32_t zoom, const lv_point_t * pivot);
 248:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 249:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**********************
 250:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  *      MACROS
 251:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  **********************/
 252:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 253:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #if LV_USE_LARGE_COORD
 254:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_SHIFT    (29U)
 255:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #else
 256:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_SHIFT    (13U)
 257:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #endif
 258:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 259:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_MASK     (3 << _LV_COORD_TYPE_SHIFT)
 260:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE(x)       ((x) & _LV_COORD_TYPE_MASK)  /*Extract type specifiers*/
 261:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_PLAIN(x)      ((x) & ~_LV_COORD_TYPE_MASK) /*Remove type specifiers*/
 262:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 263:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_PX       (0 << _LV_COORD_TYPE_SHIFT)
 264:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_SPEC     (1 << _LV_COORD_TYPE_SHIFT)
 265:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define _LV_COORD_TYPE_PX_NEG   (3 << _LV_COORD_TYPE_SHIFT)
 266:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 267:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_IS_PX(x)       (_LV_COORD_TYPE(x) == _LV_COORD_TYPE_PX || \
 268:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****                                  _LV_COORD_TYPE(x) == _LV_COORD_TYPE_PX_NEG ? true : false)
 269:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_IS_SPEC(x)     (_LV_COORD_TYPE(x) == _LV_COORD_TYPE_SPEC ? true : false)
 270:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 271:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_SET_SPEC(x)    ((x) | _LV_COORD_TYPE_SPEC)
 272:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 273:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*Special coordinates*/
 274:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_PCT(x)               (x < 0 ? LV_COORD_SET_SPEC(1000 - (x)) : LV_COORD_SET_SPEC(x))
 275:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_IS_PCT(x)      ((LV_COORD_IS_SPEC(x) && _LV_COORD_PLAIN(x) <= 2000) ? true : false
 276:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_GET_PCT(x)     (_LV_COORD_PLAIN(x) > 1000 ? 1000 - _LV_COORD_PLAIN(x) : _LV_COORD_
 277:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_SIZE_CONTENT         LV_COORD_SET_SPEC(2001)
 278:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 279:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** LV_EXPORT_CONST_INT(LV_SIZE_CONTENT);
 280:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 281:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /*Max coordinate value*/
 282:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_MAX            ((1 << _LV_COORD_TYPE_SHIFT) - 1)
 283:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** #define LV_COORD_MIN            (-LV_COORD_MAX)
 284:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 285:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** LV_EXPORT_CONST_INT(LV_COORD_MAX);
 286:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** LV_EXPORT_CONST_INT(LV_COORD_MIN);
 287:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** 
 288:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** /**
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 18


 289:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Convert a percentage value to `lv_coord_t`.
 290:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * Percentage values are stored in special range
 291:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @param x the percentage (0..1000)
 292:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  * @return a coordinate that stores the percentage
 293:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****  */
 294:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** static inline lv_coord_t lv_pct(lv_coord_t x)
 295:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h **** {
 296:d:\kzc\stm32\h743ii_lcd\lvgl\src\misc\lv_area.h ****     return LV_PCT(x);
 233              		.loc 4 296 5 is_stmt 1 view .LVU49
 234              	.LBB23:
  31:lvgl/examples/scroll/lv_example_scroll_2.c **** 
 235              		.loc 1 31 9 is_stmt 0 view .LVU50
 236 0068 42F26402 		movw	r2, #8292
 237 006c 9621     		movs	r1, #150
 238 006e FFF7FEFF 		bl	lv_obj_set_size
 239              	.LVL28:
  33:lvgl/examples/scroll/lv_example_scroll_2.c ****         if(i == 3) {
 240              		.loc 1 33 9 is_stmt 1 view .LVU51
  33:lvgl/examples/scroll/lv_example_scroll_2.c ****         if(i == 3) {
 241              		.loc 1 33 28 is_stmt 0 view .LVU52
 242 0072 3046     		mov	r0, r6
 243 0074 FFF7FEFF 		bl	lv_label_create
 244              	.LVL29:
 245 0078 0546     		mov	r5, r0
 246              	.LVL30:
  34:lvgl/examples/scroll/lv_example_scroll_2.c ****             lv_label_set_text_fmt(label, "Panel %"LV_PRIu32"\nno snap", i);
 247              		.loc 1 34 9 is_stmt 1 view .LVU53
  34:lvgl/examples/scroll/lv_example_scroll_2.c ****             lv_label_set_text_fmt(label, "Panel %"LV_PRIu32"\nno snap", i);
 248              		.loc 1 34 11 is_stmt 0 view .LVU54
 249 007a 032C     		cmp	r4, #3
 250 007c DED0     		beq	.L13
  39:lvgl/examples/scroll/lv_example_scroll_2.c ****         }
 251              		.loc 1 39 13 is_stmt 1 view .LVU55
 252 007e 2246     		mov	r2, r4
 253 0080 1849     		ldr	r1, .L14+4
 254 0082 FFF7FEFF 		bl	lv_label_set_text_fmt
 255              	.LVL31:
  39:lvgl/examples/scroll/lv_example_scroll_2.c ****         }
 256              		.loc 1 39 13 is_stmt 0 view .LVU56
 257 0086 E2E7     		b	.L9
 258              	.LVL32:
 259              	.L12:
  39:lvgl/examples/scroll/lv_example_scroll_2.c ****         }
 260              		.loc 1 39 13 view .LVU57
 261              	.LBE23:
  43:lvgl/examples/scroll/lv_example_scroll_2.c ****     }
  44:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_obj_update_snap(panel, LV_ANIM_ON);
 262              		.loc 1 44 5 is_stmt 1 view .LVU58
 263 0088 0121     		movs	r1, #1
 264 008a 3846     		mov	r0, r7
 265 008c FFF7FEFF 		bl	lv_obj_update_snap
 266              	.LVL33:
  45:lvgl/examples/scroll/lv_example_scroll_2.c **** 
  46:lvgl/examples/scroll/lv_example_scroll_2.c **** #if LV_USE_SWITCH
  47:lvgl/examples/scroll/lv_example_scroll_2.c ****     /*Switch between "One scroll" and "Normal scroll" mode*/
  48:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_obj_t * sw = lv_switch_create(lv_scr_act());
 267              		.loc 1 48 5 view .LVU59
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 19


 268              	.LBB24:
 269              	.LBI24:
 182:lvgl/examples/scroll/../../src/core/lv_disp.h **** {
 270              		.loc 2 182 26 view .LVU60
 271              	.LBB25:
 272              		.loc 2 184 5 view .LVU61
 273              		.loc 2 184 12 is_stmt 0 view .LVU62
 274 0090 FFF7FEFF 		bl	lv_disp_get_default
 275              	.LVL34:
 276 0094 FFF7FEFF 		bl	lv_disp_get_scr_act
 277              	.LVL35:
 278              	.LBE25:
 279              	.LBE24:
 280              		.loc 1 48 21 view .LVU63
 281 0098 FFF7FEFF 		bl	lv_switch_create
 282              	.LVL36:
 283 009c 0446     		mov	r4, r0
 284              	.LVL37:
  49:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_obj_align(sw, LV_ALIGN_TOP_RIGHT, -20, 10);
 285              		.loc 1 49 5 is_stmt 1 view .LVU64
 286 009e 0A23     		movs	r3, #10
 287 00a0 6FF01302 		mvn	r2, #19
 288 00a4 0321     		movs	r1, #3
 289 00a6 FFF7FEFF 		bl	lv_obj_align
 290              	.LVL38:
  50:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_obj_add_event_cb(sw, sw_event_cb, LV_EVENT_ALL, panel);
 291              		.loc 1 50 5 view .LVU65
 292 00aa 3B46     		mov	r3, r7
 293 00ac 0022     		movs	r2, #0
 294 00ae 0E49     		ldr	r1, .L14+8
 295 00b0 2046     		mov	r0, r4
 296 00b2 FFF7FEFF 		bl	lv_obj_add_event_cb
 297              	.LVL39:
  51:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_obj_t * label = lv_label_create(lv_scr_act());
 298              		.loc 1 51 5 view .LVU66
 299              	.LBB26:
 300              	.LBI26:
 182:lvgl/examples/scroll/../../src/core/lv_disp.h **** {
 301              		.loc 2 182 26 view .LVU67
 302              	.LBB27:
 303              		.loc 2 184 5 view .LVU68
 304              		.loc 2 184 12 is_stmt 0 view .LVU69
 305 00b6 FFF7FEFF 		bl	lv_disp_get_default
 306              	.LVL40:
 307 00ba FFF7FEFF 		bl	lv_disp_get_scr_act
 308              	.LVL41:
 309              	.LBE27:
 310              	.LBE26:
 311              		.loc 1 51 24 view .LVU70
 312 00be FFF7FEFF 		bl	lv_label_create
 313              	.LVL42:
 314 00c2 0546     		mov	r5, r0
 315              	.LVL43:
  52:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_label_set_text(label, "One scroll");
 316              		.loc 1 52 5 is_stmt 1 view .LVU71
 317 00c4 0949     		ldr	r1, .L14+12
 318 00c6 FFF7FEFF 		bl	lv_label_set_text
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 20


 319              	.LVL44:
  53:lvgl/examples/scroll/lv_example_scroll_2.c ****     lv_obj_align_to(label, sw, LV_ALIGN_OUT_BOTTOM_MID, 0, 5);
 320              		.loc 1 53 5 view .LVU72
 321 00ca 0523     		movs	r3, #5
 322 00cc 0093     		str	r3, [sp]
 323 00ce 0023     		movs	r3, #0
 324 00d0 0E22     		movs	r2, #14
 325 00d2 2146     		mov	r1, r4
 326 00d4 2846     		mov	r0, r5
 327 00d6 FFF7FEFF 		bl	lv_obj_align_to
 328              	.LVL45:
  54:lvgl/examples/scroll/lv_example_scroll_2.c **** #endif
  55:lvgl/examples/scroll/lv_example_scroll_2.c **** }
 329              		.loc 1 55 1 is_stmt 0 view .LVU73
 330 00da 03B0     		add	sp, sp, #12
 331              		.cfi_def_cfa_offset 20
 332              		@ sp needed
 333 00dc F0BD     		pop	{r4, r5, r6, r7, pc}
 334              	.LVL46:
 335              	.L15:
 336              		.loc 1 55 1 view .LVU74
 337 00de 00BF     		.align	2
 338              	.L14:
 339 00e0 00000000 		.word	.LC0
 340 00e4 14000000 		.word	.LC1
 341 00e8 00000000 		.word	sw_event_cb
 342 00ec 20000000 		.word	.LC2
 343              		.cfi_endproc
 344              	.LFE205:
 346              		.text
 347              	.Letext0:
 348              		.file 5 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 349              		.file 6 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 350              		.file 7 "lvgl/examples/scroll/../../src/misc/lv_anim.h"
 351              		.file 8 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_color.h"
 352              		.file 9 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_style.h"
 353              		.file 10 "lvgl/examples/scroll/../../src/core/lv_obj.h"
 354              		.file 11 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_ll.h"
 355              		.file 12 "lvgl/examples/scroll/../../src/core/lv_group.h"
 356              		.file 13 "lvgl/examples/scroll/../../src/core/lv_obj_scroll.h"
 357              		.file 14 "lvgl/examples/scroll/../../src/core/lv_obj_style.h"
 358              		.file 15 "lvgl/examples/scroll/../../src/core/lv_obj_class.h"
 359              		.file 16 "lvgl/examples/scroll/../../src/core/lv_event.h"
 360              		.file 17 "lvgl/examples/scroll/../../src/extra/layouts/flex/lv_flex.h"
 361              		.file 18 "lvgl/examples/scroll/../../src/widgets/lv_label.h"
 362              		.file 19 "lvgl/examples/scroll/../../src/widgets/lv_btn.h"
 363              		.file 20 "lvgl/examples/scroll/../../src/hal/lv_hal_disp.h"
 364              		.file 21 "lvgl/examples/scroll/../../src/widgets/lv_switch.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s 			page 21


DEFINED SYMBOLS
                            *ABS*:00000000 lv_example_scroll_2.c
C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s:19     .text.sw_event_cb:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s:24     .text.sw_event_cb:00000000 sw_event_cb
C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s:103    .rodata.lv_example_scroll_2.str1.4:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s:113    .text.lv_example_scroll_2:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s:119    .text.lv_example_scroll_2:00000000 lv_example_scroll_2
C:\Users\OSD\AppData\Local\Temp\ccCLZr0v.s:339    .text.lv_example_scroll_2:000000e0 $d

UNDEFINED SYMBOLS
lv_event_get_code
lv_event_get_target
lv_event_get_user_data
lv_obj_has_state
lv_obj_add_flag
lv_obj_clear_flag
lv_disp_get_default
lv_disp_get_scr_act
lv_obj_create
lv_obj_set_size
lv_obj_set_scroll_snap_x
lv_obj_set_flex_flow
lv_obj_align
lv_label_set_text_fmt
lv_btn_create
lv_label_create
lv_obj_update_snap
lv_switch_create
lv_obj_add_event_cb
lv_label_set_text
lv_obj_align_to
