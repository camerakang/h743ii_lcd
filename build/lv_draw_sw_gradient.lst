ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_draw_sw_gradient.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.compute_key,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	compute_key:
  25              	.LVL0:
  26              	.LFB56:
  27              		.file 1 "lvgl/src/draw/sw/lv_draw_sw_gradient.c"
   1:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** /**
   2:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  * @file lv_draw_sw_gradient.c
   3:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  *
   4:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  */
   5:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
   6:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** /*********************
   7:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  *      INCLUDES
   8:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  *********************/
   9:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #include "lv_draw_sw_gradient.h"
  10:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #include "../../misc/lv_gc.h"
  11:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #include "../../misc/lv_types.h"
  12:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
  13:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** /*********************
  14:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  *      DEFINES
  15:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  *********************/
  16:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
  17:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     #define GRAD_CM(r,g,b) LV_COLOR_MAKE32(r,g,b)
  18:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     #define GRAD_CONV(t, x) t.full = lv_color_to32(x)
  19:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #else
  20:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     #define GRAD_CM(r,g,b) LV_COLOR_MAKE(r,g,b)
  21:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     #define GRAD_CONV(t, x) t = x
  22:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
  23:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
  24:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #undef ALIGN
  25:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if defined(LV_ARCH_64)
  26:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     #define ALIGN(X)    (((X) + 7) & ~7)
  27:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #else
  28:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     #define ALIGN(X)    (((X) + 3) & ~3)
  29:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
  30:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
  31:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if LV_GRAD_CACHE_DEF_SIZE != 0 && LV_GRAD_CACHE_DEF_SIZE < 256
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 2


  32:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     #error "LV_GRAD_CACHE_DEF_SIZE is too small"
  33:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
  34:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
  35:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** /**********************
  36:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  *  STATIC PROTOTYPES
  37:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  **********************/
  38:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static lv_grad_t * next_in_cache(lv_grad_t * item);
  39:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
  40:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** typedef lv_res_t (*op_cache_t)(lv_grad_t * c, void * ctx);
  41:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static lv_res_t iterate_cache(op_cache_t func, void * ctx, lv_grad_t ** out);
  42:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static size_t get_cache_item_size(lv_grad_t * c);
  43:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static lv_grad_t * allocate_item(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h);
  44:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static lv_res_t find_oldest_item_life(lv_grad_t * c, void * ctx);
  45:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static lv_res_t kill_oldest_item(lv_grad_t * c, void * ctx);
  46:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static lv_res_t find_item(lv_grad_t * c, void * ctx);
  47:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static void free_item(lv_grad_t * c);
  48:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static  uint32_t compute_key(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h);
  49:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
  50:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** /**********************
  51:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  *   STATIC VARIABLE
  52:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  **********************/
  53:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static size_t    grad_cache_size = 0;
  54:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static uint8_t * grad_cache_end = 0;
  55:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
  56:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** /**********************
  57:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  *   STATIC FUNCTIONS
  58:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  **********************/
  59:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** union void_cast {
  60:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     const void * ptr;
  61:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     const uint32_t value;
  62:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** };
  63:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
  64:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static uint32_t compute_key(const lv_grad_dsc_t * g, lv_coord_t size, lv_coord_t w)
  65:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
  28              		.loc 1 65 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  66:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     union void_cast v;
  33              		.loc 1 66 5 view .LVU1
  67:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     v.ptr = g;
  34              		.loc 1 67 5 view .LVU2
  68:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if th
  35              		.loc 1 68 5 view .LVU3
  36              		.loc 1 68 21 is_stmt 0 view .LVU4
  37 0000 4840     		eors	r0, r0, r1
  38              	.LVL1:
  69:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
  39              		.loc 1 69 1 view .LVU5
  40 0002 80EA6200 		eor	r0, r0, r2, asr #1
  41 0006 7047     		bx	lr
  42              		.cfi_endproc
  43              	.LFE56:
  45              		.section	.text.get_cache_item_size,"ax",%progbits
  46              		.align	1
  47              		.syntax unified
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 3


  48              		.thumb
  49              		.thumb_func
  51              	get_cache_item_size:
  52              	.LVL2:
  53              	.LFB57:
  70:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
  71:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static size_t get_cache_item_size(lv_grad_t * c)
  72:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
  54              		.loc 1 72 1 is_stmt 1 view -0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  73:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
  59              		.loc 1 73 5 view .LVU7
  60              		.loc 1 73 36 is_stmt 0 view .LVU8
  61 0000 B0F90C00 		ldrsh	r0, [r0, #12]
  62              	.LVL3:
  63              		.loc 1 73 36 view .LVU9
  64 0004 8000     		lsls	r0, r0, #2
  65              	.LVL4:
  74:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
  75:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     s += ALIGN(c->size * sizeof(lv_color32_t));
  76:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if LV_DITHER_ERROR_DIFFUSION == 1
  77:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     s += ALIGN(c->w * sizeof(lv_scolor24_t));
  78:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
  79:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
  80:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     return s;
  66              		.loc 1 80 5 is_stmt 1 view .LVU10
  81:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
  67              		.loc 1 81 1 is_stmt 0 view .LVU11
  68 0006 1030     		adds	r0, r0, #16
  69              	.LVL5:
  70              		.loc 1 81 1 view .LVU12
  71 0008 7047     		bx	lr
  72              		.cfi_endproc
  73              	.LFE57:
  75              		.section	.text.next_in_cache,"ax",%progbits
  76              		.align	1
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  81              	next_in_cache:
  82              	.LVL6:
  83              	.LFB58:
  82:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
  83:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static lv_grad_t * next_in_cache(lv_grad_t * item)
  84:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
  84              		.loc 1 84 1 is_stmt 1 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  85:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(grad_cache_size == 0) return NULL;
  88              		.loc 1 85 5 view .LVU14
  89              		.loc 1 85 24 is_stmt 0 view .LVU15
  90 0000 0A4B     		ldr	r3, .L13
  91 0002 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 4


  92              		.loc 1 85 7 view .LVU16
  93 0004 7BB1     		cbz	r3, .L6
  84:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(grad_cache_size == 0) return NULL;
  94              		.loc 1 84 1 view .LVU17
  95 0006 10B5     		push	{r4, lr}
  96              		.cfi_def_cfa_offset 8
  97              		.cfi_offset 4, -8
  98              		.cfi_offset 14, -4
  99 0008 0446     		mov	r4, r0
  86:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
  87:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(item == NULL)
 100              		.loc 1 87 5 is_stmt 1 view .LVU18
 101              		.loc 1 87 7 is_stmt 0 view .LVU19
 102 000a 38B1     		cbz	r0, .L11
  88:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
  89:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
  90:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     size_t s = get_cache_item_size(item);
 103              		.loc 1 90 5 is_stmt 1 view .LVU20
 104              		.loc 1 90 16 is_stmt 0 view .LVU21
 105 000c FFF7FEFF 		bl	get_cache_item_size
 106              	.LVL7:
  91:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     /*Compute the size for this cache item*/
  92:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if((uint8_t *)item + s >= grad_cache_end) return NULL;
 107              		.loc 1 92 5 is_stmt 1 view .LVU22
 108              		.loc 1 92 24 is_stmt 0 view .LVU23
 109 0010 2044     		add	r0, r0, r4
 110              	.LVL8:
 111              		.loc 1 92 28 view .LVU24
 112 0012 074B     		ldr	r3, .L13+4
 113 0014 1B68     		ldr	r3, [r3]
 114              		.loc 1 92 7 view .LVU25
 115 0016 9842     		cmp	r0, r3
 116 0018 03D2     		bcs	.L12
 117              	.L3:
  93:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     else return (lv_grad_t *)((uint8_t *)item + s);
  94:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 118              		.loc 1 94 1 view .LVU26
 119 001a 10BD     		pop	{r4, pc}
 120              	.LVL9:
 121              	.L11:
  88:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 122              		.loc 1 88 9 is_stmt 1 view .LVU27
  88:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 123              		.loc 1 88 16 is_stmt 0 view .LVU28
 124 001c 054B     		ldr	r3, .L13+8
 125 001e 1868     		ldr	r0, [r3]
 126              	.LVL10:
  88:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 127              		.loc 1 88 16 view .LVU29
 128 0020 FBE7     		b	.L3
 129              	.L12:
  92:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     else return (lv_grad_t *)((uint8_t *)item + s);
 130              		.loc 1 92 54 view .LVU30
 131 0022 0020     		movs	r0, #0
 132 0024 F9E7     		b	.L3
 133              	.LVL11:
 134              	.L6:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 5


 135              		.cfi_def_cfa_offset 0
 136              		.cfi_restore 4
 137              		.cfi_restore 14
  85:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 138              		.loc 1 85 37 view .LVU31
 139 0026 0020     		movs	r0, #0
 140              	.LVL12:
 141              		.loc 1 94 1 view .LVU32
 142 0028 7047     		bx	lr
 143              	.L14:
 144 002a 00BF     		.align	2
 145              	.L13:
 146 002c 00000000 		.word	.LANCHOR0
 147 0030 00000000 		.word	.LANCHOR1
 148 0034 00000000 		.word	_lv_grad_cache_mem
 149              		.cfi_endproc
 150              	.LFE58:
 152              		.section	.text.iterate_cache,"ax",%progbits
 153              		.align	1
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 158              	iterate_cache:
 159              	.LVL13:
 160              	.LFB59:
  95:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
  96:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static lv_res_t iterate_cache(op_cache_t func, void * ctx, lv_grad_t ** out)
  97:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
 161              		.loc 1 97 1 is_stmt 1 view -0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              		.loc 1 97 1 is_stmt 0 view .LVU34
 166 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 167              		.cfi_def_cfa_offset 24
 168              		.cfi_offset 3, -24
 169              		.cfi_offset 4, -20
 170              		.cfi_offset 5, -16
 171              		.cfi_offset 6, -12
 172              		.cfi_offset 7, -8
 173              		.cfi_offset 14, -4
 174 0002 0646     		mov	r6, r0
 175 0004 0D46     		mov	r5, r1
 176 0006 1746     		mov	r7, r2
  98:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_grad_t * first = next_in_cache(NULL);
 177              		.loc 1 98 5 is_stmt 1 view .LVU35
 178              		.loc 1 98 25 is_stmt 0 view .LVU36
 179 0008 0020     		movs	r0, #0
 180              	.LVL14:
 181              		.loc 1 98 25 view .LVU37
 182 000a FFF7FEFF 		bl	next_in_cache
 183              	.LVL15:
 184              		.loc 1 98 25 view .LVU38
 185 000e 0446     		mov	r4, r0
 186              	.LVL16:
  99:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     while(first != NULL && first->life) {
 187              		.loc 1 99 5 is_stmt 1 view .LVU39
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 6


 188              		.loc 1 99 10 is_stmt 0 view .LVU40
 189 0010 03E0     		b	.L16
 190              	.LVL17:
 191              	.L17:
 100:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         if((*func)(first, ctx) == LV_RES_OK) {
 101:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             if(out != NULL) *out = first;
 102:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             return LV_RES_OK;
 103:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 104:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         first = next_in_cache(first);
 192              		.loc 1 104 9 is_stmt 1 view .LVU41
 193              		.loc 1 104 17 is_stmt 0 view .LVU42
 194 0012 2046     		mov	r0, r4
 195 0014 FFF7FEFF 		bl	next_in_cache
 196              	.LVL18:
 197 0018 0446     		mov	r4, r0
 198              	.LVL19:
 199              	.L16:
  99:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     while(first != NULL && first->life) {
 200              		.loc 1 99 10 is_stmt 1 view .LVU43
 201 001a 6CB1     		cbz	r4, .L21
  99:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     while(first != NULL && first->life) {
 202              		.loc 1 99 25 is_stmt 0 discriminator 1 view .LVU44
 203 001c 6368     		ldr	r3, [r4, #4]
 204 001e 33F04043 		bics	r3, r3, #-1073741824
 205 0022 07D0     		beq	.L23
 100:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         if((*func)(first, ctx) == LV_RES_OK) {
 206              		.loc 1 100 9 is_stmt 1 view .LVU45
 100:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         if((*func)(first, ctx) == LV_RES_OK) {
 207              		.loc 1 100 13 is_stmt 0 view .LVU46
 208 0024 2946     		mov	r1, r5
 209 0026 2046     		mov	r0, r4
 100:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         if((*func)(first, ctx) == LV_RES_OK) {
 210              		.loc 1 100 13 view .LVU47
 211 0028 B047     		blx	r6
 212              	.LVL20:
 100:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         if((*func)(first, ctx) == LV_RES_OK) {
 213              		.loc 1 100 11 view .LVU48
 214 002a 0128     		cmp	r0, #1
 215 002c F1D1     		bne	.L17
 101:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             return LV_RES_OK;
 216              		.loc 1 101 13 is_stmt 1 view .LVU49
 101:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             return LV_RES_OK;
 217              		.loc 1 101 15 is_stmt 0 view .LVU50
 218 002e 27B1     		cbz	r7, .L19
 101:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             return LV_RES_OK;
 219              		.loc 1 101 29 is_stmt 1 discriminator 1 view .LVU51
 101:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             return LV_RES_OK;
 220              		.loc 1 101 34 is_stmt 0 discriminator 1 view .LVU52
 221 0030 3C60     		str	r4, [r7]
 102:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 222              		.loc 1 102 13 is_stmt 1 discriminator 1 view .LVU53
 102:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 223              		.loc 1 102 20 is_stmt 0 discriminator 1 view .LVU54
 224 0032 02E0     		b	.L19
 225              	.LVL21:
 226              	.L23:
 105:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 7


 106:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     return LV_RES_INV;
 227              		.loc 1 106 12 view .LVU55
 228 0034 0020     		movs	r0, #0
 229              	.LVL22:
 230              		.loc 1 106 12 view .LVU56
 231 0036 00E0     		b	.L19
 232              	.LVL23:
 233              	.L21:
 234              		.loc 1 106 12 view .LVU57
 235 0038 0020     		movs	r0, #0
 236              	.LVL24:
 237              	.L19:
 107:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 238              		.loc 1 107 1 view .LVU58
 239 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 240              		.loc 1 107 1 view .LVU59
 241              		.cfi_endproc
 242              	.LFE59:
 244              		.section	.text.find_oldest_item_life,"ax",%progbits
 245              		.align	1
 246              		.syntax unified
 247              		.thumb
 248              		.thumb_func
 250              	find_oldest_item_life:
 251              	.LVL25:
 252              	.LFB60:
 108:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 109:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static lv_res_t find_oldest_item_life(lv_grad_t * c, void * ctx)
 110:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
 253              		.loc 1 110 1 is_stmt 1 view -0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257              		@ link register save eliminated.
 111:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     uint32_t * min_life = (uint32_t *)ctx;
 258              		.loc 1 111 5 view .LVU61
 112:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(c->life < *min_life) *min_life = c->life;
 259              		.loc 1 112 5 view .LVU62
 260              		.loc 1 112 9 is_stmt 0 view .LVU63
 261 0000 4368     		ldr	r3, [r0, #4]
 262 0002 C3F31D03 		ubfx	r3, r3, #0, #30
 263              		.loc 1 112 18 view .LVU64
 264 0006 0A68     		ldr	r2, [r1]
 265              		.loc 1 112 7 view .LVU65
 266 0008 9342     		cmp	r3, r2
 267 000a 00D2     		bcs	.L25
 268              		.loc 1 112 29 is_stmt 1 discriminator 1 view .LVU66
 269              		.loc 1 112 39 is_stmt 0 discriminator 1 view .LVU67
 270 000c 0B60     		str	r3, [r1]
 271              	.L25:
 113:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     return LV_RES_INV;
 272              		.loc 1 113 5 is_stmt 1 view .LVU68
 114:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 273              		.loc 1 114 1 is_stmt 0 view .LVU69
 274 000e 0020     		movs	r0, #0
 275              	.LVL26:
 276              		.loc 1 114 1 view .LVU70
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 8


 277 0010 7047     		bx	lr
 278              		.cfi_endproc
 279              	.LFE60:
 281              		.section	.text.find_item,"ax",%progbits
 282              		.align	1
 283              		.syntax unified
 284              		.thumb
 285              		.thumb_func
 287              	find_item:
 288              	.LVL27:
 289              	.LFB63:
 115:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 116:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static void free_item(lv_grad_t * c)
 117:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
 118:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     size_t size = get_cache_item_size(c);
 119:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 120:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     grad_cache_end -= size;
 121:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(next_items_size) {
 122:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         uint8_t * old = (uint8_t *)c;
 123:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         lv_memcpy(c, ((uint8_t *)c) + size, next_items_size);
 124:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         /* Then need to fix all internal pointers too */
 125:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         while((uint8_t *)c != grad_cache_end) {
 126:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 127:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
 128:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             c->hmap = (lv_color32_t *)(((uint8_t *)c->hmap) - size);
 129:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if LV_DITHER_ERROR_DIFFUSION == 1
 130:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             c->error_acc = (lv_scolor24_t *)(((uint8_t *)c->error_acc) - size);
 131:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
 132:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
 133:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             c = (lv_grad_t *)(((uint8_t *)c) + get_cache_item_size(c));
 134:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 135:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         lv_memset_00(old + next_items_size, size);
 136:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 137:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 138:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 139:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static lv_res_t kill_oldest_item(lv_grad_t * c, void * ctx)
 140:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
 141:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     uint32_t * min_life = (uint32_t *)ctx;
 142:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(c->life == *min_life) {
 143:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         /*Found, let's kill it*/
 144:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         free_item(c);
 145:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         return LV_RES_OK;
 146:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 147:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     return LV_RES_INV;
 148:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 149:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 150:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static lv_res_t find_item(lv_grad_t * c, void * ctx)
 151:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
 290              		.loc 1 151 1 is_stmt 1 view -0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 152:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     uint32_t * k = (uint32_t *)ctx;
 295              		.loc 1 152 5 view .LVU72
 153:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(c->key == *k) return LV_RES_OK;
 296              		.loc 1 153 5 view .LVU73
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 9


 297              		.loc 1 153 9 is_stmt 0 view .LVU74
 298 0000 0268     		ldr	r2, [r0]
 299              		.loc 1 153 18 view .LVU75
 300 0002 0B68     		ldr	r3, [r1]
 301              		.loc 1 153 7 view .LVU76
 302 0004 9A42     		cmp	r2, r3
 303 0006 01D0     		beq	.L28
 154:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     return LV_RES_INV;
 304              		.loc 1 154 12 view .LVU77
 305 0008 0020     		movs	r0, #0
 306              	.LVL28:
 307              		.loc 1 154 12 view .LVU78
 308 000a 7047     		bx	lr
 309              	.LVL29:
 310              	.L28:
 153:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(c->key == *k) return LV_RES_OK;
 311              		.loc 1 153 29 view .LVU79
 312 000c 0120     		movs	r0, #1
 313              	.LVL30:
 155:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 314              		.loc 1 155 1 view .LVU80
 315 000e 7047     		bx	lr
 316              		.cfi_endproc
 317              	.LFE63:
 319              		.section	.text.allocate_item,"ax",%progbits
 320              		.align	1
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	allocate_item:
 326              	.LVL31:
 327              	.LFB64:
 156:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 157:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** static lv_grad_t * allocate_item(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
 158:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
 328              		.loc 1 158 1 is_stmt 1 view -0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 8
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332              		.loc 1 158 1 is_stmt 0 view .LVU82
 333 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 334              		.cfi_def_cfa_offset 28
 335              		.cfi_offset 4, -28
 336              		.cfi_offset 5, -24
 337              		.cfi_offset 6, -20
 338              		.cfi_offset 7, -16
 339              		.cfi_offset 8, -12
 340              		.cfi_offset 9, -8
 341              		.cfi_offset 14, -4
 342 0004 83B0     		sub	sp, sp, #12
 343              		.cfi_def_cfa_offset 40
 344 0006 0746     		mov	r7, r0
 345 0008 0E46     		mov	r6, r1
 346 000a 1546     		mov	r5, r2
 159:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 347              		.loc 1 159 5 is_stmt 1 view .LVU83
 348              		.loc 1 159 30 is_stmt 0 view .LVU84
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 10


 349 000c 437C     		ldrb	r3, [r0, #17]	@ zero_extendqisi2
 350 000e 03F00703 		and	r3, r3, #7
 351              		.loc 1 159 16 view .LVU85
 352 0012 022B     		cmp	r3, #2
 353 0014 3ED0     		beq	.L43
 354 0016 9046     		mov	r8, r2
 355              	.L30:
 356              	.LVL32:
 160:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 357              		.loc 1 160 5 is_stmt 1 discriminator 4 view .LVU86
 358              		.loc 1 160 16 is_stmt 0 discriminator 4 view .LVU87
 359 0018 B542     		cmp	r5, r6
 360 001a B8BF     		it	lt
 361 001c 3546     		movlt	r5, r6
 362              	.LVL33:
 161:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                            no dithering is selected where it's used vertically */
 162:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 163:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 363              		.loc 1 163 5 is_stmt 1 discriminator 4 view .LVU88
 364              		.loc 1 163 50 is_stmt 0 discriminator 4 view .LVU89
 365 001e AC00     		lsls	r4, r5, #2
 366              		.loc 1 163 12 discriminator 4 view .LVU90
 367 0020 1034     		adds	r4, r4, #16
 368              	.LVL34:
 164:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
 165:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     req_size += ALIGN(size * sizeof(lv_color32_t));
 166:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if LV_DITHER_ERROR_DIFFUSION == 1
 167:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     req_size += ALIGN(w * sizeof(lv_scolor24_t));
 168:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
 169:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
 170:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 171:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 369              		.loc 1 171 5 is_stmt 1 discriminator 4 view .LVU91
 370              		.loc 1 171 47 is_stmt 0 discriminator 4 view .LVU92
 371 0022 374B     		ldr	r3, .L45
 372 0024 D3F80090 		ldr	r9, [r3]
 373 0028 364B     		ldr	r3, .L45+4
 374 002a 1B68     		ldr	r3, [r3]
 375 002c A9EB0303 		sub	r3, r9, r3
 376              	.LVL35:
 172:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_grad_t * item = NULL;
 377              		.loc 1 172 5 is_stmt 1 discriminator 4 view .LVU93
 173:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(req_size + act_size < grad_cache_size) {
 378              		.loc 1 173 5 discriminator 4 view .LVU94
 379              		.loc 1 173 17 is_stmt 0 discriminator 4 view .LVU95
 380 0030 E118     		adds	r1, r4, r3
 381              	.LVL36:
 382              		.loc 1 173 28 discriminator 4 view .LVU96
 383 0032 354A     		ldr	r2, .L45+8
 384              	.LVL37:
 385              		.loc 1 173 28 discriminator 4 view .LVU97
 386 0034 1268     		ldr	r2, [r2]
 387              		.loc 1 173 7 discriminator 4 view .LVU98
 388 0036 9142     		cmp	r1, r2
 389 0038 2ED2     		bcs	.L31
 174:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item = (lv_grad_t *)grad_cache_end;
 390              		.loc 1 174 9 is_stmt 1 view .LVU99
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 11


 391              	.LVL38:
 175:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->not_cached = 0;
 392              		.loc 1 175 9 view .LVU100
 393              		.loc 1 175 26 is_stmt 0 view .LVU101
 394 003a 99F80730 		ldrb	r3, [r9, #7]	@ zero_extendqisi2
 395              	.LVL39:
 396              		.loc 1 175 26 view .LVU102
 397 003e 6FF3C713 		bfc	r3, #7, #1
 398 0042 89F80730 		strb	r3, [r9, #7]
 399              	.LVL40:
 400              	.L32:
 176:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 177:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     else {
 178:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         /*Need to evict items from cache until we find enough space to allocate this one */
 179:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         if(req_size <= grad_cache_size) {
 180:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             while(act_size + req_size > grad_cache_size) {
 181:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                 uint32_t oldest_life = UINT32_MAX;
 182:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                 iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 183:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                 iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 184:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                 act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 185:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             }
 186:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             item = (lv_grad_t *)grad_cache_end;
 187:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             item->not_cached = 0;
 188:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 189:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         else {
 190:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             /*The cache is too small. Allocate the item manually and free it later.*/
 191:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             item = lv_mem_alloc(req_size);
 192:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             LV_ASSERT_MALLOC(item);
 193:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             if(item == NULL) return NULL;
 194:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             item->not_cached = 1;
 195:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 196:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 197:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 198:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     item->key = compute_key(g, size, w);
 401              		.loc 1 198 5 is_stmt 1 view .LVU103
 402              		.loc 1 198 17 is_stmt 0 view .LVU104
 403 0046 3246     		mov	r2, r6
 404 0048 4146     		mov	r1, r8
 405 004a 3846     		mov	r0, r7
 406 004c FFF7FEFF 		bl	compute_key
 407              	.LVL41:
 408              		.loc 1 198 15 view .LVU105
 409 0050 C9F80000 		str	r0, [r9]
 199:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     item->life = 1;
 410              		.loc 1 199 5 is_stmt 1 view .LVU106
 411              		.loc 1 199 16 is_stmt 0 view .LVU107
 412 0054 D9F80430 		ldr	r3, [r9, #4]
 413 0058 0122     		movs	r2, #1
 414 005a 62F31D03 		bfi	r3, r2, #0, #30
 415 005e C9F80430 		str	r3, [r9, #4]
 200:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     item->filled = 0;
 416              		.loc 1 200 5 is_stmt 1 view .LVU108
 417              		.loc 1 200 18 is_stmt 0 view .LVU109
 418 0062 99F80730 		ldrb	r3, [r9, #7]	@ zero_extendqisi2
 419 0066 6FF38613 		bfc	r3, #6, #1
 420 006a 89F80730 		strb	r3, [r9, #7]
 201:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     item->alloc_size = map_size;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 12


 421              		.loc 1 201 5 is_stmt 1 view .LVU110
 422              		.loc 1 201 22 is_stmt 0 view .LVU111
 423 006e A9F80C50 		strh	r5, [r9, #12]	@ movhi
 202:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     item->size = size;
 424              		.loc 1 202 5 is_stmt 1 view .LVU112
 425              		.loc 1 202 16 is_stmt 0 view .LVU113
 426 0072 A9F80E80 		strh	r8, [r9, #14]	@ movhi
 203:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(item->not_cached) {
 427              		.loc 1 203 5 is_stmt 1 view .LVU114
 428              		.loc 1 203 7 is_stmt 0 view .LVU115
 429 0076 5BB2     		sxtb	r3, r3
 430 0078 002B     		cmp	r3, #0
 431 007a 3BDB     		blt	.L44
 204:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         uint8_t * p = (uint8_t *)item;
 205:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 206:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
 207:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->hmap = (lv_color32_t *)(p + ALIGN(sizeof(*item)) + ALIGN(map_size * sizeof(lv_color_t
 208:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if LV_DITHER_ERROR_DIFFUSION == 1
 209:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->error_acc = (lv_scolor24_t *)(p + ALIGN(sizeof(*item)) + ALIGN(size * sizeof(lv_grad_
 210:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                             ALIGN(map_size * sizeof(lv_color_t)));
 211:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->w = w;
 212:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
 213:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
 214:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 215:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     else {
 216:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 432              		.loc 1 216 9 is_stmt 1 view .LVU116
 433              		.loc 1 216 51 is_stmt 0 view .LVU117
 434 007c 204A     		ldr	r2, .L45
 435 007e 1368     		ldr	r3, [r2]
 436 0080 03F11001 		add	r1, r3, #16
 437              		.loc 1 216 19 view .LVU118
 438 0084 C9F80810 		str	r1, [r9, #8]
 217:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
 218:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->hmap = (lv_color32_t *)(grad_cache_end + ALIGN(sizeof(*item)) + ALIGN(map_size * size
 219:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if LV_DITHER_ERROR_DIFFUSION == 1
 220:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->error_acc = (lv_scolor24_t *)(grad_cache_end + ALIGN(sizeof(*item)) + ALIGN(size * si
 221:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                             ALIGN(map_size * sizeof(lv_color_t)));
 222:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->w = w;
 223:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
 224:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
 225:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         grad_cache_end += req_size;
 439              		.loc 1 225 9 is_stmt 1 view .LVU119
 440              		.loc 1 225 24 is_stmt 0 view .LVU120
 441 0088 2344     		add	r3, r3, r4
 442 008a 1360     		str	r3, [r2]
 226:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 227:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     return item;
 443              		.loc 1 227 5 is_stmt 1 view .LVU121
 444              	.L29:
 228:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 445              		.loc 1 228 1 is_stmt 0 view .LVU122
 446 008c 4846     		mov	r0, r9
 447 008e 03B0     		add	sp, sp, #12
 448              		.cfi_remember_state
 449              		.cfi_def_cfa_offset 28
 450              		@ sp needed
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 13


 451 0090 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 452              	.LVL42:
 453              	.L43:
 454              		.cfi_restore_state
 159:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 455              		.loc 1 159 16 view .LVU123
 456 0094 8846     		mov	r8, r1
 457 0096 BFE7     		b	.L30
 458              	.LVL43:
 459              	.L31:
 179:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             while(act_size + req_size > grad_cache_size) {
 460              		.loc 1 179 9 is_stmt 1 view .LVU124
 179:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             while(act_size + req_size > grad_cache_size) {
 461              		.loc 1 179 11 is_stmt 0 view .LVU125
 462 0098 A242     		cmp	r2, r4
 463 009a 1BD2     		bcs	.L33
 191:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             LV_ASSERT_MALLOC(item);
 464              		.loc 1 191 13 is_stmt 1 view .LVU126
 191:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             LV_ASSERT_MALLOC(item);
 465              		.loc 1 191 20 is_stmt 0 view .LVU127
 466 009c 2046     		mov	r0, r4
 467              	.LVL44:
 191:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             LV_ASSERT_MALLOC(item);
 468              		.loc 1 191 20 view .LVU128
 469 009e FFF7FEFF 		bl	lv_mem_alloc
 470              	.LVL45:
 192:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             if(item == NULL) return NULL;
 471              		.loc 1 192 13 is_stmt 1 view .LVU129
 192:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             if(item == NULL) return NULL;
 472              		.loc 1 192 13 view .LVU130
 473 00a2 8146     		mov	r9, r0
 192:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             if(item == NULL) return NULL;
 474              		.loc 1 192 13 is_stmt 0 view .LVU131
 475 00a4 28B3     		cbz	r0, .L37
 192:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             if(item == NULL) return NULL;
 476              		.loc 1 192 13 is_stmt 1 view .LVU132
 192:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             if(item == NULL) return NULL;
 477              		.loc 1 192 35 view .LVU133
 193:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             item->not_cached = 1;
 478              		.loc 1 193 13 view .LVU134
 194:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 479              		.loc 1 194 13 view .LVU135
 194:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 480              		.loc 1 194 30 is_stmt 0 view .LVU136
 481 00a6 C379     		ldrb	r3, [r0, #7]	@ zero_extendqisi2
 482 00a8 43F08003 		orr	r3, r3, #128
 483 00ac C371     		strb	r3, [r0, #7]
 484 00ae CAE7     		b	.L32
 485              	.LVL46:
 486              	.L35:
 487              	.LBB8:
 181:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                 iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 488              		.loc 1 181 17 is_stmt 1 view .LVU137
 181:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                 iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 489              		.loc 1 181 26 is_stmt 0 view .LVU138
 490 00b0 4FF0FF33 		mov	r3, #-1
 491 00b4 0193     		str	r3, [sp, #4]
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 14


 182:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                 iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 492              		.loc 1 182 17 is_stmt 1 view .LVU139
 493 00b6 0022     		movs	r2, #0
 494 00b8 01A9     		add	r1, sp, #4
 495 00ba 1448     		ldr	r0, .L45+12
 496 00bc FFF7FEFF 		bl	iterate_cache
 497              	.LVL47:
 183:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                 act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 498              		.loc 1 183 17 view .LVU140
 499 00c0 0022     		movs	r2, #0
 500 00c2 01A9     		add	r1, sp, #4
 501 00c4 1248     		ldr	r0, .L45+16
 502 00c6 FFF7FEFF 		bl	iterate_cache
 503              	.LVL48:
 184:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             }
 504              		.loc 1 184 17 view .LVU141
 184:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             }
 505              		.loc 1 184 52 is_stmt 0 view .LVU142
 506 00ca 0D4B     		ldr	r3, .L45
 507 00cc 1B68     		ldr	r3, [r3]
 508 00ce 0D4A     		ldr	r2, .L45+4
 509 00d0 1268     		ldr	r2, [r2]
 510 00d2 9B1A     		subs	r3, r3, r2
 511              	.LVL49:
 512              	.L33:
 184:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             }
 513              		.loc 1 184 52 view .LVU143
 514              	.LBE8:
 180:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                 uint32_t oldest_life = UINT32_MAX;
 515              		.loc 1 180 18 is_stmt 1 view .LVU144
 180:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                 uint32_t oldest_life = UINT32_MAX;
 516              		.loc 1 180 28 is_stmt 0 view .LVU145
 517 00d4 2344     		add	r3, r3, r4
 518              	.LVL50:
 180:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                 uint32_t oldest_life = UINT32_MAX;
 519              		.loc 1 180 39 view .LVU146
 520 00d6 0C4A     		ldr	r2, .L45+8
 521 00d8 1268     		ldr	r2, [r2]
 180:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                 uint32_t oldest_life = UINT32_MAX;
 522              		.loc 1 180 18 view .LVU147
 523 00da 9342     		cmp	r3, r2
 524 00dc E8D8     		bhi	.L35
 186:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             item->not_cached = 0;
 525              		.loc 1 186 13 is_stmt 1 view .LVU148
 186:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             item->not_cached = 0;
 526              		.loc 1 186 18 is_stmt 0 view .LVU149
 527 00de 084B     		ldr	r3, .L45
 528 00e0 D3F80090 		ldr	r9, [r3]
 529              	.LVL51:
 187:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 530              		.loc 1 187 13 is_stmt 1 view .LVU150
 187:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 531              		.loc 1 187 30 is_stmt 0 view .LVU151
 532 00e4 99F80730 		ldrb	r3, [r9, #7]	@ zero_extendqisi2
 533 00e8 6FF3C713 		bfc	r3, #7, #1
 534 00ec 89F80730 		strb	r3, [r9, #7]
 535 00f0 A9E7     		b	.L32
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 15


 536              	.LVL52:
 537              	.L37:
 192:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             if(item == NULL) return NULL;
 538              		.loc 1 192 13 is_stmt 1 discriminator 1 view .LVU152
 192:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             if(item == NULL) return NULL;
 539              		.loc 1 192 13 discriminator 1 view .LVU153
 192:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             if(item == NULL) return NULL;
 540              		.loc 1 192 13 discriminator 1 view .LVU154
 192:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             if(item == NULL) return NULL;
 541              		.loc 1 192 13 discriminator 1 view .LVU155
 192:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             if(item == NULL) return NULL;
 542              		.loc 1 192 13 discriminator 1 view .LVU156
 192:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             if(item == NULL) return NULL;
 543              		.loc 1 192 13 discriminator 1 view .LVU157
 544 00f2 FEE7     		b	.L37
 545              	.LVL53:
 546              	.L44:
 547              	.LBB9:
 204:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 548              		.loc 1 204 9 view .LVU158
 205:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
 549              		.loc 1 205 9 view .LVU159
 205:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
 550              		.loc 1 205 38 is_stmt 0 view .LVU160
 551 00f4 09F11003 		add	r3, r9, #16
 205:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
 552              		.loc 1 205 19 view .LVU161
 553 00f8 C9F80830 		str	r3, [r9, #8]
 554              	.LBE9:
 555 00fc C6E7     		b	.L29
 556              	.L46:
 557 00fe 00BF     		.align	2
 558              	.L45:
 559 0100 00000000 		.word	.LANCHOR1
 560 0104 00000000 		.word	_lv_grad_cache_mem
 561 0108 00000000 		.word	.LANCHOR0
 562 010c 00000000 		.word	find_oldest_item_life
 563 0110 00000000 		.word	kill_oldest_item
 564              		.cfi_endproc
 565              	.LFE64:
 567              		.section	.text.free_item,"ax",%progbits
 568              		.align	1
 569              		.syntax unified
 570              		.thumb
 571              		.thumb_func
 573              	free_item:
 574              	.LVL54:
 575              	.LFB61:
 117:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     size_t size = get_cache_item_size(c);
 576              		.loc 1 117 1 is_stmt 1 view -0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 0
 579              		@ frame_needed = 0, uses_anonymous_args = 0
 117:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     size_t size = get_cache_item_size(c);
 580              		.loc 1 117 1 is_stmt 0 view .LVU163
 581 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 582              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 16


 583              		.cfi_offset 4, -24
 584              		.cfi_offset 5, -20
 585              		.cfi_offset 6, -16
 586              		.cfi_offset 7, -12
 587              		.cfi_offset 8, -8
 588              		.cfi_offset 14, -4
 589 0004 0646     		mov	r6, r0
 118:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 590              		.loc 1 118 5 is_stmt 1 view .LVU164
 118:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 591              		.loc 1 118 19 is_stmt 0 view .LVU165
 592 0006 FFF7FEFF 		bl	get_cache_item_size
 593              	.LVL55:
 119:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     grad_cache_end -= size;
 594              		.loc 1 119 5 is_stmt 1 view .LVU166
 119:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     grad_cache_end -= size;
 595              		.loc 1 119 54 is_stmt 0 view .LVU167
 596 000a 114A     		ldr	r2, .L53
 597 000c 1368     		ldr	r3, [r2]
 598 000e 9F1B     		subs	r7, r3, r6
 599              	.LVL56:
 120:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(next_items_size) {
 600              		.loc 1 120 5 is_stmt 1 view .LVU168
 120:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(next_items_size) {
 601              		.loc 1 120 20 is_stmt 0 view .LVU169
 602 0010 1B1A     		subs	r3, r3, r0
 603 0012 1360     		str	r3, [r2]
 121:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         uint8_t * old = (uint8_t *)c;
 604              		.loc 1 121 5 is_stmt 1 view .LVU170
 121:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         uint8_t * old = (uint8_t *)c;
 605              		.loc 1 121 7 is_stmt 0 view .LVU171
 606 0014 3F1A     		subs	r7, r7, r0
 607              	.LVL57:
 121:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         uint8_t * old = (uint8_t *)c;
 608              		.loc 1 121 7 view .LVU172
 609 0016 01D1     		bne	.L52
 610              	.LVL58:
 611              	.L47:
 137:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 612              		.loc 1 137 1 view .LVU173
 613 0018 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 614              	.LVL59:
 615              	.L52:
 137:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 616              		.loc 1 137 1 view .LVU174
 617 001c 0546     		mov	r5, r0
 618 001e C0F10008 		rsb	r8, r0, #0
 619              	.LBB10:
 122:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         lv_memcpy(c, ((uint8_t *)c) + size, next_items_size);
 620              		.loc 1 122 9 is_stmt 1 view .LVU175
 621              	.LVL60:
 123:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         /* Then need to fix all internal pointers too */
 622              		.loc 1 123 9 view .LVU176
 623 0022 3A46     		mov	r2, r7
 624 0024 3118     		adds	r1, r6, r0
 625 0026 3046     		mov	r0, r6
 626              	.LVL61:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 17


 123:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         /* Then need to fix all internal pointers too */
 627              		.loc 1 123 9 is_stmt 0 view .LVU177
 628 0028 FFF7FEFF 		bl	lv_memcpy
 629              	.LVL62:
 125:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 630              		.loc 1 125 9 is_stmt 1 view .LVU178
 125:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 631              		.loc 1 125 14 is_stmt 0 view .LVU179
 632 002c 3446     		mov	r4, r6
 633 002e 06E0     		b	.L49
 634              	.LVL63:
 635              	.L50:
 126:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
 636              		.loc 1 126 13 is_stmt 1 view .LVU180
 126:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
 637              		.loc 1 126 50 is_stmt 0 view .LVU181
 638 0030 A368     		ldr	r3, [r4, #8]
 126:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
 639              		.loc 1 126 22 view .LVU182
 640 0032 4344     		add	r3, r3, r8
 126:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
 641              		.loc 1 126 20 view .LVU183
 642 0034 A360     		str	r3, [r4, #8]
 133:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 643              		.loc 1 133 13 is_stmt 1 view .LVU184
 133:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 644              		.loc 1 133 48 is_stmt 0 view .LVU185
 645 0036 2046     		mov	r0, r4
 646 0038 FFF7FEFF 		bl	get_cache_item_size
 647              	.LVL64:
 133:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 648              		.loc 1 133 15 view .LVU186
 649 003c 0444     		add	r4, r4, r0
 650              	.LVL65:
 651              	.L49:
 125:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 652              		.loc 1 125 14 is_stmt 1 view .LVU187
 125:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 653              		.loc 1 125 28 is_stmt 0 view .LVU188
 654 003e 044B     		ldr	r3, .L53
 655 0040 1B68     		ldr	r3, [r3]
 125:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 656              		.loc 1 125 14 view .LVU189
 657 0042 A342     		cmp	r3, r4
 658 0044 F4D1     		bne	.L50
 135:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 659              		.loc 1 135 9 is_stmt 1 view .LVU190
 660 0046 2946     		mov	r1, r5
 661 0048 F019     		adds	r0, r6, r7
 662 004a FFF7FEFF 		bl	lv_memset_00
 663              	.LVL66:
 664              	.LBE10:
 137:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 665              		.loc 1 137 1 is_stmt 0 view .LVU191
 666 004e E3E7     		b	.L47
 667              	.L54:
 668              		.align	2
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 18


 669              	.L53:
 670 0050 00000000 		.word	.LANCHOR1
 671              		.cfi_endproc
 672              	.LFE61:
 674              		.section	.text.kill_oldest_item,"ax",%progbits
 675              		.align	1
 676              		.syntax unified
 677              		.thumb
 678              		.thumb_func
 680              	kill_oldest_item:
 681              	.LVL67:
 682              	.LFB62:
 140:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     uint32_t * min_life = (uint32_t *)ctx;
 683              		.loc 1 140 1 is_stmt 1 view -0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 140:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     uint32_t * min_life = (uint32_t *)ctx;
 687              		.loc 1 140 1 is_stmt 0 view .LVU193
 688 0000 08B5     		push	{r3, lr}
 689              		.cfi_def_cfa_offset 8
 690              		.cfi_offset 3, -8
 691              		.cfi_offset 14, -4
 141:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(c->life == *min_life) {
 692              		.loc 1 141 5 is_stmt 1 view .LVU194
 693              	.LVL68:
 142:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         /*Found, let's kill it*/
 694              		.loc 1 142 5 view .LVU195
 142:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         /*Found, let's kill it*/
 695              		.loc 1 142 9 is_stmt 0 view .LVU196
 696 0002 4368     		ldr	r3, [r0, #4]
 697 0004 C3F31D03 		ubfx	r3, r3, #0, #30
 142:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         /*Found, let's kill it*/
 698              		.loc 1 142 19 view .LVU197
 699 0008 0A68     		ldr	r2, [r1]
 142:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         /*Found, let's kill it*/
 700              		.loc 1 142 7 view .LVU198
 701 000a 9342     		cmp	r3, r2
 702 000c 01D0     		beq	.L59
 147:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 703              		.loc 1 147 12 view .LVU199
 704 000e 0020     		movs	r0, #0
 705              	.LVL69:
 706              	.L56:
 148:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 707              		.loc 1 148 1 view .LVU200
 708 0010 08BD     		pop	{r3, pc}
 709              	.LVL70:
 710              	.L59:
 144:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         return LV_RES_OK;
 711              		.loc 1 144 9 is_stmt 1 view .LVU201
 712 0012 FFF7FEFF 		bl	free_item
 713              	.LVL71:
 145:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 714              		.loc 1 145 9 view .LVU202
 145:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 715              		.loc 1 145 16 is_stmt 0 view .LVU203
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 19


 716 0016 0120     		movs	r0, #1
 717 0018 FAE7     		b	.L56
 718              		.cfi_endproc
 719              	.LFE62:
 721              		.section	.text.lv_gradient_free_cache,"ax",%progbits
 722              		.align	1
 723              		.global	lv_gradient_free_cache
 724              		.syntax unified
 725              		.thumb
 726              		.thumb_func
 728              	lv_gradient_free_cache:
 729              	.LFB65:
 229:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 230:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** /**********************
 231:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  *     FUNCTIONS
 232:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****  **********************/
 233:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** void lv_gradient_free_cache(void)
 234:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
 730              		.loc 1 234 1 is_stmt 1 view -0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734 0000 10B5     		push	{r4, lr}
 735              		.cfi_def_cfa_offset 8
 736              		.cfi_offset 4, -8
 737              		.cfi_offset 14, -4
 235:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 738              		.loc 1 235 5 view .LVU205
 739 0002 054C     		ldr	r4, .L62
 740 0004 2068     		ldr	r0, [r4]
 741 0006 FFF7FEFF 		bl	lv_mem_free
 742              	.LVL72:
 236:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     LV_GC_ROOT(_lv_grad_cache_mem) = grad_cache_end = NULL;
 743              		.loc 1 236 5 view .LVU206
 744              		.loc 1 236 53 is_stmt 0 view .LVU207
 745 000a 0023     		movs	r3, #0
 746 000c 034A     		ldr	r2, .L62+4
 747 000e 1360     		str	r3, [r2]
 748              		.loc 1 236 36 view .LVU208
 749 0010 2360     		str	r3, [r4]
 237:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     grad_cache_size = 0;
 750              		.loc 1 237 5 is_stmt 1 view .LVU209
 751              		.loc 1 237 21 is_stmt 0 view .LVU210
 752 0012 034A     		ldr	r2, .L62+8
 753 0014 1360     		str	r3, [r2]
 238:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 754              		.loc 1 238 1 view .LVU211
 755 0016 10BD     		pop	{r4, pc}
 756              	.L63:
 757              		.align	2
 758              	.L62:
 759 0018 00000000 		.word	_lv_grad_cache_mem
 760 001c 00000000 		.word	.LANCHOR1
 761 0020 00000000 		.word	.LANCHOR0
 762              		.cfi_endproc
 763              	.LFE65:
 765              		.section	.text.lv_gradient_set_cache_size,"ax",%progbits
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 20


 766              		.align	1
 767              		.global	lv_gradient_set_cache_size
 768              		.syntax unified
 769              		.thumb
 770              		.thumb_func
 772              	lv_gradient_set_cache_size:
 773              	.LVL73:
 774              	.LFB66:
 239:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 240:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** void lv_gradient_set_cache_size(size_t max_bytes)
 241:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
 775              		.loc 1 241 1 is_stmt 1 view -0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              		.loc 1 241 1 is_stmt 0 view .LVU213
 780 0000 38B5     		push	{r3, r4, r5, lr}
 781              		.cfi_def_cfa_offset 16
 782              		.cfi_offset 3, -16
 783              		.cfi_offset 4, -12
 784              		.cfi_offset 5, -8
 785              		.cfi_offset 14, -4
 786 0002 0446     		mov	r4, r0
 242:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 787              		.loc 1 242 5 is_stmt 1 view .LVU214
 788 0004 084D     		ldr	r5, .L68
 789 0006 2868     		ldr	r0, [r5]
 790              	.LVL74:
 791              		.loc 1 242 5 is_stmt 0 view .LVU215
 792 0008 FFF7FEFF 		bl	lv_mem_free
 793              	.LVL75:
 243:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     grad_cache_end = LV_GC_ROOT(_lv_grad_cache_mem) = lv_mem_alloc(max_bytes);
 794              		.loc 1 243 5 is_stmt 1 view .LVU216
 795              		.loc 1 243 55 is_stmt 0 view .LVU217
 796 000c 2046     		mov	r0, r4
 797 000e FFF7FEFF 		bl	lv_mem_alloc
 798              	.LVL76:
 799              		.loc 1 243 53 view .LVU218
 800 0012 2860     		str	r0, [r5]
 801              		.loc 1 243 20 view .LVU219
 802 0014 054B     		ldr	r3, .L68+4
 803 0016 1860     		str	r0, [r3]
 244:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 804              		.loc 1 244 5 is_stmt 1 view .LVU220
 805              		.loc 1 244 5 view .LVU221
 806 0018 28B1     		cbz	r0, .L66
 807              		.loc 1 244 5 discriminator 2 view .LVU222
 808              		.loc 1 244 53 discriminator 2 view .LVU223
 245:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 809              		.loc 1 245 5 discriminator 2 view .LVU224
 810 001a 2146     		mov	r1, r4
 811 001c FFF7FEFF 		bl	lv_memset_00
 812              	.LVL77:
 246:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     grad_cache_size = max_bytes;
 813              		.loc 1 246 5 discriminator 2 view .LVU225
 814              		.loc 1 246 21 is_stmt 0 discriminator 2 view .LVU226
 815 0020 034B     		ldr	r3, .L68+8
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 21


 816 0022 1C60     		str	r4, [r3]
 247:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 817              		.loc 1 247 1 discriminator 2 view .LVU227
 818 0024 38BD     		pop	{r3, r4, r5, pc}
 819              	.LVL78:
 820              	.L66:
 244:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 821              		.loc 1 244 5 is_stmt 1 discriminator 1 view .LVU228
 244:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 822              		.loc 1 244 5 discriminator 1 view .LVU229
 244:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 823              		.loc 1 244 5 discriminator 1 view .LVU230
 244:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 824              		.loc 1 244 5 discriminator 1 view .LVU231
 244:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 825              		.loc 1 244 5 discriminator 1 view .LVU232
 244:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 826              		.loc 1 244 5 discriminator 1 view .LVU233
 827 0026 FEE7     		b	.L66
 828              	.L69:
 829              		.align	2
 830              	.L68:
 831 0028 00000000 		.word	_lv_grad_cache_mem
 832 002c 00000000 		.word	.LANCHOR1
 833 0030 00000000 		.word	.LANCHOR0
 834              		.cfi_endproc
 835              	.LFE66:
 837              		.section	.text.lv_gradient_calculate,"ax",%progbits
 838              		.align	1
 839              		.global	lv_gradient_calculate
 840              		.syntax unified
 841              		.thumb
 842              		.thumb_func
 844              	lv_gradient_calculate:
 845              	.LVL79:
 846              	.LFB68:
 248:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 249:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** lv_grad_t * lv_gradient_get(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
 250:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
 251:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     /* No gradient, no cache */
 252:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 253:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 254:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     /* Step 0: Check if the cache exist (else create it) */
 255:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     static bool inited = false;
 256:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(!inited) {
 257:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 258:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         inited = true;
 259:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 260:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 261:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     /* Step 1: Search cache for the given key */
 262:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 263:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     uint32_t key = compute_key(g, size, w);
 264:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_grad_t * item = NULL;
 265:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 266:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->life++; /* Don't forget to bump the counter */
 267:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         return item;
 268:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 22


 269:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 270:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     /* Step 2: Need to allocate an item for it */
 271:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     item = allocate_item(g, w, h);
 272:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(item == NULL) {
 273:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         LV_LOG_WARN("Faild to allcoate item for teh gradient");
 274:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         return item;
 275:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 276:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 277:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     /* Step 3: Fill it with the gradient, as expected */
 278:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if _DITHER_GRADIENT
 279:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     for(lv_coord_t i = 0; i < item->size; i++) {
 280:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->hmap[i] = lv_gradient_calculate(g, item->size, i);
 281:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 282:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #if LV_DITHER_ERROR_DIFFUSION == 1
 283:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_memset_00(item->error_acc, w * sizeof(lv_scolor24_t));
 284:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
 285:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #else
 286:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     for(lv_coord_t i = 0; i < item->size; i++) {
 287:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->map[i] = lv_gradient_calculate(g, item->size, i);
 288:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 289:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** #endif
 290:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 291:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     return item;
 292:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 293:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 294:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** lv_grad_color_t LV_ATTRIBUTE_FAST_MEM lv_gradient_calculate(const lv_grad_dsc_t * dsc, lv_coord_t r
 295:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                                             lv_coord_t frac)
 296:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
 847              		.loc 1 296 1 view -0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 297:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_grad_color_t tmp;
 851              		.loc 1 297 5 view .LVU235
 298:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_color32_t one, two;
 852              		.loc 1 298 5 view .LVU236
 299:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     /*Clip out-of-bounds first*/
 300:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     int32_t min = (dsc->stops[0].frac * range) >> 8;
 853              		.loc 1 300 5 view .LVU237
 854              		.loc 1 300 33 is_stmt 0 view .LVU238
 855 0000 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 856              		.loc 1 300 39 view .LVU239
 857 0002 01FB03F3 		mul	r3, r1, r3
 858              	.LVL80:
 301:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(frac <= min) {
 859              		.loc 1 301 5 is_stmt 1 view .LVU240
 860              		.loc 1 301 7 is_stmt 0 view .LVU241
 861 0006 B2EB232F 		cmp	r2, r3, asr #8
 862 000a 1EDD     		ble	.L83
 296:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_grad_color_t tmp;
 863              		.loc 1 296 1 view .LVU242
 864 000c 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 865              		.cfi_def_cfa_offset 24
 866              		.cfi_offset 4, -24
 867              		.cfi_offset 5, -20
 868              		.cfi_offset 6, -16
 869              		.cfi_offset 7, -12
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 23


 870              		.cfi_offset 8, -8
 871              		.cfi_offset 14, -4
 872 0010 1F12     		asrs	r7, r3, #8
 873              	.LVL81:
 302:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         GRAD_CONV(tmp, dsc->stops[0].color);
 303:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         return tmp;
 304:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 305:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 306:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 874              		.loc 1 306 5 is_stmt 1 view .LVU243
 875              		.loc 1 306 34 is_stmt 0 view .LVU244
 876 0012 057C     		ldrb	r5, [r0, #16]	@ zero_extendqisi2
 877              		.loc 1 306 48 view .LVU245
 878 0014 6E1E     		subs	r6, r5, #1
 879              		.loc 1 306 52 view .LVU246
 880 0016 00EBC603 		add	r3, r0, r6, lsl #3
 881 001a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 882              		.loc 1 306 58 view .LVU247
 883 001c 01FB03F3 		mul	r3, r1, r3
 884              	.LVL82:
 307:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(frac >= max) {
 885              		.loc 1 307 5 is_stmt 1 view .LVU248
 886              		.loc 1 307 7 is_stmt 0 view .LVU249
 887 0020 B2EB232F 		cmp	r2, r3, asr #8
 888 0024 13DA     		bge	.L84
 889              	.LBB11:
 308:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 309:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         return tmp;
 310:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 311:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 312:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     /*Find the 2 closest stop now*/
 313:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     int32_t d = 0;
 314:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     for(uint8_t i = 1; i < dsc->stops_count; i++) {
 890              		.loc 1 314 17 view .LVU250
 891 0026 0123     		movs	r3, #1
 892              	.LVL83:
 893              	.L73:
 894              		.loc 1 314 24 is_stmt 1 discriminator 1 view .LVU251
 895              		.loc 1 314 5 is_stmt 0 discriminator 1 view .LVU252
 896 0028 9D42     		cmp	r5, r3
 897 002a 22D9     		bls	.L85
 898              	.LBB12:
 315:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         int32_t cur = (dsc->stops[i].frac * range) >> 8;
 899              		.loc 1 315 9 is_stmt 1 view .LVU253
 900              		.loc 1 315 37 is_stmt 0 view .LVU254
 901 002c 9846     		mov	r8, r3
 902 002e 00EBC30C 		add	ip, r0, r3, lsl #3
 903 0032 9CF804C0 		ldrb	ip, [ip, #4]	@ zero_extendqisi2
 904              		.loc 1 315 43 view .LVU255
 905 0036 0CFB01FC 		mul	ip, ip, r1
 906              		.loc 1 315 17 view .LVU256
 907 003a 4FEA2C26 		asr	r6, ip, #8
 908              	.LVL84:
 316:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         if(frac <= cur) {
 909              		.loc 1 316 9 is_stmt 1 view .LVU257
 910              		.loc 1 316 11 is_stmt 0 view .LVU258
 911 003e B2EB2C2F 		cmp	r2, ip, asr #8
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 24


 912 0042 08DD     		ble	.L86
 913              	.LBE12:
 314:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         int32_t cur = (dsc->stops[i].frac * range) >> 8;
 914              		.loc 1 314 46 is_stmt 1 discriminator 2 view .LVU259
 314:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         int32_t cur = (dsc->stops[i].frac * range) >> 8;
 915              		.loc 1 314 47 is_stmt 0 discriminator 2 view .LVU260
 916 0044 0133     		adds	r3, r3, #1
 917              	.LVL85:
 314:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         int32_t cur = (dsc->stops[i].frac * range) >> 8;
 918              		.loc 1 314 47 discriminator 2 view .LVU261
 919 0046 DBB2     		uxtb	r3, r3
 920              	.LVL86:
 314:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         int32_t cur = (dsc->stops[i].frac * range) >> 8;
 921              		.loc 1 314 47 discriminator 2 view .LVU262
 922 0048 EEE7     		b	.L73
 923              	.LVL87:
 924              	.L83:
 925              		.cfi_def_cfa_offset 0
 926              		.cfi_restore 4
 927              		.cfi_restore 5
 928              		.cfi_restore 6
 929              		.cfi_restore 7
 930              		.cfi_restore 8
 931              		.cfi_restore 14
 314:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         int32_t cur = (dsc->stops[i].frac * range) >> 8;
 932              		.loc 1 314 47 discriminator 2 view .LVU263
 933              	.LBE11:
 302:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         return tmp;
 934              		.loc 1 302 9 is_stmt 1 view .LVU264
 935 004a 0068     		ldr	r0, [r0]
 936              	.LVL88:
 303:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 937              		.loc 1 303 9 view .LVU265
 317:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             one.full = lv_color_to32(dsc->stops[i - 1].color);
 318:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             two.full = lv_color_to32(dsc->stops[i].color);
 319:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             min = (dsc->stops[i - 1].frac * range) >> 8;
 320:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             max = (dsc->stops[i].frac * range) >> 8;
 321:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             d = max - min;
 322:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             break;
 323:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 324:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 325:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 326:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     LV_ASSERT(d != 0);
 327:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 328:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     /*Then interpolate*/
 329:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     frac -= min;
 330:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_opa_t mix = (frac * 255) / d;
 331:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_opa_t imix = 255 - mix;
 332:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 334:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 335:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.blue * mix  + one.ch.blue * imix));
 336:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     return r;
 337:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 938              		.loc 1 337 1 is_stmt 0 view .LVU266
 939 004c 7047     		bx	lr
 940              	.LVL89:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 25


 941              	.L84:
 942              		.cfi_def_cfa_offset 24
 943              		.cfi_offset 4, -24
 944              		.cfi_offset 5, -20
 945              		.cfi_offset 6, -16
 946              		.cfi_offset 7, -12
 947              		.cfi_offset 8, -8
 948              		.cfi_offset 14, -4
 308:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         return tmp;
 949              		.loc 1 308 9 is_stmt 1 view .LVU267
 950 004e 50F83600 		ldr	r0, [r0, r6, lsl #3]
 951              	.LVL90:
 309:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 952              		.loc 1 309 9 view .LVU268
 953              	.L72:
 954              		.loc 1 337 1 is_stmt 0 view .LVU269
 955 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 956              	.LVL91:
 957              	.L86:
 958              	.LBB18:
 959              	.LBB17:
 317:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             one.full = lv_color_to32(dsc->stops[i - 1].color);
 960              		.loc 1 317 13 is_stmt 1 view .LVU270
 317:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             one.full = lv_color_to32(dsc->stops[i - 1].color);
 961              		.loc 1 317 51 is_stmt 0 view .LVU271
 962 0056 013B     		subs	r3, r3, #1
 963              	.LVL92:
 964              	.LBB13:
 965              	.LBI13:
 966              		.file 2 "lvgl/src/draw/sw/../../misc/lv_color.h"
   1:lvgl/src/draw/sw/../../misc/lv_color.h **** /**
   2:lvgl/src/draw/sw/../../misc/lv_color.h ****  * @file lv_color.h
   3:lvgl/src/draw/sw/../../misc/lv_color.h ****  *
   4:lvgl/src/draw/sw/../../misc/lv_color.h ****  */
   5:lvgl/src/draw/sw/../../misc/lv_color.h **** 
   6:lvgl/src/draw/sw/../../misc/lv_color.h **** #ifndef LV_COLOR_H
   7:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_H
   8:lvgl/src/draw/sw/../../misc/lv_color.h **** 
   9:lvgl/src/draw/sw/../../misc/lv_color.h **** #ifdef __cplusplus
  10:lvgl/src/draw/sw/../../misc/lv_color.h **** extern "C" {
  11:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  12:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  13:lvgl/src/draw/sw/../../misc/lv_color.h **** /*********************
  14:lvgl/src/draw/sw/../../misc/lv_color.h ****  *      INCLUDES
  15:lvgl/src/draw/sw/../../misc/lv_color.h ****  *********************/
  16:lvgl/src/draw/sw/../../misc/lv_color.h **** #include "../lv_conf_internal.h"
  17:lvgl/src/draw/sw/../../misc/lv_color.h **** #include "lv_assert.h"
  18:lvgl/src/draw/sw/../../misc/lv_color.h **** #include "lv_math.h"
  19:lvgl/src/draw/sw/../../misc/lv_color.h **** #include "lv_types.h"
  20:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  21:lvgl/src/draw/sw/../../misc/lv_color.h **** /*Error checking*/
  22:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 24
  23:lvgl/src/draw/sw/../../misc/lv_color.h **** #error "LV_COLOR_DEPTH 24 is deprecated. Use LV_COLOR_DEPTH 32 instead (lv_conf.h)"
  24:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  25:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  26:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH != 16 && LV_COLOR_16_SWAP != 0
  27:lvgl/src/draw/sw/../../misc/lv_color.h **** #error "LV_COLOR_16_SWAP requires LV_COLOR_DEPTH == 16. Set it in lv_conf.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 26


  28:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  29:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  30:lvgl/src/draw/sw/../../misc/lv_color.h **** #include <stdint.h>
  31:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  32:lvgl/src/draw/sw/../../misc/lv_color.h **** /*********************
  33:lvgl/src/draw/sw/../../misc/lv_color.h ****  *      DEFINES
  34:lvgl/src/draw/sw/../../misc/lv_color.h ****  *********************/
  35:lvgl/src/draw/sw/../../misc/lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_DEPTH);
  36:lvgl/src/draw/sw/../../misc/lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_16_SWAP);
  37:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  38:lvgl/src/draw/sw/../../misc/lv_color.h **** /**
  39:lvgl/src/draw/sw/../../misc/lv_color.h ****  * Opacity percentages.
  40:lvgl/src/draw/sw/../../misc/lv_color.h ****  */
  41:lvgl/src/draw/sw/../../misc/lv_color.h **** enum {
  42:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_TRANSP = 0,
  43:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_0      = 0,
  44:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_10     = 25,
  45:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_20     = 51,
  46:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_30     = 76,
  47:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_40     = 102,
  48:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_50     = 127,
  49:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_60     = 153,
  50:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_70     = 178,
  51:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_80     = 204,
  52:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_90     = 229,
  53:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_100    = 255,
  54:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_OPA_COVER  = 255,
  55:lvgl/src/draw/sw/../../misc/lv_color.h **** };
  56:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  57:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_OPA_MIN 2    /*Opacities below this will be transparent*/
  58:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_OPA_MAX 253  /*Opacities above this will fully cover*/
  59:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  60:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
  61:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SIZE 8
  62:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
  63:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SIZE 8
  64:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
  65:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SIZE 16
  66:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
  67:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SIZE 32
  68:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
  69:lvgl/src/draw/sw/../../misc/lv_color.h **** #error "Invalid LV_COLOR_DEPTH in lv_conf.h! Set it to 1, 8, 16 or 32!"
  70:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  71:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  72:lvgl/src/draw/sw/../../misc/lv_color.h **** #if defined(__cplusplus) && !defined(_LV_COLOR_HAS_MODERN_CPP)
  73:lvgl/src/draw/sw/../../misc/lv_color.h **** /**
  74:lvgl/src/draw/sw/../../misc/lv_color.h **** * MSVC compiler's definition of the __cplusplus indicating 199711L regardless to C++ standard versi
  75:lvgl/src/draw/sw/../../misc/lv_color.h **** * see https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-cplusplus
  76:lvgl/src/draw/sw/../../misc/lv_color.h **** * so we use _MSC_VER macro instead of __cplusplus
  77:lvgl/src/draw/sw/../../misc/lv_color.h **** */
  78:lvgl/src/draw/sw/../../misc/lv_color.h **** #ifdef _MSC_VER
  79:lvgl/src/draw/sw/../../misc/lv_color.h **** #if _MSC_VER >= 1900 /*Visual Studio 2015*/
  80:lvgl/src/draw/sw/../../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  81:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  82:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
  83:lvgl/src/draw/sw/../../misc/lv_color.h **** #if __cplusplus >= 201103L
  84:lvgl/src/draw/sw/../../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 27


  85:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  86:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  87:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif /*__cplusplus*/
  88:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  89:lvgl/src/draw/sw/../../misc/lv_color.h **** #ifndef _LV_COLOR_HAS_MODERN_CPP
  90:lvgl/src/draw/sw/../../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 0
  91:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  92:lvgl/src/draw/sw/../../misc/lv_color.h **** 
  93:lvgl/src/draw/sw/../../misc/lv_color.h **** #if _LV_COLOR_HAS_MODERN_CPP
  94:lvgl/src/draw/sw/../../misc/lv_color.h **** /*Fix msvc compiler error C4576 inside C++ code*/
  95:lvgl/src/draw/sw/../../misc/lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER lv_color_t
  96:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
  97:lvgl/src/draw/sw/../../misc/lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER (lv_color_t)
  98:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
  99:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 100:lvgl/src/draw/sw/../../misc/lv_color.h **** /*---------------------------------------
 101:lvgl/src/draw/sw/../../misc/lv_color.h ****  * Macros for all existing color depths
 102:lvgl/src/draw/sw/../../misc/lv_color.h ****  * to set/get values of the color channels
 103:lvgl/src/draw/sw/../../misc/lv_color.h ****  *------------------------------------------*/
 104:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_R1(c, v) (c).ch.red = (uint8_t)((v) & 0x1)
 105:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_G1(c, v) (c).ch.green = (uint8_t)((v) & 0x1)
 106:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_B1(c, v) (c).ch.blue = (uint8_t)((v) & 0x1)
 107:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_A1(c, v) do {} while(0)
 108:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 109:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_R1(c) (c).ch.red
 110:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_G1(c) (c).ch.green
 111:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_B1(c) (c).ch.blue
 112:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_A1(c) 0xFF
 113:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 114:lvgl/src/draw/sw/../../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER1 {0x00}
 115:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_MAKE1(r8, g8, b8)  {(uint8_t)((b8 >> 7) | (g8 >> 7) | (r8 >> 7))}
 116:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 117:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_R8(c, v) (c).ch.red = (uint8_t)((v) & 0x7U)
 118:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_G8(c, v) (c).ch.green = (uint8_t)((v) & 0x7U)
 119:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_B8(c, v) (c).ch.blue = (uint8_t)((v) & 0x3U)
 120:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_A8(c, v) do {} while(0)
 121:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 122:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_R8(c) (c).ch.red
 123:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_G8(c) (c).ch.green
 124:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_B8(c) (c).ch.blue
 125:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_A8(c) 0xFF
 126:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 127:lvgl/src/draw/sw/../../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER8 {{0x00, 0x00, 0x00}}
 128:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_MAKE8(r8, g8, b8) {{(uint8_t)((b8 >> 6) & 0x3U), (uint8_t)((g8 >> 5) & 0x7U), (ui
 129:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 130:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_R16(c, v) (c).ch.red = (uint8_t)((v) & 0x1FU)
 131:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 132:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_G16(c, v) (c).ch.green = (uint8_t)((v) & 0x3FU)
 133:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 134:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_G16(c, v) {(c).ch.green_h = (uint8_t)(((v) >> 3) & 0x7); (c).ch.green_l = (ui
 135:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 136:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_B16(c, v) (c).ch.blue = (uint8_t)((v) & 0x1FU)
 137:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_A16(c, v) do {} while(0)
 138:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 139:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_R16(c) (c).ch.red
 140:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 141:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_G16(c) (c).ch.green
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 28


 142:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 143:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_G16(c) (((c).ch.green_h << 3) + (c).ch.green_l)
 144:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 145:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_B16(c) (c).ch.blue
 146:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_A16(c) 0xFF
 147:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 148:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 149:lvgl/src/draw/sw/../../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16  {{0x00, 0x00, 0x00}}
 150:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((b8 >> 3) & 0x1FU), (uint8_t)((g8 >> 2) & 0x3FU), 
 151:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 152:lvgl/src/draw/sw/../../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16 {{0x00, 0x00, 0x00, 0x00}}
 153:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((g8 >> 5) & 0x7U), (uint8_t)((r8 >> 3) & 0x1FU), (
 154:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 155:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 156:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_R32(c, v) (c).ch.red = (uint8_t)((v) & 0xFF)
 157:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_G32(c, v) (c).ch.green = (uint8_t)((v) & 0xFF)
 158:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_B32(c, v) (c).ch.blue = (uint8_t)((v) & 0xFF)
 159:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_SET_A32(c, v) (c).ch.alpha = (uint8_t)((v) & 0xFF)
 160:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 161:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_R32(c) (c).ch.red
 162:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_G32(c) (c).ch.green
 163:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_B32(c) (c).ch.blue
 164:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_GET_A32(c) (c).ch.alpha
 165:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 166:lvgl/src/draw/sw/../../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER32  {{0x00, 0x00, 0x00, 0x00}}
 167:lvgl/src/draw/sw/../../misc/lv_color.h **** # define LV_COLOR_MAKE32(r8, g8, b8) {{b8, g8, r8, 0xff}} /*Fix 0xff alpha*/
 168:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 169:lvgl/src/draw/sw/../../misc/lv_color.h **** /*---------------------------------------
 170:lvgl/src/draw/sw/../../misc/lv_color.h ****  * Macros for the current color depth
 171:lvgl/src/draw/sw/../../misc/lv_color.h ****  * to set/get values of the color channels
 172:lvgl/src/draw/sw/../../misc/lv_color.h ****  *------------------------------------------*/
 173:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SET_R(c, v) LV_CONCAT(LV_COLOR_SET_R, LV_COLOR_DEPTH)(c, v)
 174:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SET_G(c, v) LV_CONCAT(LV_COLOR_SET_G, LV_COLOR_DEPTH)(c, v)
 175:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SET_B(c, v) LV_CONCAT(LV_COLOR_SET_B, LV_COLOR_DEPTH)(c, v)
 176:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_SET_A(c, v) LV_CONCAT(LV_COLOR_SET_A, LV_COLOR_DEPTH)(c, v)
 177:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 178:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_GET_R(c) LV_CONCAT(LV_COLOR_GET_R, LV_COLOR_DEPTH)(c)
 179:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_GET_G(c) LV_CONCAT(LV_COLOR_GET_G, LV_COLOR_DEPTH)(c)
 180:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_GET_B(c) LV_CONCAT(LV_COLOR_GET_B, LV_COLOR_DEPTH)(c)
 181:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_GET_A(c) LV_CONCAT(LV_COLOR_GET_A, LV_COLOR_DEPTH)(c)
 182:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 183:lvgl/src/draw/sw/../../misc/lv_color.h **** #define _LV_COLOR_ZERO_INITIALIZER LV_CONCAT(_LV_COLOR_ZERO_INITIALIZER, LV_COLOR_DEPTH)
 184:lvgl/src/draw/sw/../../misc/lv_color.h **** #define LV_COLOR_MAKE(r8, g8, b8) LV_CONCAT(LV_COLOR_MAKE, LV_COLOR_DEPTH)(r8, g8, b8)
 185:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 186:lvgl/src/draw/sw/../../misc/lv_color.h **** /**********************
 187:lvgl/src/draw/sw/../../misc/lv_color.h ****  *      TYPEDEFS
 188:lvgl/src/draw/sw/../../misc/lv_color.h ****  **********************/
 189:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 190:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef union {
 191:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint8_t full; /*must be declared first to set all bits of byte via initializer list*/
 192:lvgl/src/draw/sw/../../misc/lv_color.h ****     union {
 193:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t blue : 1;
 194:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t green : 1;
 195:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t red : 1;
 196:lvgl/src/draw/sw/../../misc/lv_color.h ****     } ch;
 197:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_color1_t;
 198:lvgl/src/draw/sw/../../misc/lv_color.h **** 
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 29


 199:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef union {
 200:lvgl/src/draw/sw/../../misc/lv_color.h ****     struct {
 201:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t blue : 2;
 202:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t green : 3;
 203:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t red : 3;
 204:lvgl/src/draw/sw/../../misc/lv_color.h ****     } ch;
 205:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint8_t full;
 206:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_color8_t;
 207:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 208:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef union {
 209:lvgl/src/draw/sw/../../misc/lv_color.h ****     struct {
 210:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 211:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t blue : 5;
 212:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t green : 6;
 213:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t red : 5;
 214:lvgl/src/draw/sw/../../misc/lv_color.h **** #else
 215:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t green_h : 3;
 216:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t red : 5;
 217:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t blue : 5;
 218:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint16_t green_l : 3;
 219:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 220:lvgl/src/draw/sw/../../misc/lv_color.h ****     } ch;
 221:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint16_t full;
 222:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_color16_t;
 223:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 224:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef union {
 225:lvgl/src/draw/sw/../../misc/lv_color.h ****     struct {
 226:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t blue;
 227:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t green;
 228:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t red;
 229:lvgl/src/draw/sw/../../misc/lv_color.h ****         uint8_t alpha;
 230:lvgl/src/draw/sw/../../misc/lv_color.h ****     } ch;
 231:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint32_t full;
 232:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_color32_t;
 233:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 234:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef LV_CONCAT3(uint, LV_COLOR_SIZE, _t) lv_color_int_t;
 235:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef LV_CONCAT3(lv_color, LV_COLOR_DEPTH, _t) lv_color_t;
 236:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 237:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef struct {
 238:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint16_t h;
 239:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint8_t s;
 240:lvgl/src/draw/sw/../../misc/lv_color.h ****     uint8_t v;
 241:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_color_hsv_t;
 242:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 243:lvgl/src/draw/sw/../../misc/lv_color.h **** //! @cond Doxygen_Suppress
 244:lvgl/src/draw/sw/../../misc/lv_color.h **** /*No idea where the guard is required but else throws warnings in the docs*/
 245:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef uint8_t lv_opa_t;
 246:lvgl/src/draw/sw/../../misc/lv_color.h **** //! @endcond
 247:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 248:lvgl/src/draw/sw/../../misc/lv_color.h **** struct _lv_color_filter_dsc_t;
 249:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 250:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef lv_color_t (*lv_color_filter_cb_t)(const struct _lv_color_filter_dsc_t *, lv_color_t, lv_op
 251:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 252:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef struct _lv_color_filter_dsc_t {
 253:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color_filter_cb_t filter_cb;
 254:lvgl/src/draw/sw/../../misc/lv_color.h ****     void * user_data;
 255:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_color_filter_dsc_t;
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 30


 256:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 257:lvgl/src/draw/sw/../../misc/lv_color.h **** typedef enum {
 258:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_RED,
 259:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_PINK,
 260:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_PURPLE,
 261:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_DEEP_PURPLE,
 262:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_INDIGO,
 263:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_BLUE,
 264:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_LIGHT_BLUE,
 265:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_CYAN,
 266:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_TEAL,
 267:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_GREEN,
 268:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_LIGHT_GREEN,
 269:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_LIME,
 270:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_YELLOW,
 271:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_AMBER,
 272:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_ORANGE,
 273:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_DEEP_ORANGE,
 274:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_BROWN,
 275:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_BLUE_GREY,
 276:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_GREY,
 277:lvgl/src/draw/sw/../../misc/lv_color.h ****     _LV_PALETTE_LAST,
 278:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_PALETTE_NONE = 0xff,
 279:lvgl/src/draw/sw/../../misc/lv_color.h **** } lv_palette_t;
 280:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 281:lvgl/src/draw/sw/../../misc/lv_color.h **** /**********************
 282:lvgl/src/draw/sw/../../misc/lv_color.h ****  * GLOBAL PROTOTYPES
 283:lvgl/src/draw/sw/../../misc/lv_color.h ****  **********************/
 284:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 285:lvgl/src/draw/sw/../../misc/lv_color.h **** /*In color conversations:
 286:lvgl/src/draw/sw/../../misc/lv_color.h ****  * - When converting to bigger color type the LSB weight of 1 LSB is calculated
 287:lvgl/src/draw/sw/../../misc/lv_color.h ****  *   E.g. 16 bit Red has 5 bits
 288:lvgl/src/draw/sw/../../misc/lv_color.h ****  *         8 bit Red has 3 bits
 289:lvgl/src/draw/sw/../../misc/lv_color.h ****  *        ----------------------
 290:lvgl/src/draw/sw/../../misc/lv_color.h ****  *        8 bit red LSB = (2^5 - 1) / (2^3 - 1) = 31 / 7 = 4
 291:lvgl/src/draw/sw/../../misc/lv_color.h ****  *
 292:lvgl/src/draw/sw/../../misc/lv_color.h ****  * - When calculating to smaller color type simply shift out the LSBs
 293:lvgl/src/draw/sw/../../misc/lv_color.h ****  *   E.g.  8 bit Red has 3 bits
 294:lvgl/src/draw/sw/../../misc/lv_color.h ****  *        16 bit Red has 5 bits
 295:lvgl/src/draw/sw/../../misc/lv_color.h ****  *        ----------------------
 296:lvgl/src/draw/sw/../../misc/lv_color.h ****  *         Shift right with 5 - 3 = 2
 297:lvgl/src/draw/sw/../../misc/lv_color.h ****  */
 298:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline uint8_t lv_color_to1(lv_color_t color)
 299:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 300:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 301:lvgl/src/draw/sw/../../misc/lv_color.h ****     return color.full;
 302:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 303:lvgl/src/draw/sw/../../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x4) || (LV_COLOR_GET_G(color) & 0x4) || (LV_COLOR_GET_B(color) & 0
 304:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 1;
 305:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 306:lvgl/src/draw/sw/../../misc/lv_color.h ****     else {
 307:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0;
 308:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 309:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 310:lvgl/src/draw/sw/../../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x10) || (LV_COLOR_GET_G(color) & 0x20) || (LV_COLOR_GET_B(color) &
 311:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 1;
 312:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 31


 313:lvgl/src/draw/sw/../../misc/lv_color.h ****     else {
 314:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0;
 315:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 316:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 317:lvgl/src/draw/sw/../../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x80) || (LV_COLOR_GET_G(color) & 0x80) || (LV_COLOR_GET_B(color) &
 318:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 1;
 319:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 320:lvgl/src/draw/sw/../../misc/lv_color.h ****     else {
 321:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0;
 322:lvgl/src/draw/sw/../../misc/lv_color.h ****     }
 323:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 324:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 325:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 326:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline uint8_t lv_color_to8(lv_color_t color)
 327:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 328:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 329:lvgl/src/draw/sw/../../misc/lv_color.h ****     if(color.full == 0)
 330:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0;
 331:lvgl/src/draw/sw/../../misc/lv_color.h ****     else
 332:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0xFF;
 333:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 334:lvgl/src/draw/sw/../../misc/lv_color.h ****     return color.full;
 335:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 336:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color8_t ret;
 337:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 2); /*5 - 3  = 2*/
 338:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 3); /*6 - 3  = 3*/
 339:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 3); /*5 - 2  = 3*/
 340:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret.full;
 341:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 342:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color8_t ret;
 343:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 5); /*8 - 3  = 5*/
 344:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 5); /*8 - 3  = 5*/
 345:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 6); /*8 - 2  = 6*/
 346:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret.full;
 347:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 348:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 349:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 350:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline uint16_t lv_color_to16(lv_color_t color)
 351:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 352:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 353:lvgl/src/draw/sw/../../misc/lv_color.h ****     if(color.full == 0)
 354:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0;
 355:lvgl/src/draw/sw/../../misc/lv_color.h ****     else
 356:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0xFFFF;
 357:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 358:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color16_t ret;
 359:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) * 4);  /*(2^5 - 1)/(2^3 - 1) = 31/7 = 4*/
 360:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) * 9);  /*(2^6 - 1)/(2^3 - 1) = 63/7 = 9*/
 361:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) * 10); /*(2^5 - 1)/(2^2 - 1) = 31/3 = 10*/
 362:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret.full;
 363:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 364:lvgl/src/draw/sw/../../misc/lv_color.h ****     return color.full;
 365:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 366:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color16_t ret;
 367:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) >> 3); /*8 - 5  = 3*/
 368:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) >> 2); /*8 - 6  = 2*/
 369:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) >> 3); /*8 - 5  = 3*/
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 32


 370:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret.full;
 371:lvgl/src/draw/sw/../../misc/lv_color.h **** #endif
 372:lvgl/src/draw/sw/../../misc/lv_color.h **** }
 373:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 374:lvgl/src/draw/sw/../../misc/lv_color.h **** static inline uint32_t lv_color_to32(lv_color_t color)
 967              		.loc 2 374 24 is_stmt 1 view .LVU272
 968              	.LBB14:
 375:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 376:lvgl/src/draw/sw/../../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 377:lvgl/src/draw/sw/../../misc/lv_color.h ****     if(color.full == 0)
 378:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0xFF000000;
 379:lvgl/src/draw/sw/../../misc/lv_color.h ****     else
 380:lvgl/src/draw/sw/../../misc/lv_color.h ****         return 0xFFFFFFFF;
 381:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 382:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color32_t ret;
 383:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R32(ret, LV_COLOR_GET_R(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 384:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G32(ret, LV_COLOR_GET_G(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 385:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B32(ret, LV_COLOR_GET_B(color) * 85); /*(2^8 - 1)/(2^2 - 1) = 255/3 = 85*/
 386:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 387:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret.full;
 388:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 389:lvgl/src/draw/sw/../../misc/lv_color.h ****     /**
 390:lvgl/src/draw/sw/../../misc/lv_color.h ****      * The floating point math for conversion is:
 391:lvgl/src/draw/sw/../../misc/lv_color.h ****      *  valueto = valuefrom * ( (2^bitsto - 1) / (float)(2^bitsfrom - 1) )
 392:lvgl/src/draw/sw/../../misc/lv_color.h ****      * The faster integer math for conversion is:
 393:lvgl/src/draw/sw/../../misc/lv_color.h ****      *  valueto = ( valuefrom * multiplier + adder ) >> divisor
 394:lvgl/src/draw/sw/../../misc/lv_color.h ****      *   multiplier = FLOOR( ( (2^bitsto - 1) << divisor ) / (float)(2^bitsfrom - 1) )
 395:lvgl/src/draw/sw/../../misc/lv_color.h ****      *
 396:lvgl/src/draw/sw/../../misc/lv_color.h ****      * Find the first divisor where ( adder >> divisor ) <= 0
 397:lvgl/src/draw/sw/../../misc/lv_color.h ****      *
 398:lvgl/src/draw/sw/../../misc/lv_color.h ****      * 5-bit to 8-bit: ( 31 * multiplier + adder ) >> divisor = 255
 399:lvgl/src/draw/sw/../../misc/lv_color.h ****      * divisor  multiplier  adder  min (0)  max (31)
 400:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       0           8      7        7       255
 401:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       1          16     14        7       255
 402:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       2          32     28        7       255
 403:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       3          65     25        3       255
 404:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       4         131     19        1       255
 405:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       5         263      7        0       255
 406:lvgl/src/draw/sw/../../misc/lv_color.h ****      *
 407:lvgl/src/draw/sw/../../misc/lv_color.h ****      * 6-bit to 8-bit: 255 = ( 63 * multiplier + adder ) >> divisor
 408:lvgl/src/draw/sw/../../misc/lv_color.h ****      * divisor  multiplier  adder  min (0)  max (63)
 409:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       0           4      3        3       255
 410:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       1           8      6        3       255
 411:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       2          16     12        3       255
 412:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       3          32     24        3       255
 413:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       4          64     48        3       255
 414:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       5         129     33        1       255
 415:lvgl/src/draw/sw/../../misc/lv_color.h ****      *       6         259      3        0       255
 416:lvgl/src/draw/sw/../../misc/lv_color.h ****      */
 417:lvgl/src/draw/sw/../../misc/lv_color.h **** 
 418:lvgl/src/draw/sw/../../misc/lv_color.h ****     lv_color32_t ret;
 419:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 420:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 421:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 422:lvgl/src/draw/sw/../../misc/lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 423:lvgl/src/draw/sw/../../misc/lv_color.h ****     return ret.full;
 424:lvgl/src/draw/sw/../../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 33


 425:lvgl/src/draw/sw/../../misc/lv_color.h ****     return color.full;
 969              		.loc 2 425 5 view .LVU273
 970              	.LBE14:
 971              	.LBE13:
 317:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             two.full = lv_color_to32(dsc->stops[i].color);
 972              		.loc 1 317 22 is_stmt 0 view .LVU274
 973 0058 50F83340 		ldr	r4, [r0, r3, lsl #3]
 974              	.LVL93:
 318:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             min = (dsc->stops[i - 1].frac * range) >> 8;
 975              		.loc 1 318 13 is_stmt 1 view .LVU275
 976              	.LBB15:
 977              	.LBI15:
 374:lvgl/src/draw/sw/../../misc/lv_color.h **** {
 978              		.loc 2 374 24 view .LVU276
 979              	.LBB16:
 980              		.loc 2 425 5 view .LVU277
 981              	.LBE16:
 982              	.LBE15:
 318:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             min = (dsc->stops[i - 1].frac * range) >> 8;
 983              		.loc 1 318 22 is_stmt 0 view .LVU278
 984 005c 50F838E0 		ldr	lr, [r0, r8, lsl #3]
 985              	.LVL94:
 319:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             max = (dsc->stops[i].frac * range) >> 8;
 986              		.loc 1 319 13 is_stmt 1 view .LVU279
 319:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             max = (dsc->stops[i].frac * range) >> 8;
 987              		.loc 1 319 37 is_stmt 0 view .LVU280
 988 0060 00EBC303 		add	r3, r0, r3, lsl #3
 989 0064 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 319:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             max = (dsc->stops[i].frac * range) >> 8;
 990              		.loc 1 319 43 view .LVU281
 991 0066 01FB03F3 		mul	r3, r1, r3
 319:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             max = (dsc->stops[i].frac * range) >> 8;
 992              		.loc 1 319 17 view .LVU282
 993 006a 1F12     		asrs	r7, r3, #8
 994              	.LVL95:
 320:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             d = max - min;
 995              		.loc 1 320 13 is_stmt 1 view .LVU283
 321:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             break;
 996              		.loc 1 321 13 view .LVU284
 321:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****             break;
 997              		.loc 1 321 15 is_stmt 0 view .LVU285
 998 006c A6EB2326 		sub	r6, r6, r3, asr #8
 999              	.LVL96:
 322:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 1000              		.loc 1 322 13 is_stmt 1 view .LVU286
 1001 0070 00E0     		b	.L75
 1002              	.LVL97:
 1003              	.L85:
 322:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         }
 1004              		.loc 1 322 13 is_stmt 0 view .LVU287
 1005              	.LBE17:
 1006              	.LBE18:
 313:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     for(uint8_t i = 1; i < dsc->stops_count; i++) {
 1007              		.loc 1 313 13 view .LVU288
 1008 0072 0026     		movs	r6, #0
 1009              	.LVL98:
 1010              	.L75:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 34


 326:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1011              		.loc 1 326 5 is_stmt 1 view .LVU289
 326:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1012              		.loc 1 326 5 view .LVU290
 1013 0074 06B9     		cbnz	r6, .L77
 1014              	.L78:
 326:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1015              		.loc 1 326 5 discriminator 1 view .LVU291
 326:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1016              		.loc 1 326 5 discriminator 1 view .LVU292
 326:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1017              		.loc 1 326 5 discriminator 1 view .LVU293
 326:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1018              		.loc 1 326 5 discriminator 1 view .LVU294
 326:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1019              		.loc 1 326 5 discriminator 1 view .LVU295
 326:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1020              		.loc 1 326 5 discriminator 1 view .LVU296
 1021 0076 FEE7     		b	.L78
 1022              	.L77:
 326:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1023              		.loc 1 326 5 discriminator 2 view .LVU297
 329:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_opa_t mix = (frac * 255) / d;
 1024              		.loc 1 329 5 discriminator 2 view .LVU298
 329:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_opa_t mix = (frac * 255) / d;
 1025              		.loc 1 329 10 is_stmt 0 discriminator 2 view .LVU299
 1026 0078 D31B     		subs	r3, r2, r7
 1027 007a 1BB2     		sxth	r3, r3
 1028              	.LVL99:
 330:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_opa_t imix = 255 - mix;
 1029              		.loc 1 330 5 is_stmt 1 discriminator 2 view .LVU300
 330:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_opa_t imix = 255 - mix;
 1030              		.loc 1 330 26 is_stmt 0 discriminator 2 view .LVU301
 1031 007c C3EB0323 		rsb	r3, r3, r3, lsl #8
 1032              	.LVL100:
 330:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_opa_t imix = 255 - mix;
 1033              		.loc 1 330 33 discriminator 2 view .LVU302
 1034 0080 93FBF6F3 		sdiv	r3, r3, r6
 330:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_opa_t imix = 255 - mix;
 1035              		.loc 1 330 14 discriminator 2 view .LVU303
 1036 0084 DBB2     		uxtb	r3, r3
 1037              	.LVL101:
 331:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1038              		.loc 1 331 5 is_stmt 1 discriminator 2 view .LVU304
 331:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1039              		.loc 1 331 14 is_stmt 0 discriminator 2 view .LVU305
 1040 0086 DA43     		mvns	r2, r3
 1041              	.LVL102:
 331:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1042              		.loc 1 331 14 discriminator 2 view .LVU306
 1043 0088 D2B2     		uxtb	r2, r2
 1044              	.LVL103:
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1045              		.loc 1 333 5 is_stmt 1 discriminator 2 view .LVU307
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1046              		.loc 1 333 25 is_stmt 0 discriminator 2 view .LVU308
 1047 008a 5FFA8EF0 		uxtb	r0, lr
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 35


 1048              	.LVL104:
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1049              		.loc 1 333 25 discriminator 2 view .LVU309
 1050 008e E1B2     		uxtb	r1, r4
 1051              	.LVL105:
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1052              		.loc 1 333 25 discriminator 2 view .LVU310
 1053 0090 02FB01F1 		mul	r1, r2, r1
 1054 0094 03FB0011 		mla	r1, r3, r0, r1
 1055 0098 01EB0120 		add	r0, r1, r1, lsl #8
 1056 009c 01EBC011 		add	r1, r1, r0, lsl #7
 1057 00a0 C90D     		lsrs	r1, r1, #23
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1058              		.loc 1 333 21 discriminator 2 view .LVU311
 1059 00a2 0020     		movs	r0, #0
 1060              	.LVL106:
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1061              		.loc 1 333 21 discriminator 2 view .LVU312
 1062 00a4 61F30700 		bfi	r0, r1, #0, #8
 1063              	.LVL107:
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1064              		.loc 1 333 25 discriminator 2 view .LVU313
 1065 00a8 CEF30725 		ubfx	r5, lr, #8, #8
 1066 00ac C4F30721 		ubfx	r1, r4, #8, #8
 1067 00b0 02FB01F1 		mul	r1, r2, r1
 1068 00b4 03FB0511 		mla	r1, r3, r5, r1
 1069 00b8 01EB0125 		add	r5, r1, r1, lsl #8
 1070 00bc 01EBC511 		add	r1, r1, r5, lsl #7
 1071 00c0 C90D     		lsrs	r1, r1, #23
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1072              		.loc 1 333 21 discriminator 2 view .LVU314
 1073 00c2 61F30F20 		bfi	r0, r1, #8, #8
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1074              		.loc 1 333 25 discriminator 2 view .LVU315
 1075 00c6 CEF3074E 		ubfx	lr, lr, #16, #8
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1076              		.loc 1 333 25 discriminator 2 view .LVU316
 1077 00ca C4F30744 		ubfx	r4, r4, #16, #8
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1078              		.loc 1 333 25 discriminator 2 view .LVU317
 1079 00ce 04FB02F2 		mul	r2, r4, r2
 1080              	.LVL108:
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1081              		.loc 1 333 25 discriminator 2 view .LVU318
 1082 00d2 03FB0E23 		mla	r3, r3, lr, r2
 1083              	.LVL109:
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1084              		.loc 1 333 25 discriminator 2 view .LVU319
 1085 00d6 03EB0322 		add	r2, r3, r3, lsl #8
 1086 00da 03EBC213 		add	r3, r3, r2, lsl #7
 1087 00de DB0D     		lsrs	r3, r3, #23
 333:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****                                 LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
 1088              		.loc 1 333 21 discriminator 2 view .LVU320
 1089 00e0 63F31740 		bfi	r0, r3, #16, #8
 1090 00e4 40F07F40 		orr	r0, r0, #-16777216
 1091              	.LVL110:
 336:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 36


 1092              		.loc 1 336 5 is_stmt 1 discriminator 2 view .LVU321
 336:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 1093              		.loc 1 336 12 is_stmt 0 discriminator 2 view .LVU322
 1094 00e8 B3E7     		b	.L72
 1095              		.cfi_endproc
 1096              	.LFE68:
 1098              		.section	.text.lv_gradient_get,"ax",%progbits
 1099              		.align	1
 1100              		.global	lv_gradient_get
 1101              		.syntax unified
 1102              		.thumb
 1103              		.thumb_func
 1105              	lv_gradient_get:
 1106              	.LVL111:
 1107              	.LFB67:
 250:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     /* No gradient, no cache */
 1108              		.loc 1 250 1 is_stmt 1 view -0
 1109              		.cfi_startproc
 1110              		@ args = 0, pretend = 0, frame = 8
 1111              		@ frame_needed = 0, uses_anonymous_args = 0
 252:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1112              		.loc 1 252 5 view .LVU324
 252:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1113              		.loc 1 252 15 is_stmt 0 view .LVU325
 1114 0000 437C     		ldrb	r3, [r0, #17]	@ zero_extendqisi2
 252:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1115              		.loc 1 252 7 view .LVU326
 1116 0002 13F0070F 		tst	r3, #7
 1117 0006 46D0     		beq	.L94
 250:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     /* No gradient, no cache */
 1118              		.loc 1 250 1 view .LVU327
 1119 0008 70B5     		push	{r4, r5, r6, lr}
 1120              		.cfi_def_cfa_offset 16
 1121              		.cfi_offset 4, -16
 1122              		.cfi_offset 5, -12
 1123              		.cfi_offset 6, -8
 1124              		.cfi_offset 14, -4
 1125 000a 82B0     		sub	sp, sp, #8
 1126              		.cfi_def_cfa_offset 24
 1127 000c 0546     		mov	r5, r0
 1128 000e 0C46     		mov	r4, r1
 1129 0010 1646     		mov	r6, r2
 255:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(!inited) {
 1130              		.loc 1 255 5 is_stmt 1 view .LVU328
 256:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 1131              		.loc 1 256 5 view .LVU329
 256:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 1132              		.loc 1 256 8 is_stmt 0 view .LVU330
 1133 0012 224B     		ldr	r3, .L103
 1134 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 256:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 1135              		.loc 1 256 7 view .LVU331
 1136 0016 E3B1     		cbz	r3, .L100
 1137              	.LVL112:
 1138              	.L89:
 262:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     uint32_t key = compute_key(g, size, w);
 1139              		.loc 1 262 5 is_stmt 1 view .LVU332
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 37


 262:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     uint32_t key = compute_key(g, size, w);
 1140              		.loc 1 262 30 is_stmt 0 view .LVU333
 1141 0018 6B7C     		ldrb	r3, [r5, #17]	@ zero_extendqisi2
 1142 001a 03F00703 		and	r3, r3, #7
 262:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     uint32_t key = compute_key(g, size, w);
 1143              		.loc 1 262 16 view .LVU334
 1144 001e 022B     		cmp	r3, #2
 1145 0020 1ED0     		beq	.L101
 1146 0022 3146     		mov	r1, r6
 1147              	.L90:
 1148              	.LVL113:
 263:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_grad_t * item = NULL;
 1149              		.loc 1 263 5 is_stmt 1 discriminator 4 view .LVU335
 263:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_grad_t * item = NULL;
 1150              		.loc 1 263 20 is_stmt 0 discriminator 4 view .LVU336
 1151 0024 2246     		mov	r2, r4
 1152 0026 2846     		mov	r0, r5
 1153 0028 FFF7FEFF 		bl	compute_key
 1154              	.LVL114:
 263:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     lv_grad_t * item = NULL;
 1155              		.loc 1 263 14 discriminator 4 view .LVU337
 1156 002c 0190     		str	r0, [sp, #4]
 264:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 1157              		.loc 1 264 5 is_stmt 1 discriminator 4 view .LVU338
 264:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 1158              		.loc 1 264 17 is_stmt 0 discriminator 4 view .LVU339
 1159 002e 0023     		movs	r3, #0
 1160 0030 0093     		str	r3, [sp]
 265:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->life++; /* Don't forget to bump the counter */
 1161              		.loc 1 265 5 is_stmt 1 discriminator 4 view .LVU340
 265:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->life++; /* Don't forget to bump the counter */
 1162              		.loc 1 265 8 is_stmt 0 discriminator 4 view .LVU341
 1163 0032 6A46     		mov	r2, sp
 1164 0034 01A9     		add	r1, sp, #4
 1165 0036 1A48     		ldr	r0, .L103+4
 1166 0038 FFF7FEFF 		bl	iterate_cache
 1167              	.LVL115:
 265:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->life++; /* Don't forget to bump the counter */
 1168              		.loc 1 265 7 discriminator 4 view .LVU342
 1169 003c 0128     		cmp	r0, #1
 1170 003e 11D0     		beq	.L102
 271:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(item == NULL) {
 1171              		.loc 1 271 5 is_stmt 1 view .LVU343
 271:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(item == NULL) {
 1172              		.loc 1 271 12 is_stmt 0 view .LVU344
 1173 0040 3246     		mov	r2, r6
 1174 0042 2146     		mov	r1, r4
 1175 0044 2846     		mov	r0, r5
 1176 0046 FFF7FEFF 		bl	allocate_item
 1177              	.LVL116:
 271:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(item == NULL) {
 1178              		.loc 1 271 10 view .LVU345
 1179 004a 0090     		str	r0, [sp]
 272:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         LV_LOG_WARN("Faild to allcoate item for teh gradient");
 1180              		.loc 1 272 5 is_stmt 1 view .LVU346
 272:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         LV_LOG_WARN("Faild to allcoate item for teh gradient");
 1181              		.loc 1 272 7 is_stmt 0 view .LVU347
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 38


 1182 004c 08B3     		cbz	r0, .L87
 1183              	.LBB19:
 286:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->map[i] = lv_gradient_calculate(g, item->size, i);
 1184              		.loc 1 286 20 view .LVU348
 1185 004e 0024     		movs	r4, #0
 1186 0050 1AE0     		b	.L92
 1187              	.LVL117:
 1188              	.L100:
 286:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->map[i] = lv_gradient_calculate(g, item->size, i);
 1189              		.loc 1 286 20 view .LVU349
 1190              	.LBE19:
 257:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         inited = true;
 1191              		.loc 1 257 9 is_stmt 1 view .LVU350
 1192 0052 0020     		movs	r0, #0
 1193              	.LVL118:
 257:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         inited = true;
 1194              		.loc 1 257 9 is_stmt 0 view .LVU351
 1195 0054 FFF7FEFF 		bl	lv_gradient_set_cache_size
 1196              	.LVL119:
 258:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 1197              		.loc 1 258 9 is_stmt 1 view .LVU352
 258:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 1198              		.loc 1 258 16 is_stmt 0 view .LVU353
 1199 0058 104B     		ldr	r3, .L103
 1200 005a 0122     		movs	r2, #1
 1201 005c 1A70     		strb	r2, [r3]
 1202 005e DBE7     		b	.L89
 1203              	.L101:
 262:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     uint32_t key = compute_key(g, size, w);
 1204              		.loc 1 262 16 view .LVU354
 1205 0060 2146     		mov	r1, r4
 1206 0062 DFE7     		b	.L90
 1207              	.L102:
 266:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         return item;
 1208              		.loc 1 266 9 is_stmt 1 view .LVU355
 266:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         return item;
 1209              		.loc 1 266 13 is_stmt 0 view .LVU356
 1210 0064 0098     		ldr	r0, [sp]
 1211 0066 4368     		ldr	r3, [r0, #4]
 1212 0068 C3F31D02 		ubfx	r2, r3, #0, #30
 266:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         return item;
 1213              		.loc 1 266 19 view .LVU357
 1214 006c 0132     		adds	r2, r2, #1
 1215 006e 62F31D03 		bfi	r3, r2, #0, #30
 1216 0072 4360     		str	r3, [r0, #4]
 267:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 1217              		.loc 1 267 9 is_stmt 1 view .LVU358
 267:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 1218              		.loc 1 267 16 is_stmt 0 view .LVU359
 1219 0074 0DE0     		b	.L87
 1220              	.LVL120:
 1221              	.L93:
 1222              	.LBB20:
 287:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 1223              		.loc 1 287 9 is_stmt 1 discriminator 3 view .LVU360
 287:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 1224              		.loc 1 287 13 is_stmt 0 discriminator 3 view .LVU361
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 39


 1225 0076 8668     		ldr	r6, [r0, #8]
 287:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 1226              		.loc 1 287 24 discriminator 3 view .LVU362
 1227 0078 2246     		mov	r2, r4
 1228 007a 2846     		mov	r0, r5
 1229 007c FFF7FEFF 		bl	lv_gradient_calculate
 1230              	.LVL121:
 1231 0080 46F82400 		str	r0, [r6, r4, lsl #2]
 286:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->map[i] = lv_gradient_calculate(g, item->size, i);
 1232              		.loc 1 286 43 is_stmt 1 discriminator 3 view .LVU363
 286:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->map[i] = lv_gradient_calculate(g, item->size, i);
 1233              		.loc 1 286 44 is_stmt 0 discriminator 3 view .LVU364
 1234 0084 0134     		adds	r4, r4, #1
 1235              	.LVL122:
 286:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->map[i] = lv_gradient_calculate(g, item->size, i);
 1236              		.loc 1 286 44 discriminator 3 view .LVU365
 1237 0086 24B2     		sxth	r4, r4
 1238              	.LVL123:
 1239              	.L92:
 286:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->map[i] = lv_gradient_calculate(g, item->size, i);
 1240              		.loc 1 286 27 is_stmt 1 discriminator 1 view .LVU366
 286:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->map[i] = lv_gradient_calculate(g, item->size, i);
 1241              		.loc 1 286 35 is_stmt 0 discriminator 1 view .LVU367
 1242 0088 0098     		ldr	r0, [sp]
 1243 008a B0F90E10 		ldrsh	r1, [r0, #14]
 286:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->map[i] = lv_gradient_calculate(g, item->size, i);
 1244              		.loc 1 286 5 discriminator 1 view .LVU368
 1245 008e A142     		cmp	r1, r4
 1246 0090 F1DC     		bgt	.L93
 1247              	.LVL124:
 1248              	.L87:
 286:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         item->map[i] = lv_gradient_calculate(g, item->size, i);
 1249              		.loc 1 286 5 discriminator 1 view .LVU369
 1250              	.LBE20:
 292:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1251              		.loc 1 292 1 view .LVU370
 1252 0092 02B0     		add	sp, sp, #8
 1253              		.cfi_def_cfa_offset 16
 1254              		@ sp needed
 1255 0094 70BD     		pop	{r4, r5, r6, pc}
 1256              	.LVL125:
 1257              	.L94:
 1258              		.cfi_def_cfa_offset 0
 1259              		.cfi_restore 4
 1260              		.cfi_restore 5
 1261              		.cfi_restore 6
 1262              		.cfi_restore 14
 252:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1263              		.loc 1 252 43 view .LVU371
 1264 0096 0020     		movs	r0, #0
 1265              	.LVL126:
 292:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 1266              		.loc 1 292 1 view .LVU372
 1267 0098 7047     		bx	lr
 1268              	.L104:
 1269 009a 00BF     		.align	2
 1270              	.L103:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 40


 1271 009c 00000000 		.word	.LANCHOR2
 1272 00a0 00000000 		.word	find_item
 1273              		.cfi_endproc
 1274              	.LFE67:
 1276              		.section	.text.lv_gradient_cleanup,"ax",%progbits
 1277              		.align	1
 1278              		.global	lv_gradient_cleanup
 1279              		.syntax unified
 1280              		.thumb
 1281              		.thumb_func
 1283              	lv_gradient_cleanup:
 1284              	.LVL127:
 1285              	.LFB69:
 338:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** 
 339:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** void lv_gradient_cleanup(lv_grad_t * grad)
 340:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** {
 1286              		.loc 1 340 1 is_stmt 1 view -0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 0
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290              		.loc 1 340 1 is_stmt 0 view .LVU374
 1291 0000 08B5     		push	{r3, lr}
 1292              		.cfi_def_cfa_offset 8
 1293              		.cfi_offset 3, -8
 1294              		.cfi_offset 14, -4
 341:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     if(grad->not_cached) {
 1295              		.loc 1 341 5 is_stmt 1 view .LVU375
 1296              		.loc 1 341 7 is_stmt 0 view .LVU376
 1297 0002 90F90730 		ldrsb	r3, [r0, #7]
 1298 0006 002B     		cmp	r3, #0
 1299 0008 00DB     		blt	.L108
 1300              	.LVL128:
 1301              	.L105:
 342:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         lv_mem_free(grad);
 343:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****     }
 344:lvgl/src/draw/sw/lv_draw_sw_gradient.c **** }
 1302              		.loc 1 344 1 view .LVU377
 1303 000a 08BD     		pop	{r3, pc}
 1304              	.LVL129:
 1305              	.L108:
 342:lvgl/src/draw/sw/lv_draw_sw_gradient.c ****         lv_mem_free(grad);
 1306              		.loc 1 342 9 is_stmt 1 view .LVU378
 1307 000c FFF7FEFF 		bl	lv_mem_free
 1308              	.LVL130:
 1309              		.loc 1 344 1 is_stmt 0 view .LVU379
 1310 0010 FBE7     		b	.L105
 1311              		.cfi_endproc
 1312              	.LFE69:
 1314              		.section	.bss.grad_cache_end,"aw",%nobits
 1315              		.align	2
 1316              		.set	.LANCHOR1,. + 0
 1319              	grad_cache_end:
 1320 0000 00000000 		.space	4
 1321              		.section	.bss.grad_cache_size,"aw",%nobits
 1322              		.align	2
 1323              		.set	.LANCHOR0,. + 0
 1326              	grad_cache_size:
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 41


 1327 0000 00000000 		.space	4
 1328              		.section	.bss.inited.0,"aw",%nobits
 1329              		.set	.LANCHOR2,. + 0
 1332              	inited.0:
 1333 0000 00       		.space	1
 1334              		.text
 1335              	.Letext0:
 1336              		.file 3 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 1337              		.file 4 "c:\\tools\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 1338              		.file 5 "lvgl/src/draw/sw/../../misc/lv_types.h"
 1339              		.file 6 "c:\\tools\\gcc-arm-none-eabi\\lib\\gcc\\arm-none-eabi\\10.3.1\\include\\stddef.h"
 1340              		.file 7 "d:\\kzc\\stm32\\h743ii_lcd\\lvgl\\src\\misc\\lv_area.h"
 1341              		.file 8 "lvgl/src/draw/sw/../../misc/lv_style.h"
 1342              		.file 9 "lvgl/src/draw/sw/lv_draw_sw_gradient.h"
 1343              		.file 10 "lvgl/src/draw/sw/../../misc/lv_gc.h"
 1344              		.file 11 "lvgl/src/draw/sw/../../misc/lv_mem.h"
ARM GAS  C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s 			page 42


DEFINED SYMBOLS
                            *ABS*:00000000 lv_draw_sw_gradient.c
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:19     .text.compute_key:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:24     .text.compute_key:00000000 compute_key
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:46     .text.get_cache_item_size:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:51     .text.get_cache_item_size:00000000 get_cache_item_size
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:76     .text.next_in_cache:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:81     .text.next_in_cache:00000000 next_in_cache
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:146    .text.next_in_cache:0000002c $d
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:153    .text.iterate_cache:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:158    .text.iterate_cache:00000000 iterate_cache
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:245    .text.find_oldest_item_life:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:250    .text.find_oldest_item_life:00000000 find_oldest_item_life
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:282    .text.find_item:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:287    .text.find_item:00000000 find_item
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:320    .text.allocate_item:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:325    .text.allocate_item:00000000 allocate_item
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:559    .text.allocate_item:00000100 $d
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:680    .text.kill_oldest_item:00000000 kill_oldest_item
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:568    .text.free_item:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:573    .text.free_item:00000000 free_item
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:670    .text.free_item:00000050 $d
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:675    .text.kill_oldest_item:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:722    .text.lv_gradient_free_cache:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:728    .text.lv_gradient_free_cache:00000000 lv_gradient_free_cache
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:759    .text.lv_gradient_free_cache:00000018 $d
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:766    .text.lv_gradient_set_cache_size:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:772    .text.lv_gradient_set_cache_size:00000000 lv_gradient_set_cache_size
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:831    .text.lv_gradient_set_cache_size:00000028 $d
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:838    .text.lv_gradient_calculate:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:844    .text.lv_gradient_calculate:00000000 lv_gradient_calculate
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:1099   .text.lv_gradient_get:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:1105   .text.lv_gradient_get:00000000 lv_gradient_get
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:1271   .text.lv_gradient_get:0000009c $d
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:1277   .text.lv_gradient_cleanup:00000000 $t
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:1283   .text.lv_gradient_cleanup:00000000 lv_gradient_cleanup
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:1315   .bss.grad_cache_end:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:1319   .bss.grad_cache_end:00000000 grad_cache_end
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:1322   .bss.grad_cache_size:00000000 $d
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:1326   .bss.grad_cache_size:00000000 grad_cache_size
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:1332   .bss.inited.0:00000000 inited.0
C:\Users\OSD\AppData\Local\Temp\ccV4wBhP.s:1333   .bss.inited.0:00000000 $d

UNDEFINED SYMBOLS
_lv_grad_cache_mem
lv_mem_alloc
lv_memcpy
lv_memset_00
lv_mem_free
